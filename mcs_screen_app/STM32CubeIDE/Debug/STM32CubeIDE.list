
STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002be24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ba0  0802bff8  0802bff8  0003bff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000044  08030b98  08030b98  00040b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08030bdc  08030bdc  0013f9fc  2**0
                  CONTENTS
  5 .ARM          00000008  08030bdc  08030bdc  00040bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08030be4  08030be4  0013f9fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  08030be4  08030be4  00040be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08030c00  08030c00  00040c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  08030c08  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001613c  20000124  08030d2c  00050124  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20016260  08030d2c  00056260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0013f9fc  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00140000  2**2
                  ALLOC
 14 ExtFlashSection 000dd620  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00002260  900dd620  900dd620  0013d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 0000017c  900df880  900df880  0013f880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000e6472  00000000  00000000  0013fa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00019202  00000000  00000000  00225e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000567a2  00000000  00000000  0023f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003648  00000000  00000000  00295848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00006b30  00000000  00000000  00298e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0003aeb7  00000000  00000000  0029f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00079fdb  00000000  00000000  002da877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0012a7ef  00000000  00000000  00354852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  0047f041  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000a594  00000000  00000000  0047f110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802bfdc 	.word	0x0802bfdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	0802bfdc 	.word	0x0802bfdc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <backend>:
osMessageQueueId_t queue_model_handle;
const osMessageQueueAttr_t queue_model_attr = {.name = "queue_model"};

void backend(void* argument)
{
	queue_model_handle = osMessageQueueNew(8, sizeof(Message_t), &queue_model_attr);
 8000df0:	2108      	movs	r1, #8
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <backend+0x40>)
{
 8000df4:	b530      	push	{r4, r5, lr}
	queue_model_handle = osMessageQueueNew(8, sizeof(Message_t), &queue_model_attr);
 8000df6:	4c0f      	ldr	r4, [pc, #60]	; (8000e34 <backend+0x44>)
{
 8000df8:	b085      	sub	sp, #20
	uint8_t data_buffer[2];
	uint16_t data_size = 2;

	while(1)
	{
		if(HAL_I2C_Slave_Receive(&hi2c1, data_buffer, data_size, HAL_MAX_DELAY) == HAL_OK);
 8000dfa:	4d0f      	ldr	r5, [pc, #60]	; (8000e38 <backend+0x48>)
	queue_model_handle = osMessageQueueNew(8, sizeof(Message_t), &queue_model_attr);
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	f008 f981 	bl	8009104 <osMessageQueueNew>
 8000e02:	6020      	str	r0, [r4, #0]
		if(HAL_I2C_Slave_Receive(&hi2c1, data_buffer, data_size, HAL_MAX_DELAY) == HAL_OK);
 8000e04:	a901      	add	r1, sp, #4
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f005 fd91 	bl	8006934 <HAL_I2C_Slave_Receive>
		//if(HAL_I2C_Slave_Receive_IT(&hi2c1, data_buffer, data_size) == HAL_OK);

		Message_t message = {
 8000e12:	f89d 3004 	ldrb.w	r3, [sp, #4]
				.ID = data_buffer[0]/*MSG_ID_UPDATE_VALUE*/,
				.value = data_buffer[1]/*value*/
		};

		osMessageQueuePut(queue_model_handle, &message, 0U, 0U);
 8000e16:	a902      	add	r1, sp, #8
 8000e18:	6820      	ldr	r0, [r4, #0]
		Message_t message = {
 8000e1a:	f88d 3008 	strb.w	r3, [sp, #8]
				.value = data_buffer[1]/*value*/
 8000e1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000e22:	9303      	str	r3, [sp, #12]
		osMessageQueuePut(queue_model_handle, &message, 0U, 0U);
 8000e24:	2300      	movs	r3, #0
 8000e26:	461a      	mov	r2, r3
 8000e28:	f008 f9b2 	bl	8009190 <osMessageQueuePut>
	while(1)
 8000e2c:	e7ea      	b.n	8000e04 <backend+0x14>
 8000e2e:	bf00      	nop
 8000e30:	0802c044 	.word	0x0802c044
 8000e34:	20000140 	.word	0x20000140
 8000e38:	200001c4 	.word	0x200001c4

08000e3c <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000e3c:	4901      	ldr	r1, [pc, #4]	; (8000e44 <vApplicationIdleHook+0x8>)
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f009 bdf8 	b.w	800aa34 <vTaskSetApplicationTaskTag>
 8000e44:	0800202d 	.word	0x0800202d

08000e48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000e4a:	2064      	movs	r0, #100	; 0x64
 8000e4c:	f007 ffde 	bl	8008e0c <osDelay>
  for(;;)
 8000e50:	e7fb      	b.n	8000e4a <StartDefaultTask+0x2>
	...

08000e54 <SystemClock_Config>:
{
 8000e54:	b510      	push	{r4, lr}
 8000e56:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e58:	2210      	movs	r2, #16
 8000e5a:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	a80a      	add	r0, sp, #40	; 0x28
 8000e60:	f029 ff46 	bl	802acf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	2214      	movs	r2, #20
 8000e66:	2100      	movs	r1, #0
 8000e68:	a803      	add	r0, sp, #12
 8000e6a:	f029 ff41 	bl	802acf0 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e70:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e72:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <SystemClock_Config+0x94>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e98:	9302      	str	r3, [sp, #8]
 8000e9a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ea8:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000eac:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eb0:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000eb4:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f006 ff66 	bl	8007d88 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ebc:	f006 fc12 	bl	80076e4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec2:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ec4:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ece:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ed6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000eda:	f007 f941 	bl	8008160 <HAL_RCC_ClockConfig>
}
 8000ede:	b014      	add	sp, #80	; 0x50
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40007000 	.word	0x40007000

08000eec <main>:
{
 8000eec:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ef0:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ef6:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ef8:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000efa:	f04f 4910 	mov.w	r9, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000efe:	f029 fef7 	bl	802acf0 <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f02:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000f04:	f004 ff8e 	bl	8005e24 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000f08:	4bc6      	ldr	r3, [pc, #792]	; (8001224 <main+0x338>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f0a:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f0c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f10:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000f12:	e9cd 930e 	strd	r9, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f16:	f004 ffa3 	bl	8005e60 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000f1a:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f1c:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f1e:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000f22:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f26:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f2a:	f004 ff99 	bl	8005e60 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f004 ff86 	bl	8005e40 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f38:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f3c:	4aba      	ldr	r2, [pc, #744]	; (8001228 <main+0x33c>)
 8000f3e:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f46:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f4a:	6953      	ldr	r3, [r2, #20]
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f56:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f5a:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f62:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f66:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f6a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f6e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f72:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f74:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f78:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f7a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f7e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f80:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000f84:	d2f9      	bcs.n	8000f7a <main+0x8e>
    } while(sets-- != 0U);
 8000f86:	3b20      	subs	r3, #32
 8000f88:	f113 0f20 	cmn.w	r3, #32
 8000f8c:	d1f2      	bne.n	8000f74 <main+0x88>
 8000f8e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f92:	6953      	ldr	r3, [r2, #20]
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000fa2:	f004 fea3 	bl	8005cec <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2400      	movs	r4, #0
  SystemClock_Config();
 8000fa8:	f7ff ff54 	bl	8000e54 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	2214      	movs	r2, #20
 8000fae:	2100      	movs	r1, #0
 8000fb0:	a80d      	add	r0, sp, #52	; 0x34
 8000fb2:	f029 fe9d 	bl	802acf0 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	4b9d      	ldr	r3, [pc, #628]	; (800122c <main+0x340>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000fb8:	2110      	movs	r1, #16
 8000fba:	489d      	ldr	r0, [pc, #628]	; (8001230 <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2701      	movs	r7, #1
 8000fc0:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc8:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000fcc:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 8000fd0:	4d98      	ldr	r5, [pc, #608]	; (8001234 <main+0x348>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000fd2:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000fda:	4e97      	ldr	r6, [pc, #604]	; (8001238 <main+0x34c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fdc:	f002 0210 	and.w	r2, r2, #16
 8000fe0:	9202      	str	r2, [sp, #8]
 8000fe2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe6:	f042 0202 	orr.w	r2, r2, #2
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
 8000fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fee:	f002 0202 	and.w	r2, r2, #2
 8000ff2:	9203      	str	r2, [sp, #12]
 8000ff4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001000:	f002 0201 	and.w	r2, r2, #1
 8001004:	9204      	str	r2, [sp, #16]
 8001006:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
 8001010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001012:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001016:	9205      	str	r2, [sp, #20]
 8001018:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800101a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
 8001022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001024:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001028:	9206      	str	r2, [sp, #24]
 800102a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102e:	f042 0208 	orr.w	r2, r2, #8
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
 8001034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001036:	f002 0208 	and.w	r2, r2, #8
 800103a:	9207      	str	r2, [sp, #28]
 800103c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800103e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
 8001046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001048:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800104c:	9208      	str	r2, [sp, #32]
 800104e:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001052:	f042 0220 	orr.w	r2, r2, #32
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
 8001058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800105a:	f002 0220 	and.w	r2, r2, #32
 800105e:	9209      	str	r2, [sp, #36]	; 0x24
 8001060:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
 800106a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001070:	920a      	str	r2, [sp, #40]	; 0x28
 8001072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001076:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
 800107c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001082:	920b      	str	r2, [sp, #44]	; 0x2c
 8001084:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001088:	f042 0204 	orr.w	r2, r2, #4
 800108c:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	930c      	str	r3, [sp, #48]	; 0x30
 8001098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800109a:	f005 fa51 	bl	8006540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2108      	movs	r1, #8
 80010a2:	4866      	ldr	r0, [pc, #408]	; (800123c <main+0x350>)
 80010a4:	f005 fa4c 	bl	8006540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ae:	4864      	ldr	r0, [pc, #400]	; (8001240 <main+0x354>)
 80010b0:	f005 fa46 	bl	8006540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	21c0      	movs	r1, #192	; 0xc0
 80010b8:	4862      	ldr	r0, [pc, #392]	; (8001244 <main+0x358>)
 80010ba:	f005 fa41 	bl	8006540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2140      	movs	r1, #64	; 0x40
 80010c2:	4861      	ldr	r0, [pc, #388]	; (8001248 <main+0x35c>)
 80010c4:	f005 fa3c 	bl	8006540 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 80010c8:	a90d      	add	r1, sp, #52	; 0x34
 80010ca:	4859      	ldr	r0, [pc, #356]	; (8001230 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f005 f8a8 	bl	8006228 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80010d8:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010da:	a90d      	add	r1, sp, #52	; 0x34
 80010dc:	4857      	ldr	r0, [pc, #348]	; (800123c <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f005 f89f 	bl	8006228 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010ea:	a90d      	add	r1, sp, #52	; 0x34
 80010ec:	4854      	ldr	r0, [pc, #336]	; (8001240 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	e9cd 970d 	strd	r9, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f005 f897 	bl	8006228 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 80010fa:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	a90d      	add	r1, sp, #52	; 0x34
 80010fe:	4851      	ldr	r0, [pc, #324]	; (8001244 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	f005 f88e 	bl	8006228 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 800110c:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800110e:	a90d      	add	r1, sp, #52	; 0x34
 8001110:	484d      	ldr	r0, [pc, #308]	; (8001248 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800111a:	f005 f885 	bl	8006228 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 800111e:	484b      	ldr	r0, [pc, #300]	; (800124c <main+0x360>)
 8001120:	494b      	ldr	r1, [pc, #300]	; (8001250 <main+0x364>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001122:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8001124:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001126:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001128:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800112c:	f004 fec4 	bl	8005eb8 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 8001130:	4948      	ldr	r1, [pc, #288]	; (8001254 <main+0x368>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001132:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001134:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001138:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 800113c:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 8001140:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001144:	f004 ff6f 	bl	8006026 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001148:	4639      	mov	r1, r7
 800114a:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800114c:	4d42      	ldr	r5, [pc, #264]	; (8001258 <main+0x36c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800114e:	f005 f823 	bl	8006198 <HAL_DMA2D_ConfigLayer>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001152:	2340      	movs	r3, #64	; 0x40
 8001154:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001158:	4940      	ldr	r1, [pc, #256]	; (800125c <main+0x370>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800115a:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800115c:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800115e:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001160:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001162:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001166:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800116a:	e9c6 2908 	strd	r2, r9, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800116e:	f04f 0902 	mov.w	r9, #2
 8001172:	2207      	movs	r2, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001174:	e9c6 1400 	strd	r1, r4, [r6]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001178:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.RCDDelay = 2;
 800117a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800117e:	e9c6 a803 	strd	sl, r8, [r6, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001182:	e9cd 920d 	strd	r9, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 8001186:	e9cd a20f 	strd	sl, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 800118a:	e9cd b911 	strd	fp, r9, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800118e:	f007 fb3d 	bl	800880c <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001192:	4629      	mov	r1, r5
 8001194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001198:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 800119a:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800119c:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 80011a0:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011a4:	f007 fb52 	bl	800884c <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80011a8:	4638      	mov	r0, r7
 80011aa:	f004 fdc3 	bl	8005d34 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011ae:	4629      	mov	r1, r5
 80011b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b4:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011b6:	e9c5 9800 	strd	r9, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 80011ba:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011be:	f007 fb45 	bl	800884c <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 80011c2:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011c4:	4629      	mov	r1, r5
 80011c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ca:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011cc:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 80011d0:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011d4:	f007 fb3a 	bl	800884c <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80011d8:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e0:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80011e2:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011e4:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 80011e6:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 80011e8:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80011ea:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011ec:	e9c5 a800 	strd	sl, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011f0:	f007 fb2c 	bl	800884c <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011f4:	f240 712b 	movw	r1, #1835	; 0x72b
 80011f8:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 80011fa:	4d19      	ldr	r5, [pc, #100]	; (8001260 <main+0x374>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011fc:	f007 fb45 	bl	800888a <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8001200:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001204:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  hi2c3.Init.Timing = 0x20404768;
 8001208:	4e16      	ldr	r6, [pc, #88]	; (8001264 <main+0x378>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800120a:	4628      	mov	r0, r5
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800120c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <main+0x37c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001210:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 8001212:	e9c5 3600 	strd	r3, r6, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 800121a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121e:	e9c5 4406 	strd	r4, r4, [r5, #24]
 8001222:	e023      	b.n	800126c <main+0x380>
 8001224:	0300001b 	.word	0x0300001b
 8001228:	e000ed00 	.word	0xe000ed00
 800122c:	40023800 	.word	0x40023800
 8001230:	40020400 	.word	0x40020400
 8001234:	20000184 	.word	0x20000184
 8001238:	20000360 	.word	0x20000360
 800123c:	40022800 	.word	0x40022800
 8001240:	40022000 	.word	0x40022000
 8001244:	40020800 	.word	0x40020800
 8001248:	40021800 	.word	0x40021800
 800124c:	20000160 	.word	0x20000160
 8001250:	40023000 	.word	0x40023000
 8001254:	4002b000 	.word	0x4002b000
 8001258:	20000144 	.word	0x20000144
 800125c:	a0000140 	.word	0xa0000140
 8001260:	20000218 	.word	0x20000218
 8001264:	20404768 	.word	0x20404768
 8001268:	40005c00 	.word	0x40005c00
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800126c:	f005 faf8 	bl	8006860 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001270:	4621      	mov	r1, r4
 8001272:	4628      	mov	r0, r5
 8001274:	f006 f84e 	bl	8007314 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001278:	4621      	mov	r1, r4
 800127a:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 800127c:	4d4e      	ldr	r5, [pc, #312]	; (80013b8 <main+0x4cc>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800127e:	f006 f86f 	bl	8007360 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001282:	2234      	movs	r2, #52	; 0x34
 8001284:	4621      	mov	r1, r4
 8001286:	eb0d 0002 	add.w	r0, sp, r2
 800128a:	f029 fd31 	bl	802acf0 <memset>
  hltdc.Instance = LTDC;
 800128e:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <main+0x4d0>)
  hltdc.Init.VerticalSync = 9;
 8001290:	2228      	movs	r2, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8001292:	2135      	movs	r1, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8001294:	f240 2015 	movw	r0, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 8001298:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 800129c:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800129e:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 80012a0:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012a4:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 80012a8:	2309      	movs	r3, #9
 80012aa:	e9c5 2305 	strd	r2, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 80012ae:	230b      	movs	r3, #11
 80012b0:	e9c5 1307 	strd	r1, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 80012b4:	f240 131b 	movw	r3, #283	; 0x11b
 80012b8:	e9c5 0309 	strd	r0, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 80012bc:	f240 131d 	movw	r3, #285	; 0x11d
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012c0:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 285;
 80012c2:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012c6:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012ca:	f006 f8f5 	bl	80074b8 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80012ce:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012d0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 80012d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 80012d8:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012dc:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 80012de:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.ImageHeight = 272;
 80012e0:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80012e2:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 80012e6:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  hi2c1.Instance = I2C1;
 80012ea:	4d35      	ldr	r5, [pc, #212]	; (80013c0 <main+0x4d4>)
  pLayerCfg.Alpha0 = 0;
 80012ec:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012f0:	2105      	movs	r1, #5
 80012f2:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 80012f6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 80012fa:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 80012fe:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001302:	4622      	mov	r2, r4
 8001304:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001306:	e9cd 3910 	strd	r3, r9, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800130a:	f006 f9a0 	bl	800764e <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 800130e:	482d      	ldr	r0, [pc, #180]	; (80013c4 <main+0x4d8>)
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <main+0x4dc>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001312:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 8001314:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001318:	e9c0 a802 	strd	sl, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800131c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001320:	f04f 0818 	mov.w	r8, #24
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001324:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001328:	e9c0 8304 	strd	r8, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800132c:	f006 faea 	bl	8007904 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 8001330:	f004 fb5a 	bl	80059e8 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 8001334:	f004 fa9e 	bl	8005874 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001338:	205c      	movs	r0, #92	; 0x5c
 800133a:	f004 fd5f 	bl	8005dfc <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 800133e:	f000 fbf3 	bl	8001b28 <MX_LIBJPEG_Init>
  hi2c1.Instance = I2C1;
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <main+0x4e0>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001344:	4628      	mov	r0, r5
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	622c      	str	r4, [r5, #32]
  hi2c1.Init.Timing = 0x20404768;
 8001348:	e9c5 3600 	strd	r3, r6, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134c:	e9c5 7702 	strd	r7, r7, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001350:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001354:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001358:	f005 fa82 	bl	8006860 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135c:	4621      	mov	r1, r4
 800135e:	4628      	mov	r0, r5
 8001360:	f005 ffd8 	bl	8007314 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001364:	4621      	mov	r1, r4
 8001366:	4628      	mov	r0, r5
 8001368:	f005 fffa 	bl	8007360 <HAL_I2CEx_ConfigDigitalFilter>
  MX_TouchGFX_Init();
 800136c:	f000 fc08 	bl	8001b80 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001370:	f000 fc05 	bl	8001b7e <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8001374:	f007 fcba 	bl	8008cec <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <main+0x4e4>)
 800137a:	4621      	mov	r1, r4
 800137c:	4815      	ldr	r0, [pc, #84]	; (80013d4 <main+0x4e8>)
 800137e:	f007 fcef 	bl	8008d60 <osThreadNew>
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <main+0x4ec>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001384:	4a15      	ldr	r2, [pc, #84]	; (80013dc <main+0x4f0>)
 8001386:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001388:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <main+0x4f4>)
 800138c:	f007 fce8 	bl	8008d60 <osThreadNew>
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <main+0x4f8>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <main+0x4fc>)
 8001394:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001396:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001398:	4814      	ldr	r0, [pc, #80]	; (80013ec <main+0x500>)
 800139a:	f007 fce1 	bl	8008d60 <osThreadNew>
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <main+0x504>)
  backendHandler = osThreadNew(backend, NULL, &backend_attributes);
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <main+0x508>)
 80013a2:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80013a4:	6018      	str	r0, [r3, #0]
  backendHandler = osThreadNew(backend, NULL, &backend_attributes);
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <main+0x50c>)
 80013a8:	f007 fcda 	bl	8008d60 <osThreadNew>
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <main+0x510>)
 80013ae:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80013b0:	f007 fcb6 	bl	8008d20 <osKernelStart>
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <main+0x4c8>
 80013b6:	bf00      	nop
 80013b8:	2000026c 	.word	0x2000026c
 80013bc:	40016800 	.word	0x40016800
 80013c0:	200001c4 	.word	0x200001c4
 80013c4:	20000314 	.word	0x20000314
 80013c8:	a0001000 	.word	0xa0001000
 80013cc:	40005400 	.word	0x40005400
 80013d0:	0802c0d4 	.word	0x0802c0d4
 80013d4:	08000e49 	.word	0x08000e49
 80013d8:	2000015c 	.word	0x2000015c
 80013dc:	0802c08c 	.word	0x0802c08c
 80013e0:	08001b8f 	.word	0x08001b8f
 80013e4:	20000154 	.word	0x20000154
 80013e8:	0802c0f8 	.word	0x0802c0f8
 80013ec:	08003419 	.word	0x08003419
 80013f0:	20000394 	.word	0x20000394
 80013f4:	0802c0b0 	.word	0x0802c0b0
 80013f8:	08000df1 	.word	0x08000df1
 80013fc:	20000158 	.word	0x20000158

08001400 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001400:	6802      	ldr	r2, [r0, #0]
 8001402:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001404:	429a      	cmp	r2, r3
 8001406:	d101      	bne.n	800140c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001408:	f004 bc82 	b.w	8005d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40001000 	.word	0x40001000

08001414 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001414:	4770      	bx	lr
	...

08001418 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_MspInit+0x38>)
{
 800141a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800141c:	210f      	movs	r1, #15
 800141e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
 800142a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800142c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001430:	9200      	str	r2, [sp, #0]
 8001432:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001448:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800144a:	f004 bc97 	b.w	8005d7c <HAL_NVIC_SetPriority>
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001454:	6802      	ldr	r2, [r0, #0]
{
 8001456:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_CRC_MspInit+0x28>)
 800145a:	429a      	cmp	r2, r3
 800145c:	d10b      	bne.n	8001476 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800145e:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001466:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001476:	b002      	add	sp, #8
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023000 	.word	0x40023000

08001480 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_DMA2D_MspInit+0x3c>)
{
 8001482:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001484:	6802      	ldr	r2, [r0, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d115      	bne.n	80014b6 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800148a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800148e:	2105      	movs	r1, #5
 8001490:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001494:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001498:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80014a6:	f004 fc69 	bl	8005d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014aa:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80014ac:	b003      	add	sp, #12
 80014ae:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014b2:	f004 bc95 	b.w	8005de0 <HAL_NVIC_EnableIRQ>
}
 80014b6:	b003      	add	sp, #12
 80014b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80014bc:	4002b000 	.word	0x4002b000

080014c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c0:	b510      	push	{r4, lr}
 80014c2:	b0aa      	sub	sp, #168	; 0xa8
 80014c4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	2214      	movs	r2, #20
 80014c8:	2100      	movs	r1, #0
 80014ca:	a804      	add	r0, sp, #16
 80014cc:	f029 fc10 	bl	802acf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	2284      	movs	r2, #132	; 0x84
 80014d2:	2100      	movs	r1, #0
 80014d4:	a809      	add	r0, sp, #36	; 0x24
 80014d6:	f029 fc0b 	bl	802acf0 <memset>
  if(hi2c->Instance==I2C1)
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	4a37      	ldr	r2, [pc, #220]	; (80015bc <HAL_I2C_MspInit+0xfc>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d13c      	bne.n	800155c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014e8:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ea:	f006 ff07 	bl	80082fc <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	b108      	cbz	r0, 80014f4 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 80014f0:	f7ff ff90 	bl	8001414 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4c32      	ldr	r4, [pc, #200]	; (80015c0 <HAL_I2C_MspInit+0x100>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f6:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6323      	str	r3, [r4, #48]	; 0x30
 8001506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	2312      	movs	r3, #18
 8001512:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	482a      	ldr	r0, [pc, #168]	; (80015c4 <HAL_I2C_MspInit+0x104>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800151e:	2304      	movs	r3, #4
 8001520:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f004 fe81 	bl	8006228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001526:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2105      	movs	r1, #5
 800152c:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001532:	6423      	str	r3, [r4, #64]	; 0x40
 8001534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800153e:	f004 fc1d 	bl	8005d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001542:	201f      	movs	r0, #31
 8001544:	f004 fc4c 	bl	8005de0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001548:	2020      	movs	r0, #32
 800154a:	2200      	movs	r2, #0
 800154c:	2105      	movs	r1, #5
 800154e:	f004 fc15 	bl	8005d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001552:	2020      	movs	r0, #32
 8001554:	f004 fc44 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001558:	b02a      	add	sp, #168	; 0xa8
 800155a:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C3)
 800155c:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_I2C_MspInit+0x108>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d1fa      	bne.n	8001558 <HAL_I2C_MspInit+0x98>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001566:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001568:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156a:	f006 fec7 	bl	80082fc <HAL_RCCEx_PeriphCLKConfig>
 800156e:	b108      	cbz	r0, 8001574 <HAL_I2C_MspInit+0xb4>
      Error_Handler();
 8001570:	f7ff ff50 	bl	8001414 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001574:	4c12      	ldr	r4, [pc, #72]	; (80015c0 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001576:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2101      	movs	r1, #1
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800157c:	4813      	ldr	r0, [pc, #76]	; (80015cc <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	6323      	str	r3, [r4, #48]	; 0x30
 8001586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001590:	2312      	movs	r3, #18
 8001592:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800159c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800159e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015a0:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015a2:	f004 fe41 	bl	8006228 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ac:	6423      	str	r3, [r4, #64]	; 0x40
 80015ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015b4:	9303      	str	r3, [sp, #12]
 80015b6:	9b03      	ldr	r3, [sp, #12]
}
 80015b8:	e7ce      	b.n	8001558 <HAL_I2C_MspInit+0x98>
 80015ba:	bf00      	nop
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40005c00 	.word	0x40005c00
 80015cc:	40021c00 	.word	0x40021c00

080015d0 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 80015d0:	4a18      	ldr	r2, [pc, #96]	; (8001634 <HAL_I2C_MspDeInit+0x64>)
{
 80015d2:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 80015d4:	6803      	ldr	r3, [r0, #0]
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d117      	bne.n	800160a <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015da:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80015de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e2:	4815      	ldr	r0, [pc, #84]	; (8001638 <HAL_I2C_MspDeInit+0x68>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80015ec:	f004 ff00 	bl	80063f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80015f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f4:	4810      	ldr	r0, [pc, #64]	; (8001638 <HAL_I2C_MspDeInit+0x68>)
 80015f6:	f004 fefb 	bl	80063f0 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80015fa:	201f      	movs	r0, #31
 80015fc:	f004 fbfe 	bl	8005dfc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001600:	2020      	movs	r0, #32
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001606:	f004 bbf9 	b.w	8005dfc <HAL_NVIC_DisableIRQ>
  else if(hi2c->Instance==I2C3)
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <HAL_I2C_MspDeInit+0x6c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d110      	bne.n	8001632 <HAL_I2C_MspDeInit+0x62>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001610:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <HAL_I2C_MspDeInit+0x70>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001618:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800161a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800161e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001620:	f004 fee6 	bl	80063f0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8001624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <HAL_I2C_MspDeInit+0x70>)
}
 800162a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 800162e:	f004 bedf 	b.w	80063f0 <HAL_GPIO_DeInit>
}
 8001632:	bd08      	pop	{r3, pc}
 8001634:	40005400 	.word	0x40005400
 8001638:	40020400 	.word	0x40020400
 800163c:	40005c00 	.word	0x40005c00
 8001640:	40021c00 	.word	0x40021c00

08001644 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	b0ac      	sub	sp, #176	; 0xb0
 8001648:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	2214      	movs	r2, #20
 800164c:	2100      	movs	r1, #0
 800164e:	a806      	add	r0, sp, #24
 8001650:	f029 fb4e 	bl	802acf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	2284      	movs	r2, #132	; 0x84
 8001656:	2100      	movs	r1, #0
 8001658:	a80b      	add	r0, sp, #44	; 0x2c
 800165a:	f029 fb49 	bl	802acf0 <memset>
  if(hltdc->Instance==LTDC)
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	4b48      	ldr	r3, [pc, #288]	; (8001784 <HAL_LTDC_MspInit+0x140>)
 8001662:	429a      	cmp	r2, r3
 8001664:	f040 808c 	bne.w	8001780 <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001668:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800166a:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800166c:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800166e:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001670:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001674:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001676:	2302      	movs	r3, #2
 8001678:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800167c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001680:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001682:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001686:	f006 fe39 	bl	80082fc <HAL_RCCEx_PeriphCLKConfig>
 800168a:	b108      	cbz	r0, 8001690 <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 800168c:	f7ff fec2 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001690:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001696:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169a:	a906      	add	r1, sp, #24
 800169c:	483b      	ldr	r0, [pc, #236]	; (800178c <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800169e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
 80016a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016a6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b0:	f042 0210 	orr.w	r2, r2, #16
 80016b4:	631a      	str	r2, [r3, #48]	; 0x30
 80016b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b8:	f002 0210 	and.w	r2, r2, #16
 80016bc:	9201      	str	r2, [sp, #4]
 80016be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c6:	631a      	str	r2, [r3, #48]	; 0x30
 80016c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80016ce:	9202      	str	r2, [sp, #8]
 80016d0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80016d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016d8:	631a      	str	r2, [r3, #48]	; 0x30
 80016da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016dc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80016e0:	9203      	str	r2, [sp, #12]
 80016e2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
 80016ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ee:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80016f2:	9204      	str	r2, [sp, #16]
 80016f4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80016f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	9305      	str	r3, [sp, #20]
 8001706:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2310      	movs	r3, #16
 800170a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001712:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001714:	f004 fd88 	bl	8006228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001718:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800171c:	a906      	add	r1, sp, #24
 800171e:	481c      	ldr	r0, [pc, #112]	; (8001790 <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001720:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800172a:	f004 fd7d 	bl	8006228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800172e:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001730:	a906      	add	r1, sp, #24
 8001732:	4818      	ldr	r0, [pc, #96]	; (8001794 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001734:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800173e:	f004 fd73 	bl	8006228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001746:	a906      	add	r1, sp, #24
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800174e:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001754:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001756:	f004 fd67 	bl	8006228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 800175a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800175e:	a906      	add	r1, sp, #24
 8001760:	480e      	ldr	r0, [pc, #56]	; (800179c <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001762:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800176c:	f004 fd5c 	bl	8006228 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001770:	2058      	movs	r0, #88	; 0x58
 8001772:	4622      	mov	r2, r4
 8001774:	2105      	movs	r1, #5
 8001776:	f004 fb01 	bl	8005d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800177a:	2058      	movs	r0, #88	; 0x58
 800177c:	f004 fb30 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001780:	b02c      	add	sp, #176	; 0xb0
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	40016800 	.word	0x40016800
 8001788:	40023800 	.word	0x40023800
 800178c:	40021000 	.word	0x40021000
 8001790:	40022400 	.word	0x40022400
 8001794:	40022800 	.word	0x40022800
 8001798:	40021800 	.word	0x40021800
 800179c:	40022000 	.word	0x40022000

080017a0 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	2214      	movs	r2, #20
 80017a2:	2100      	movs	r1, #0
{
 80017a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017a8:	b08a      	sub	sp, #40	; 0x28
 80017aa:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	eb0d 0002 	add.w	r0, sp, r2
 80017b0:	f029 fa9e 	bl	802acf0 <memset>
  if(hqspi->Instance==QUADSPI)
 80017b4:	6822      	ldr	r2, [r4, #0]
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_QSPI_MspInit+0xc8>)
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d151      	bne.n	8001860 <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017c0:	2403      	movs	r4, #3
 80017c2:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ca:	a905      	add	r1, sp, #20
 80017cc:	4828      	ldr	r0, [pc, #160]	; (8001870 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017ce:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38
 80017d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d8:	f002 0202 	and.w	r2, r2, #2
 80017dc:	9201      	str	r2, [sp, #4]
 80017de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e2:	f042 0210 	orr.w	r2, r2, #16
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
 80017e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ea:	f002 0210 	and.w	r2, r2, #16
 80017ee:	9202      	str	r2, [sp, #8]
 80017f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f4:	f042 0202 	orr.w	r2, r2, #2
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
 80017fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fc:	f002 0202 	and.w	r2, r2, #2
 8001800:	9203      	str	r2, [sp, #12]
 8001802:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001806:	f042 0208 	orr.w	r2, r2, #8
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	9304      	str	r3, [sp, #16]
 8001814:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800181a:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181e:	f004 fd03 	bl	8006228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001822:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	a905      	add	r1, sp, #20
 8001826:	4813      	ldr	r0, [pc, #76]	; (8001874 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800182c:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001832:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f004 fcf8 	bl	8006228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	a905      	add	r1, sp, #20
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800183c:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f004 fcef 	bl	8006228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 800184a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184e:	a905      	add	r1, sp, #20
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001852:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185c:	f004 fce4 	bl	8006228 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001860:	b00a      	add	sp, #40	; 0x28
 8001862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001866:	bf00      	nop
 8001868:	a0001000 	.word	0xa0001000
 800186c:	40023800 	.word	0x40023800
 8001870:	40021000 	.word	0x40021000
 8001874:	40020400 	.word	0x40020400
 8001878:	40020c00 	.word	0x40020c00

0800187c <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 800187c:	6802      	ldr	r2, [r0, #0]
{
 800187e:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_QSPI_MspDeInit+0x34>)
 8001882:	429a      	cmp	r2, r3
 8001884:	d113      	bne.n	80018ae <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001888:	2104      	movs	r1, #4
 800188a:	480b      	ldr	r0, [pc, #44]	; (80018b8 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 800188c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800188e:	f023 0302 	bic.w	r3, r3, #2
 8001892:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001894:	f004 fdac 	bl	80063f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001898:	2144      	movs	r1, #68	; 0x44
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <HAL_QSPI_MspDeInit+0x40>)
 800189c:	f004 fda8 	bl	80063f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80018a0:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80018a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80018aa:	f004 bda1 	b.w	80063f0 <HAL_GPIO_DeInit>
}
 80018ae:	bd08      	pop	{r3, pc}
 80018b0:	a0001000 	.word	0xa0001000
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020c00 	.word	0x40020c00

080018c4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018c6:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018c8:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018ca:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <HAL_SDRAM_MspInit+0xb0>)
 80018ce:	681e      	ldr	r6, [r3, #0]
 80018d0:	2e00      	cmp	r6, #0
 80018d2:	d14d      	bne.n	8001970 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 80018d4:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018d8:	2503      	movs	r5, #3
 80018da:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80018dc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018de:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e2:	4826      	ldr	r0, [pc, #152]	; (800197c <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80018e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	639a      	str	r2, [r3, #56]	; 0x38
 80018ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018fa:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001902:	f004 fc91 	bl	8006228 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001906:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800190a:	a901      	add	r1, sp, #4
 800190c:	481c      	ldr	r0, [pc, #112]	; (8001980 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001918:	f004 fc86 	bl	8006228 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800191c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001920:	a901      	add	r1, sp, #4
 8001922:	4818      	ldr	r0, [pc, #96]	; (8001984 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001924:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192e:	f004 fc7b 	bl	8006228 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001932:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001936:	a901      	add	r1, sp, #4
 8001938:	4813      	ldr	r0, [pc, #76]	; (8001988 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800193a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001944:	f004 fc70 	bl	8006228 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001948:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800194a:	a901      	add	r1, sp, #4
 800194c:	480f      	ldr	r0, [pc, #60]	; (800198c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001958:	f004 fc66 	bl	8006228 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800195c:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195e:	a901      	add	r1, sp, #4
 8001960:	480b      	ldr	r0, [pc, #44]	; (8001990 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001962:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f004 fc5c 	bl	8006228 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001970:	b007      	add	sp, #28
 8001972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001974:	20000398 	.word	0x20000398
 8001978:	40023800 	.word	0x40023800
 800197c:	40021000 	.word	0x40021000
 8001980:	40021800 	.word	0x40021800
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40021400 	.word	0x40021400
 800198c:	40021c00 	.word	0x40021c00
 8001990:	40020800 	.word	0x40020800

08001994 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_InitTick+0x88>)
 8001996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001998:	f042 0210 	orr.w	r2, r2, #16
{
 800199c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
{
 80019a0:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 80019a4:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a6:	a901      	add	r1, sp, #4
 80019a8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b2:	f006 fc85 	bl	80082c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019b6:	9b06      	ldr	r3, [sp, #24]
 80019b8:	bb4b      	cbnz	r3, 8001a0e <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ba:	f006 fc71 	bl	80082a0 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019be:	4e18      	ldr	r6, [pc, #96]	; (8001a20 <HAL_InitTick+0x8c>)
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_InitTick+0x90>)
 80019c2:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019c4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80019c8:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_InitTick+0x94>)
 80019cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d0:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80019d2:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 80019d4:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019dc:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 80019de:	f007 f8c5 	bl	8008b6c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80019e2:	4604      	mov	r4, r0
 80019e4:	b980      	cbnz	r0, 8001a08 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019e6:	4630      	mov	r0, r6
 80019e8:	f006 ff68 	bl	80088bc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80019ec:	4604      	mov	r4, r0
 80019ee:	b958      	cbnz	r0, 8001a08 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019f0:	2036      	movs	r0, #54	; 0x36
 80019f2:	f004 f9f5 	bl	8005de0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	2d0f      	cmp	r5, #15
 80019f8:	d80d      	bhi.n	8001a16 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019fa:	4622      	mov	r2, r4
 80019fc:	4629      	mov	r1, r5
 80019fe:	2036      	movs	r0, #54	; 0x36
 8001a00:	f004 f9bc 	bl	8005d7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_InitTick+0x98>)
 8001a06:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8001a08:	4620      	mov	r0, r4
 8001a0a:	b008      	add	sp, #32
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a0e:	f006 fc47 	bl	80082a0 <HAL_RCC_GetPCLK1Freq>
 8001a12:	0040      	lsls	r0, r0, #1
 8001a14:	e7d3      	b.n	80019be <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8001a16:	2401      	movs	r4, #1
 8001a18:	e7f6      	b.n	8001a08 <HAL_InitTick+0x74>
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	2000039c 	.word	0x2000039c
 8001a24:	40001000 	.word	0x40001000
 8001a28:	000f4240 	.word	0x000f4240
 8001a2c:	2000003c 	.word	0x2000003c

08001a30 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a30:	4770      	bx	lr

08001a32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <HardFault_Handler>

08001a34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler>

08001a36 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler>

08001a38 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler>

08001a3a <DebugMon_Handler>:
 8001a3a:	4770      	bx	lr

08001a3c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a3c:	4801      	ldr	r0, [pc, #4]	; (8001a44 <I2C1_EV_IRQHandler+0x8>)
 8001a3e:	f005 b9d1 	b.w	8006de4 <HAL_I2C_EV_IRQHandler>
 8001a42:	bf00      	nop
 8001a44:	200001c4 	.word	0x200001c4

08001a48 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a48:	4801      	ldr	r0, [pc, #4]	; (8001a50 <I2C1_ER_IRQHandler+0x8>)
 8001a4a:	f005 bc28 	b.w	800729e <HAL_I2C_ER_IRQHandler>
 8001a4e:	bf00      	nop
 8001a50:	200001c4 	.word	0x200001c4

08001a54 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a54:	4801      	ldr	r0, [pc, #4]	; (8001a5c <TIM6_DAC_IRQHandler+0x8>)
 8001a56:	f006 bf73 	b.w	8008940 <HAL_TIM_IRQHandler>
 8001a5a:	bf00      	nop
 8001a5c:	2000039c 	.word	0x2000039c

08001a60 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a60:	4801      	ldr	r0, [pc, #4]	; (8001a68 <LTDC_IRQHandler+0x8>)
 8001a62:	f005 bd97 	b.w	8007594 <HAL_LTDC_IRQHandler>
 8001a66:	bf00      	nop
 8001a68:	2000026c 	.word	0x2000026c

08001a6c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a6c:	4801      	ldr	r0, [pc, #4]	; (8001a74 <DMA2D_IRQHandler+0x8>)
 8001a6e:	f004 bb08 	b.w	8006082 <HAL_DMA2D_IRQHandler>
 8001a72:	bf00      	nop
 8001a74:	20000184 	.word	0x20000184

08001a78 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001a78:	2001      	movs	r0, #1
 8001a7a:	4770      	bx	lr

08001a7c <_kill>:

int _kill(int pid, int sig)
{
 8001a7c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a7e:	f028 ffe3 	bl	802aa48 <__errno>
 8001a82:	2316      	movs	r3, #22
 8001a84:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001a86:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8a:	bd08      	pop	{r3, pc}

08001a8c <_exit>:

void _exit (int status)
{
 8001a8c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a8e:	f028 ffdb 	bl	802aa48 <__errno>
 8001a92:	2316      	movs	r3, #22
 8001a94:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001a96:	e7fe      	b.n	8001a96 <_exit+0xa>

08001a98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a98:	b570      	push	{r4, r5, r6, lr}
 8001a9a:	460d      	mov	r5, r1
 8001a9c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	460e      	mov	r6, r1
 8001aa0:	1b73      	subs	r3, r6, r5
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	dc01      	bgt.n	8001aaa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001aaa:	f3af 8000 	nop.w
 8001aae:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	e7f5      	b.n	8001aa0 <_read+0x8>

08001ab4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	460d      	mov	r5, r1
 8001ab8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	460e      	mov	r6, r1
 8001abc:	1b73      	subs	r3, r6, r5
 8001abe:	429c      	cmp	r4, r3
 8001ac0:	dc01      	bgt.n	8001ac6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001ac6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001aca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	e7f5      	b.n	8001abc <_write+0x8>

08001ad0 <_close>:

int _close(int file)
{
	return -1;
}
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001ada:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001adc:	604b      	str	r3, [r1, #4]
}
 8001ade:	4770      	bx	lr

08001ae0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	4770      	bx	lr

08001ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	4770      	bx	lr

08001ae8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <_sbrk+0x30>)
{
 8001aea:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001aec:	6811      	ldr	r1, [r2, #0]
{
 8001aee:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001af0:	b909      	cbnz	r1, 8001af6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001af2:	490a      	ldr	r1, [pc, #40]	; (8001b1c <_sbrk+0x34>)
 8001af4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	6810      	ldr	r0, [r2, #0]
 8001af8:	4909      	ldr	r1, [pc, #36]	; (8001b20 <_sbrk+0x38>)
 8001afa:	4c0a      	ldr	r4, [pc, #40]	; (8001b24 <_sbrk+0x3c>)
 8001afc:	4403      	add	r3, r0
 8001afe:	1b09      	subs	r1, r1, r4
 8001b00:	428b      	cmp	r3, r1
 8001b02:	d906      	bls.n	8001b12 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b04:	f028 ffa0 	bl	802aa48 <__errno>
 8001b08:	230c      	movs	r3, #12
 8001b0a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b10:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b12:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001b14:	e7fc      	b.n	8001b10 <_sbrk+0x28>
 8001b16:	bf00      	nop
 8001b18:	200003e8 	.word	0x200003e8
 8001b1c:	20016260 	.word	0x20016260
 8001b20:	20050000 	.word	0x20050000
 8001b24:	00000a00 	.word	0x00000a00

08001b28 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8001b28:	4770      	bx	lr
	...

08001b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b32:	e003      	b.n	8001b3c <LoopCopyDataInit>

08001b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b3a:	3104      	adds	r1, #4

08001b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b44:	d3f6      	bcc.n	8001b34 <CopyDataInit>
  ldr  r2, =_sbss
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b48:	e002      	b.n	8001b50 <LoopFillZerobss>

08001b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b4c:	f842 3b04 	str.w	r3, [r2], #4

08001b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b54:	d3f9      	bcc.n	8001b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b56:	f003 ffdf 	bl	8005b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f029 f883 	bl	802ac64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5e:	f7ff f9c5 	bl	8000eec <main>
  bx  lr    
 8001b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001b68:	08030c08 	.word	0x08030c08
  ldr  r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b70:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 8001b74:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 8001b78:	20016260 	.word	0x20016260

08001b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC_IRQHandler>

08001b7e <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001b7e:	4770      	bx	lr

08001b80 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001b80:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001b82:	f001 f8f3 	bl	8002d6c <touchgfx_components_init>
  touchgfx_init();
}
 8001b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 8001b8a:	f001 b87f 	b.w	8002c8c <touchgfx_init>

08001b8e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001b8e:	f001 b8ef 	b.w	8002d70 <touchgfx_taskEntry>

08001b92 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001b92:	6840      	ldr	r0, [r0, #4]
    }
 8001b94:	4770      	bx	lr

08001b96 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001b96:	6041      	str	r1, [r0, #4]
    }
 8001b98:	4770      	bx	lr
	...

08001b9c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001b9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001ba0:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001ba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba8:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001bb0:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
}
 8001bc2:	4770      	bx	lr
 8001bc4:	e0001000 	.word	0xe0001000
 8001bc8:	c5acce55 	.word	0xc5acce55

08001bcc <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001bcc:	1a51      	subs	r1, r2, r1
 8001bce:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001bd2:	fbb1 f0f3 	udiv	r0, r1, r3
 8001bd6:	4770      	bx	lr

08001bd8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001bd8:	4b01      	ldr	r3, [pc, #4]	; (8001be0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001bda:	6858      	ldr	r0, [r3, #4]
}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e0001000 	.word	0xe0001000

08001be4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001be4:	4770      	bx	lr

08001be6 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001be6:	b510      	push	{r4, lr}
 8001be8:	4604      	mov	r4, r0
 8001bea:	210c      	movs	r1, #12
 8001bec:	f028 fecb 	bl	802a986 <_ZdlPvj>
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	bd10      	pop	{r4, pc}

08001bf4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001bf4:	6803      	ldr	r3, [r0, #0]
{
 8001bf6:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001bf8:	691b      	ldr	r3, [r3, #16]
{
 8001bfa:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001bfc:	b131      	cbz	r1, 8001c0c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001bfe:	4798      	blx	r3
 8001c00:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001c02:	6863      	ldr	r3, [r4, #4]
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	4418      	add	r0, r3
 8001c08:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001c0a:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001c0c:	4798      	blx	r3
 8001c0e:	60a0      	str	r0, [r4, #8]
}
 8001c10:	e7fb      	b.n	8001c0a <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001c14 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001c16:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001c18:	4a02      	ldr	r2, [pc, #8]	; (8001c24 <_ZN20STM32TouchController4initEv+0x10>)
 8001c1a:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	4718      	bx	r3
 8001c20:	20000010 	.word	0x20000010
 8001c24:	200003ec 	.word	0x200003ec

08001c28 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001c28:	4770      	bx	lr

08001c2a <_ZN20STM32TouchControllerD0Ev>:
 8001c2a:	b510      	push	{r4, lr}
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	2104      	movs	r1, #4
 8001c30:	f028 fea9 	bl	802a986 <_ZdlPvj>
 8001c34:	4620      	mov	r0, r4
 8001c36:	bd10      	pop	{r4, pc}

08001c38 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001c38:	b573      	push	{r0, r1, r4, r5, r6, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001c3a:	4e0e      	ldr	r6, [pc, #56]	; (8001c74 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
{
 8001c3c:	460d      	mov	r5, r1
 8001c3e:	4614      	mov	r4, r2
    if (tsDriver)
 8001c40:	6833      	ldr	r3, [r6, #0]
 8001c42:	b913      	cbnz	r3, 8001c4a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = (int32_t)_x;
            y = (int32_t)_y;
            return true;
        }
    }
    return false;
 8001c44:	2000      	movs	r0, #0
}
 8001c46:	b002      	add	sp, #8
 8001c48:	bd70      	pop	{r4, r5, r6, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2070      	movs	r0, #112	; 0x70
 8001c4e:	4798      	blx	r3
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d0f7      	beq.n	8001c44 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            tsDriver->GetXY(TS_I2C_ADDRESS, &_y, &_x);
 8001c54:	6833      	ldr	r3, [r6, #0]
 8001c56:	2070      	movs	r0, #112	; 0x70
 8001c58:	aa01      	add	r2, sp, #4
 8001c5a:	f10d 0106 	add.w	r1, sp, #6
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	4798      	blx	r3
            x = (int32_t)_x;
 8001c62:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001c66:	2001      	movs	r0, #1
 8001c68:	602b      	str	r3, [r5, #0]
            y = (int32_t)_y;
 8001c6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001c6e:	6023      	str	r3, [r4, #0]
            return true;
 8001c70:	e7e9      	b.n	8001c46 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001c72:	bf00      	nop
 8001c74:	200003ec 	.word	0x200003ec

08001c78 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c7a:	2301      	movs	r3, #1
{
 8001c7c:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001c88:	f10d 0217 	add.w	r2, sp, #23
 8001c8c:	9200      	str	r2, [sp, #0]
 8001c8e:	460a      	mov	r2, r1
 8001c90:	4601      	mov	r1, r0
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <TS_IO_Write+0x30>)
 8001c94:	f004 feee 	bl	8006a74 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001c98:	b110      	cbz	r0, 8001ca0 <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <TS_IO_Write+0x30>)
 8001c9c:	f004 fe31 	bl	8006902 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001ca0:	b007      	add	sp, #28
 8001ca2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca6:	bf00      	nop
 8001ca8:	20000218 	.word	0x20000218

08001cac <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001cac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001cae:	2300      	movs	r3, #0
{
 8001cb0:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001cb6:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001cc0:	f10d 0117 	add.w	r1, sp, #23
 8001cc4:	9100      	str	r1, [sp, #0]
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <TS_IO_Read+0x34>)
 8001cca:	f004 ffad 	bl	8006c28 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001cce:	b110      	cbz	r0, 8001cd6 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <TS_IO_Read+0x34>)
 8001cd2:	f004 fe16 	bl	8006902 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001cd6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001cda:	b007      	add	sp, #28
 8001cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ce0:	20000218 	.word	0x20000218

08001ce4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001ce4:	2803      	cmp	r0, #3
 8001ce6:	d823      	bhi.n	8001d30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001ce8:	e8df f000 	tbb	[pc, r0]
 8001cec:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	4810      	ldr	r0, [pc, #64]	; (8001d38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001cfe:	f004 bc1f 	b.w	8006540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001d04:	2140      	movs	r1, #64	; 0x40
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001d0e:	480b      	ldr	r0, [pc, #44]	; (8001d3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001d10:	e7f5      	b.n	8001cfe <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	fab2 f282 	clz	r2, r2
 8001d1c:	0952      	lsrs	r2, r2, #5
 8001d1e:	e7f6      	b.n	8001d0e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	4806      	ldr	r0, [pc, #24]	; (8001d40 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	fab2 f282 	clz	r2, r2
 8001d2c:	0952      	lsrs	r2, r2, #5
 8001d2e:	e7e6      	b.n	8001cfe <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200003f0 	.word	0x200003f0
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40021800 	.word	0x40021800

08001d44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001d44:	2803      	cmp	r0, #3
 8001d46:	d823      	bhi.n	8001d90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001d48:	e8df f000 	tbb	[pc, r0]
 8001d4c:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001d52:	2110      	movs	r1, #16
 8001d54:	4810      	ldr	r0, [pc, #64]	; (8001d98 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	3a00      	subs	r2, #0
 8001d5a:	bf18      	it	ne
 8001d5c:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001d5e:	f004 bbef 	b.w	8006540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001d64:	2140      	movs	r1, #64	; 0x40
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	3a00      	subs	r2, #0
 8001d6a:	bf18      	it	ne
 8001d6c:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001d6e:	480b      	ldr	r0, [pc, #44]	; (8001d9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001d70:	e7f5      	b.n	8001d5e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	3a00      	subs	r2, #0
 8001d7a:	bf18      	it	ne
 8001d7c:	2201      	movne	r2, #1
 8001d7e:	e7f6      	b.n	8001d6e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001d82:	2140      	movs	r1, #64	; 0x40
 8001d84:	4806      	ldr	r0, [pc, #24]	; (8001da0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	3a00      	subs	r2, #0
 8001d8a:	bf18      	it	ne
 8001d8c:	2201      	movne	r2, #1
 8001d8e:	e7e6      	b.n	8001d5e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200003f0 	.word	0x200003f0
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40021800 	.word	0x40021800

08001da4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001da4:	2803      	cmp	r0, #3
 8001da6:	d80f      	bhi.n	8001dc8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001da8:	e8df f000 	tbb	[pc, r0]
 8001dac:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001db0:	2110      	movs	r1, #16
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001db4:	f004 bbc9 	b.w	800654a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001db8:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001dbc:	e7fa      	b.n	8001db4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	e7fb      	b.n	8001dba <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001dc2:	2140      	movs	r1, #64	; 0x40
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001dc6:	e7f5      	b.n	8001db4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40021800 	.word	0x40021800

08001dd8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001dd8:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001dda:	2803      	cmp	r0, #3
 8001ddc:	d813      	bhi.n	8001e06 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8001dde:	e8df f000 	tbb	[pc, r0]
 8001de2:	0a02      	.short	0x0a02
 8001de4:	0f0d      	.short	0x0f0d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001de6:	2110      	movs	r1, #16
 8001de8:	4808      	ldr	r0, [pc, #32]	; (8001e0c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001dea:	f004 fba3 	bl	8006534 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001dee:	1e43      	subs	r3, r0, #1
 8001df0:	4258      	negs	r0, r3
 8001df2:	4158      	adcs	r0, r3
 8001df4:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001df6:	2140      	movs	r1, #64	; 0x40
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8001dfa:	e7f6      	b.n	8001dea <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	e7fb      	b.n	8001df8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001e04:	e7f1      	b.n	8001dea <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001e06:	2000      	movs	r0, #0
 8001e08:	e7f1      	b.n	8001dee <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001e0a:	bf00      	nop
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40021800 	.word	0x40021800

08001e18 <_ZN8touchgfx4GPIO4initEv>:
{
 8001e18:	b570      	push	{r4, r5, r6, lr}
 8001e1a:	4d08      	ldr	r5, [pc, #32]	; (8001e3c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001e1c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001e1e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001e20:	b2e0      	uxtb	r0, r4
 8001e22:	f7ff ffd9 	bl	8001dd8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001e26:	b118      	cbz	r0, 8001e30 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001e2c:	bf18      	it	ne
 8001e2e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001e30:	3401      	adds	r4, #1
 8001e32:	3504      	adds	r5, #4
 8001e34:	2c05      	cmp	r4, #5
 8001e36:	d1f3      	bne.n	8001e20 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001e38:	bd70      	pop	{r4, r5, r6, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200003f0 	.word	0x200003f0

08001e40 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001e40:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001e42:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001e46:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001e4a:	4770      	bx	lr

08001e4c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	4770      	bx	lr

08001e50 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001e50:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001e52:	3900      	subs	r1, #0
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001e56:	bf18      	it	ne
 8001e58:	2101      	movne	r1, #1
 8001e5a:	7019      	strb	r1, [r3, #0]
    }
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20015fbb 	.word	0x20015fbb

08001e64 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001e64:	2000      	movs	r0, #0
 8001e66:	4770      	bx	lr

08001e68 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001e68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001e6a:	b10b      	cbz	r3, 8001e70 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	4718      	bx	r3
        }
    }
 8001e70:	4770      	bx	lr

08001e72 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001e72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e76:	4770      	bx	lr

08001e78 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001e78:	6840      	ldr	r0, [r0, #4]
 8001e7a:	6803      	ldr	r3, [r0, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	4718      	bx	r3

08001e80 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001e80:	4770      	bx	lr
	...

08001e84 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001e88:	f001 f87c 	bl	8002f84 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001e96:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8001e9a:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001e9c:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001e9e:	4d06      	ldr	r5, [pc, #24]	; (8001eb8 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001ea0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	f7ff fe79 	bl	8001b9c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001eaa:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001eac:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001eae:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001eb2:	bd38      	pop	{r3, r4, r5, pc}
 8001eb4:	c0000000 	.word	0xc0000000
 8001eb8:	20000400 	.word	0x20000400

08001ebc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001ebc:	f001 b818 	b.w	8002ef0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001ec0 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ec0:	f001 b81c 	b.w	8002efc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001ec4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001ec4:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001ec6:	f001 f88f 	bl	8002fe8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001eca:	4910      	ldr	r1, [pc, #64]	; (8001f0c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ed6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001eda:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ede:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ee2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001ee6:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ee8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001eec:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001eee:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ef2:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ef4:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001ef8:	d2f9      	bcs.n	8001eee <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001efa:	3b20      	subs	r3, #32
 8001efc:	f113 0f20 	cmn.w	r3, #32
 8001f00:	d1f2      	bne.n	8001ee8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001f02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f06:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001f10:	f001 b86c 	b.w	8002fec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001f14 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001f14:	f000 bfc8 	b.w	8002ea8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001f18 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001f18:	f001 b986 	b.w	8003228 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001f1c <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001f1c:	f001 b98e 	b.w	800323c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001f20 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001f20:	f000 bfcc 	b.w	8002ebc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001f24 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001f24:	b510      	push	{r4, lr}
 8001f26:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001f28:	f017 fbba 	bl	80196a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001f38:	4718      	bx	r3

08001f3a <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001f3a:	f016 be09 	b.w	8018b50 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001f3e <_ZN11TouchGFXHALD0Ev>:
 8001f3e:	b510      	push	{r4, lr}
 8001f40:	4604      	mov	r4, r0
 8001f42:	217c      	movs	r1, #124	; 0x7c
 8001f44:	f028 fd1f 	bl	802a986 <_ZdlPvj>
 8001f48:	4620      	mov	r0, r4
 8001f4a:	bd10      	pop	{r4, pc}

08001f4c <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001f4c:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001f50:	b11b      	cbz	r3, 8001f5a <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001f52:	6840      	ldr	r0, [r0, #4]
 8001f54:	6803      	ldr	r3, [r0, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4718      	bx	r3
    }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	4770      	bx	lr
	...

08001f60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001f60:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001f66:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001f68:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001f6c:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001f6e:	428c      	cmp	r4, r1
 8001f70:	d009      	beq.n	8001f86 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001f72:	b93a      	cbnz	r2, 8001f84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001f74:	490a      	ldr	r1, [pc, #40]	; (8001fa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001f78:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f7a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001f7c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001f7e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f80:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001f82:	701a      	strb	r2, [r3, #0]
        }
    }
 8001f84:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d0fc      	beq.n	8001f84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f8a:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001f8c:	4904      	ldr	r1, [pc, #16]	; (8001fa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f8e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001f90:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f92:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001f94:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001f96:	2200      	movs	r2, #0
 8001f98:	e7f3      	b.n	8001f82 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001f9a:	bf00      	nop
 8001f9c:	20015fb4 	.word	0x20015fb4
 8001fa0:	20015fb2 	.word	0x20015fb2
 8001fa4:	20015fb0 	.word	0x20015fb0

08001fa8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	460d      	mov	r5, r1
 8001fac:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001fae:	b935      	cbnz	r5, 8001fbe <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001fb2:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001fb8:	4809      	ldr	r0, [pc, #36]	; (8001fe0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001fba:	f028 fd13 	bl	802a9e4 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001fbe:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001fc2:	3a00      	subs	r2, #0
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001fc6:	bf18      	it	ne
 8001fc8:	2201      	movne	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001fcc:	6803      	ldr	r3, [r0, #0]
    }
 8001fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd6:	4718      	bx	r3
 8001fd8:	0802c15c 	.word	0x0802c15c
 8001fdc:	0802c194 	.word	0x0802c194
 8001fe0:	0802c1e2 	.word	0x0802c1e2
 8001fe4:	20015fba 	.word	0x20015fba

08001fe8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001fe8:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	428b      	cmp	r3, r1
 8001ff0:	d803      	bhi.n	8001ffa <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d905      	bls.n	8002006 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001ffc:	219e      	movs	r1, #158	; 0x9e
 8001ffe:	4a07      	ldr	r2, [pc, #28]	; (800201c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002000:	4807      	ldr	r0, [pc, #28]	; (8002020 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8002002:	f028 fcef 	bl	802a9e4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002008:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800200c:	801a      	strh	r2, [r3, #0]
    }
 800200e:	bd08      	pop	{r3, pc}
 8002010:	20015fb0 	.word	0x20015fb0
 8002014:	20015fb2 	.word	0x20015fb2
 8002018:	0802c227 	.word	0x0802c227
 800201c:	0802c28a 	.word	0x0802c28a
 8002020:	0802c1e2 	.word	0x0802c1e2
 8002024:	20015fb6 	.word	0x20015fb6
 8002028:	20015fb8 	.word	0x20015fb8

0800202c <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 800202c:	4601      	mov	r1, r0
 800202e:	b508      	push	{r3, lr}
        return instance;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <IdleTaskHook+0x14>)
 8002032:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002034:	b101      	cbz	r1, 8002038 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8002036:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002038:	f017 fb4c 	bl	80196d4 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 800203c:	2001      	movs	r0, #1
 800203e:	bd08      	pop	{r3, pc}
 8002040:	20015fbc 	.word	0x20015fbc

08002044 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <_GLOBAL__sub_I_instrumentation+0x10>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	4a02      	ldr	r2, [pc, #8]	; (8002058 <_GLOBAL__sub_I_instrumentation+0x14>)
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000400 	.word	0x20000400
 8002058:	0802c124 	.word	0x0802c124

0800205c <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800205c:	2101      	movs	r1, #1
 800205e:	2200      	movs	r2, #0
{
 8002060:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002062:	4608      	mov	r0, r1
 8002064:	f006 ff88 	bl	8008f78 <osSemaphoreNew>
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800206a:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800206c:	b928      	cbnz	r0, 800207a <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002070:	2128      	movs	r1, #40	; 0x28
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002074:	480a      	ldr	r0, [pc, #40]	; (80020a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002076:	f028 fcb5 	bl	802a9e4 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800207a:	2200      	movs	r2, #0
 800207c:	2104      	movs	r1, #4
 800207e:	2001      	movs	r0, #1
 8002080:	f007 f840 	bl	8009104 <osMessageQueueNew>
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002086:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002088:	b918      	cbnz	r0, 8002092 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	4a03      	ldr	r2, [pc, #12]	; (800209c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002090:	e7f0      	b.n	8002074 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002092:	bd08      	pop	{r3, pc}
 8002094:	20000410 	.word	0x20000410
 8002098:	0802c3a8 	.word	0x0802c3a8
 800209c:	0802c3f1 	.word	0x0802c3f1
 80020a0:	0802c420 	.word	0x0802c420
 80020a4:	2000040c 	.word	0x2000040c
 80020a8:	0802c46d 	.word	0x0802c46d

080020ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80020ae:	f04f 31ff 	mov.w	r1, #4294967295
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	f006 bfb6 	b.w	8009024 <osSemaphoreAcquire>
 80020b8:	20000410 	.word	0x20000410

080020bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80020bc:	4b01      	ldr	r3, [pc, #4]	; (80020c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	f006 bfea 	b.w	8009098 <osSemaphoreRelease>
 80020c4:	20000410 	.word	0x20000410

080020c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80020ca:	2100      	movs	r1, #0
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f006 bfa9 	b.w	8009024 <osSemaphoreAcquire>
 80020d2:	bf00      	nop
 80020d4:	20000410 	.word	0x20000410

080020d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 80020d8:	f7ff bff0 	b.w	80020bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080020dc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80020dc:	2300      	movs	r3, #0
 80020de:	4803      	ldr	r0, [pc, #12]	; (80020ec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80020e0:	4903      	ldr	r1, [pc, #12]	; (80020f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80020e2:	461a      	mov	r2, r3
 80020e4:	6800      	ldr	r0, [r0, #0]
 80020e6:	f007 b853 	b.w	8009190 <osMessageQueuePut>
 80020ea:	bf00      	nop
 80020ec:	2000040c 	.word	0x2000040c
 80020f0:	20000004 	.word	0x20000004

080020f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80020f4:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80020f6:	2300      	movs	r3, #0
 80020f8:	4c07      	ldr	r4, [pc, #28]	; (8002118 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80020fa:	a901      	add	r1, sp, #4
 80020fc:	461a      	mov	r2, r3
 80020fe:	6820      	ldr	r0, [r4, #0]
 8002100:	f007 f888 	bl	8009214 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
 8002108:	2200      	movs	r2, #0
 800210a:	a901      	add	r1, sp, #4
 800210c:	6820      	ldr	r0, [r4, #0]
 800210e:	f007 f881 	bl	8009214 <osMessageQueueGet>
}
 8002112:	b002      	add	sp, #8
 8002114:	bd10      	pop	{r4, pc}
 8002116:	bf00      	nop
 8002118:	2000040c 	.word	0x2000040c

0800211c <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 800211c:	6803      	ldr	r3, [r0, #0]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	4718      	bx	r3

08002122 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002122:	2001      	movs	r0, #1
 8002124:	4770      	bx	lr

08002126 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	4718      	bx	r3

0800212c <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <_ZN8STM32DMA10initializeEv+0x38>)
{
 800212e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002132:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
 8002138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800213e:	9201      	str	r2, [sp, #4]
 8002140:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002148:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002150:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <_ZN8STM32DMA10initializeEv+0x3c>)
 8002154:	4a05      	ldr	r2, [pc, #20]	; (800216c <_ZN8STM32DMA10initializeEv+0x40>)
 8002156:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002158:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <_ZN8STM32DMA10initializeEv+0x44>)
 800215e:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8002160:	b002      	add	sp, #8
 8002162:	4770      	bx	lr
 8002164:	40023800 	.word	0x40023800
 8002168:	20000184 	.word	0x20000184
 800216c:	080021b5 	.word	0x080021b5
 8002170:	e000e100 	.word	0xe000e100

08002174 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002174:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002178:	4770      	bx	lr
	...

0800217c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002182:	6003      	str	r3, [r0, #0]
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <_ZN8STM32DMAD1Ev+0x1c>)
 8002186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800218a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800218e:	f3bf 8f6f 	isb	sy
}
 8002192:	4770      	bx	lr
 8002194:	0802c60c 	.word	0x0802c60c
 8002198:	e000e100 	.word	0xe000e100

0800219c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800219c:	b510      	push	{r4, lr}
 800219e:	4604      	mov	r4, r0
}
 80021a0:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80021a4:	f7ff ffea 	bl	800217c <_ZN8STM32DMAD1Ev>
 80021a8:	4620      	mov	r0, r4
 80021aa:	f028 fbec 	bl	802a986 <_ZdlPvj>
 80021ae:	4620      	mov	r0, r4
 80021b0:	bd10      	pop	{r4, pc}
	...

080021b4 <DMA2D_XferCpltCallback>:
 80021b4:	4b02      	ldr	r3, [pc, #8]	; (80021c0 <DMA2D_XferCpltCallback+0xc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80021ba:	6803      	ldr	r3, [r0, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	4718      	bx	r3
 80021c0:	20015fbc 	.word	0x20015fbc

080021c4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <_ZN8STM32DMAC1Ev+0x30>)
 80021ca:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80021cc:	2600      	movs	r6, #0
 80021ce:	4625      	mov	r5, r4
 80021d0:	2260      	movs	r2, #96	; 0x60
 80021d2:	6060      	str	r0, [r4, #4]
 80021d4:	7226      	strb	r6, [r4, #8]
 80021d6:	7266      	strb	r6, [r4, #9]
 80021d8:	f845 3b20 	str.w	r3, [r5], #32
 80021dc:	4629      	mov	r1, r5
 80021de:	f017 fbb5 	bl	801994c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80021e2:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 80021e6:	60ee      	str	r6, [r5, #12]
 80021e8:	3524      	adds	r5, #36	; 0x24
 80021ea:	42ab      	cmp	r3, r5
 80021ec:	d1fb      	bne.n	80021e6 <_ZN8STM32DMAC1Ev+0x22>
}
 80021ee:	4620      	mov	r0, r4
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
 80021f2:	bf00      	nop
 80021f4:	0802c60c 	.word	0x0802c60c

080021f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 80021f8:	b508      	push	{r3, lr}
    switch (format)
 80021fa:	290b      	cmp	r1, #11
 80021fc:	d80b      	bhi.n	8002216 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 80021fe:	e8df f001 	tbb	[pc, r1]
 8002202:	0612      	.short	0x0612
 8002204:	0a0a0a10 	.word	0x0a0a0a10
 8002208:	0808080a 	.word	0x0808080a
 800220c:	0808      	.short	0x0808
 800220e:	2001      	movs	r0, #1
}
 8002210:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002212:	2005      	movs	r0, #5
        break;
 8002214:	e7fc      	b.n	8002210 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002218:	2166      	movs	r1, #102	; 0x66
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800221c:	4805      	ldr	r0, [pc, #20]	; (8002234 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 800221e:	f028 fbe1 	bl	802a9e4 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002222:	2000      	movs	r0, #0
 8002224:	e7f4      	b.n	8002210 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002226:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002228:	e7f2      	b.n	8002210 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800222a:	bf00      	nop
 800222c:	0802c4af 	.word	0x0802c4af
 8002230:	0802c4ca 	.word	0x0802c4ca
 8002234:	0802c514 	.word	0x0802c514

08002238 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002238:	b508      	push	{r3, lr}
    switch (format)
 800223a:	290a      	cmp	r1, #10
 800223c:	d809      	bhi.n	8002252 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 800223e:	e8df f001 	tbb	[pc, r1]
 8002242:	0610      	.short	0x0610
 8002244:	0808080e 	.word	0x0808080e
 8002248:	06060608 	.word	0x06060608
 800224c:	06          	.byte	0x06
 800224d:	00          	.byte	0x00
 800224e:	2001      	movs	r0, #1
}
 8002250:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002254:	2187      	movs	r1, #135	; 0x87
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002258:	4805      	ldr	r0, [pc, #20]	; (8002270 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800225a:	f028 fbc3 	bl	802a9e4 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800225e:	2000      	movs	r0, #0
 8002260:	e7f6      	b.n	8002250 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002262:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002264:	e7f4      	b.n	8002250 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002266:	bf00      	nop
 8002268:	0802c4af 	.word	0x0802c4af
 800226c:	0802c55f 	.word	0x0802c55f
 8002270:	0802c514 	.word	0x0802c514

08002274 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002278:	7f4f      	ldrb	r7, [r1, #29]
{
 800227a:	460c      	mov	r4, r1
 800227c:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800227e:	4639      	mov	r1, r7
 8002280:	f7ff ffba 	bl	80021f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002284:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002288:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800228a:	4648      	mov	r0, r9
 800228c:	4641      	mov	r1, r8
 800228e:	f7ff ffb3 	bl	80021f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002292:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002294:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002296:	4648      	mov	r0, r9
 8002298:	f7ff ffce 	bl	8002238 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800229c:	8aa1      	ldrh	r1, [r4, #20]
 800229e:	8b62      	ldrh	r2, [r4, #26]
 80022a0:	4b42      	ldr	r3, [pc, #264]	; (80023ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80022a2:	1a52      	subs	r2, r2, r1
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022a6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80022a8:	8b22      	ldrh	r2, [r4, #24]
 80022aa:	1a52      	subs	r2, r2, r1
 80022ac:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80022ae:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80022b0:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80022b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80022b6:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80022ba:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80022bc:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80022be:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80022c0:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022c2:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80022c6:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022c8:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80022cc:	d026      	beq.n	800231c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80022ce:	d810      	bhi.n	80022f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80022d0:	2920      	cmp	r1, #32
 80022d2:	ea45 0402 	orr.w	r4, r5, r2
 80022d6:	d062      	beq.n	800239e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80022d8:	2940      	cmp	r1, #64	; 0x40
 80022da:	d060      	beq.n	800239e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80022dc:	2904      	cmp	r1, #4
 80022de:	d05e      	beq.n	800239e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022e0:	432a      	orrs	r2, r5
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80022e4:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022ea:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80022ec:	d05b      	beq.n	80023a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80022ee:	4a30      	ldr	r2, [pc, #192]	; (80023b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80022f0:	e040      	b.n	8002374 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80022f2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80022f6:	d007      	beq.n	8002308 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80022f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80022fc:	d1f0      	bne.n	80022e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002302:	f042 0209 	orr.w	r2, r2, #9
 8002306:	e003      	b.n	8002310 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002308:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800230c:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002310:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002312:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002314:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002316:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002318:	6158      	str	r0, [r3, #20]
 800231a:	e02a      	b.n	8002372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800231c:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800231e:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002320:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002322:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002326:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002328:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 800232a:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800232c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800232e:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002330:	b142      	cbz	r2, 8002344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002332:	2a01      	cmp	r2, #1
 8002334:	d021      	beq.n	800237a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002336:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002338:	f240 1111 	movw	r1, #273	; 0x111
 800233c:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800233e:	481f      	ldr	r0, [pc, #124]	; (80023bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002340:	f028 fb50 	bl	802a9e4 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002344:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8002346:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002348:	8861      	ldrh	r1, [r4, #2]
 800234a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800234e:	3901      	subs	r1, #1
 8002350:	f022 0210 	bic.w	r2, r2, #16
 8002354:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002358:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	f042 0220 	orr.w	r2, r2, #32
 8002362:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	0692      	lsls	r2, r2, #26
 8002368:	d4fc      	bmi.n	8002364 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800236a:	2210      	movs	r2, #16
 800236c:	609a      	str	r2, [r3, #8]
            if(blend)
 800236e:	2800      	cmp	r0, #0
 8002370:	d0bd      	beq.n	80022ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002372:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002374:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8002376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800237a:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 800237c:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002380:	69d9      	ldr	r1, [r3, #28]
 8002382:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 8002386:	bf18      	it	ne
 8002388:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800238a:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800238e:	f022 0210 	bic.w	r2, r2, #16
 8002392:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002396:	f042 0210 	orr.w	r2, r2, #16
 800239a:	61da      	str	r2, [r3, #28]
                break;
 800239c:	e7dd      	b.n	800235a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800239e:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80023a2:	61dc      	str	r4, [r3, #28]
 80023a4:	e7b7      	b.n	8002316 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80023a6:	f240 2201 	movw	r2, #513	; 0x201
 80023aa:	e7e3      	b.n	8002374 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80023ac:	4002b000 	.word	0x4002b000
 80023b0:	00010201 	.word	0x00010201
 80023b4:	0802c5aa 	.word	0x0802c5aa
 80023b8:	0802c5c4 	.word	0x0802c5c4
 80023bc:	0802c514 	.word	0x0802c514
 80023c0:	00020201 	.word	0x00020201

080023c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80023c8:	7f89      	ldrb	r1, [r1, #30]
 80023ca:	f7ff ff35 	bl	8002238 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80023d0:	8aa6      	ldrh	r6, [r4, #20]
 80023d2:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80023d4:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80023d6:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023da:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80023dc:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80023de:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80023e0:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023e2:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80023e6:	6826      	ldr	r6, [r4, #0]
 80023e8:	68e1      	ldr	r1, [r4, #12]
 80023ea:	2e08      	cmp	r6, #8
 80023ec:	d10d      	bne.n	800240a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80023ee:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80023f0:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023f2:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80023f6:	7f20      	ldrb	r0, [r4, #28]
 80023f8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80023fc:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80023fe:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002400:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002402:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002404:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002406:	601a      	str	r2, [r3, #0]
    }
}
 8002408:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800240a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800240c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800240e:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 8002410:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002412:	0a0a      	lsrs	r2, r1, #8
 8002414:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002418:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800241c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8002420:	4302      	orrs	r2, r0
 8002422:	430a      	orrs	r2, r1
 8002424:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002428:	e7ed      	b.n	8002406 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800242a:	bf00      	nop
 800242c:	4002b000 	.word	0x4002b000
 8002430:	00010009 	.word	0x00010009
 8002434:	00020201 	.word	0x00020201
 8002438:	00030201 	.word	0x00030201

0800243c <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:

    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);

    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 800243c:	6940      	ldr	r0, [r0, #20]
 800243e:	4770      	bx	lr

08002440 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:

    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8002440:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8002444:	4770      	bx	lr

08002446 <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8002446:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002448:	b923      	cbnz	r3, 8002454 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 800244a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800244c:	3800      	subs	r0, #0
 800244e:	bf18      	it	ne
 8002450:	2001      	movne	r0, #1
 8002452:	4770      	bx	lr
 8002454:	2001      	movs	r0, #1
}
 8002456:	4770      	bx	lr

08002458 <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002458:	6880      	ldr	r0, [r0, #8]
 800245a:	4770      	bx	lr

0800245c <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 800245c:	3004      	adds	r0, #4
{
 800245e:	b510      	push	{r4, lr}
 8002460:	460c      	mov	r4, r1
    *data = videoInfo;
 8002462:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888 || VIDEO_DECODE_FORMAT == ARGB8888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 8002468:	bd10      	pop	{r4, pc}

0800246a <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 800246a:	4770      	bx	lr

0800246c <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 800246c:	b508      	push	{r3, lr}
    assert(0);
 800246e:	4a03      	ldr	r2, [pc, #12]	; (800247c <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002470:	f240 210f 	movw	r1, #527	; 0x20f
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002478:	f028 fab4 	bl	802a9e4 <__assert_func>
 800247c:	0802c654 	.word	0x0802c654
 8002480:	0802e0a3 	.word	0x0802e0a3
 8002484:	0802c6af 	.word	0x0802c6af

08002488 <_ZN20SoftwareMJPEGDecoderD0Ev>:
 8002488:	b510      	push	{r4, lr}
 800248a:	4604      	mov	r4, r0
 800248c:	2148      	movs	r1, #72	; 0x48
 800248e:	f028 fa7a 	bl	802a986 <_ZdlPvj>
 8002492:	4620      	mov	r0, r4
 8002494:	bd10      	pop	{r4, pc}
	...

08002498 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800249c:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800249e:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 80024a0:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80024a4:	4605      	mov	r5, r0
 80024a6:	460e      	mov	r6, r1
 80024a8:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d052      	beq.n	8002554 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80024ae:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 80024b0:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80024b2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800255c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80024b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 80024ba:	f00f f853 	bl	8011564 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 80024be:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80024c2:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 80024c4:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 80024c6:	a824      	add	r0, sp, #144	; 0x90
 80024c8:	f008 ff6d 	bl	800b3a6 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 80024cc:	463a      	mov	r2, r7
 80024ce:	4631      	mov	r1, r6
 80024d0:	a824      	add	r0, sp, #144	; 0x90
 80024d2:	f009 ff01 	bl	800c2d8 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 80024d6:	2101      	movs	r1, #1
 80024d8:	a824      	add	r0, sp, #144	; 0x90
 80024da:	f009 f86d 	bl	800b5b8 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 80024de:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 80024e0:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 80024e2:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 80024e6:	f009 f90b 	bl	800b700 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80024ea:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 80024ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80024f0:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80024f4:	429e      	cmp	r6, r3
 80024f6:	bf28      	it	cs
 80024f8:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80024fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80024fc:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80024fe:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002502:	bf28      	it	cs
 8002504:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002506:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 8002508:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 800250c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800250e:	429f      	cmp	r7, r3
 8002510:	d91a      	bls.n	8002548 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002512:	2201      	movs	r2, #1
 8002514:	a901      	add	r1, sp, #4
 8002516:	a824      	add	r0, sp, #144	; 0x90
 8002518:	f009 f93b 	bl	800b792 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 800251c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 800251e:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 8002522:	4298      	cmp	r0, r3
 8002524:	d90e      	bls.n	8002544 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 8002526:	7859      	ldrb	r1, [r3, #1]
 8002528:	789a      	ldrb	r2, [r3, #2]
 800252a:	00c9      	lsls	r1, r1, #3
 800252c:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 8002530:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8002534:	430a      	orrs	r2, r1
 8002536:	f813 1b03 	ldrb.w	r1, [r3], #3
 800253a:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 800253e:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 8002542:	e7ee      	b.n	8002522 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002544:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 8002546:	e7e1      	b.n	800250c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 8002548:	a824      	add	r0, sp, #144	; 0x90
 800254a:	f009 f857 	bl	800b5fc <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 800254e:	a824      	add	r0, sp, #144	; 0x90
 8002550:	f008 ff76 	bl	800b440 <jpeg_destroy_decompress>
}
 8002554:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 8002558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800255c:	fffff800 	.word	0xfffff800

08002560 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 8002562:	6002      	str	r2, [r0, #0]
 8002564:	2200      	movs	r2, #0
 8002566:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800256a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800256e:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 8002572:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8002576:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 800257a:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800257e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 8002582:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002586:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 800258a:	4770      	bx	lr
 800258c:	0802c990 	.word	0x0802c990

08002590 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 8002590:	b420      	push	{r5}
 8002592:	460d      	mov	r5, r1
 8002594:	4611      	mov	r1, r2
 8002596:	461a      	mov	r2, r3
    if (reader != 0)
 8002598:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800259a:	b13b      	cbz	r3, 80025ac <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800259c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800259e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80025a0:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 80025a2:	4428      	add	r0, r5
}
 80025a4:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 80025a8:	f029 b899 	b.w	802b6de <strncmp>
        src = (const char*)movieData + offset;
 80025ac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80025ae:	e7f8      	b.n	80025a2 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

080025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80025b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 80025b2:	b510      	push	{r4, lr}
    if (reader != 0)
 80025b4:	b173      	cbz	r3, 80025d4 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80025b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80025b8:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 80025ba:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80025bc:	1853      	adds	r3, r2, r1
 80025be:	5c52      	ldrb	r2, [r2, r1]
 80025c0:	7898      	ldrb	r0, [r3, #2]
 80025c2:	785c      	ldrb	r4, [r3, #1]
 80025c4:	0400      	lsls	r0, r0, #16
 80025c6:	78db      	ldrb	r3, [r3, #3]
 80025c8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80025cc:	4310      	orrs	r0, r2
 80025ce:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80025d2:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80025d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80025d6:	5858      	ldr	r0, [r3, r1]
 80025d8:	e7fb      	b.n	80025d2 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

080025da <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80025da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80025dc:	b143      	cbz	r3, 80025f0 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80025de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025e0:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80025e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80025e4:	185a      	adds	r2, r3, r1
 80025e6:	5c58      	ldrb	r0, [r3, r1]
 80025e8:	7852      	ldrb	r2, [r2, #1]
 80025ea:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80025ee:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 80025f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80025f2:	5a58      	ldrh	r0, [r3, r1]
}
 80025f4:	4770      	bx	lr
	...

080025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	4604      	mov	r4, r0
    if (reader != 0)
 80025fc:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 80025fe:	460d      	mov	r5, r1
 8002600:	4616      	mov	r6, r2
    if (reader != 0)
 8002602:	b1d8      	cbz	r0, 800263c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002604:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002606:	4293      	cmp	r3, r2
 8002608:	d208      	bcs.n	800261c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800260a:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 800260e:	2168      	movs	r1, #104	; 0x68
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002612:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 8002618:	f028 f9e4 	bl	802a9e4 <__assert_func>
        reader->seek(offset);
 800261c:	6803      	ldr	r3, [r0, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002622:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002624:	4632      	mov	r2, r6
 8002626:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002628:	6803      	ldr	r3, [r0, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	4798      	blx	r3
 800262e:	b910      	cbnz	r0, 8002636 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002630:	230d      	movs	r3, #13
 8002632:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 8002636:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 8002638:	6425      	str	r5, [r4, #64]	; 0x40
}
 800263a:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 800263c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800263e:	4408      	add	r0, r1
 8002640:	e7fb      	b.n	800263a <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 8002642:	bf00      	nop
 8002644:	0802c719 	.word	0x0802c719
 8002648:	0802c6af 	.word	0x0802c6af
 800264c:	0802c706 	.word	0x0802c706

08002650 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002654:	6943      	ldr	r3, [r0, #20]
{
 8002656:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002658:	b92b      	cbnz	r3, 8002666 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 800265c:	21ad      	movs	r1, #173	; 0xad
 800265e:	4a23      	ldr	r2, [pc, #140]	; (80026ec <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002660:	4823      	ldr	r0, [pc, #140]	; (80026f0 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 8002662:	f028 f9bf 	bl	802a9e4 <__assert_func>
    readData(currentMovieOffset, 8);
 8002666:	2208      	movs	r2, #8
 8002668:	6981      	ldr	r1, [r0, #24]
 800266a:	f7ff ffc5 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800266e:	69a1      	ldr	r1, [r4, #24]
 8002670:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002672:	f243 0630 	movw	r6, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002676:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002678:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800267c:	f7ff ff98 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002680:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002682:	69a1      	ldr	r1, [r4, #24]
 8002684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002686:	440d      	add	r5, r1
 8002688:	f105 0208 	add.w	r2, r5, #8
 800268c:	429a      	cmp	r2, r3
 800268e:	d224      	bcs.n	80026da <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x8a>
        frameNumber++;
 8002690:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002692:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 8002694:	2208      	movs	r2, #8
 8002696:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002698:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 800269c:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800269e:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 80026a0:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 80026a2:	f7ff ffa9 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 80026a6:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80026aa:	4620      	mov	r0, r4
 80026ac:	4641      	mov	r1, r8
 80026ae:	f7ff ff94 	bl	80025da <_ZN20SoftwareMJPEGDecoder6getU16Em>
 80026b2:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80026b4:	f108 0104 	add.w	r1, r8, #4
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff ff79 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80026be:	45b1      	cmp	r9, r6
        chunkSize = getU32(currentMovieOffset + 4);
 80026c0:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80026c2:	d1de      	bne.n	8002682 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80026c4:	f108 0102 	add.w	r1, r8, #2
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff ff86 	bl	80025da <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80026ce:	42b8      	cmp	r0, r7
 80026d0:	d1d7      	bne.n	8002682 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
 80026d2:	2d00      	cmp	r5, #0
 80026d4:	d0d5      	beq.n	8002682 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 80026d6:	2001      	movs	r0, #1
 80026d8:	e004      	b.n	80026e4 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>
    frameNumber = 1;
 80026da:	2301      	movs	r3, #1
    return false;
 80026dc:	2000      	movs	r0, #0
    frameNumber = 1;
 80026de:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 80026e0:	6a23      	ldr	r3, [r4, #32]
 80026e2:	61a3      	str	r3, [r4, #24]
}
 80026e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026e8:	0802c75b 	.word	0x0802c75b
 80026ec:	0802c7a4 	.word	0x0802c7a4
 80026f0:	0802c6af 	.word	0x0802c6af

080026f4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80026f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f8:	4604      	mov	r4, r0
 80026fa:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80026fe:	468a      	mov	sl, r1
 8002700:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8002702:	6981      	ldr	r1, [r0, #24]
 8002704:	2208      	movs	r2, #8
{
 8002706:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 8002708:	f7ff ff76 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800270c:	69a7      	ldr	r7, [r4, #24]
 800270e:	4620      	mov	r0, r4
 8002710:	1d39      	adds	r1, r7, #4
 8002712:	f7ff ff4d 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002716:	f107 0108 	add.w	r1, r7, #8
 800271a:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800271c:	4606      	mov	r6, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff6a 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 8002724:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002726:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 8002728:	b933      	cbnz	r3, 8002738 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 800272a:	4b3c      	ldr	r3, [pc, #240]	; (800281c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 800272c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8002730:	4a3b      	ldr	r2, [pc, #236]	; (8002820 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 8002732:	483c      	ldr	r0, [pc, #240]	; (8002824 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 8002734:	f028 f956 	bl	802a9e4 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002738:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 800273a:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800273c:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 8002740:	f00e ff10 	bl	8011564 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 8002744:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002748:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 800274a:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 800274c:	a824      	add	r0, sp, #144	; 0x90
 800274e:	f008 fe2a 	bl	800b3a6 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002752:	4632      	mov	r2, r6
 8002754:	4639      	mov	r1, r7
 8002756:	a824      	add	r0, sp, #144	; 0x90
 8002758:	f009 fdbe 	bl	800c2d8 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 800275c:	2101      	movs	r1, #1
 800275e:	a824      	add	r0, sp, #144	; 0x90
 8002760:	f008 ff2a 	bl	800b5b8 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 8002764:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 8002766:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 8002768:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 800276c:	f008 ffc8 	bl	800b700 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 8002770:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
    while (cinfo.output_scanline < startY)
 8002774:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002776:	42b3      	cmp	r3, r6
 8002778:	d205      	bcs.n	8002786 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800277a:	2201      	movs	r2, #1
 800277c:	a901      	add	r1, sp, #4
 800277e:	a824      	add	r0, sp, #144	; 0x90
 8002780:	f009 f807 	bl	800b792 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 8002784:	e7f6      	b.n	8002774 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 8002786:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 800278a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800278e:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 8002792:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 8002794:	fb08 5506 	mla	r5, r8, r6, r5
 8002798:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 800279a:	f8ba 6002 	ldrh.w	r6, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 800279e:	f8df b088 	ldr.w	fp, [pc, #136]	; 8002828 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 80027a2:	b23f      	sxth	r7, r7
 80027a4:	429f      	cmp	r7, r3
 80027a6:	bf28      	it	cs
 80027a8:	461f      	movcs	r7, r3
 80027aa:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80027ae:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 80027b2:	441e      	add	r6, r3
 80027b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 80027b6:	b236      	sxth	r6, r6
 80027b8:	429e      	cmp	r6, r3
 80027ba:	bf28      	it	cs
 80027bc:	461e      	movcs	r6, r3
    while (cinfo.output_scanline < endY)
 80027be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80027c0:	42b3      	cmp	r3, r6
 80027c2:	d21f      	bcs.n	8002804 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80027c4:	2201      	movs	r2, #1
 80027c6:	a901      	add	r1, sp, #4
 80027c8:	a824      	add	r0, sp, #144	; 0x90
 80027ca:	f008 ffe2 	bl	800b792 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 80027ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80027d0:	4649      	mov	r1, r9
 80027d2:	4452      	add	r2, sl
 80027d4:	42b9      	cmp	r1, r7
 80027d6:	f102 0203 	add.w	r2, r2, #3
 80027da:	d211      	bcs.n	8002800 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80027dc:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 80027e0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80027e4:	00c0      	lsls	r0, r0, #3
 80027e6:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 80027ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80027ee:	4303      	orrs	r3, r0
 80027f0:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80027f4:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 80027f8:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 80027fc:	3101      	adds	r1, #1
 80027fe:	e7e9      	b.n	80027d4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 8002800:	4445      	add	r5, r8
    while (cinfo.output_scanline < endY)
 8002802:	e7dc      	b.n	80027be <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 8002804:	a824      	add	r0, sp, #144	; 0x90
 8002806:	f008 fef9 	bl	800b5fc <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 800280a:	a824      	add	r0, sp, #144	; 0x90
 800280c:	f008 fe18 	bl	800b440 <jpeg_destroy_decompress>
}
 8002810:	2001      	movs	r0, #1
 8002812:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 8002816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800281a:	bf00      	nop
 800281c:	0802c7d7 	.word	0x0802c7d7
 8002820:	0802c82d 	.word	0x0802c82d
 8002824:	0802c6af 	.word	0x0802c6af
 8002828:	fffff800 	.word	0xfffff800

0800282c <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 800282c:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800282e:	6803      	ldr	r3, [r0, #0]
 8002830:	bf38      	it	cc
 8002832:	2101      	movcc	r1, #1
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 8002836:	b570      	push	{r4, r5, r6, lr}
 8002838:	460d      	mov	r5, r1
 800283a:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 800283c:	4798      	blx	r3
 800283e:	42a8      	cmp	r0, r5
 8002840:	d204      	bcs.n	800284c <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	4620      	mov	r0, r4
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	4798      	blx	r3
 800284a:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800284c:	1e6b      	subs	r3, r5, #1
 800284e:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002850:	2210      	movs	r2, #16
 8002852:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002854:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002858:	f106 0108 	add.w	r1, r6, #8
 800285c:	f7ff fecc 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002860:	f106 0110 	add.w	r1, r6, #16
 8002864:	4620      	mov	r0, r4
 8002866:	f7ff fea3 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800286a:	6a23      	ldr	r3, [r4, #32]
 800286c:	3b04      	subs	r3, #4
 800286e:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002870:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002874:	bd70      	pop	{r4, r5, r6, pc}
	...

08002878 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 8002878:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 800287c:	2100      	movs	r1, #0
{
 800287e:	4604      	mov	r4, r0
    readData(0, 72);
 8002880:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 8002882:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002884:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 8002888:	f7ff feb6 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 800288c:	69a7      	ldr	r7, [r4, #24]
 800288e:	2304      	movs	r3, #4
 8002890:	4a63      	ldr	r2, [pc, #396]	; (8002a20 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002892:	4639      	mov	r1, r7
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff fe7b 	bl	8002590 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800289a:	b140      	cbz	r0, 80028ae <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 800289c:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800289e:	4a61      	ldr	r2, [pc, #388]	; (8002a24 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80028a0:	21f5      	movs	r1, #245	; 0xf5
        lastError = AVI_ERROR_NOT_RIFF;
 80028a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 80028a6:	4b60      	ldr	r3, [pc, #384]	; (8002a28 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80028a8:	4860      	ldr	r0, [pc, #384]	; (8002a2c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80028aa:	f028 f89b 	bl	802a9e4 <__assert_func>
    currentMovieOffset += 8;
 80028ae:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80028b2:	2304      	movs	r3, #4
 80028b4:	4a5e      	ldr	r2, [pc, #376]	; (8002a30 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80028b6:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80028b8:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80028ba:	f7ff fe69 	bl	8002590 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80028be:	b130      	cbz	r0, 80028ce <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80028c0:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80028c2:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80028c4:	21fd      	movs	r1, #253	; 0xfd
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80028c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80028cc:	e7ec      	b.n	80028a8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 80028ce:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80028d2:	2304      	movs	r3, #4
 80028d4:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80028d6:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80028d8:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80028da:	f7ff fe59 	bl	8002590 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80028de:	4606      	mov	r6, r0
 80028e0:	b138      	cbz	r0, 80028f2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80028e2:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80028e4:	4a4f      	ldr	r2, [pc, #316]	; (8002a24 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80028e6:	f44f 7182 	mov.w	r1, #260	; 0x104
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80028ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 80028ee:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80028f0:	e7da      	b.n	80028a8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80028f2:	f107 0110 	add.w	r1, r7, #16
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff fe5a 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80028fc:	4605      	mov	r5, r0
 80028fe:	b920      	cbnz	r0, 800290a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002902:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002906:	4a47      	ldr	r2, [pc, #284]	; (8002a24 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002908:	e7ce      	b.n	80028a8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 800290a:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 800290e:	2304      	movs	r3, #4
 8002910:	4a4c      	ldr	r2, [pc, #304]	; (8002a44 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002912:	4620      	mov	r0, r4
 8002914:	4641      	mov	r1, r8
 8002916:	f7ff fe3b 	bl	8002590 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800291a:	2800      	cmp	r0, #0
 800291c:	d04b      	beq.n	80029b6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800291e:	2306      	movs	r3, #6
 8002920:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 8002924:	2304      	movs	r3, #4
 8002926:	4a48      	ldr	r2, [pc, #288]	; (8002a48 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002928:	f107 0118 	add.w	r1, r7, #24
 800292c:	4620      	mov	r0, r4
 800292e:	f7ff fe2f 	bl	8002590 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002932:	2800      	cmp	r0, #0
 8002934:	d041      	beq.n	80029ba <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002936:	2307      	movs	r3, #7
 8002938:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800293c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800293e:	4f43      	ldr	r7, [pc, #268]	; (8002a4c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002940:	220c      	movs	r2, #12
 8002942:	4620      	mov	r0, r4
 8002944:	4629      	mov	r1, r5
 8002946:	f7ff fe57 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800294a:	f105 0608 	add.w	r6, r5, #8
 800294e:	2304      	movs	r3, #4
 8002950:	463a      	mov	r2, r7
 8002952:	4620      	mov	r0, r4
 8002954:	4631      	mov	r1, r6
 8002956:	f7ff fe1b 	bl	8002590 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800295a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800295e:	2800      	cmp	r0, #0
 8002960:	d04a      	beq.n	80029f8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d14a      	bne.n	80029fc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002968:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800296a:	42ab      	cmp	r3, r5
 800296c:	d84a      	bhi.n	8002a04 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800296e:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002972:	1d29      	adds	r1, r5, #4
 8002974:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002976:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002978:	9101      	str	r1, [sp, #4]
 800297a:	f7ff fe19 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800297e:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002980:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002982:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff fe13 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800298a:	4406      	add	r6, r0
    readData(listOffset, 4);
 800298c:	2204      	movs	r2, #4
 800298e:	4620      	mov	r0, r4
 8002990:	4631      	mov	r1, r6
 8002992:	f7ff fe31 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002996:	2304      	movs	r3, #4
 8002998:	4a2d      	ldr	r2, [pc, #180]	; (8002a50 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 800299a:	4631      	mov	r1, r6
 800299c:	4620      	mov	r0, r4
 800299e:	f7ff fdf7 	bl	8002590 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d139      	bne.n	8002a1a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 80029a6:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80029a8:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 80029aa:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80029ac:	69a3      	ldr	r3, [r4, #24]
 80029ae:	6223      	str	r3, [r4, #32]
}
 80029b0:	b002      	add	sp, #8
 80029b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80029b6:	2601      	movs	r6, #1
 80029b8:	e7b4      	b.n	8002924 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 80029ba:	2e00      	cmp	r6, #0
 80029bc:	d0be      	beq.n	800293c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80029be:	f107 0120 	add.w	r1, r7, #32
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff fdf4 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80029c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80029cc:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80029d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80029d4:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff fdea 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80029dc:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80029e0:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7ff fde4 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80029e8:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80029ec:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80029ee:	4620      	mov	r0, r4
 80029f0:	f7ff fdde 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80029f4:	6120      	str	r0, [r4, #16]
 80029f6:	e7a1      	b.n	800293c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0b8      	beq.n	800296e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80029fc:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80029fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002a02:	e7d5      	b.n	80029b0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff fdd3 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002a0a:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8002a0c:	220c      	movs	r2, #12
        listOffset += listSize;
 8002a0e:	4405      	add	r5, r0
        readData(listOffset, 12);
 8002a10:	4620      	mov	r0, r4
 8002a12:	4629      	mov	r1, r5
 8002a14:	f7ff fdf0 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002a18:	e797      	b.n	800294a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002a1a:	230b      	movs	r3, #11
 8002a1c:	e7ef      	b.n	80029fe <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002a1e:	bf00      	nop
 8002a20:	0802c887 	.word	0x0802c887
 8002a24:	0802c8a5 	.word	0x0802c8a5
 8002a28:	0802c88c 	.word	0x0802c88c
 8002a2c:	0802c6af 	.word	0x0802c6af
 8002a30:	0802c8d2 	.word	0x0802c8d2
 8002a34:	0802c8d7 	.word	0x0802c8d7
 8002a38:	0802c8ef 	.word	0x0802c8ef
 8002a3c:	0802c8f4 	.word	0x0802c8f4
 8002a40:	0802c90a 	.word	0x0802c90a
 8002a44:	0802c916 	.word	0x0802c916
 8002a48:	0802c91b 	.word	0x0802c91b
 8002a4c:	0802c920 	.word	0x0802c920
 8002a50:	0802c925 	.word	0x0802c925

08002a54 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002a54:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 8002a58:	2200      	movs	r2, #0
 8002a5a:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8002a5c:	f7ff bf0c 	b.w	8002878 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002a60 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002a60:	b510      	push	{r4, lr}
    movieData = 0;
 8002a62:	2300      	movs	r3, #0
{
 8002a64:	4604      	mov	r4, r0
 8002a66:	4608      	mov	r0, r1
    movieData = 0;
 8002a68:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8002a6a:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002a6c:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4798      	blx	r3
 8002a72:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002a74:	4620      	mov	r0, r4
}
 8002a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002a7a:	f7ff befd 	b.w	8002878 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002a7e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002a7e:	b4f0      	push	{r4, r5, r6, r7}
 8002a80:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002a84:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 8002a88:	b12a      	cbz	r2, 8002a96 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002a8a:	b123      	cbz	r3, 8002a96 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 8002a8c:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 8002a90:	bcf0      	pop	{r4, r5, r6, r7}
 8002a92:	f7ff bd01 	b.w	8002498 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 8002a96:	bcf0      	pop	{r4, r5, r6, r7}
 8002a98:	4770      	bx	lr
	...

08002a9c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa0:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002aa2:	6943      	ldr	r3, [r0, #20]
{
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	460f      	mov	r7, r1
 8002aa8:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002aaa:	b92b      	cbnz	r3, 8002ab8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002aae:	217a      	movs	r1, #122	; 0x7a
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002ab2:	482b      	ldr	r0, [pc, #172]	; (8002b60 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8002ab4:	f027 ff96 	bl	802a9e4 <__assert_func>
    readData(currentMovieOffset, 8);
 8002ab8:	2208      	movs	r2, #8
 8002aba:	6981      	ldr	r1, [r0, #24]
 8002abc:	f7ff fd9c 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002ac0:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f106 0a08 	add.w	sl, r6, #8
 8002ac8:	1d31      	adds	r1, r6, #4
 8002aca:	f7ff fd71 	bl	80025b0 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002ace:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ad0:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002ad4:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d231      	bcs.n	8002b3e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002ada:	4631      	mov	r1, r6
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7ff fd7c 	bl	80025da <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002ae2:	f243 0330 	movw	r3, #12336	; 0x3030
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d11d      	bne.n	8002b26 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002aea:	1cb1      	adds	r1, r6, #2
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7ff fd74 	bl	80025da <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002af2:	f246 3364 	movw	r3, #25444	; 0x6364
 8002af6:	4298      	cmp	r0, r3
 8002af8:	d115      	bne.n	8002b26 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002afa:	b1a5      	cbz	r5, 8002b26 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002afc:	462a      	mov	r2, r5
 8002afe:	4651      	mov	r1, sl
 8002b00:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8002b02:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b06:	f7ff fd77 	bl	80025f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b0c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002b0e:	462a      	mov	r2, r5
 8002b10:	4620      	mov	r0, r4
 8002b12:	f8cd 8000 	str.w	r8, [sp]
 8002b16:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	f7ff ffaf 	bl	8002a7e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002b20:	6963      	ldr	r3, [r4, #20]
 8002b22:	3301      	adds	r3, #1
 8002b24:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002b26:	69a3      	ldr	r3, [r4, #24]
 8002b28:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8002b2a:	b18d      	cbz	r5, 8002b50 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
          currentMovieOffset += 8;
 8002b2c:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002b2e:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002b30:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002b32:	3301      	adds	r3, #1
 8002b34:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002b38:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002b3a:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002b3c:	d10a      	bne.n	8002b54 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8002b3e:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8002b40:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8002b42:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8002b44:	61a3      	str	r3, [r4, #24]
}
 8002b46:	f080 0001 	eor.w	r0, r0, #1
 8002b4a:	b004      	add	sp, #16
 8002b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          currentMovieOffset += 8;
 8002b50:	3308      	adds	r3, #8
 8002b52:	e7eb      	b.n	8002b2c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8002b54:	2000      	movs	r0, #0
 8002b56:	e7f6      	b.n	8002b46 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002b58:	0802c75b 	.word	0x0802c75b
 8002b5c:	0802c92a 	.word	0x0802c92a
 8002b60:	0802c6af 	.word	0x0802c6af

08002b64 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002b64:	2001      	movs	r0, #1
 8002b66:	4770      	bx	lr

08002b68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002b68:	200c      	movs	r0, #12
 8002b6a:	4770      	bx	lr

08002b6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002b6c:	230c      	movs	r3, #12
 8002b6e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b72:	3008      	adds	r0, #8
 8002b74:	4770      	bx	lr

08002b76 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002b76:	230c      	movs	r3, #12
 8002b78:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b7c:	3008      	adds	r0, #8
 8002b7e:	4770      	bx	lr

08002b80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002b80:	2001      	movs	r0, #1
 8002b82:	4770      	bx	lr

08002b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002b84:	f640 7024 	movw	r0, #3876	; 0xf24
 8002b88:	4770      	bx	lr

08002b8a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002b8a:	f640 7324 	movw	r3, #3876	; 0xf24
 8002b8e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b92:	3008      	adds	r0, #8
 8002b94:	4770      	bx	lr

08002b96 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002b96:	f640 7324 	movw	r3, #3876	; 0xf24
 8002b9a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b9e:	3008      	adds	r0, #8
 8002ba0:	4770      	bx	lr

08002ba2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	4770      	bx	lr

08002ba6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002ba6:	2010      	movs	r0, #16
 8002ba8:	4770      	bx	lr

08002baa <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002baa:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002bae:	3008      	adds	r0, #8
 8002bb0:	4770      	bx	lr

08002bb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002bb2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002bb6:	3008      	adds	r0, #8
 8002bb8:	4770      	bx	lr

08002bba <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen2ScreenNoTransition();
 8002bba:	4608      	mov	r0, r1
 8002bbc:	f000 be38 	b.w	8003830 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>

08002bc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002bc2:	b510      	push	{r4, lr}
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	6003      	str	r3, [r0, #0]
 8002bc8:	f015 fd18 	bl	80185fc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002bcc:	4620      	mov	r0, r4
 8002bce:	bd10      	pop	{r4, pc}
 8002bd0:	0802ca38 	.word	0x0802ca38

08002bd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	f7ff fff2 	bl	8002bc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002bdc:	2114      	movs	r1, #20
 8002bde:	4620      	mov	r0, r4
 8002be0:	f027 fed1 	bl	802a986 <_ZdlPvj>
 8002be4:	4620      	mov	r0, r4
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002bea:	b510      	push	{r4, lr}
 8002bec:	4604      	mov	r4, r0
 8002bee:	6003      	str	r3, [r0, #0]
 8002bf0:	f015 fd04 	bl	80185fc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	bd10      	pop	{r4, pc}
 8002bf8:	0802ca04 	.word	0x0802ca04

08002bfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	4604      	mov	r4, r0
 8002c00:	f7ff fff2 	bl	8002be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c04:	f640 712c 	movw	r1, #3884	; 0xf2c
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f027 febc 	bl	802a986 <_ZdlPvj>
 8002c0e:	4620      	mov	r0, r4
 8002c10:	bd10      	pop	{r4, pc}
	...

08002c14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002c16:	b510      	push	{r4, lr}
 8002c18:	4604      	mov	r4, r0
 8002c1a:	6003      	str	r3, [r0, #0]
 8002c1c:	f015 fcee 	bl	80185fc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002c20:	4620      	mov	r0, r4
 8002c22:	bd10      	pop	{r4, pc}
 8002c24:	0802c9d0 	.word	0x0802c9d0

08002c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	f7ff fff2 	bl	8002c14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c30:	2118      	movs	r1, #24
 8002c32:	4620      	mov	r0, r4
 8002c34:	f027 fea7 	bl	802a986 <_ZdlPvj>
 8002c38:	4620      	mov	r0, r4
 8002c3a:	bd10      	pop	{r4, pc}

08002c3c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <_ZN12FrontendHeapD1Ev+0x24>)
 8002c3e:	b510      	push	{r4, lr}
 8002c40:	4604      	mov	r4, r0
 8002c42:	6003      	str	r3, [r0, #0]
 8002c44:	f600 7058 	addw	r0, r0, #3928	; 0xf58
 8002c48:	f7ff ffba 	bl	8002bc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002c50:	f7ff ffca 	bl	8002be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c54:	f104 0014 	add.w	r0, r4, #20
 8002c58:	f7ff ffdc 	bl	8002c14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	bd10      	pop	{r4, pc}
 8002c60:	0802ca6c 	.word	0x0802ca6c

08002c64 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002c64:	b508      	push	{r3, lr}
 8002c66:	4802      	ldr	r0, [pc, #8]	; (8002c70 <__tcf_0+0xc>)
 8002c68:	f7ff ffe8 	bl	8002c3c <_ZN12FrontendHeapD1Ev>
 8002c6c:	bd08      	pop	{r3, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000418 	.word	0x20000418

08002c74 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002c74:	b510      	push	{r4, lr}
 8002c76:	4604      	mov	r4, r0
 8002c78:	f7ff ffe0 	bl	8002c3c <_ZN12FrontendHeapD1Ev>
 8002c7c:	f241 01cc 	movw	r1, #4300	; 0x10cc
 8002c80:	4620      	mov	r0, r4
 8002c82:	f027 fe80 	bl	802a986 <_ZdlPvj>
 8002c86:	4620      	mov	r0, r4
 8002c88:	bd10      	pop	{r4, pc}
	...

08002c8c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002c8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002c90:	f000 fc5a 	bl	8003548 <_ZN14BitmapDatabase11getInstanceEv>
 8002c94:	2400      	movs	r4, #0
 8002c96:	4605      	mov	r5, r0
 8002c98:	f000 fc5a 	bl	8003550 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002c9c:	4623      	mov	r3, r4
 8002c9e:	4601      	mov	r1, r0
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	9400      	str	r4, [sp, #0]
 8002ca6:	f01c f877 	bl	801ed98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002caa:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <touchgfx_init+0xb4>)
 8002cac:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002cae:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002cb0:	4d25      	ldr	r5, [pc, #148]	; (8002d48 <touchgfx_init+0xbc>)
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f002 fa16 	bl	80050e4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002cb8:	4824      	ldr	r0, [pc, #144]	; (8002d4c <touchgfx_init+0xc0>)
 8002cba:	f01b ffd5 	bl	801ec68 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002cbe:	782b      	ldrb	r3, [r5, #0]
 8002cc0:	f3bf 8f5b 	dmb	ish
 8002cc4:	07db      	lsls	r3, r3, #31
 8002cc6:	d435      	bmi.n	8002d34 <touchgfx_init+0xa8>
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f027 fe5e 	bl	802a98a <__cxa_guard_acquire>
 8002cce:	b388      	cbz	r0, 8002d34 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002cd0:	4c1f      	ldr	r4, [pc, #124]	; (8002d50 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <touchgfx_init+0xc8>)
 8002cd4:	f504 6677 	add.w	r6, r4, #3952	; 0xf70
 8002cd8:	f104 0014 	add.w	r0, r4, #20
 8002cdc:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002ce0:	f604 7758 	addw	r7, r4, #3928	; 0xf58
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	6060      	str	r0, [r4, #4]
 8002ce8:	f8c4 8008 	str.w	r8, [r4, #8]
 8002cec:	60e7      	str	r7, [r4, #12]
 8002cee:	6126      	str	r6, [r4, #16]
 8002cf0:	f015 fc86 	bl	8018600 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <touchgfx_init+0xcc>)
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	6163      	str	r3, [r4, #20]
 8002cfa:	f015 fc81 	bl	8018600 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <touchgfx_init+0xd0>)
 8002d00:	4638      	mov	r0, r7
 8002d02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d04:	f015 fc7c 	bl	8018600 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <touchgfx_init+0xd4>)
 8002d0a:	f604 706c 	addw	r0, r4, #3948	; 0xf6c
 8002d0e:	f8c4 3f58 	str.w	r3, [r4, #3928]	; 0xf58
 8002d12:	f002 fa63 	bl	80051dc <_ZN5ModelC1Ev>
 8002d16:	4622      	mov	r2, r4
 8002d18:	f604 716c 	addw	r1, r4, #3948	; 0xf6c
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	f002 fa53 	bl	80051c8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 fd84 	bl	8003830 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002d28:	480e      	ldr	r0, [pc, #56]	; (8002d64 <touchgfx_init+0xd8>)
 8002d2a:	f027 fe79 	bl	802aa20 <atexit>
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f027 fe37 	bl	802a9a2 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <touchgfx_init+0xdc>)
}
 8002d36:	b002      	add	sp, #8
 8002d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002d3c:	f7ff b8a2 	b.w	8001e84 <_ZN11TouchGFXHAL10initializeEv>
 8002d40:	20016018 	.word	0x20016018
 8002d44:	20002304 	.word	0x20002304
 8002d48:	20000414 	.word	0x20000414
 8002d4c:	20000008 	.word	0x20000008
 8002d50:	20000418 	.word	0x20000418
 8002d54:	0802ca6c 	.word	0x0802ca6c
 8002d58:	0802c9d0 	.word	0x0802c9d0
 8002d5c:	0802ca04 	.word	0x0802ca04
 8002d60:	0802ca38 	.word	0x0802ca38
 8002d64:	08002c65 	.word	0x08002c65
 8002d68:	20002288 	.word	0x20002288

08002d6c <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8002d6c:	4770      	bx	lr
	...

08002d70 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002d70:	4801      	ldr	r0, [pc, #4]	; (8002d78 <touchgfx_taskEntry+0x8>)
 8002d72:	f015 bf56 	b.w	8018c22 <_ZN8touchgfx3HAL9taskEntryEv>
 8002d76:	bf00      	nop
 8002d78:	20002288 	.word	0x20002288

08002d7c <_GLOBAL__sub_I_touchgfx_init>:
}
 8002d7c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002d7e:	4e23      	ldr	r6, [pc, #140]	; (8002e0c <_GLOBAL__sub_I_touchgfx_init+0x90>)
{
public:

    STM32TouchController() {}
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002d82:	4c24      	ldr	r4, [pc, #144]	; (8002e14 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002d84:	4630      	mov	r0, r6
static LCD16bpp display;
 8002d86:	4d24      	ldr	r5, [pc, #144]	; (8002e18 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002d88:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002d8a:	f7ff fa1b 	bl	80021c4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f01f f90e 	bl	8021fb0 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002d94:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002d9c:	4820      	ldr	r0, [pc, #128]	; (8002e20 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002d9e:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002da0:	661a      	str	r2, [r3, #96]	; 0x60
 8002da2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002da6:	671a      	str	r2, [r3, #112]	; 0x70
 8002da8:	60dc      	str	r4, [r3, #12]
 8002daa:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002dae:	491d      	ldr	r1, [pc, #116]	; (8002e24 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002db0:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002db4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002db8:	6759      	str	r1, [r3, #116]	; 0x74
 8002dba:	2101      	movs	r1, #1
 8002dbc:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002dc0:	4919      	ldr	r1, [pc, #100]	; (8002e28 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002dc2:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002dc4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002dc8:	8001      	strh	r1, [r0, #0]
 8002dca:	4818      	ldr	r0, [pc, #96]	; (8002e2c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002dcc:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002dce:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002dd2:	4817      	ldr	r0, [pc, #92]	; (8002e30 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002dd4:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002dd8:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002ddc:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002de0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8002de4:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002de8:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002dec:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002df0:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002df4:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002df8:	8001      	strh	r1, [r0, #0]
 8002dfa:	480e      	ldr	r0, [pc, #56]	; (8002e34 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002e00:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002e02:	490d      	ldr	r1, [pc, #52]	; (8002e38 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002e04:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002e06:	4a0d      	ldr	r2, [pc, #52]	; (8002e3c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002e08:	601a      	str	r2, [r3, #0]
}
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
 8002e0c:	200014e8 	.word	0x200014e8
 8002e10:	0802c14c 	.word	0x0802c14c
 8002e14:	200014e4 	.word	0x200014e4
 8002e18:	20002308 	.word	0x20002308
 8002e1c:	20002288 	.word	0x20002288
 8002e20:	20015fb0 	.word	0x20015fb0
 8002e24:	01000001 	.word	0x01000001
 8002e28:	20015fbc 	.word	0x20015fbc
 8002e2c:	20015fb6 	.word	0x20015fb6
 8002e30:	20015fb2 	.word	0x20015fb2
 8002e34:	20015fb8 	.word	0x20015fb8
 8002e38:	20015fb4 	.word	0x20015fb4
 8002e3c:	0802c2d8 	.word	0x0802c2d8

08002e40 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002e40:	4801      	ldr	r0, [pc, #4]	; (8002e48 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002e42:	f7ff b99b 	b.w	800217c <_ZN8STM32DMAD1Ev>
 8002e46:	bf00      	nop
 8002e48:	200014e8 	.word	0x200014e8

08002e4c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	4770      	bx	lr

08002e50 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002e50:	8081      	strh	r1, [r0, #4]
    }
 8002e52:	4770      	bx	lr

08002e54 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002e54:	80c1      	strh	r1, [r0, #6]
    }
 8002e56:	4770      	bx	lr

08002e58 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002e58:	8101      	strh	r1, [r0, #8]
    }
 8002e5a:	4770      	bx	lr

08002e5c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002e5c:	8141      	strh	r1, [r0, #10]
    }
 8002e5e:	4770      	bx	lr

08002e60 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002e60:	4770      	bx	lr

08002e62 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002e62:	4770      	bx	lr

08002e64 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002e64:	4770      	bx	lr

08002e66 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002e66:	4770      	bx	lr

08002e68 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002e68:	4770      	bx	lr

08002e6a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002e6a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002e6c:	88c4      	ldrh	r4, [r0, #6]
 8002e6e:	6803      	ldr	r3, [r0, #0]
 8002e70:	1b12      	subs	r2, r2, r4
 8002e72:	8884      	ldrh	r4, [r0, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	1b09      	subs	r1, r1, r4
 8002e78:	b212      	sxth	r2, r2
    }
 8002e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002e7e:	b209      	sxth	r1, r1
 8002e80:	4718      	bx	r3

08002e82 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e86:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002e8e:	6813      	ldr	r3, [r2, #0]
 8002e90:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002e92:	6010      	str	r0, [r2, #0]
    }
 8002e94:	4770      	bx	lr

08002e96 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002e96:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002e9a:	b11a      	cbz	r2, 8002ea4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002e9c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002ea0:	b102      	cbz	r2, 8002ea4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002ea2:	6018      	str	r0, [r3, #0]
        }
    }
 8002ea4:	4770      	bx	lr
	...

08002ea8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002eaa:	2290      	movs	r2, #144	; 0x90
 8002eac:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002eb0:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000e100 	.word	0xe000e100

08002ebc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002ebc:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002ebe:	490a      	ldr	r1, [pc, #40]	; (8002ee8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002ec0:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002ec2:	480a      	ldr	r0, [pc, #40]	; (8002eec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002ece:	6911      	ldr	r1, [r2, #16]
 8002ed0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002ed4:	3901      	subs	r1, #1
 8002ed6:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002eda:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002ee2:	4770      	bx	lr
 8002ee4:	40016800 	.word	0x40016800
 8002ee8:	20002384 	.word	0x20002384
 8002eec:	20002382 	.word	0x20002382

08002ef0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002ef0:	4b01      	ldr	r3, [pc, #4]	; (8002ef8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002ef2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002ef6:	4770      	bx	lr
 8002ef8:	40016800 	.word	0x40016800

08002efc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002efe:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002f00:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f06:	4770      	bx	lr
 8002f08:	40016800 	.word	0x40016800

08002f0c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002f0c:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002f0e:	6953      	ldr	r3, [r2, #20]
 8002f10:	03db      	lsls	r3, r3, #15
{
 8002f12:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002f14:	d51e      	bpl.n	8002f54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002f1c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002f20:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002f24:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002f28:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002f2c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002f30:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002f32:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002f36:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002f38:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002f3c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002f3e:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002f42:	d2f9      	bcs.n	8002f38 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002f44:	3b20      	subs	r3, #32
 8002f46:	f113 0f20 	cmn.w	r3, #32
 8002f4a:	d1f2      	bne.n	8002f32 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002f4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f50:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002f5c:	4770      	bx	lr

08002f5e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002f5e:	2338      	movs	r3, #56	; 0x38
 8002f60:	fb01 3103 	mla	r1, r1, r3, r3
 8002f64:	2300      	movs	r3, #0
 8002f66:	5443      	strb	r3, [r0, r1]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002f68:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002f6c:	b90b      	cbnz	r3, 8002f72 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002f6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f70:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002f72:	4770      	bx	lr

08002f74 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002f74:	4770      	bx	lr

08002f76 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002f76:	b510      	push	{r4, lr}
 8002f78:	4604      	mov	r4, r0
 8002f7a:	2158      	movs	r1, #88	; 0x58
 8002f7c:	f027 fd03 	bl	802a986 <_ZdlPvj>
 8002f80:	4620      	mov	r0, r4
 8002f82:	bd10      	pop	{r4, pc}

08002f84 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4604      	mov	r4, r0
    HAL::initialize();
 8002f88:	f015 fe37 	bl	8018bfa <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002f90:	f018 fee6 	bl	801bd60 <_ZN8touchgfx11Application11getInstanceEv>
 8002f94:	4601      	mov	r1, r0
 8002f96:	4620      	mov	r0, r4
 8002f98:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002faa:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002fae:	4a06      	ldr	r2, [pc, #24]	; (8002fc8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002fb0:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002fb2:	4a06      	ldr	r2, [pc, #24]	; (8002fcc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002fb6:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002fb8:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
 8002fc0:	c007f800 	.word	0xc007f800
 8002fc4:	20002b50 	.word	0x20002b50
 8002fc8:	20002b08 	.word	0x20002b08
 8002fcc:	c00bf400 	.word	0xc00bf400

08002fd0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002fd0:	f015 bdfa 	b.w	8018bc8 <_ZN8touchgfx3HAL10beginFrameEv>

08002fd4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002fd4:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8002fd8:	b113      	cbz	r3, 8002fe0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002fda:	4b02      	ldr	r3, [pc, #8]	; (8002fe4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002fe0:	f015 bdfe 	b.w	8018be0 <_ZN8touchgfx3HAL8endFrameEv>
 8002fe4:	20002380 	.word	0x20002380

08002fe8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 8002fe8:	f015 bdb8 	b.w	8018b5c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002fec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002fec:	f015 bf21 	b.w	8018e32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002ff0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002ff0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002ff4:	b112      	cbz	r2, 8002ffc <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002ff6:	6803      	ldr	r3, [r0, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	4718      	bx	r3
    }
 8002ffc:	4770      	bx	lr
	...

08003000 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 8003000:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8003002:	b131      	cbz	r1, 8003012 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8003006:	f240 1197 	movw	r1, #407	; 0x197
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 800300c:	4804      	ldr	r0, [pc, #16]	; (8003020 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 800300e:	f027 fce9 	bl	802a9e4 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8003012:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8003016:	bd08      	pop	{r3, pc}
 8003018:	0802ca78 	.word	0x0802ca78
 800301c:	0802ca8c 	.word	0x0802ca8c
 8003020:	0802cc19 	.word	0x0802cc19

08003024 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003024:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003026:	b131      	cbz	r1, 8003036 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800302a:	f240 1191 	movw	r1, #401	; 0x191
 800302e:	4a06      	ldr	r2, [pc, #24]	; (8003048 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003030:	4806      	ldr	r0, [pc, #24]	; (800304c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003032:	f027 fcd7 	bl	802a9e4 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003036:	6840      	ldr	r0, [r0, #4]
 8003038:	4611      	mov	r1, r2
 800303a:	6803      	ldr	r3, [r0, #0]
    }
 800303c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4718      	bx	r3
 8003044:	0802ca78 	.word	0x0802ca78
 8003048:	0802cc5b 	.word	0x0802cc5b
 800304c:	0802cc19 	.word	0x0802cc19

08003050 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003050:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003052:	b129      	cbz	r1, 8003060 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8003056:	217a      	movs	r1, #122	; 0x7a
 8003058:	4a03      	ldr	r2, [pc, #12]	; (8003068 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 800305a:	4804      	ldr	r0, [pc, #16]	; (800306c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 800305c:	f027 fcc2 	bl	802a9e4 <__assert_func>
    }
 8003060:	6900      	ldr	r0, [r0, #16]
 8003062:	bd08      	pop	{r3, pc}
 8003064:	0802ca78 	.word	0x0802ca78
 8003068:	0802ce0c 	.word	0x0802ce0c
 800306c:	0802cc19 	.word	0x0802cc19

08003070 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003070:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003072:	b129      	cbz	r1, 8003080 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8003076:	2183      	movs	r1, #131	; 0x83
 8003078:	4a05      	ldr	r2, [pc, #20]	; (8003090 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 800307a:	4806      	ldr	r0, [pc, #24]	; (8003094 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 800307c:	f027 fcb2 	bl	802a9e4 <__assert_func>
        stream.tickCount = 0;
 8003080:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8003082:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8003084:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003088:	bd08      	pop	{r3, pc}
 800308a:	bf00      	nop
 800308c:	0802ca78 	.word	0x0802ca78
 8003090:	0802cfc4 	.word	0x0802cfc4
 8003094:	0802cc19 	.word	0x0802cc19

08003098 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003098:	b510      	push	{r4, lr}
 800309a:	4604      	mov	r4, r0
        assert(handle < no_streams);
 800309c:	b129      	cbz	r1, 80030aa <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 80030a0:	21a4      	movs	r1, #164	; 0xa4
 80030a2:	4a27      	ldr	r2, [pc, #156]	; (8003140 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 80030a4:	4827      	ldr	r0, [pc, #156]	; (8003144 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 80030a6:	f027 fc9d 	bl	802a9e4 <__assert_func>
        switch (cmd)
 80030aa:	2a05      	cmp	r2, #5
 80030ac:	d834      	bhi.n	8003118 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 80030ae:	e8df f002 	tbb	[pc, r2]
 80030b2:	2903      	.short	0x2903
 80030b4:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 80030b8:	6840      	ldr	r0, [r0, #4]
 80030ba:	6803      	ldr	r3, [r0, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	4798      	blx	r3
 80030c0:	b350      	cbz	r0, 8003118 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 80030c2:	f04f 31ff 	mov.w	r1, #4294967295
 80030c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030c8:	f005 fefc 	bl	8008ec4 <osMutexAcquire>
                stream.cancelDecoding = false;
 80030cc:	2300      	movs	r3, #0
                stream.isPlaying = true;
 80030ce:	2201      	movs	r2, #1
                if(stream.isStopped)
 80030d0:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 80030d4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 80030d8:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 80030dc:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 80030de:	6163      	str	r3, [r4, #20]
                if(stream.isStopped)
 80030e0:	b101      	cbz	r1, 80030e4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 80030e2:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 80030e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 80030e8:	6263      	str	r3, [r4, #36]	; 0x24
                if(stream.nextBuffer == 0)
 80030ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030ec:	b92b      	cbnz	r3, 80030fa <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 80030ee:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 80030f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 80030f2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 80030f6:	f005 ffcf 	bl	8009098 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 80030fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 80030fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 8003100:	f005 bf10 	b.w	8008f24 <osMutexRelease>
            stream.isPlaying = false;
 8003104:	2300      	movs	r3, #0
 8003106:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 800310a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 800310e:	e003      	b.n	8003118 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 8003110:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8003116:	6143      	str	r3, [r0, #20]
    }
 8003118:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 800311a:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8003120:	6143      	str	r3, [r0, #20]
 8003122:	e7f2      	b.n	800310a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 8003124:	2300      	movs	r3, #0
 8003126:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 800312a:	2301      	movs	r3, #1
 800312c:	e7ed      	b.n	800310a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 800312e:	3b00      	subs	r3, #0
 8003130:	bf18      	it	ne
 8003132:	2301      	movne	r3, #1
 8003134:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 8003138:	e7ee      	b.n	8003118 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 800313a:	bf00      	nop
 800313c:	0802ca78 	.word	0x0802ca78
 8003140:	0802d183 	.word	0x0802d183
 8003144:	0802cc19 	.word	0x0802cc19

08003148 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	4604      	mov	r4, r0
 800314c:	4616      	mov	r6, r2
        assert(handle < no_streams);
 800314e:	b129      	cbz	r1, 800315c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003150:	4b31      	ldr	r3, [pc, #196]	; (8003218 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 8003152:	21e7      	movs	r1, #231	; 0xe7
 8003154:	4a31      	ldr	r2, [pc, #196]	; (800321c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 8003156:	4832      	ldr	r0, [pc, #200]	; (8003220 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8003158:	f027 fc44 	bl	802a9e4 <__assert_func>
        if (stream.isPlaying)
 800315c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003160:	b133      	cbz	r3, 8003170 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003162:	4b30      	ldr	r3, [pc, #192]	; (8003224 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 800316a:	6943      	ldr	r3, [r0, #20]
 800316c:	4413      	add	r3, r2
 800316e:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8003170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d04d      	beq.n	8003212 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003176:	69e1      	ldr	r1, [r4, #28]
 8003178:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800317c:	4353      	muls	r3, r2
 800317e:	68a2      	ldr	r2, [r4, #8]
 8003180:	434a      	muls	r2, r1
 8003182:	4293      	cmp	r3, r2
 8003184:	d220      	bcs.n	80031c8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8003186:	6a23      	ldr	r3, [r4, #32]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d042      	beq.n	8003212 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 800318c:	f04f 31ff 	mov.w	r1, #4294967295
 8003190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003192:	f005 fe97 	bl	8008ec4 <osMutexAcquire>
            if(stream.seek_to_frame > 0)
 8003196:	6a23      	ldr	r3, [r4, #32]
 8003198:	b10b      	cbz	r3, 800319e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(stream.nextBuffer != 0)
 800319e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031a0:	b9fb      	cbnz	r3, 80031e2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 80031a2:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 80031a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031a6:	f005 febd 	bl	8008f24 <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 80031aa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80031ae:	b90b      	cbnz	r3, 80031b4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 80031b0:	6a23      	ldr	r3, [r4, #32]
 80031b2:	b13b      	cbz	r3, 80031c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 80031b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031b6:	b92b      	cbnz	r3, 80031c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 80031b8:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 80031ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 80031bc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 80031c0:	f005 ff6a 	bl	8009098 <osSemaphoreRelease>
    }
 80031c4:	4628      	mov	r0, r5
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 80031c8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 80031cc:	2800      	cmp	r0, #0
 80031ce:	d0dd      	beq.n	800318c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 80031d6:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 80031d8:	bf98      	it	ls
 80031da:	f102 32ff 	addls.w	r2, r2, #4294967295
 80031de:	6262      	str	r2, [r4, #36]	; 0x24
 80031e0:	e7d4      	b.n	800318c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 80031e2:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 80031e4:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 80031e8:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 80031ea:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 80031ec:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 80031ee:	68e2      	ldr	r2, [r4, #12]
 80031f0:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 80031f2:	68a2      	ldr	r2, [r4, #8]
 80031f4:	3201      	adds	r2, #1
 80031f6:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80031f8:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 80031fa:	6833      	ldr	r3, [r6, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 8003200:	2d00      	cmp	r5, #0
 8003202:	d1ce      	bne.n	80031a2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 8003204:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1cb      	bne.n	80031a4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 800320c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8003210:	e7c8      	b.n	80031a4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 8003212:	2501      	movs	r5, #1
 8003214:	e7c9      	b.n	80031aa <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 8003216:	bf00      	nop
 8003218:	0802ca78 	.word	0x0802ca78
 800321c:	0802d35a 	.word	0x0802d35a
 8003220:	0802cc19 	.word	0x0802cc19
 8003224:	20015fbc 	.word	0x20015fbc

08003228 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800322a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003234:	609a      	str	r2, [r3, #8]
}
 8003236:	4770      	bx	lr
 8003238:	e000e100 	.word	0xe000e100

0800323c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800323e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003246:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003256:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800325a:	f3bf 8f6f 	isb	sy
}
 800325e:	4770      	bx	lr
 8003260:	e000e100 	.word	0xe000e100

08003264 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003264:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003266:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800326a:	bb3b      	cbnz	r3, 80032bc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x58>
        streams[handle].isActive = true;
 800326c:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 800326e:	6083      	str	r3, [r0, #8]
 8003270:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 8003272:	6382      	str	r2, [r0, #56]	; 0x38
                streams[i] = Stream();
 8003274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003278:	6143      	str	r3, [r0, #20]
 800327a:	8782      	strh	r2, [r0, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 800327c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003280:	6183      	str	r3, [r0, #24]
 8003282:	61c3      	str	r3, [r0, #28]
 8003284:	6203      	str	r3, [r0, #32]
 8003286:	6243      	str	r3, [r0, #36]	; 0x24
 8003288:	6283      	str	r3, [r0, #40]	; 0x28
 800328a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800328c:	6303      	str	r3, [r0, #48]	; 0x30
 800328e:	6343      	str	r3, [r0, #52]	; 0x34
 8003290:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003294:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8003296:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 800329a:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 800329e:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 80032a0:	630b      	str	r3, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80032a2:	6c82      	ldr	r2, [r0, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 80032a4:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80032a6:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 80032aa:	e9d0 1510 	ldrd	r1, r5, [r0, #64]	; 0x40
 80032ae:	4429      	add	r1, r5
 80032b0:	428c      	cmp	r4, r1
 80032b2:	d90a      	bls.n	80032ca <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x66>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 80032b6:	2158      	movs	r1, #88	; 0x58
 80032b8:	4a08      	ldr	r2, [pc, #32]	; (80032dc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80032ba:	e003      	b.n	80032c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x60>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 80032be:	f240 11f5 	movw	r1, #501	; 0x1f5
 80032c2:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 80032c4:	4808      	ldr	r0, [pc, #32]	; (80032e8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 80032c6:	f027 fb8d 	bl	802a9e4 <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 80032ca:	6302      	str	r2, [r0, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 80032cc:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 80032d0:	6484      	str	r4, [r0, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 80032d2:	6342      	str	r2, [r0, #52]	; 0x34
    }
 80032d4:	4618      	mov	r0, r3
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	0802d6b8 	.word	0x0802d6b8
 80032dc:	0802d6f8 	.word	0x0802d6f8
 80032e0:	0802d4fe 	.word	0x0802d4fe
 80032e4:	0802d52e 	.word	0x0802d52e
 80032e8:	0802cc19 	.word	0x0802cc19

080032ec <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80032ec:	b510      	push	{r4, lr}
        return instance;
 80032ee:	4c14      	ldr	r4, [pc, #80]	; (8003340 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	b323      	cbz	r3, 800333e <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_LTDC_LineEventCallback+0x58>)
 80032f6:	4a14      	ldr	r2, [pc, #80]	; (8003348 <HAL_LTDC_LineEventCallback+0x5c>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	8811      	ldrh	r1, [r2, #0]
 80032fc:	428b      	cmp	r3, r1
 80032fe:	d113      	bne.n	8003328 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_LTDC_LineEventCallback+0x60>)
 8003302:	8819      	ldrh	r1, [r3, #0]
 8003304:	f004 f9d0 	bl	80076a8 <HAL_LTDC_ProgramLineEvent>
 8003308:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800330a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800330e:	3301      	adds	r3, #1
 8003310:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8003314:	f7fe fee2 	bl	80020dc <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003318:	6820      	ldr	r0, [r4, #0]
 800331a:	f016 f9c1 	bl	80196a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800331e:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8003320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8003324:	f7fe bcde 	b.w	8001ce4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003328:	f004 f9be 	bl	80076a8 <HAL_LTDC_ProgramLineEvent>
        return instance;
 800332c:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800332e:	6803      	ldr	r3, [r0, #0]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003334:	2000      	movs	r0, #0
    }
 8003336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800333a:	f7fe bd03 	b.w	8001d44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800333e:	bd10      	pop	{r4, pc}
 8003340:	20015fbc 	.word	0x20015fbc
 8003344:	40016800 	.word	0x40016800
 8003348:	20002384 	.word	0x20002384
 800334c:	20002382 	.word	0x20002382

08003350 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003354:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003356:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 800335a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 800335e:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 8003362:	b91b      	cbnz	r3, 800336c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x1c>
                SEM_WAIT(semDecode);
 8003364:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003366:	f005 fe5d 	bl	8009024 <osSemaphoreAcquire>
                continue;
 800336a:	e7f6      	b.n	800335a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
            MUTEX_LOCK(mutexBuffers);
 800336c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800336e:	f005 fda9 	bl	8008ec4 <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003372:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if (stream.seek_to_frame > 0)
 8003376:	6a26      	ldr	r6, [r4, #32]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003378:	42bb      	cmp	r3, r7
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 800337a:	6865      	ldr	r5, [r4, #4]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 800337c:	bf08      	it	eq
 800337e:	6b67      	ldreq	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 8003380:	b336      	cbz	r6, 80033d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                decoder->gotoFrame(stream.seek_to_frame);
 8003382:	682b      	ldr	r3, [r5, #0]
 8003384:	4631      	mov	r1, r6
 8003386:	4628      	mov	r0, r5
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	4798      	blx	r3
                stream.seek_to_frame = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 8003390:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003394:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003396:	f005 fdc5 	bl	8008f24 <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80033a0:	4639      	mov	r1, r7
 80033a2:	f8cd 8000 	str.w	r8, [sp]
 80033a6:	4628      	mov	r0, r5
 80033a8:	695e      	ldr	r6, [r3, #20]
 80033aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80033ae:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 80033b4:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 80033b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033b8:	f005 fd84 	bl	8008ec4 <osMutexAcquire>
            if (stream.cancelDecoding)
 80033bc:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80033c0:	b1c3      	cbz	r3, 80033f4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                stream.cancelDecoding = false;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 80033c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033ca:	f005 fdab 	bl	8008f24 <osMutexRelease>
 80033ce:	e7c4      	b.n	800335a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 80033d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0de      	beq.n	8003394 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80033d6:	682b      	ldr	r3, [r5, #0]
 80033d8:	4628      	mov	r0, r5
 80033da:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 80033de:	4798      	blx	r3
 80033e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033e2:	4401      	add	r1, r0
 80033e4:	4628      	mov	r0, r5
 80033e6:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 80033e8:	68a3      	ldr	r3, [r4, #8]
 80033ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 80033ec:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 80033ee:	4413      	add	r3, r2
 80033f0:	60a3      	str	r3, [r4, #8]
 80033f2:	e7cf      	b.n	8003394 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                stream.nextBuffer = decodeBuffer;
 80033f4:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 80033f6:	b15e      	cbz	r6, 8003410 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	4628      	mov	r0, r5
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	4798      	blx	r3
 8003400:	3801      	subs	r0, #1
 8003402:	60e0      	str	r0, [r4, #12]
                stream.doDecodeNewFrame = false;
 8003404:	2300      	movs	r3, #0
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 8003406:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 800340a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800340e:	e7db      	b.n	80033c8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    stream.frameNumberNext = 1;
 8003410:	2301      	movs	r3, #1
 8003412:	60e3      	str	r3, [r4, #12]
 8003414:	e7f6      	b.n	8003404 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

08003418 <videoTaskFunc>:
    videoController.decoderTaskEntry();
 8003418:	4801      	ldr	r0, [pc, #4]	; (8003420 <videoTaskFunc+0x8>)
{
 800341a:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 800341c:	f7ff ff98 	bl	8003350 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8003420:	20002b50 	.word	0x20002b50

08003424 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 8003424:	6803      	ldr	r3, [r0, #0]
 8003426:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 800342c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800342e:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 8003430:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 8003432:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800343a:	f005 fd43 	bl	8008ec4 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 800343e:	2138      	movs	r1, #56	; 0x38
 8003440:	fb01 4305 	mla	r3, r1, r5, r4
 8003444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003446:	b10a      	cbz	r2, 800344c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 8003448:	2200      	movs	r2, #0
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c
 800344c:	fb01 4505 	mla	r5, r1, r5, r4
        }
        stream.cancelDecoding = true;
 8003450:	2301      	movs	r3, #1
 8003452:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 8003456:	2300      	movs	r3, #0
 8003458:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 800345c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 800345e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 8003462:	f005 bd5f 	b.w	8008f24 <osMutexRelease>

08003466 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003466:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 8003468:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 800346c:	4604      	mov	r4, r0
 800346e:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 8003470:	4611      	mov	r1, r2
 8003472:	6858      	ldr	r0, [r3, #4]
 8003474:	6803      	ldr	r3, [r0, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4798      	blx	r3
        clearState(handle);
 800347a:	4629      	mov	r1, r5
 800347c:	4620      	mov	r0, r4
 800347e:	f7ff ffd1 	bl	8003424 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003482:	bd38      	pop	{r3, r4, r5, pc}

08003484 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	460d      	mov	r5, r1
 8003488:	4611      	mov	r1, r2
 800348a:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 800348c:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003490:	6850      	ldr	r0, [r2, #4]
 8003492:	6802      	ldr	r2, [r0, #0]
 8003494:	6896      	ldr	r6, [r2, #8]
 8003496:	461a      	mov	r2, r3
 8003498:	47b0      	blx	r6
        clearState(handle);
 800349a:	4629      	mov	r1, r5
 800349c:	4620      	mov	r0, r4
 800349e:	f7ff ffc1 	bl	8003424 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 80034a2:	bd70      	pop	{r4, r5, r6, pc}

080034a4 <_GLOBAL__sub_I_lineBuffer>:
}
 80034a4:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 80034a6:	4916      	ldr	r1, [pc, #88]	; (8003500 <_GLOBAL__sub_I_lineBuffer+0x5c>)
          semDecode(0), mutexBuffers(0)
 80034a8:	2500      	movs	r5, #0
 80034aa:	4816      	ldr	r0, [pc, #88]	; (8003504 <_GLOBAL__sub_I_lineBuffer+0x60>)
 80034ac:	f7ff f858 	bl	8002560 <_ZN20SoftwareMJPEGDecoderC1EPh>
 80034b0:	4c15      	ldr	r4, [pc, #84]	; (8003508 <_GLOBAL__sub_I_lineBuffer+0x64>)
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <_GLOBAL__sub_I_lineBuffer+0x68>)
 80034b4:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 80034b6:	462a      	mov	r2, r5
 80034b8:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 80034ba:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80034bc:	f44f 7380 	mov.w	r3, #256	; 0x100
          semDecode(0), mutexBuffers(0)
 80034c0:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80034c2:	87a3      	strh	r3, [r4, #60]	; 0x3c
          semDecode(0), mutexBuffers(0)
 80034c4:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 80034c8:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          semDecode(0), mutexBuffers(0)
 80034cc:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 80034d0:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 80034d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034d8:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80034dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80034e0:	e9c4 5507 	strd	r5, r5, [r4, #28]
 80034e4:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 80034e8:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80034ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 80034f0:	f005 fd42 	bl	8008f78 <osSemaphoreNew>
 80034f4:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 80034f6:	4628      	mov	r0, r5
 80034f8:	f005 fca2 	bl	8008e40 <osMutexNew>
 80034fc:	6560      	str	r0, [r4, #84]	; 0x54
}
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	20002388 	.word	0x20002388
 8003504:	20002b08 	.word	0x20002b08
 8003508:	20002b50 	.word	0x20002b50
 800350c:	0802d8a8 	.word	0x0802d8a8

08003510 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId ROBOTO_30 = 1; // Roboto_Bold_30_4bpp
    static const touchgfx::FontId ROBOTO_48 = 2; // verdana_48_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003510:	4770      	bx	lr

08003512 <_ZN23ApplicationFontProviderD0Ev>:
 8003512:	b510      	push	{r4, lr}
 8003514:	4604      	mov	r4, r0
 8003516:	2104      	movs	r1, #4
 8003518:	f027 fa35 	bl	802a986 <_ZdlPvj>
 800351c:	4620      	mov	r0, r4
 800351e:	bd10      	pop	{r4, pc}

08003520 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003520:	2901      	cmp	r1, #1
{
 8003522:	b508      	push	{r3, lr}
    switch (typography)
 8003524:	d006      	beq.n	8003534 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003526:	2902      	cmp	r1, #2
 8003528:	d008      	beq.n	800353c <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 800352a:	b959      	cbnz	r1, 8003544 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::ROBOTO_16:
        // Roboto_Bold_16_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800352c:	f001 fe26 	bl	800517c <_ZN17TypedTextDatabase8getFontsEv>
 8003530:	6800      	ldr	r0, [r0, #0]
        // verdana_48_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003532:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003534:	f001 fe22 	bl	800517c <_ZN17TypedTextDatabase8getFontsEv>
 8003538:	6840      	ldr	r0, [r0, #4]
 800353a:	e7fa      	b.n	8003532 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800353c:	f001 fe1e 	bl	800517c <_ZN17TypedTextDatabase8getFontsEv>
 8003540:	6880      	ldr	r0, [r0, #8]
 8003542:	e7f6      	b.n	8003532 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003544:	2000      	movs	r0, #0
 8003546:	e7f4      	b.n	8003532 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003548 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003548:	4800      	ldr	r0, [pc, #0]	; (800354c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800354a:	4770      	bx	lr
 800354c:	0802d8f0 	.word	0x0802d8f0

08003550 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003550:	200f      	movs	r0, #15
 8003552:	4770      	bx	lr

08003554 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003554:	b513      	push	{r0, r1, r4, lr}
 8003556:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003558:	b151      	cbz	r1, 8003570 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800355a:	6803      	ldr	r3, [r0, #0]
 800355c:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800355e:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003560:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003564:	689c      	ldr	r4, [r3, #8]
 8003566:	f10d 0303 	add.w	r3, sp, #3
 800356a:	47a0      	blx	r4
        return glyph;
    }
 800356c:	b002      	add	sp, #8
 800356e:	bd10      	pop	{r4, pc}
            return 0;
 8003570:	4608      	mov	r0, r1
 8003572:	e7fb      	b.n	800356c <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003574 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003574:	89c0      	ldrh	r0, [r0, #14]
 8003576:	4770      	bx	lr

08003578 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003578:	8a00      	ldrh	r0, [r0, #16]
 800357a:	4770      	bx	lr

0800357c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800357c:	88c0      	ldrh	r0, [r0, #6]
 800357e:	4770      	bx	lr

08003580 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003580:	8880      	ldrh	r0, [r0, #4]
 8003582:	4770      	bx	lr

08003584 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003584:	7a80      	ldrb	r0, [r0, #10]
    }
 8003586:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800358a:	4770      	bx	lr

0800358c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800358c:	7a80      	ldrb	r0, [r0, #10]
    }
 800358e:	09c0      	lsrs	r0, r0, #7
 8003590:	4770      	bx	lr

08003592 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003592:	4770      	bx	lr

08003594 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003594:	b510      	push	{r4, lr}
 8003596:	4604      	mov	r4, r0
    }
 8003598:	2108      	movs	r1, #8
 800359a:	f027 f9f4 	bl	802a986 <_ZdlPvj>
 800359e:	4620      	mov	r0, r4
 80035a0:	bd10      	pop	{r4, pc}

080035a2 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80035a2:	4770      	bx	lr

080035a4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80035a4:	4770      	bx	lr

080035a6 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80035a6:	f500 7398 	add.w	r3, r0, #304	; 0x130
 80035aa:	6808      	ldr	r0, [r1, #0]
 80035ac:	6849      	ldr	r1, [r1, #4]
 80035ae:	c303      	stmia	r3!, {r0, r1}
    }
 80035b0:	4770      	bx	lr

080035b2 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80035b2:	4770      	bx	lr

080035b4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80035b4:	4770      	bx	lr

080035b6 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80035b6:	6041      	str	r1, [r0, #4]
    }
 80035b8:	4770      	bx	lr

080035ba <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80035ba:	4770      	bx	lr

080035bc <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80035be:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80035c2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80035cc:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80035d0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen2ScreenNoTransition();
    }
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	0800367d 	.word	0x0800367d

080035dc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80035dc:	2301      	movs	r3, #1
 80035de:	7203      	strb	r3, [r0, #8]
    }
 80035e0:	4770      	bx	lr

080035e2 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80035e2:	4770      	bx	lr

080035e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80035e4:	4770      	bx	lr

080035e6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80035e6:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80035e8:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80035ea:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80035ec:	68c2      	ldr	r2, [r0, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	1054      	asrs	r4, r2, #1
 80035f2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80035f6:	07d2      	lsls	r2, r2, #31
 80035f8:	bf48      	it	mi
 80035fa:	590a      	ldrmi	r2, [r1, r4]
    }
 80035fc:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003600:	bf48      	it	mi
 8003602:	58d3      	ldrmi	r3, [r2, r3]
 8003604:	4718      	bx	r3

08003606 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8003606:	6843      	ldr	r3, [r0, #4]
 8003608:	b12b      	cbz	r3, 8003616 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800360a:	6883      	ldr	r3, [r0, #8]
 800360c:	b92b      	cbnz	r3, 800361a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800360e:	68c0      	ldr	r0, [r0, #12]
 8003610:	f000 0001 	and.w	r0, r0, #1
 8003614:	4770      	bx	lr
 8003616:	4618      	mov	r0, r3
 8003618:	4770      	bx	lr
 800361a:	2001      	movs	r0, #1
    }
 800361c:	4770      	bx	lr

0800361e <_ZN8touchgfx12NoTransitionD0Ev>:
 800361e:	b510      	push	{r4, lr}
 8003620:	4604      	mov	r4, r0
 8003622:	210c      	movs	r1, #12
 8003624:	f027 f9af 	bl	802a986 <_ZdlPvj>
 8003628:	4620      	mov	r0, r4
 800362a:	bd10      	pop	{r4, pc}

0800362c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800362c:	b510      	push	{r4, lr}
 800362e:	4604      	mov	r4, r0
 8003630:	2110      	movs	r1, #16
 8003632:	f027 f9a8 	bl	802a986 <_ZdlPvj>
 8003636:	4620      	mov	r0, r4
 8003638:	bd10      	pop	{r4, pc}

0800363a <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800363a:	b510      	push	{r4, lr}
 800363c:	4604      	mov	r4, r0
 800363e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003642:	f027 f9a0 	bl	802a986 <_ZdlPvj>
 8003646:	4620      	mov	r0, r4
 8003648:	bd10      	pop	{r4, pc}

0800364a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800364a:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 800364c:	f018 fb88 	bl	801bd60 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8003650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8003654:	f018 bfce 	b.w	801c5f4 <_ZN8touchgfx11Application10invalidateEv>

08003658 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800365c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8003660:	b158      	cbz	r0, 800367a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003662:	6803      	ldr	r3, [r0, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4798      	blx	r3
 8003668:	b138      	cbz	r0, 800367a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800366a:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 800366e:	6803      	ldr	r3, [r0, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800367a:	bd10      	pop	{r4, pc}

0800367c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 800367c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003680:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8003684:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003686:	68a8      	ldr	r0, [r5, #8]
 8003688:	6803      	ldr	r3, [r0, #0]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4798      	blx	r3
 800368e:	f640 7323 	movw	r3, #3875	; 0xf23
 8003692:	4298      	cmp	r0, r3
 8003694:	d805      	bhi.n	80036a2 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x26>
 8003696:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 8003698:	21a3      	movs	r1, #163	; 0xa3
 800369a:	4a46      	ldr	r2, [pc, #280]	; (80037b4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800369c:	4846      	ldr	r0, [pc, #280]	; (80037b8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 800369e:	f027 f9a1 	bl	802a9e4 <__assert_func>
 80036a2:	6868      	ldr	r0, [r5, #4]
 80036a4:	6803      	ldr	r3, [r0, #0]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4798      	blx	r3
 80036aa:	280f      	cmp	r0, #15
 80036ac:	d803      	bhi.n	80036b6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x3a>
 80036ae:	4b43      	ldr	r3, [pc, #268]	; (80037bc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 80036b0:	21a4      	movs	r1, #164	; 0xa4
 80036b2:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 80036b4:	e7f2      	b.n	800369c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80036b6:	68e8      	ldr	r0, [r5, #12]
 80036b8:	6803      	ldr	r3, [r0, #0]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4798      	blx	r3
 80036be:	280b      	cmp	r0, #11
 80036c0:	d803      	bhi.n	80036ca <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4e>
 80036c2:	4b3f      	ldr	r3, [pc, #252]	; (80037c0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>)
 80036c4:	21a5      	movs	r1, #165	; 0xa5
 80036c6:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 80036c8:	e7e8      	b.n	800369c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80036ca:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80037c8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 80036ce:	f018 fb47 	bl	801bd60 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80036d2:	3004      	adds	r0, #4
 80036d4:	f018 fb69 	bl	801bdaa <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80036d8:	f8d9 0000 	ldr.w	r0, [r9]
 80036dc:	b110      	cbz	r0, 80036e4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 80036de:	6803      	ldr	r3, [r0, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4798      	blx	r3
    if (*currentTrans)
 80036e4:	f8d9 0000 	ldr.w	r0, [r9]
 80036e8:	b110      	cbz	r0, 80036f0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80036ea:	6803      	ldr	r3, [r0, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4798      	blx	r3
    if (*currentScreen)
 80036f0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80037cc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x150>
 80036f4:	f8d8 0000 	ldr.w	r0, [r8]
 80036f8:	b110      	cbz	r0, 8003700 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80036fa:	6803      	ldr	r3, [r0, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	4798      	blx	r3
    if (*currentPresenter)
 8003700:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003704:	b110      	cbz	r0, 800370c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8003706:	6803      	ldr	r3, [r0, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4798      	blx	r3
    if (*currentScreen)
 800370c:	f8d8 0000 	ldr.w	r0, [r8]
 8003710:	b110      	cbz	r0, 8003718 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8003712:	6803      	ldr	r3, [r0, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4798      	blx	r3
    if (*currentPresenter)
 8003718:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800371c:	b110      	cbz	r0, 8003724 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 800371e:	6803      	ldr	r3, [r0, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003724:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003726:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003728:	f04f 0b00 	mov.w	fp, #0
 800372c:	6803      	ldr	r3, [r0, #0]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	4798      	blx	r3
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>)
 8003734:	4604      	mov	r4, r0
 8003736:	f8c0 b004 	str.w	fp, [r0, #4]
 800373a:	6003      	str	r3, [r0, #0]
 800373c:	4659      	mov	r1, fp
 800373e:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003742:	68a8      	ldr	r0, [r5, #8]
 8003744:	6803      	ldr	r3, [r0, #0]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	4798      	blx	r3
 800374a:	4606      	mov	r6, r0
 800374c:	f001 fe60 	bl	8005410 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003750:	6868      	ldr	r0, [r5, #4]
 8003752:	4659      	mov	r1, fp
 8003754:	6803      	ldr	r3, [r0, #0]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	4798      	blx	r3
 800375a:	4605      	mov	r5, r0
 800375c:	4631      	mov	r1, r6
 800375e:	f001 fe13 	bl	8005388 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8003762:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003766:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800376a:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800376e:	b1e5      	cbz	r5, 80037aa <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12e>
 8003770:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003772:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003776:	4630      	mov	r0, r6
 8003778:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800377a:	f8c5 a008 	str.w	sl, [r5, #8]
 800377e:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003780:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003782:	4798      	blx	r3
    newPresenter->activate();
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	4628      	mov	r0, r5
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800378c:	4621      	mov	r1, r4
 800378e:	4630      	mov	r0, r6
 8003790:	f019 ff7e 	bl	801d690 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	4620      	mov	r0, r4
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	4798      	blx	r3
    newTransition->invalidate();
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	4620      	mov	r0, r4
 80037a0:	695b      	ldr	r3, [r3, #20]
}
 80037a2:	b001      	add	sp, #4
 80037a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	4718      	bx	r3
    model->bind(newPresenter);
 80037aa:	462b      	mov	r3, r5
 80037ac:	e7e1      	b.n	8003772 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xf6>
 80037ae:	bf00      	nop
 80037b0:	0802da2c 	.word	0x0802da2c
 80037b4:	0802daba 	.word	0x0802daba
 80037b8:	0802dbbe 	.word	0x0802dbbe
 80037bc:	0802dc05 	.word	0x0802dc05
 80037c0:	0802dca8 	.word	0x0802dca8
 80037c4:	0802ddb8 	.word	0x0802ddb8
 80037c8:	20015ffc 	.word	0x20015ffc
 80037cc:	20015ff8 	.word	0x20015ff8

080037d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	4604      	mov	r4, r0
 80037d4:	4617      	mov	r7, r2
 80037d6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80037d8:	f018 fb88 	bl	801beec <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80037de:	2500      	movs	r5, #0
        instance = this;
 80037e0:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80037e2:	4629      	mov	r1, r5
      model(m)
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80037e6:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 80037ea:	4e0f      	ldr	r6, [pc, #60]	; (8003828 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80037f2:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 80037f6:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80037fa:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80037fc:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003804:	4628      	mov	r0, r5
 8003806:	f001 fc6d 	bl	80050e4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800380a:	6833      	ldr	r3, [r6, #0]
 800380c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8003810:	b10a      	cbz	r2, 8003816 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8003812:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003814:	b900      	cbnz	r0, 8003818 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8003816:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003818:	f020 f9b1 	bl	8023b7e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800381c:	4620      	mov	r0, r4
 800381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003820:	20016008 	.word	0x20016008
 8003824:	0802dd6c 	.word	0x0802dd6c
 8003828:	20015fbc 	.word	0x20015fbc
 800382c:	0802dd54 	.word	0x0802dd54

08003830 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8003832:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003836:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800383a:	2300      	movs	r3, #0
 800383c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003840:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003844:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	0800367d 	.word	0x0800367d

08003850 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003850:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003852:	4770      	bx	lr

08003854 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003854:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003856:	4770      	bx	lr

08003858 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003858:	4770      	bx	lr

0800385a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800385a:	888b      	ldrh	r3, [r1, #4]
 800385c:	69c0      	ldr	r0, [r0, #28]
 800385e:	0adb      	lsrs	r3, r3, #11
 8003860:	680a      	ldr	r2, [r1, #0]
 8003862:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003866:	4410      	add	r0, r2
 8003868:	4770      	bx	lr

0800386a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800386a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 800386c:	b1c2      	cbz	r2, 80038a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800386e:	7b13      	ldrb	r3, [r2, #12]
 8003870:	b1b3      	cbz	r3, 80038a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003872:	7b54      	ldrb	r4, [r2, #13]
 8003874:	7ad2      	ldrb	r2, [r2, #11]
 8003876:	0224      	lsls	r4, r4, #8
 8003878:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800387c:	4314      	orrs	r4, r2
 800387e:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003880:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003882:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003886:	8813      	ldrh	r3, [r2, #0]
 8003888:	428b      	cmp	r3, r1
 800388a:	d102      	bne.n	8003892 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800388c:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8003890:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003892:	d805      	bhi.n	80038a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003894:	3801      	subs	r0, #1
 8003896:	3204      	adds	r2, #4
 8003898:	b280      	uxth	r0, r0
 800389a:	2800      	cmp	r0, #0
 800389c:	d1f3      	bne.n	8003886 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800389e:	e7f7      	b.n	8003890 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80038a0:	2000      	movs	r0, #0
 80038a2:	e7f5      	b.n	8003890 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080038a4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80038a4:	b510      	push	{r4, lr}
 80038a6:	4604      	mov	r4, r0
 80038a8:	212c      	movs	r1, #44	; 0x2c
 80038aa:	f027 f86c 	bl	802a986 <_ZdlPvj>
 80038ae:	4620      	mov	r0, r4
 80038b0:	bd10      	pop	{r4, pc}
	...

080038b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80038b4:	b530      	push	{r4, r5, lr}
 80038b6:	b08b      	sub	sp, #44	; 0x2c
 80038b8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80038ba:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 80038be:	9508      	str	r5, [sp, #32]
 80038c0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 80038c4:	9507      	str	r5, [sp, #28]
 80038c6:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80038ca:	9506      	str	r5, [sp, #24]
 80038cc:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80038d0:	9505      	str	r5, [sp, #20]
 80038d2:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80038d6:	9504      	str	r5, [sp, #16]
 80038d8:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80038dc:	9503      	str	r5, [sp, #12]
 80038de:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80038e2:	9502      	str	r5, [sp, #8]
 80038e4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80038e8:	9501      	str	r5, [sp, #4]
 80038ea:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80038ee:	9500      	str	r5, [sp, #0]
 80038f0:	f019 fb28 	bl	801cf44 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80038f6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80038fc:	61e3      	str	r3, [r4, #28]
 80038fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003900:	6223      	str	r3, [r4, #32]
 8003902:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003904:	6263      	str	r3, [r4, #36]	; 0x24
 8003906:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003908:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800390a:	b00b      	add	sp, #44	; 0x2c
 800390c:	bd30      	pop	{r4, r5, pc}
 800390e:	bf00      	nop
 8003910:	0802dddc 	.word	0x0802dddc

08003914 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003914:	4770      	bx	lr

08003916 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003916:	4770      	bx	lr

08003918 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003918:	4770      	bx	lr

0800391a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800391a:	4770      	bx	lr

0800391c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800391c:	4770      	bx	lr

0800391e <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800391e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	4604      	mov	r4, r0
        setX(x);
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8003926:	4615      	mov	r5, r2
        setX(x);
 8003928:	4798      	blx	r3
        setY(y);
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	4620      	mov	r0, r4
 800392e:	4629      	mov	r1, r5
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8003932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003936:	4718      	bx	r3

08003938 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4604      	mov	r4, r0
 800393c:	461d      	mov	r5, r3
 800393e:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003942:	f7ff ffec 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	4629      	mov	r1, r5
 800394a:	4620      	mov	r0, r4
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	4798      	blx	r3
        setHeight(height);
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	4631      	mov	r1, r6
 8003954:	4620      	mov	r0, r4
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 800395c:	4718      	bx	r3
	...

08003960 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003960:	4a09      	ldr	r2, [pc, #36]	; (8003988 <_ZN8touchgfx3BoxC1Ev+0x28>)
          visible(true)
 8003962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003966:	6002      	str	r2, [r0, #0]
 8003968:	2200      	movs	r2, #0
 800396a:	8481      	strh	r1, [r0, #36]	; 0x24
 800396c:	21ff      	movs	r1, #255	; 0xff
        : color(col)
 800396e:	6282      	str	r2, [r0, #40]	; 0x28
 8003970:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
        : x(0), y(0), width(0), height(0)
 8003974:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003978:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800397c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003980:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	08030650 	.word	0x08030650

0800398c <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800398c:	b530      	push	{r4, r5, lr}
 800398e:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8003990:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8003992:	4604      	mov	r4, r0
        rect.width = width;
 8003994:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8003996:	466d      	mov	r5, sp
 8003998:	4601      	mov	r1, r0
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399e:	343c      	adds	r4, #60	; 0x3c
 80039a0:	4628      	mov	r0, r5
 80039a2:	4798      	blx	r3
 80039a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80039ac:	b005      	add	sp, #20
 80039ae:	bd30      	pop	{r4, r5, pc}

080039b0 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80039b0:	b530      	push	{r4, r5, lr}
 80039b2:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80039b4:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80039b6:	4604      	mov	r4, r0
        rect.height = height;
 80039b8:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 80039ba:	466d      	mov	r5, sp
 80039bc:	4601      	mov	r1, r0
 80039be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c2:	343c      	adds	r4, #60	; 0x3c
 80039c4:	4628      	mov	r0, r5
 80039c6:	4798      	blx	r3
 80039c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80039d0:	b005      	add	sp, #20
 80039d2:	bd30      	pop	{r4, r5, pc}

080039d4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80039d4:	2200      	movs	r2, #0
 80039d6:	8002      	strh	r2, [r0, #0]
 80039d8:	8042      	strh	r2, [r0, #2]
 80039da:	8082      	strh	r2, [r0, #4]
 80039dc:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80039de:	4770      	bx	lr

080039e0 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80039e0:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 80039e4:	4770      	bx	lr

080039e6 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 80039e6:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	4604      	mov	r4, r0
        setX(x);
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80039ee:	4615      	mov	r5, r2
        setX(x);
 80039f0:	4798      	blx	r3
        setBaselineY(baselineY);
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	4620      	mov	r0, r4
 80039f6:	4629      	mov	r1, r5
 80039f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 80039fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 80039fe:	4718      	bx	r3

08003a00 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003a00:	2000      	movs	r0, #0
 8003a02:	4770      	bx	lr

08003a04 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003a04:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003a06:	4770      	bx	lr

08003a08 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8003a08:	4770      	bx	lr

08003a0a <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8003a0a:	4770      	bx	lr

08003a0c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003a0c:	4770      	bx	lr

08003a0e <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003a0e:	b510      	push	{r4, lr}
 8003a10:	4604      	mov	r4, r0
 8003a12:	214c      	movs	r1, #76	; 0x4c
 8003a14:	f026 ffb7 	bl	802a986 <_ZdlPvj>
 8003a18:	4620      	mov	r0, r4
 8003a1a:	bd10      	pop	{r4, pc}

08003a1c <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	4604      	mov	r4, r0
}
 8003a20:	f640 7124 	movw	r1, #3876	; 0xf24
 8003a24:	f026 ffaf 	bl	802a986 <_ZdlPvj>
 8003a28:	4620      	mov	r0, r4
 8003a2a:	bd10      	pop	{r4, pc}

08003a2c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8003a2c:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003a2e:	f7ff fadf 	bl	8002ff0 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003a32:	bd08      	pop	{r3, pc}

08003a34 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003a34:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003a36:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003a38:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 8003a3a:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003a3e:	b28d      	uxth	r5, r1
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	b92b      	cbnz	r3, 8003a50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8003a46:	216c      	movs	r1, #108	; 0x6c
 8003a48:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003a4a:	4811      	ldr	r0, [pc, #68]	; (8003a90 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003a4c:	f026 ffca 	bl	802a9e4 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003a50:	4910      	ldr	r1, [pc, #64]	; (8003a94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8003a52:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003a54:	8809      	ldrh	r1, [r1, #0]
 8003a56:	4291      	cmp	r1, r2
 8003a58:	d803      	bhi.n	8003a62 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003a5c:	216d      	movs	r1, #109	; 0x6d
 8003a5e:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003a60:	e7f3      	b.n	8003a4a <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003a62:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003a6e:	6803      	ldr	r3, [r0, #0]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4798      	blx	r3
 8003a74:	1a28      	subs	r0, r5, r0
 8003a76:	4633      	mov	r3, r6
 8003a78:	b201      	sxth	r1, r0
 8003a7a:	4620      	mov	r0, r4
    }
 8003a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003a80:	4718      	bx	r3
 8003a82:	bf00      	nop
 8003a84:	2001600c 	.word	0x2001600c
 8003a88:	0802de34 	.word	0x0802de34
 8003a8c:	0802de76 	.word	0x0802de76
 8003a90:	0802deb1 	.word	0x0802deb1
 8003a94:	20016010 	.word	0x20016010
 8003a98:	0802def8 	.word	0x0802def8
 8003a9c:	20016014 	.word	0x20016014

08003aa0 <_ZN8touchgfx9ContainerC1Ev>:
          visible(true)
 8003aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	8481      	strh	r1, [r0, #36]	; 0x24
class Container : public Drawable
{
public:
    Container()
        : Drawable(),
          firstChild(0)
 8003aa8:	4905      	ldr	r1, [pc, #20]	; (8003ac0 <_ZN8touchgfx9ContainerC1Ev+0x20>)
 8003aaa:	6282      	str	r2, [r0, #40]	; 0x28
 8003aac:	6001      	str	r1, [r0, #0]
 8003aae:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003ab2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8003ab6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003aba:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 8003abe:	4770      	bx	lr
 8003ac0:	08030500 	.word	0x08030500

08003ac4 <_ZN8touchgfx6WidgetC1Ev>:
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003aca:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8003ace:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003ad2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ada:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 8003adc:	4a01      	ldr	r2, [pc, #4]	; (8003ae4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003ade:	6002      	str	r2, [r0, #0]
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	0802df78 	.word	0x0802df78

08003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003aee:	2226      	movs	r2, #38	; 0x26
 8003af0:	2100      	movs	r1, #0
 8003af2:	f027 f8fd 	bl	802acf0 <memset>
 8003af6:	4620      	mov	r0, r4
 8003af8:	f7ff ffe4 	bl	8003ac4 <_ZN8touchgfx6WidgetC1Ev>
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 8003afe:	4620      	mov	r0, r4
 8003b00:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8003b02:	6023      	str	r3, [r4, #0]
 8003b04:	882b      	ldrh	r3, [r5, #0]
 8003b06:	84e3      	strh	r3, [r4, #38]	; 0x26
 8003b08:	23ff      	movs	r3, #255	; 0xff
 8003b0a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bmp);
 8003b0e:	f016 fbfc 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8003b12:	4620      	mov	r0, r4
 8003b14:	bd38      	pop	{r3, r4, r5, pc}
 8003b16:	bf00      	nop
 8003b18:	080306b8 	.word	0x080306b8

08003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003b22:	6082      	str	r2, [r0, #8]
 8003b24:	e9c0 2100 	strd	r2, r1, [r0]
        {
        }
 8003b28:	4770      	bx	lr

08003b2a <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	4604      	mov	r4, r0
        return TextArea::BoundingArea();
 8003b2e:	f7ff fff5 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8003b32:	4620      	mov	r0, r4
 8003b34:	bd10      	pop	{r4, pc}
	...

08003b38 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	2226      	movs	r2, #38	; 0x26
 8003b40:	f027 f8d6 	bl	802acf0 <memset>
 8003b44:	4620      	mov	r0, r4
 8003b46:	f7ff ffbd 	bl	8003ac4 <_ZN8touchgfx6WidgetC1Ev>
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <_ZN8touchgfx8TextAreaC1Ev+0x38>)
 8003b4c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8003b50:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003b54:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003b56:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b5e:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003b60:	2300      	movs	r3, #0
 8003b62:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
 8003b66:	8723      	strh	r3, [r4, #56]	; 0x38
 8003b68:	f7ff ffd8 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	bd10      	pop	{r4, pc}
 8003b70:	080305c0 	.word	0x080305c0
 8003b74:	0802da24 	.word	0x0802da24

08003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 8003b78:	b510      	push	{r4, lr}
 8003b7a:	4604      	mov	r4, r0
        : TextArea()
 8003b7c:	f7ff ffdc 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8003b80:	4b02      	ldr	r3, [pc, #8]	; (8003b8c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x14>)
    }
 8003b82:	4620      	mov	r0, r4
        : TextAreaWithWildcardBase(), wc1(0)
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	64a3      	str	r3, [r4, #72]	; 0x48
    }
 8003b8a:	bd10      	pop	{r4, pc}
 8003b8c:	0802dfe0 	.word	0x0802dfe0

08003b90 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase()
 8003b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b94:	4604      	mov	r4, r0
        : presenter(0)
 8003b96:	2600      	movs	r6, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003b98:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8003b9c:	46a2      	mov	sl, r4
 8003b9e:	f104 0898 	add.w	r8, r4, #152	; 0x98
 8003ba2:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
 8003ba6:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
 8003baa:	ed2d 8b10 	vpush	{d8-d15}
 8003bae:	b0b7      	sub	sp, #220	; 0xdc
 8003bb0:	f019 fbc2 	bl	801d338 <_ZN8touchgfx6ScreenC1Ev>
 8003bb4:	4be6      	ldr	r3, [pc, #920]	; (8003f50 <_ZN15Screen2ViewBaseC1Ev+0x3c0>)
 8003bb6:	63e6      	str	r6, [r4, #60]	; 0x3c
 8003bb8:	ad33      	add	r5, sp, #204	; 0xcc
 8003bba:	f84a 3b40 	str.w	r3, [sl], #64
 8003bbe:	4650      	mov	r0, sl
 8003bc0:	f7ff fece 	bl	8003960 <_ZN8touchgfx3BoxC1Ev>
 8003bc4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003bc8:	4618      	mov	r0, r3
 8003bca:	932d      	str	r3, [sp, #180]	; 0xb4
 8003bcc:	f7ff fec8 	bl	8003960 <_ZN8touchgfx3BoxC1Ev>
 8003bd0:	4640      	mov	r0, r8
 8003bd2:	f7ff ff65 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	4658      	mov	r0, fp
 8003bda:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003bde:	f7ff ff83 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003be2:	4648      	mov	r0, r9
 8003be4:	f7ff ffc8 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003be8:	f504 739e 	add.w	r3, r4, #316	; 0x13c
 8003bec:	4618      	mov	r0, r3
 8003bee:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf0:	f7ff ffa2 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003bf4:	f504 73c2 	add.w	r3, r4, #388	; 0x184
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	ee08 3a90 	vmov	s17, r3
 8003bfe:	f7ff ff4f 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003c02:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 8003c06:	4629      	mov	r1, r5
 8003c08:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c10:	f7ff ff6a 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003c14:	f504 73ee 	add.w	r3, r4, #476	; 0x1dc
 8003c18:	4618      	mov	r0, r3
 8003c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8003c1c:	f7ff ff8c 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003c20:	f504 7309 	add.w	r3, r4, #548	; 0x224
 8003c24:	4618      	mov	r0, r3
 8003c26:	ee09 3a10 	vmov	s18, r3
 8003c2a:	f7ff ffa5 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003c2e:	f504 731c 	add.w	r3, r4, #624	; 0x270
 8003c32:	4618      	mov	r0, r3
 8003c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c36:	f7ff ff33 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003c3a:	f504 7327 	add.w	r3, r4, #668	; 0x29c
 8003c3e:	4629      	mov	r1, r5
 8003c40:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003c44:	4618      	mov	r0, r3
 8003c46:	931c      	str	r3, [sp, #112]	; 0x70
 8003c48:	f7ff ff4e 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003c4c:	f504 7332 	add.w	r3, r4, #712	; 0x2c8
 8003c50:	4618      	mov	r0, r3
 8003c52:	ee09 3a90 	vmov	s19, r3
 8003c56:	f7ff ff8f 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003c5a:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8003c5e:	4618      	mov	r0, r3
 8003c60:	ee0a 3a10 	vmov	s20, r3
 8003c64:	f7ff ff1c 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003c68:	f504 7350 	add.w	r3, r4, #832	; 0x340
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003c72:	4618      	mov	r0, r3
 8003c74:	931d      	str	r3, [sp, #116]	; 0x74
 8003c76:	f7ff ff37 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003c7a:	f504 735b 	add.w	r3, r4, #876	; 0x36c
 8003c7e:	4618      	mov	r0, r3
 8003c80:	930c      	str	r3, [sp, #48]	; 0x30
 8003c82:	f7ff ff59 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003c86:	f504 736d 	add.w	r3, r4, #948	; 0x3b4
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	930d      	str	r3, [sp, #52]	; 0x34
 8003c8e:	f7ff ff73 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003c92:	f504 6380 	add.w	r3, r4, #1024	; 0x400
 8003c96:	4618      	mov	r0, r3
 8003c98:	ee0a 3a90 	vmov	s21, r3
 8003c9c:	f7ff ff00 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003ca0:	f204 432c 	addw	r3, r4, #1068	; 0x42c
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003caa:	4618      	mov	r0, r3
 8003cac:	931e      	str	r3, [sp, #120]	; 0x78
 8003cae:	f7ff ff1b 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003cb2:	f504 638b 	add.w	r3, r4, #1112	; 0x458
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8003cba:	f7ff ff3d 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003cbe:	f504 6394 	add.w	r3, r4, #1184	; 0x4a0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cc6:	f7ff ff57 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003cca:	f204 43ec 	addw	r3, r4, #1260	; 0x4ec
 8003cce:	4618      	mov	r0, r3
 8003cd0:	ee0b 3a10 	vmov	s22, r3
 8003cd4:	f7ff fee4 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003cd8:	f504 63a3 	add.w	r3, r4, #1304	; 0x518
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	931f      	str	r3, [sp, #124]	; 0x7c
 8003ce6:	f7ff feff 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003cea:	f204 5344 	addw	r3, r4, #1348	; 0x544
 8003cee:	4618      	mov	r0, r3
 8003cf0:	9310      	str	r3, [sp, #64]	; 0x40
 8003cf2:	f7ff ff41 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003cf6:	f504 63b2 	add.w	r3, r4, #1424	; 0x590
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	ee0b 3a90 	vmov	s23, r3
 8003d00:	f7ff ff1a 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003d04:	f504 63bb 	add.w	r3, r4, #1496	; 0x5d8
 8003d08:	4618      	mov	r0, r3
 8003d0a:	ee0c 3a10 	vmov	s24, r3
 8003d0e:	f7ff fec7 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003d12:	f204 6304 	addw	r3, r4, #1540	; 0x604
 8003d16:	4629      	mov	r1, r5
 8003d18:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	9320      	str	r3, [sp, #128]	; 0x80
 8003d20:	f7ff fee2 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003d24:	f504 63c6 	add.w	r3, r4, #1584	; 0x630
 8003d28:	4618      	mov	r0, r3
 8003d2a:	9311      	str	r3, [sp, #68]	; 0x44
 8003d2c:	f7ff ff24 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003d30:	f204 637c 	addw	r3, r4, #1660	; 0x67c
 8003d34:	4618      	mov	r0, r3
 8003d36:	ee0c 3a90 	vmov	s25, r3
 8003d3a:	f7ff fefd 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003d3e:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
 8003d42:	4618      	mov	r0, r3
 8003d44:	ee0d 3a10 	vmov	s26, r3
 8003d48:	f7ff feaa 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003d4c:	f504 63de 	add.w	r3, r4, #1776	; 0x6f0
 8003d50:	4618      	mov	r0, r3
 8003d52:	9312      	str	r3, [sp, #72]	; 0x48
 8003d54:	f7ff ff10 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003d58:	f204 733c 	addw	r3, r4, #1852	; 0x73c
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	ee0d 3a90 	vmov	s27, r3
 8003d62:	f7ff fee9 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003d66:	f204 7384 	addw	r3, r4, #1924	; 0x784
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003d70:	4618      	mov	r0, r3
 8003d72:	9321      	str	r3, [sp, #132]	; 0x84
 8003d74:	f7ff feb8 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003d78:	f504 63f6 	add.w	r3, r4, #1968	; 0x7b0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	ee0e 3a10 	vmov	s28, r3
 8003d82:	f7ff fe8d 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003d86:	f204 73dc 	addw	r3, r4, #2012	; 0x7dc
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003d8e:	f7ff fef3 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003d92:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8003d96:	4618      	mov	r0, r3
 8003d98:	ee0e 3a90 	vmov	s29, r3
 8003d9c:	f7ff fecc 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003da0:	f504 6307 	add.w	r3, r4, #2160	; 0x870
 8003da4:	4629      	mov	r1, r5
 8003da6:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003daa:	4618      	mov	r0, r3
 8003dac:	9322      	str	r3, [sp, #136]	; 0x88
 8003dae:	f7ff fe9b 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003db2:	f604 039c 	addw	r3, r4, #2204	; 0x89c
 8003db6:	4618      	mov	r0, r3
 8003db8:	ee0f 3a10 	vmov	s30, r3
 8003dbc:	f7ff fe70 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003dc0:	f604 03c8 	addw	r3, r4, #2248	; 0x8c8
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003dca:	4618      	mov	r0, r3
 8003dcc:	9323      	str	r3, [sp, #140]	; 0x8c
 8003dce:	f7ff fe8b 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003dd2:	f604 03f4 	addw	r3, r4, #2292	; 0x8f4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	ee0f 3a90 	vmov	s31, r3
 8003ddc:	f7ff feac 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003de0:	f604 133c 	addw	r3, r4, #2364	; 0x93c
 8003de4:	4618      	mov	r0, r3
 8003de6:	9314      	str	r3, [sp, #80]	; 0x50
 8003de8:	f7ff fec6 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003dec:	f604 1388 	addw	r3, r4, #2440	; 0x988
 8003df0:	4618      	mov	r0, r3
 8003df2:	9303      	str	r3, [sp, #12]
 8003df4:	f7ff fe54 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003df8:	f604 13b4 	addw	r3, r4, #2484	; 0x9b4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	9315      	str	r3, [sp, #84]	; 0x54
 8003e00:	f7ff feba 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003e04:	f504 6320 	add.w	r3, r4, #2560	; 0xa00
 8003e08:	4618      	mov	r0, r3
 8003e0a:	9304      	str	r3, [sp, #16]
 8003e0c:	f7ff fe94 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003e10:	f604 2348 	addw	r3, r4, #2632	; 0xa48
 8003e14:	4629      	mov	r1, r5
 8003e16:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	9324      	str	r3, [sp, #144]	; 0x90
 8003e1e:	f7ff fe63 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003e22:	f604 2374 	addw	r3, r4, #2676	; 0xa74
 8003e26:	4618      	mov	r0, r3
 8003e28:	ee08 3a10 	vmov	s16, r3
 8003e2c:	f7ff fe38 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003e30:	f504 632a 	add.w	r3, r4, #2720	; 0xaa0
 8003e34:	4629      	mov	r1, r5
 8003e36:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	9325      	str	r3, [sp, #148]	; 0x94
 8003e3e:	f7ff fe53 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003e42:	f604 23cc 	addw	r3, r4, #2764	; 0xacc
 8003e46:	4629      	mov	r1, r5
 8003e48:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	9326      	str	r3, [sp, #152]	; 0x98
 8003e50:	f7ff fe4a 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003e54:	f604 23f8 	addw	r3, r4, #2808	; 0xaf8
 8003e58:	4629      	mov	r1, r5
 8003e5a:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003e5e:	4618      	mov	r0, r3
 8003e60:	9327      	str	r3, [sp, #156]	; 0x9c
 8003e62:	f7ff fe41 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003e66:	f604 3324 	addw	r3, r4, #2852	; 0xb24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	9316      	str	r3, [sp, #88]	; 0x58
 8003e6e:	f7ff fe83 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003e72:	f504 6337 	add.w	r3, r4, #2928	; 0xb70
 8003e76:	4618      	mov	r0, r3
 8003e78:	9305      	str	r3, [sp, #20]
 8003e7a:	f7ff fe11 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003e7e:	f604 339c 	addw	r3, r4, #2972	; 0xb9c
 8003e82:	4618      	mov	r0, r3
 8003e84:	9317      	str	r3, [sp, #92]	; 0x5c
 8003e86:	f7ff fe77 	bl	8003b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003e8a:	f604 33e8 	addw	r3, r4, #3048	; 0xbe8
 8003e8e:	4618      	mov	r0, r3
 8003e90:	9306      	str	r3, [sp, #24]
 8003e92:	f7ff fe51 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003e96:	f504 6343 	add.w	r3, r4, #3120	; 0xc30
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	9328      	str	r3, [sp, #160]	; 0xa0
 8003ea4:	f7ff fe20 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003ea8:	f604 435c 	addw	r3, r4, #3164	; 0xc5c
 8003eac:	4618      	mov	r0, r3
 8003eae:	9318      	str	r3, [sp, #96]	; 0x60
 8003eb0:	f7ff fdf6 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003eb4:	f604 4388 	addw	r3, r4, #3208	; 0xc88
 8003eb8:	4618      	mov	r0, r3
 8003eba:	9307      	str	r3, [sp, #28]
 8003ebc:	f7ff fe3c 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003ec0:	f504 634d 	add.w	r3, r4, #3280	; 0xcd0
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003eca:	4618      	mov	r0, r3
 8003ecc:	9329      	str	r3, [sp, #164]	; 0xa4
 8003ece:	f7ff fe0b 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003ed2:	f604 43fc 	addw	r3, r4, #3324	; 0xcfc
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	9319      	str	r3, [sp, #100]	; 0x64
 8003eda:	f7ff fde1 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003ede:	f604 5328 	addw	r3, r4, #3368	; 0xd28
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	9308      	str	r3, [sp, #32]
 8003ee6:	f7ff fe27 	bl	8003b38 <_ZN8touchgfx8TextAreaC1Ev>
 8003eea:	f504 6357 	add.w	r3, r4, #3440	; 0xd70
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	932a      	str	r3, [sp, #168]	; 0xa8
 8003ef8:	f7ff fdf6 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003efc:	f604 539c 	addw	r3, r4, #3484	; 0xd9c
 8003f00:	4618      	mov	r0, r3
 8003f02:	931a      	str	r3, [sp, #104]	; 0x68
 8003f04:	f7ff fdcc 	bl	8003aa0 <_ZN8touchgfx9ContainerC1Ev>
 8003f08:	f604 53c8 	addw	r3, r4, #3528	; 0xdc8
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003f12:	4618      	mov	r0, r3
 8003f14:	932b      	str	r3, [sp, #172]	; 0xac
 8003f16:	f7ff fde7 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003f1a:	f604 53f4 	addw	r3, r4, #3572	; 0xdf4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f8ad 70cc 	strh.w	r7, [sp, #204]	; 0xcc
 8003f24:	4618      	mov	r0, r3
 8003f26:	932c      	str	r3, [sp, #176]	; 0xb0
 8003f28:	f7ff fdde 	bl	8003ae8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
    __background.setPosition(0, 0, 480, 272);
 8003f2c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003f30:	4632      	mov	r2, r6
 8003f32:	4650      	mov	r0, sl
 8003f34:	4631      	mov	r1, r6
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003f3c:	1d27      	adds	r7, r4, #4
 8003f3e:	f7ff fcfb 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003f42:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003f46:	4651      	mov	r1, sl
 8003f48:	4638      	mov	r0, r7
 8003f4a:	66a3      	str	r3, [r4, #104]	; 0x68
 8003f4c:	e002      	b.n	8003f54 <_ZN15Screen2ViewBaseC1Ev+0x3c4>
 8003f4e:	bf00      	nop
 8003f50:	0802e070 	.word	0x0802e070
        boundingArea = calculateBoundingArea();
 8003f54:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8003f58:	f014 fb66 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background.setPosition(0, 0, 480, 272);
 8003f5c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003f60:	4632      	mov	r2, r6
 8003f62:	4631      	mov	r1, r6
 8003f64:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f6c:	f7ff fce4 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003f70:	4b23      	ldr	r3, [pc, #140]	; (8004000 <_ZN15Screen2ViewBaseC1Ev+0x470>)
 8003f72:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8003f74:	4638      	mov	r0, r7
 8003f76:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003f7a:	f014 fb55 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_map.setPosition(10, 0, 75, 77);
 8003f7e:	234d      	movs	r3, #77	; 0x4d
 8003f80:	4632      	mov	r2, r6
 8003f82:	210a      	movs	r1, #10
 8003f84:	4640      	mov	r0, r8
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	234b      	movs	r3, #75	; 0x4b
 8003f8a:	f7ff fcd5 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_map.setXY(0, 15);
 8003f8e:	220f      	movs	r2, #15
 8003f90:	4658      	mov	r0, fp
 8003f92:	4631      	mov	r1, r6
 8003f94:	f7ff fcc3 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
    img_map.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_1_ID));
 8003f98:	4658      	mov	r0, fp
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	f8ad 60cc 	strh.w	r6, [sp, #204]	; 0xcc
 8003fa0:	f016 f9b3 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_map.add(img_map);
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	4640      	mov	r0, r8
    Unicode::snprintf(ta_map_valueBuffer, TA_MAP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YLCY).getText());
 8003fa8:	f504 6b62 	add.w	fp, r4, #3616	; 0xe20
    c_map.add(img_map);
 8003fac:	f014 fb3c 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_map_value.setXY(20, 27);
 8003fb0:	221b      	movs	r2, #27
 8003fb2:	2114      	movs	r1, #20
 8003fb4:	4648      	mov	r0, r9
 8003fb6:	f7ff fcb2 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <_ZN15Screen2ViewBaseC1Ev+0x474>)
        boundingArea = calculateBoundingArea();
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	4650      	mov	r0, sl
        color = newColor;
 8003fc0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
        boundingArea = calculateBoundingArea();
 8003fc4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
        linespace = space;
 8003fc8:	f8a4 6124 	strh.w	r6, [r4, #292]	; 0x124
        boundingArea = calculateBoundingArea();
 8003fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd0:	4798      	blx	r3
 8003fd2:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8003fd6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8003fda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <_ZN15Screen2ViewBaseC1Ev+0x478>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	b92b      	cbnz	r3, 8003ff0 <_ZN15Screen2ViewBaseC1Ev+0x460>
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <_ZN15Screen2ViewBaseC1Ev+0x47c>)
 8003fe6:	2160      	movs	r1, #96	; 0x60
 8003fe8:	4a09      	ldr	r2, [pc, #36]	; (8004010 <_ZN15Screen2ViewBaseC1Ev+0x480>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003fea:	480a      	ldr	r0, [pc, #40]	; (8004014 <_ZN15Screen2ViewBaseC1Ev+0x484>)
 8003fec:	f026 fcfa 	bl	802a9e4 <__assert_func>
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <_ZN15Screen2ViewBaseC1Ev+0x488>)
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	2b22      	cmp	r3, #34	; 0x22
 8003ff6:	d813      	bhi.n	8004020 <_ZN15Screen2ViewBaseC1Ev+0x490>
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <_ZN15Screen2ViewBaseC1Ev+0x48c>)
 8003ffa:	2161      	movs	r1, #97	; 0x61
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <_ZN15Screen2ViewBaseC1Ev+0x480>)
 8003ffe:	e7f4      	b.n	8003fea <_ZN15Screen2ViewBaseC1Ev+0x45a>
 8004000:	ff080808 	.word	0xff080808
 8004004:	fffaf5f5 	.word	0xfffaf5f5
 8004008:	2001600c 	.word	0x2001600c
 800400c:	0802de34 	.word	0x0802de34
 8004010:	0802df36 	.word	0x0802df36
 8004014:	0802deb1 	.word	0x0802deb1
 8004018:	20016010 	.word	0x20016010
 800401c:	0802def8 	.word	0x0802def8
        return texts->getText(typedTextId);
 8004020:	4bdb      	ldr	r3, [pc, #876]	; (8004390 <_ZN15Screen2ViewBaseC1Ev+0x800>)
 8004022:	2122      	movs	r1, #34	; 0x22
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	f001 f899 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(ta_map_valueBuffer, TA_MAP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YLCY).getText());
 800402a:	4ada      	ldr	r2, [pc, #872]	; (8004394 <_ZN15Screen2ViewBaseC1Ev+0x804>)
 800402c:	4603      	mov	r3, r0
 800402e:	210a      	movs	r1, #10
 8004030:	4658      	mov	r0, fp
 8004032:	f01a fe0b 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_map_value.resizeToCurrentText();
 8004036:	4648      	mov	r0, r9
        wc1 = value;
 8004038:	f8c4 b138 	str.w	fp, [r4, #312]	; 0x138
 800403c:	f016 f800 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004040:	f8df b368 	ldr.w	fp, [pc, #872]	; 80043ac <_ZN15Screen2ViewBaseC1Ev+0x81c>
 8004044:	2323      	movs	r3, #35	; 0x23
    ta_map_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QNEY));
 8004046:	4629      	mov	r1, r5
 8004048:	4648      	mov	r0, r9
 800404a:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 800404e:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004052:	f016 f815 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_map.add(ta_map_value);
 8004056:	4640      	mov	r0, r8
 8004058:	4649      	mov	r1, r9
 800405a:	f014 fae5 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_map_title.setXY(20, 7);
 800405e:	2207      	movs	r2, #7
 8004060:	2114      	movs	r1, #20
 8004062:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004064:	f7ff fc5b 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004068:	4bcb      	ldr	r3, [pc, #812]	; (8004398 <_ZN15Screen2ViewBaseC1Ev+0x808>)
        boundingArea = calculateBoundingArea();
 800406a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800406c:	4650      	mov	r0, sl
        color = newColor;
 800406e:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
        linespace = space;
 8004072:	f8a4 6170 	strh.w	r6, [r4, #368]	; 0x170
        boundingArea = calculateBoundingArea();
 8004076:	f015 fd5b 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800407a:	f504 73bc 	add.w	r3, r4, #376	; 0x178
 800407e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8004082:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004086:	2321      	movs	r3, #33	; 0x21
    ta_map_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EP32));
 8004088:	4629      	mov	r1, r5
 800408a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800408c:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004090:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 8004094:	f015 fff4 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_map.add(ta_map_title);
 8004098:	4640      	mov	r0, r8
 800409a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800409c:	f014 fac4 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80040a0:	4641      	mov	r1, r8
 80040a2:	4638      	mov	r0, r7
    Unicode::snprintf(ta_tc_valueBuffer, TA_TC_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VB8V).getText());
 80040a4:	f604 6834 	addw	r8, r4, #3636	; 0xe34
 80040a8:	f014 fabe 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_tc.setPosition(95, 0, 75, 77);
 80040ac:	214d      	movs	r1, #77	; 0x4d
 80040ae:	234b      	movs	r3, #75	; 0x4b
 80040b0:	4632      	mov	r2, r6
 80040b2:	ee18 0a90 	vmov	r0, s17
 80040b6:	9100      	str	r1, [sp, #0]
 80040b8:	215f      	movs	r1, #95	; 0x5f
 80040ba:	f7ff fc3d 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_tc.setXY(0, 15);
 80040be:	220f      	movs	r2, #15
 80040c0:	4631      	mov	r1, r6
 80040c2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80040c4:	f7ff fc2b 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
    img_tc.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_1_ID));
 80040c8:	4629      	mov	r1, r5
 80040ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80040cc:	f8ad 60cc 	strh.w	r6, [sp, #204]	; 0xcc
 80040d0:	f016 f91b 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_tc.add(img_tc);
 80040d4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80040d6:	ee18 0a90 	vmov	r0, s17
 80040da:	f014 faa5 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_tc_title.setXY(27, 7);
 80040de:	2207      	movs	r2, #7
 80040e0:	211b      	movs	r1, #27
 80040e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80040e4:	f7ff fc1b 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80040e8:	4bac      	ldr	r3, [pc, #688]	; (800439c <_ZN15Screen2ViewBaseC1Ev+0x80c>)
        boundingArea = calculateBoundingArea();
 80040ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040ec:	4650      	mov	r0, sl
        color = newColor;
 80040ee:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
        linespace = space;
 80040f2:	f8a4 6210 	strh.w	r6, [r4, #528]	; 0x210
        boundingArea = calculateBoundingArea();
 80040f6:	f015 fd1b 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80040fa:	f504 7306 	add.w	r3, r4, #536	; 0x218
 80040fe:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8004102:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004106:	2324      	movs	r3, #36	; 0x24
    ta_tc_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_995A));
 8004108:	4629      	mov	r1, r5
 800410a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800410c:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004110:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 8004114:	f015 ffb4 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_tc.add(ta_tc_title);
 8004118:	990a      	ldr	r1, [sp, #40]	; 0x28
 800411a:	ee18 0a90 	vmov	r0, s17
 800411e:	f014 fa83 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_tc_value.setXY(20, 27);
 8004122:	221b      	movs	r2, #27
 8004124:	2114      	movs	r1, #20
 8004126:	ee19 0a10 	vmov	r0, s18
 800412a:	f7ff fbf8 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800412e:	4b9c      	ldr	r3, [pc, #624]	; (80043a0 <_ZN15Screen2ViewBaseC1Ev+0x810>)
        boundingArea = calculateBoundingArea();
 8004130:	ee19 1a10 	vmov	r1, s18
 8004134:	4650      	mov	r0, sl
        color = newColor;
 8004136:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
        boundingArea = calculateBoundingArea();
 800413a:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
        linespace = space;
 800413e:	f8a4 6258 	strh.w	r6, [r4, #600]	; 0x258
        boundingArea = calculateBoundingArea();
 8004142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004146:	4798      	blx	r3
 8004148:	f504 7318 	add.w	r3, r4, #608	; 0x260
 800414c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8004150:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004154:	4993      	ldr	r1, [pc, #588]	; (80043a4 <_ZN15Screen2ViewBaseC1Ev+0x814>)
 8004156:	680b      	ldr	r3, [r1, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f43f af43 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800415e:	4b92      	ldr	r3, [pc, #584]	; (80043a8 <_ZN15Screen2ViewBaseC1Ev+0x818>)
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	2b25      	cmp	r3, #37	; 0x25
 8004164:	f67f af48 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 8004168:	4a89      	ldr	r2, [pc, #548]	; (8004390 <_ZN15Screen2ViewBaseC1Ev+0x800>)
 800416a:	2125      	movs	r1, #37	; 0x25
    Unicode::snprintf(ta_speed_valueBuffer, TA_SPEED_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_T2NN).getText());
 800416c:	f604 6948 	addw	r9, r4, #3656	; 0xe48
 8004170:	6810      	ldr	r0, [r2, #0]
 8004172:	f000 fff3 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(ta_tc_valueBuffer, TA_TC_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VB8V).getText());
 8004176:	4a87      	ldr	r2, [pc, #540]	; (8004394 <_ZN15Screen2ViewBaseC1Ev+0x804>)
 8004178:	4603      	mov	r3, r0
 800417a:	210a      	movs	r1, #10
 800417c:	4640      	mov	r0, r8
 800417e:	f01a fd65 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_tc_value.resizeToCurrentText();
 8004182:	ee19 0a10 	vmov	r0, s18
 8004186:	f8c4 826c 	str.w	r8, [r4, #620]	; 0x26c
        color = newColor;
 800418a:	f04f 38ff 	mov.w	r8, #4294967295
 800418e:	f015 ff57 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004192:	2326      	movs	r3, #38	; 0x26
    ta_tc_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MPL3));
 8004194:	4629      	mov	r1, r5
 8004196:	ee19 0a10 	vmov	r0, s18
 800419a:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 800419e:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 80041a2:	f015 ff6d 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_tc.add(ta_tc_value);
 80041a6:	ee19 1a10 	vmov	r1, s18
 80041aa:	ee18 0a90 	vmov	r0, s17
 80041ae:	f014 fa3b 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80041b2:	ee18 1a90 	vmov	r1, s17
 80041b6:	4638      	mov	r0, r7
 80041b8:	f014 fa36 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_speed.setPosition(180, 0, 120, 77);
 80041bc:	204d      	movs	r0, #77	; 0x4d
 80041be:	2378      	movs	r3, #120	; 0x78
 80041c0:	4632      	mov	r2, r6
 80041c2:	21b4      	movs	r1, #180	; 0xb4
 80041c4:	9000      	str	r0, [sp, #0]
 80041c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80041c8:	f7ff fbb6 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_speed.setXY(0, 10);
 80041cc:	220a      	movs	r2, #10
 80041ce:	4631      	mov	r1, r6
 80041d0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80041d2:	f7ff fba4 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 80041d6:	2308      	movs	r3, #8
    img_speed.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_2_ID));
 80041d8:	4629      	mov	r1, r5
 80041da:	981c      	ldr	r0, [sp, #112]	; 0x70
 80041dc:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
 80041e0:	f016 f893 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_speed.add(img_speed);
 80041e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80041e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80041e8:	f014 fa1e 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_speed_value.setXY(30, 13);
 80041ec:	220d      	movs	r2, #13
 80041ee:	211e      	movs	r1, #30
 80041f0:	ee19 0a90 	vmov	r0, s19
 80041f4:	f7ff fb93 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 80041f8:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
 80041fc:	ee19 1a90 	vmov	r1, s19
 8004200:	4650      	mov	r0, sl
 8004202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 8004206:	f8c4 82f8 	str.w	r8, [r4, #760]	; 0x2f8
        linespace = space;
 800420a:	f8a4 62fc 	strh.w	r6, [r4, #764]	; 0x2fc
        boundingArea = calculateBoundingArea();
 800420e:	4798      	blx	r3
 8004210:	f504 7341 	add.w	r3, r4, #772	; 0x304
 8004214:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8004218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800421c:	4961      	ldr	r1, [pc, #388]	; (80043a4 <_ZN15Screen2ViewBaseC1Ev+0x814>)
 800421e:	680b      	ldr	r3, [r1, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f43f aedf 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004226:	4b60      	ldr	r3, [pc, #384]	; (80043a8 <_ZN15Screen2ViewBaseC1Ev+0x818>)
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	2b1f      	cmp	r3, #31
 800422c:	f67f aee4 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 8004230:	4a57      	ldr	r2, [pc, #348]	; (8004390 <_ZN15Screen2ViewBaseC1Ev+0x800>)
 8004232:	211f      	movs	r1, #31
 8004234:	6810      	ldr	r0, [r2, #0]
 8004236:	f000 ff91 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(ta_speed_valueBuffer, TA_SPEED_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_T2NN).getText());
 800423a:	4a56      	ldr	r2, [pc, #344]	; (8004394 <_ZN15Screen2ViewBaseC1Ev+0x804>)
 800423c:	4603      	mov	r3, r0
 800423e:	210a      	movs	r1, #10
 8004240:	4648      	mov	r0, r9
 8004242:	f01a fd03 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_speed_value.resizeToCurrentText();
 8004246:	ee19 0a90 	vmov	r0, s19
 800424a:	f8c4 9310 	str.w	r9, [r4, #784]	; 0x310
    Unicode::snprintf(ta_diff_valueBuffer, TA_DIFF_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PGAN).getText());
 800424e:	f604 695c 	addw	r9, r4, #3676	; 0xe5c
    ta_speed_value.resizeToCurrentText();
 8004252:	f015 fef5 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004256:	2320      	movs	r3, #32
    ta_speed_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KTQH));
 8004258:	4629      	mov	r1, r5
 800425a:	ee19 0a90 	vmov	r0, s19
 800425e:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004262:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 8004266:	f015 ff0b 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_speed.add(ta_speed_value);
 800426a:	ee19 1a90 	vmov	r1, s19
 800426e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004270:	f014 f9da 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004276:	4638      	mov	r0, r7
 8004278:	f014 f9d6 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_diff.setPosition(310, 0, 75, 77);
 800427c:	204d      	movs	r0, #77	; 0x4d
 800427e:	234b      	movs	r3, #75	; 0x4b
 8004280:	4632      	mov	r2, r6
 8004282:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004286:	9000      	str	r0, [sp, #0]
 8004288:	ee1a 0a10 	vmov	r0, s20
 800428c:	f7ff fb54 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_diff.setXY(0, 15);
 8004290:	220f      	movs	r2, #15
 8004292:	4631      	mov	r1, r6
 8004294:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004296:	f7ff fb42 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
    img_diff.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_1_ID));
 800429a:	4629      	mov	r1, r5
 800429c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800429e:	f8ad 60cc 	strh.w	r6, [sp, #204]	; 0xcc
 80042a2:	f016 f832 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_diff.add(img_diff);
 80042a6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80042a8:	ee1a 0a10 	vmov	r0, s20
 80042ac:	f014 f9bc 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_diff_title.setXY(21, 7);
 80042b0:	2207      	movs	r2, #7
 80042b2:	2115      	movs	r1, #21
 80042b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80042b6:	f7ff fb32 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 80042ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042bc:	4650      	mov	r0, sl
        color = newColor;
 80042be:	f8c4 839c 	str.w	r8, [r4, #924]	; 0x39c
        linespace = space;
 80042c2:	f8a4 63a0 	strh.w	r6, [r4, #928]	; 0x3a0
        boundingArea = calculateBoundingArea();
 80042c6:	f015 fc33 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80042ca:	f504 736a 	add.w	r3, r4, #936	; 0x3a8
 80042ce:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80042d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042d6:	231e      	movs	r3, #30
    ta_diff_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7Q3A));
 80042d8:	4629      	mov	r1, r5
 80042da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80042dc:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 80042e0:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 80042e4:	f015 fecc 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_diff.add(ta_diff_title);
 80042e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042ea:	ee1a 0a10 	vmov	r0, s20
 80042ee:	f014 f99b 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_diff_value.setXY(20, 29);
 80042f2:	221d      	movs	r2, #29
 80042f4:	2114      	movs	r1, #20
 80042f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042f8:	f7ff fb11 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        return TextArea::BoundingArea();
 80042fc:	4628      	mov	r0, r5
        color = newColor;
 80042fe:	f8c4 83e4 	str.w	r8, [r4, #996]	; 0x3e4
        linespace = space;
 8004302:	f8a4 63e8 	strh.w	r6, [r4, #1000]	; 0x3e8
 8004306:	f7ff fc09 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 800430a:	f504 737c 	add.w	r3, r4, #1008	; 0x3f0
 800430e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004312:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004316:	4923      	ldr	r1, [pc, #140]	; (80043a4 <_ZN15Screen2ViewBaseC1Ev+0x814>)
 8004318:	680b      	ldr	r3, [r1, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f43f ae62 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004320:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <_ZN15Screen2ViewBaseC1Ev+0x818>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	2b1c      	cmp	r3, #28
 8004326:	f67f ae67 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 800432a:	4a19      	ldr	r2, [pc, #100]	; (8004390 <_ZN15Screen2ViewBaseC1Ev+0x800>)
 800432c:	211c      	movs	r1, #28
 800432e:	6810      	ldr	r0, [r2, #0]
 8004330:	f000 ff14 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(ta_diff_valueBuffer, TA_DIFF_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PGAN).getText());
 8004334:	4a17      	ldr	r2, [pc, #92]	; (8004394 <_ZN15Screen2ViewBaseC1Ev+0x804>)
 8004336:	4603      	mov	r3, r0
 8004338:	210a      	movs	r1, #10
 800433a:	4648      	mov	r0, r9
 800433c:	f01a fc86 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_diff_value.resizeToCurrentText();
 8004340:	980d      	ldr	r0, [sp, #52]	; 0x34
        wc1 = value;
 8004342:	f8c4 93fc 	str.w	r9, [r4, #1020]	; 0x3fc
        : typedTextId(id)
 8004346:	f04f 091d 	mov.w	r9, #29
 800434a:	f015 fe79 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ta_diff_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LWZ6));
 800434e:	4629      	mov	r1, r5
 8004350:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004352:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 8004356:	f8ad 90d0 	strh.w	r9, [sp, #208]	; 0xd0
 800435a:	f015 fe91 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_diff.add(ta_diff_value);
 800435e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004360:	ee1a 0a10 	vmov	r0, s20
 8004364:	f014 f960 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004368:	ee1a 1a10 	vmov	r1, s20
 800436c:	4638      	mov	r0, r7
 800436e:	f014 f95b 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_tsac.setPosition(395, 0, 75, 75);
 8004372:	234b      	movs	r3, #75	; 0x4b
 8004374:	4632      	mov	r2, r6
 8004376:	f240 118b 	movw	r1, #395	; 0x18b
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	ee1a 0a90 	vmov	r0, s21
 8004380:	f7ff fada 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_tsac.setXY(0, 15);
 8004384:	220f      	movs	r2, #15
 8004386:	4631      	mov	r1, r6
 8004388:	981e      	ldr	r0, [sp, #120]	; 0x78
 800438a:	f7ff fac8 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 800438e:	e00f      	b.n	80043b0 <_ZN15Screen2ViewBaseC1Ev+0x820>
 8004390:	20016018 	.word	0x20016018
 8004394:	0802f9b0 	.word	0x0802f9b0
 8004398:	fffaf7f7 	.word	0xfffaf7f7
 800439c:	fffafafa 	.word	0xfffafafa
 80043a0:	fffffcfc 	.word	0xfffffcfc
 80043a4:	2001600c 	.word	0x2001600c
 80043a8:	20016010 	.word	0x20016010
 80043ac:	0802da24 	.word	0x0802da24
    img_tsac.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_1_ID));
 80043b0:	4629      	mov	r1, r5
 80043b2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80043b4:	f8ad 60cc 	strh.w	r6, [sp, #204]	; 0xcc
 80043b8:	f015 ffa7 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_tsac.add(img_tsac);
 80043bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80043be:	ee1a 0a90 	vmov	r0, s21
 80043c2:	f014 f931 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_tsac_title.setXY(17, 7);
 80043c6:	2207      	movs	r2, #7
 80043c8:	2111      	movs	r1, #17
 80043ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 80043cc:	f7ff faa7 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 80043d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80043d2:	4650      	mov	r0, sl
        color = newColor;
 80043d4:	f8c4 8488 	str.w	r8, [r4, #1160]	; 0x488
        linespace = space;
 80043d8:	f8a4 648c 	strh.w	r6, [r4, #1164]	; 0x48c
        boundingArea = calculateBoundingArea();
 80043dc:	f015 fba8 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80043e0:	f204 4394 	addw	r3, r4, #1172	; 0x494
 80043e4:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80043e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80043ec:	2319      	movs	r3, #25
    ta_tsac_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DT6J));
 80043ee:	4629      	mov	r1, r5
 80043f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80043f2:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 80043f6:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 80043fa:	f015 fe41 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_tsac.add(ta_tsac_title);
 80043fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004400:	ee1a 0a90 	vmov	r0, s21
 8004404:	f014 f910 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_tsac_value.setXY(20, 29);
 8004408:	464a      	mov	r2, r9
 800440a:	2114      	movs	r1, #20
 800440c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800440e:	f7ff fa86 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        return TextArea::BoundingArea();
 8004412:	4628      	mov	r0, r5
        color = newColor;
 8004414:	f8c4 84d0 	str.w	r8, [r4, #1232]	; 0x4d0
        linespace = space;
 8004418:	f8a4 64d4 	strh.w	r6, [r4, #1236]	; 0x4d4
 800441c:	f7ff fb7e 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8004420:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
 8004424:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004428:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800442c:	49df      	ldr	r1, [pc, #892]	; (80047ac <_ZN15Screen2ViewBaseC1Ev+0xc1c>)
    Unicode::snprintf(ta_tsac_valueBuffer, TA_TSAC_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_B0AC).getText());
 800442e:	f504 6567 	add.w	r5, r4, #3696	; 0xe70
 8004432:	680b      	ldr	r3, [r1, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f43f add5 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800443a:	4bdd      	ldr	r3, [pc, #884]	; (80047b0 <_ZN15Screen2ViewBaseC1Ev+0xc20>)
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	2b1a      	cmp	r3, #26
 8004440:	f67f adda 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 8004444:	4adb      	ldr	r2, [pc, #876]	; (80047b4 <_ZN15Screen2ViewBaseC1Ev+0xc24>)
 8004446:	211a      	movs	r1, #26
        : typedTextId(id)
 8004448:	46d9      	mov	r9, fp
        linespace = space;
 800444a:	f04f 0800 	mov.w	r8, #0
        return texts->getText(typedTextId);
 800444e:	6810      	ldr	r0, [r2, #0]
    Unicode::snprintf(ta_leng_valueBuffer, TA_LENG_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PEVD).getText());
 8004450:	f604 6684 	addw	r6, r4, #3716	; 0xe84
 8004454:	f000 fe82 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(ta_tsac_valueBuffer, TA_TSAC_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_B0AC).getText());
 8004458:	4ad7      	ldr	r2, [pc, #860]	; (80047b8 <_ZN15Screen2ViewBaseC1Ev+0xc28>)
 800445a:	4603      	mov	r3, r0
 800445c:	210a      	movs	r1, #10
 800445e:	4628      	mov	r0, r5
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004460:	f8df a348 	ldr.w	sl, [pc, #840]	; 80047ac <_ZN15Screen2ViewBaseC1Ev+0xc1c>
 8004464:	f01a fbf2 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_tsac_value.resizeToCurrentText();
 8004468:	980f      	ldr	r0, [sp, #60]	; 0x3c
        wc1 = value;
 800446a:	f8c4 54e8 	str.w	r5, [r4, #1256]	; 0x4e8
    ta_tsac_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BTKU));
 800446e:	ad33      	add	r5, sp, #204	; 0xcc
    ta_tsac_value.resizeToCurrentText();
 8004470:	f015 fde6 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004474:	f04f 011b 	mov.w	r1, #27
    ta_tsac_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BTKU));
 8004478:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800447a:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
 800447e:	4629      	mov	r1, r5
 8004480:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 8004484:	f015 fdfc 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_tsac.add(ta_tsac_value);
 8004488:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800448a:	ee1a 0a90 	vmov	r0, s21
 800448e:	f014 f8cb 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004492:	ee1a 1a90 	vmov	r1, s21
 8004496:	4638      	mov	r0, r7
 8004498:	f04f 0b09 	mov.w	fp, #9
 800449c:	f014 f8c4 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_leng.setPosition(10, 80, 84, 70);
 80044a0:	2146      	movs	r1, #70	; 0x46
 80044a2:	2354      	movs	r3, #84	; 0x54
 80044a4:	2250      	movs	r2, #80	; 0x50
 80044a6:	ee1b 0a10 	vmov	r0, s22
 80044aa:	9100      	str	r1, [sp, #0]
 80044ac:	210a      	movs	r1, #10
 80044ae:	f7ff fa43 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_LENG.setXY(0, 10);
 80044b2:	220a      	movs	r2, #10
 80044b4:	2100      	movs	r1, #0
 80044b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80044b8:	f7ff fa31 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
    img_LENG.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_3_ID));
 80044bc:	4629      	mov	r1, r5
 80044be:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80044c0:	f8ad b0cc 	strh.w	fp, [sp, #204]	; 0xcc
 80044c4:	f015 ff21 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_leng.add(img_LENG);
 80044c8:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80044ca:	ee1b 0a10 	vmov	r0, s22
 80044ce:	f014 f8ab 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_leng_value.setXY(25, 22);
 80044d2:	2216      	movs	r2, #22
 80044d4:	2119      	movs	r1, #25
 80044d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80044d8:	f7ff fa21 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80044dc:	4bb7      	ldr	r3, [pc, #732]	; (80047bc <_ZN15Screen2ViewBaseC1Ev+0xc2c>)
        return TextArea::BoundingArea();
 80044de:	4628      	mov	r0, r5
        linespace = space;
 80044e0:	f8a4 8578 	strh.w	r8, [r4, #1400]	; 0x578
        color = newColor;
 80044e4:	f8c4 3574 	str.w	r3, [r4, #1396]	; 0x574
 80044e8:	f7ff fb18 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 80044ec:	f504 63b0 	add.w	r3, r4, #1408	; 0x580
 80044f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80044f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80044f8:	f8da 3000 	ldr.w	r3, [sl]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f43f ad71 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004502:	4bab      	ldr	r3, [pc, #684]	; (80047b0 <_ZN15Screen2ViewBaseC1Ev+0xc20>)
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	2b16      	cmp	r3, #22
 8004508:	f67f ad76 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 800450c:	4aa9      	ldr	r2, [pc, #676]	; (80047b4 <_ZN15Screen2ViewBaseC1Ev+0xc24>)
 800450e:	2116      	movs	r1, #22
 8004510:	6810      	ldr	r0, [r2, #0]
 8004512:	f000 fe23 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(ta_leng_valueBuffer, TA_LENG_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PEVD).getText());
 8004516:	4aa8      	ldr	r2, [pc, #672]	; (80047b8 <_ZN15Screen2ViewBaseC1Ev+0xc28>)
 8004518:	4603      	mov	r3, r0
 800451a:	210a      	movs	r1, #10
 800451c:	4630      	mov	r0, r6
 800451e:	f01a fb95 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_leng_value.resizeToCurrentText();
 8004522:	9810      	ldr	r0, [sp, #64]	; 0x40
        wc1 = value;
 8004524:	f8c4 658c 	str.w	r6, [r4, #1420]	; 0x58c
 8004528:	ae2e      	add	r6, sp, #184	; 0xb8
 800452a:	f015 fd89 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 800452e:	f04f 0117 	mov.w	r1, #23
    ta_leng_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_POK9));
 8004532:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004534:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
 8004538:	4629      	mov	r1, r5
 800453a:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 800453e:	f015 fd9f 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_leng.add(ta_leng_value);
 8004542:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004544:	ee1b 0a10 	vmov	r0, s22
 8004548:	f014 f86e 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_leng_title.setXY(19, 0);
 800454c:	4642      	mov	r2, r8
 800454e:	2113      	movs	r1, #19
 8004550:	ee1b 0a90 	vmov	r0, s23
 8004554:	f7ff f9e3 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004558:	4999      	ldr	r1, [pc, #612]	; (80047c0 <_ZN15Screen2ViewBaseC1Ev+0xc30>)
        boundingArea = calculateBoundingArea();
 800455a:	4630      	mov	r0, r6
        linespace = space;
 800455c:	f8a4 85c4 	strh.w	r8, [r4, #1476]	; 0x5c4
        color = newColor;
 8004560:	f8c4 15c0 	str.w	r1, [r4, #1472]	; 0x5c0
        boundingArea = calculateBoundingArea();
 8004564:	ee1b 1a90 	vmov	r1, s23
 8004568:	f015 fae2 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800456c:	ee1b 0a90 	vmov	r0, s23
 8004570:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8004574:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004578:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800457c:	f04f 0018 	mov.w	r0, #24
    ta_leng_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_12QF));
 8004580:	4629      	mov	r1, r5
 8004582:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 8004586:	f8ad 00d0 	strh.w	r0, [sp, #208]	; 0xd0
 800458a:	ee1b 0a90 	vmov	r0, s23
 800458e:	f015 fd77 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_leng.add(ta_leng_title);
 8004592:	ee1b 1a90 	vmov	r1, s23
 8004596:	ee1b 0a10 	vmov	r0, s22
 800459a:	f014 f845 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800459e:	ee1b 1a10 	vmov	r1, s22
 80045a2:	4638      	mov	r0, r7
 80045a4:	f014 f840 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_linv.setPosition(104, 80, 84, 70);
 80045a8:	2046      	movs	r0, #70	; 0x46
 80045aa:	2354      	movs	r3, #84	; 0x54
 80045ac:	2250      	movs	r2, #80	; 0x50
 80045ae:	2168      	movs	r1, #104	; 0x68
 80045b0:	9000      	str	r0, [sp, #0]
 80045b2:	ee1c 0a10 	vmov	r0, s24
 80045b6:	f7ff f9bf 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_linv.setXY(0, 10);
 80045ba:	220a      	movs	r2, #10
 80045bc:	4641      	mov	r1, r8
 80045be:	9820      	ldr	r0, [sp, #128]	; 0x80
 80045c0:	f7ff f9ad 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
    img_linv.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_3_ID));
 80045c4:	4629      	mov	r1, r5
 80045c6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80045c8:	f8ad b0cc 	strh.w	fp, [sp, #204]	; 0xcc
 80045cc:	f015 fe9d 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_linv.add(img_linv);
 80045d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80045d2:	ee1c 0a10 	vmov	r0, s24
 80045d6:	f014 f827 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_linv_value.setXY(25, 22);
 80045da:	2216      	movs	r2, #22
 80045dc:	2119      	movs	r1, #25
 80045de:	9811      	ldr	r0, [sp, #68]	; 0x44
 80045e0:	f7ff f99d 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
        linespace = space;
 80045e8:	f8a4 8664 	strh.w	r8, [r4, #1636]	; 0x664
    Unicode::snprintf(ta_linv_valueBuffer, TA_LINV_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NIM4).getText());
 80045ec:	f604 6b98 	addw	fp, r4, #3736	; 0xe98
        color = newColor;
 80045f0:	f8c4 0660 	str.w	r0, [r4, #1632]	; 0x660
        return TextArea::BoundingArea();
 80045f4:	4628      	mov	r0, r5
 80045f6:	f7ff fa91 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 80045fa:	f204 636c 	addw	r3, r4, #1644	; 0x66c
 80045fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004602:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004606:	f8da 3000 	ldr.w	r3, [sl]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f43f acea 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004610:	4b67      	ldr	r3, [pc, #412]	; (80047b0 <_ZN15Screen2ViewBaseC1Ev+0xc20>)
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	2b14      	cmp	r3, #20
 8004616:	f67f acef 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 800461a:	4a66      	ldr	r2, [pc, #408]	; (80047b4 <_ZN15Screen2ViewBaseC1Ev+0xc24>)
 800461c:	2114      	movs	r1, #20
 800461e:	6810      	ldr	r0, [r2, #0]
 8004620:	f000 fd9c 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8004624:	4a64      	ldr	r2, [pc, #400]	; (80047b8 <_ZN15Screen2ViewBaseC1Ev+0xc28>)
 8004626:	4603      	mov	r3, r0
 8004628:	210a      	movs	r1, #10
 800462a:	4658      	mov	r0, fp
 800462c:	f01a fb0e 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_linv_value.resizeToCurrentText();
 8004630:	9811      	ldr	r0, [sp, #68]	; 0x44
        wc1 = value;
 8004632:	f8c4 b678 	str.w	fp, [r4, #1656]	; 0x678
    Unicode::snprintf(ta_bat_valueBuffer, TA_BAT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NBXH).getText());
 8004636:	f604 6bac 	addw	fp, r4, #3756	; 0xeac
    ta_linv_value.resizeToCurrentText();
 800463a:	f015 fd01 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 800463e:	2315      	movs	r3, #21
    ta_linv_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PYFJ));
 8004640:	4629      	mov	r1, r5
 8004642:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004644:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004648:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 800464c:	f015 fd18 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_linv.add(ta_linv_value);
 8004650:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004652:	ee1c 0a10 	vmov	r0, s24
 8004656:	f013 ffe7 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_linv_title.setXY(23, 0);
 800465a:	4642      	mov	r2, r8
 800465c:	2117      	movs	r1, #23
 800465e:	ee1c 0a90 	vmov	r0, s25
 8004662:	f7ff f95c 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004666:	4956      	ldr	r1, [pc, #344]	; (80047c0 <_ZN15Screen2ViewBaseC1Ev+0xc30>)
        boundingArea = calculateBoundingArea();
 8004668:	4630      	mov	r0, r6
        linespace = space;
 800466a:	f8a4 86b0 	strh.w	r8, [r4, #1712]	; 0x6b0
        color = newColor;
 800466e:	f8c4 16ac 	str.w	r1, [r4, #1708]	; 0x6ac
        boundingArea = calculateBoundingArea();
 8004672:	ee1c 1a90 	vmov	r1, s25
 8004676:	f015 fa5b 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800467a:	ee1c 0a90 	vmov	r0, s25
 800467e:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8004682:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004686:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800468a:	2313      	movs	r3, #19
    ta_linv_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2J43));
 800468c:	4629      	mov	r1, r5
 800468e:	ee1c 0a90 	vmov	r0, s25
 8004692:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 8004696:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 800469a:	f015 fcf1 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_linv.add(ta_linv_title);
 800469e:	ee1c 1a90 	vmov	r1, s25
 80046a2:	ee1c 0a10 	vmov	r0, s24
 80046a6:	f013 ffbf 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80046aa:	ee1c 1a10 	vmov	r1, s24
 80046ae:	4638      	mov	r0, r7
 80046b0:	f013 ffba 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_bat.setPosition(198, 80, 84, 70);
 80046b4:	2046      	movs	r0, #70	; 0x46
 80046b6:	2354      	movs	r3, #84	; 0x54
 80046b8:	2250      	movs	r2, #80	; 0x50
 80046ba:	21c6      	movs	r1, #198	; 0xc6
 80046bc:	9000      	str	r0, [sp, #0]
 80046be:	ee1d 0a10 	vmov	r0, s26
 80046c2:	f7ff f939 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    ta_bat_value.setXY(25, 22);
 80046c6:	2216      	movs	r2, #22
 80046c8:	2119      	movs	r1, #25
 80046ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80046cc:	f7ff f927 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
        linespace = space;
 80046d4:	f8a4 8724 	strh.w	r8, [r4, #1828]	; 0x724
        color = newColor;
 80046d8:	f8c4 0720 	str.w	r0, [r4, #1824]	; 0x720
        return TextArea::BoundingArea();
 80046dc:	4628      	mov	r0, r5
 80046de:	f7ff fa1d 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 80046e2:	f204 732c 	addw	r3, r4, #1836	; 0x72c
 80046e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80046ee:	f8da 3000 	ldr.w	r3, [sl]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f43f ac76 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <_ZN15Screen2ViewBaseC1Ev+0xc20>)
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	f67f ac7b 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 8004702:	4a2c      	ldr	r2, [pc, #176]	; (80047b4 <_ZN15Screen2ViewBaseC1Ev+0xc24>)
 8004704:	2110      	movs	r1, #16
 8004706:	6810      	ldr	r0, [r2, #0]
 8004708:	f000 fd28 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(ta_bat_valueBuffer, TA_BAT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NBXH).getText());
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <_ZN15Screen2ViewBaseC1Ev+0xc28>)
 800470e:	4603      	mov	r3, r0
 8004710:	210a      	movs	r1, #10
 8004712:	4658      	mov	r0, fp
 8004714:	f01a fa9a 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_bat_value.resizeToCurrentText();
 8004718:	9812      	ldr	r0, [sp, #72]	; 0x48
        wc1 = value;
 800471a:	f8c4 b738 	str.w	fp, [r4, #1848]	; 0x738
        : typedTextId(id)
 800471e:	f04f 0b12 	mov.w	fp, #18
 8004722:	f015 fc8d 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8004726:	2311      	movs	r3, #17
    ta_bat_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_C5WJ));
 8004728:	4629      	mov	r1, r5
 800472a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800472c:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004730:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 8004734:	f015 fca4 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_bat.add(ta_bat_value);
 8004738:	9912      	ldr	r1, [sp, #72]	; 0x48
 800473a:	ee1d 0a10 	vmov	r0, s26
 800473e:	f013 ff73 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_bat_title.setXY(27, 0);
 8004742:	4642      	mov	r2, r8
 8004744:	211b      	movs	r1, #27
 8004746:	ee1d 0a90 	vmov	r0, s27
 800474a:	f7ff f8e8 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800474e:	f04f 30ff 	mov.w	r0, #4294967295
        boundingArea = calculateBoundingArea();
 8004752:	ee1d 1a90 	vmov	r1, s27
        linespace = space;
 8004756:	f8a4 8770 	strh.w	r8, [r4, #1904]	; 0x770
        color = newColor;
 800475a:	f8c4 076c 	str.w	r0, [r4, #1900]	; 0x76c
        boundingArea = calculateBoundingArea();
 800475e:	4630      	mov	r0, r6
 8004760:	f015 f9e6 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004764:	ee1d 0a90 	vmov	r0, s27
 8004768:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 800476c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004770:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ta_bat_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6AS4));
 8004774:	4629      	mov	r1, r5
 8004776:	ee1d 0a90 	vmov	r0, s27
 800477a:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 800477e:	f8ad b0d0 	strh.w	fp, [sp, #208]	; 0xd0
 8004782:	f015 fc7d 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_bat.add(ta_bat_title);
 8004786:	ee1d 1a90 	vmov	r1, s27
 800478a:	ee1d 0a10 	vmov	r0, s26
 800478e:	f013 ff4b 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    img_bat.setXY(0, 10);
 8004792:	220a      	movs	r2, #10
 8004794:	4641      	mov	r1, r8
 8004796:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004798:	f7ff f8c1 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 800479c:	f04f 0009 	mov.w	r0, #9
    img_bat.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_3_ID));
 80047a0:	4629      	mov	r1, r5
 80047a2:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
 80047a6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80047a8:	e00c      	b.n	80047c4 <_ZN15Screen2ViewBaseC1Ev+0xc34>
 80047aa:	bf00      	nop
 80047ac:	2001600c 	.word	0x2001600c
 80047b0:	20016010 	.word	0x20016010
 80047b4:	20016018 	.word	0x20016018
 80047b8:	0802f9b0 	.word	0x0802f9b0
 80047bc:	fffcfafa 	.word	0xfffcfafa
 80047c0:	fffffcfc 	.word	0xfffffcfc
 80047c4:	f015 fda1 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_bat.add(img_bat);
 80047c8:	9921      	ldr	r1, [sp, #132]	; 0x84
 80047ca:	ee1d 0a10 	vmov	r0, s26
 80047ce:	f013 ff2b 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047d2:	ee1d 1a10 	vmov	r1, s26
 80047d6:	4638      	mov	r0, r7
 80047d8:	f013 ff26 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_rinv.setPosition(292, 80, 84, 70);
 80047dc:	f04f 0c46 	mov.w	ip, #70	; 0x46
 80047e0:	2354      	movs	r3, #84	; 0x54
 80047e2:	2250      	movs	r2, #80	; 0x50
 80047e4:	f8cd c000 	str.w	ip, [sp]
 80047e8:	f44f 7192 	mov.w	r1, #292	; 0x124
 80047ec:	ee1e 0a10 	vmov	r0, s28
 80047f0:	f7ff f8a2 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    ta_rinv_value.setXY(24, 23);
 80047f4:	2217      	movs	r2, #23
 80047f6:	2118      	movs	r1, #24
 80047f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80047fa:	f7ff f890 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80047fe:	49dc      	ldr	r1, [pc, #880]	; (8004b70 <_ZN15Screen2ViewBaseC1Ev+0xfe0>)
        return TextArea::BoundingArea();
 8004800:	4628      	mov	r0, r5
        linespace = space;
 8004802:	f8a4 8810 	strh.w	r8, [r4, #2064]	; 0x810
        color = newColor;
 8004806:	f8c4 180c 	str.w	r1, [r4, #2060]	; 0x80c
 800480a:	f7ff f987 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 800480e:	f604 0318 	addw	r3, r4, #2072	; 0x818
    Unicode::snprintf(ta_rinv_valueBuffer, TA_RINV_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_I8II).getText());
 8004812:	f504 6c6c 	add.w	ip, r4, #3776	; 0xec0
 8004816:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800481a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800481e:	f8da 3000 	ldr.w	r3, [sl]
 8004822:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	f43f abdc 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800482c:	4bd1      	ldr	r3, [pc, #836]	; (8004b74 <_ZN15Screen2ViewBaseC1Ev+0xfe4>)
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	2b0d      	cmp	r3, #13
 8004832:	f67f abe1 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 8004836:	4ad0      	ldr	r2, [pc, #832]	; (8004b78 <_ZN15Screen2ViewBaseC1Ev+0xfe8>)
 8004838:	210d      	movs	r1, #13
 800483a:	6810      	ldr	r0, [r2, #0]
 800483c:	f000 fc8e 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8004840:	210a      	movs	r1, #10
 8004842:	4603      	mov	r3, r0
 8004844:	4acd      	ldr	r2, [pc, #820]	; (8004b7c <_ZN15Screen2ViewBaseC1Ev+0xfec>)
 8004846:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004848:	f01a fa00 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 800484c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ta_rinv_value.resizeToCurrentText();
 800484e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004850:	f8c4 2824 	str.w	r2, [r4, #2084]	; 0x824
 8004854:	f015 fbf4 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004858:	230e      	movs	r3, #14
    ta_rinv_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2VE1));
 800485a:	4629      	mov	r1, r5
 800485c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800485e:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004862:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 8004866:	f015 fc0b 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_rinv.add(ta_rinv_value);
 800486a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800486c:	ee1e 0a10 	vmov	r0, s28
 8004870:	f013 feda 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_rinv_title.setXY(22, 0);
 8004874:	4642      	mov	r2, r8
 8004876:	2116      	movs	r1, #22
 8004878:	ee1e 0a90 	vmov	r0, s29
 800487c:	f7ff f84f 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004880:	49bb      	ldr	r1, [pc, #748]	; (8004b70 <_ZN15Screen2ViewBaseC1Ev+0xfe0>)
        boundingArea = calculateBoundingArea();
 8004882:	4630      	mov	r0, r6
        linespace = space;
 8004884:	f8a4 885c 	strh.w	r8, [r4, #2140]	; 0x85c
        color = newColor;
 8004888:	f8c4 1858 	str.w	r1, [r4, #2136]	; 0x858
        boundingArea = calculateBoundingArea();
 800488c:	ee1e 1a90 	vmov	r1, s29
 8004890:	f015 f94e 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004894:	ee1e 2a90 	vmov	r2, s29
 8004898:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 800489c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80048a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80048a4:	230f      	movs	r3, #15
    ta_rinv_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DDPI));
 80048a6:	4629      	mov	r1, r5
 80048a8:	ee1e 0a90 	vmov	r0, s29
 80048ac:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 80048b0:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 80048b4:	f015 fbe4 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_rinv.add(ta_rinv_title);
 80048b8:	ee1e 1a90 	vmov	r1, s29
 80048bc:	ee1e 0a10 	vmov	r0, s28
 80048c0:	f013 feb2 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    img_rinv.setXY(0, 10);
 80048c4:	220a      	movs	r2, #10
 80048c6:	4641      	mov	r1, r8
 80048c8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80048ca:	f7ff f828 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 80048ce:	f04f 0009 	mov.w	r0, #9
    img_rinv.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_3_ID));
 80048d2:	4629      	mov	r1, r5
 80048d4:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
 80048d8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80048da:	f015 fd16 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_rinv.add(img_rinv);
 80048de:	9922      	ldr	r1, [sp, #136]	; 0x88
 80048e0:	ee1e 0a10 	vmov	r0, s28
 80048e4:	f013 fea0 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80048e8:	ee1e 1a10 	vmov	r1, s28
 80048ec:	4638      	mov	r0, r7
 80048ee:	f013 fe9b 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_reng.setPosition(386, 80, 84, 70);
 80048f2:	2246      	movs	r2, #70	; 0x46
 80048f4:	2354      	movs	r3, #84	; 0x54
 80048f6:	f44f 71c1 	mov.w	r1, #386	; 0x182
 80048fa:	ee1f 0a10 	vmov	r0, s30
 80048fe:	9200      	str	r2, [sp, #0]
 8004900:	2250      	movs	r2, #80	; 0x50
 8004902:	f7ff f819 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_reng.setXY(0, 10);
 8004906:	220a      	movs	r2, #10
 8004908:	4641      	mov	r1, r8
 800490a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800490c:	f7ff f807 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 8004910:	f04f 0009 	mov.w	r0, #9
    img_reng.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_3_ID));
 8004914:	4629      	mov	r1, r5
 8004916:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
 800491a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800491c:	f015 fcf5 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_reng.add(img_reng);
 8004920:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8004922:	ee1f 0a10 	vmov	r0, s30
 8004926:	f013 fe7f 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_reng_title.setXY(18, 0);
 800492a:	4642      	mov	r2, r8
 800492c:	4659      	mov	r1, fp
 800492e:	ee1f 0a90 	vmov	r0, s31
 8004932:	f7fe fff4 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004936:	4b92      	ldr	r3, [pc, #584]	; (8004b80 <_ZN15Screen2ViewBaseC1Ev+0xff0>)
        boundingArea = calculateBoundingArea();
 8004938:	4630      	mov	r0, r6
 800493a:	ee1f 1a90 	vmov	r1, s31
        color = newColor;
 800493e:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
        linespace = space;
 8004942:	f8a4 8928 	strh.w	r8, [r4, #2344]	; 0x928
        boundingArea = calculateBoundingArea();
 8004946:	f015 f8f3 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800494a:	ee1f 2a90 	vmov	r2, s31
 800494e:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8004952:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004956:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800495a:	230a      	movs	r3, #10
    ta_reng_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VO5V));
 800495c:	4629      	mov	r1, r5
 800495e:	ee1f 0a90 	vmov	r0, s31
        color = newColor;
 8004962:	4e83      	ldr	r6, [pc, #524]	; (8004b70 <_ZN15Screen2ViewBaseC1Ev+0xfe0>)
 8004964:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004968:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 800496c:	f015 fb88 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_reng.add(ta_reng_title);
 8004970:	ee1f 1a90 	vmov	r1, s31
 8004974:	ee1f 0a10 	vmov	r0, s30
 8004978:	f013 fe56 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_reng_value.setXY(25, 23);
 800497c:	2217      	movs	r2, #23
 800497e:	2119      	movs	r1, #25
 8004980:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004982:	f7fe ffcc 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        return TextArea::BoundingArea();
 8004986:	4628      	mov	r0, r5
 8004988:	f8c4 696c 	str.w	r6, [r4, #2412]	; 0x96c
        linespace = space;
 800498c:	f8a4 8970 	strh.w	r8, [r4, #2416]	; 0x970
 8004990:	f7ff f8c4 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8004994:	f604 1378 	addw	r3, r4, #2424	; 0x978
 8004998:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800499c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80049a0:	f8da 3000 	ldr.w	r3, [sl]
    Unicode::snprintf(ta_reng_valueBuffer, TA_RENG_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_C91E).getText());
 80049a4:	f604 65d4 	addw	r5, r4, #3796	; 0xed4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f43f ab1b 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80049ae:	4b71      	ldr	r3, [pc, #452]	; (8004b74 <_ZN15Screen2ViewBaseC1Ev+0xfe4>)
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	2b0b      	cmp	r3, #11
 80049b4:	f67f ab20 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 80049b8:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8004b78 <_ZN15Screen2ViewBaseC1Ev+0xfe8>
 80049bc:	210b      	movs	r1, #11
        : typedTextId(id)
 80049be:	f04f 0a0c 	mov.w	sl, #12
        return texts->getText(typedTextId);
 80049c2:	f8db 0000 	ldr.w	r0, [fp]
 80049c6:	f000 fbc9 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 80049ca:	4a6c      	ldr	r2, [pc, #432]	; (8004b7c <_ZN15Screen2ViewBaseC1Ev+0xfec>)
 80049cc:	4603      	mov	r3, r0
 80049ce:	210a      	movs	r1, #10
 80049d0:	4628      	mov	r0, r5
 80049d2:	f01a f93b 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 80049d6:	f8c4 5984 	str.w	r5, [r4, #2436]	; 0x984
    ta_reng_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3K5F));
 80049da:	ad33      	add	r5, sp, #204	; 0xcc
    ta_reng_value.resizeToCurrentText();
 80049dc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80049de:	f015 fb2f 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ta_reng_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3K5F));
 80049e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80049e4:	4629      	mov	r1, r5
        : typedTextId(id)
 80049e6:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 80049ea:	f8ad a0d0 	strh.w	sl, [sp, #208]	; 0xd0
 80049ee:	f015 fb47 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_reng.add(ta_reng_value);
 80049f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80049f4:	ee1f 0a10 	vmov	r0, s30
 80049f8:	f013 fe16 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80049fc:	ee1f 1a10 	vmov	r1, s30
 8004a00:	4638      	mov	r0, r7
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004a02:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8004b88 <_ZN15Screen2ViewBaseC1Ev+0xff8>
 8004a06:	f013 fe0f 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_err.setPosition(10, 155, 84, 70);
 8004a0a:	2146      	movs	r1, #70	; 0x46
 8004a0c:	2354      	movs	r3, #84	; 0x54
 8004a0e:	229b      	movs	r2, #155	; 0x9b
 8004a10:	9803      	ldr	r0, [sp, #12]
 8004a12:	9100      	str	r1, [sp, #0]
 8004a14:	210a      	movs	r1, #10
 8004a16:	f7fe ff8f 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    ta_err_value.setXY(36, 22);
 8004a1a:	2216      	movs	r2, #22
 8004a1c:	2124      	movs	r1, #36	; 0x24
 8004a1e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004a20:	f7fe ff7d 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004a24:	f8c4 69e4 	str.w	r6, [r4, #2532]	; 0x9e4
        linespace = space;
 8004a28:	f8a4 89e8 	strh.w	r8, [r4, #2536]	; 0x9e8
        return TextArea::BoundingArea();
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f7ff f875 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8004a32:	f504 631f 	add.w	r3, r4, #2544	; 0x9f0
        linespace = space;
 8004a36:	4646      	mov	r6, r8
    Unicode::snprintf(ta_err_valueBuffer, TA_ERR_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LEMV).getText());
 8004a38:	f604 68e8 	addw	r8, r4, #3816	; 0xee8
        boundingArea = calculateBoundingArea();
 8004a3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004a44:	f8d9 3000 	ldr.w	r3, [r9]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f43f aacb 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004a4e:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <_ZN15Screen2ViewBaseC1Ev+0xfe4>)
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	2b07      	cmp	r3, #7
 8004a54:	f67f aad0 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 8004a58:	2107      	movs	r1, #7
 8004a5a:	f8db 0000 	ldr.w	r0, [fp]
 8004a5e:	f000 fb7d 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8004a62:	4a46      	ldr	r2, [pc, #280]	; (8004b7c <_ZN15Screen2ViewBaseC1Ev+0xfec>)
 8004a64:	4603      	mov	r3, r0
 8004a66:	210a      	movs	r1, #10
 8004a68:	4640      	mov	r0, r8
 8004a6a:	f01a f8ef 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_err_value.resizeToCurrentText();
 8004a6e:	9815      	ldr	r0, [sp, #84]	; 0x54
        wc1 = value;
 8004a70:	f8c4 89fc 	str.w	r8, [r4, #2556]	; 0x9fc
 8004a74:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8004a78:	f015 fae2 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	4a41      	ldr	r2, [pc, #260]	; (8004b84 <_ZN15Screen2ViewBaseC1Ev+0xff4>)
    ta_err_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DFVL));
 8004a80:	4629      	mov	r1, r5
 8004a82:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004a84:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004a88:	9233      	str	r2, [sp, #204]	; 0xcc
 8004a8a:	f015 faf9 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_err.add(ta_err_value);
 8004a8e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004a90:	9803      	ldr	r0, [sp, #12]
 8004a92:	f013 fdc9 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_err_title.setXY(28, 0);
 8004a96:	4632      	mov	r2, r6
 8004a98:	211c      	movs	r1, #28
 8004a9a:	9804      	ldr	r0, [sp, #16]
 8004a9c:	f7fe ff3f 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004aa0:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8004aa4:	9904      	ldr	r1, [sp, #16]
 8004aa6:	4640      	mov	r0, r8
        color = newColor;
 8004aa8:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
        linespace = space;
 8004aac:	f8a4 6a34 	strh.w	r6, [r4, #2612]	; 0xa34
        boundingArea = calculateBoundingArea();
 8004ab0:	f015 f83e 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004ab4:	9904      	ldr	r1, [sp, #16]
 8004ab6:	f101 033c 	add.w	r3, r1, #60	; 0x3c
 8004aba:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004ac2:	f04f 0009 	mov.w	r0, #9
 8004ac6:	4a2f      	ldr	r2, [pc, #188]	; (8004b84 <_ZN15Screen2ViewBaseC1Ev+0xff4>)
    ta_err_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KOP2));
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f8ad 00d0 	strh.w	r0, [sp, #208]	; 0xd0
 8004ace:	9804      	ldr	r0, [sp, #16]
 8004ad0:	9233      	str	r2, [sp, #204]	; 0xcc
 8004ad2:	f015 fad5 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_err.add(ta_err_title);
 8004ad6:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8004ada:	f013 fda5 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    img_err.setXY(0, 10);
 8004ade:	220a      	movs	r2, #10
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8004ae4:	f7fe ff1b 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 8004ae8:	f04f 0009 	mov.w	r0, #9
    img_err.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_3_ID));
 8004aec:	4629      	mov	r1, r5
 8004aee:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
 8004af2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8004af4:	f015 fc09 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_err.add(img_err);
 8004af8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8004afa:	9803      	ldr	r0, [sp, #12]
 8004afc:	f013 fd94 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004b00:	9903      	ldr	r1, [sp, #12]
 8004b02:	4638      	mov	r0, r7
 8004b04:	f013 fd90 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_hv.setPosition(104, 160, 272, 65);
 8004b08:	2341      	movs	r3, #65	; 0x41
 8004b0a:	22a0      	movs	r2, #160	; 0xa0
 8004b0c:	2168      	movs	r1, #104	; 0x68
 8004b0e:	ee18 0a10 	vmov	r0, s16
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004b18:	f7fe ff0e 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_hv.setXY(0, 0);
 8004b1c:	4632      	mov	r2, r6
 8004b1e:	4631      	mov	r1, r6
 8004b20:	9825      	ldr	r0, [sp, #148]	; 0x94
 8004b22:	f7fe fefc 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 8004b26:	230b      	movs	r3, #11
    img_hv.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_5A_ID));
 8004b28:	4629      	mov	r1, r5
 8004b2a:	9825      	ldr	r0, [sp, #148]	; 0x94
 8004b2c:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
 8004b30:	f015 fbeb 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_hv.add(img_hv);
 8004b34:	9925      	ldr	r1, [sp, #148]	; 0x94
 8004b36:	ee18 0a10 	vmov	r0, s16
 8004b3a:	f013 fd75 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    img_hvstep.setXY(6, 6);
 8004b3e:	2206      	movs	r2, #6
 8004b40:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004b42:	4611      	mov	r1, r2
 8004b44:	f7fe feeb 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 8004b48:	230d      	movs	r3, #13
    img_hvstep.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_5C_ID));
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004b4e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
 8004b52:	f015 fbda 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_hv.add(img_hvstep);
 8004b56:	9926      	ldr	r1, [sp, #152]	; 0x98
 8004b58:	ee18 0a10 	vmov	r0, s16
 8004b5c:	f013 fd64 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    img_hvrect.setXY(88, 10);
 8004b60:	220a      	movs	r2, #10
 8004b62:	2158      	movs	r1, #88	; 0x58
 8004b64:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8004b66:	f7fe feda 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
    img_hvrect.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_5B_ID));
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8004b6e:	e00d      	b.n	8004b8c <_ZN15Screen2ViewBaseC1Ev+0xffc>
 8004b70:	fffffcfc 	.word	0xfffffcfc
 8004b74:	20016010 	.word	0x20016010
 8004b78:	20016018 	.word	0x20016018
 8004b7c:	0802f9b0 	.word	0x0802f9b0
 8004b80:	fffaf7f7 	.word	0xfffaf7f7
 8004b84:	0802da24 	.word	0x0802da24
 8004b88:	2001600c 	.word	0x2001600c
 8004b8c:	f8ad a0cc 	strh.w	sl, [sp, #204]	; 0xcc
 8004b90:	f015 fbbb 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_hv.add(img_hvrect);
 8004b94:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8004b96:	ee18 0a10 	vmov	r0, s16
 8004b9a:	f013 fd45 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_hv_value.setXY(108, 14);
 8004b9e:	220e      	movs	r2, #14
 8004ba0:	216c      	movs	r1, #108	; 0x6c
 8004ba2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004ba4:	f7fe febb 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004ba8:	4bb2      	ldr	r3, [pc, #712]	; (8004e74 <_ZN15Screen2ViewBaseC1Ev+0x12e4>)
        return TextArea::BoundingArea();
 8004baa:	4628      	mov	r0, r5
        linespace = space;
 8004bac:	f8a4 6b58 	strh.w	r6, [r4, #2904]	; 0xb58
        color = newColor;
 8004bb0:	f8c4 3b54 	str.w	r3, [r4, #2900]	; 0xb54
    Unicode::snprintf(ta_hv_valueBuffer, TA_HV_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_3SYQ).getText());
 8004bb4:	f604 6afc 	addw	sl, r4, #3836	; 0xefc
 8004bb8:	f7fe ffb0 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8004bbc:	f504 6336 	add.w	r3, r4, #2912	; 0xb60
 8004bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004bc8:	f8d9 3000 	ldr.w	r3, [r9]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f43f aa09 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004bd2:	4ba9      	ldr	r3, [pc, #676]	; (8004e78 <_ZN15Screen2ViewBaseC1Ev+0x12e8>)
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	f67f aa0e 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 8004bdc:	2105      	movs	r1, #5
 8004bde:	f8db 0000 	ldr.w	r0, [fp]
 8004be2:	f000 fabb 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8004be6:	4aa5      	ldr	r2, [pc, #660]	; (8004e7c <_ZN15Screen2ViewBaseC1Ev+0x12ec>)
 8004be8:	4603      	mov	r3, r0
 8004bea:	210a      	movs	r1, #10
 8004bec:	4650      	mov	r0, sl
 8004bee:	f01a f82d 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_hv_value.resizeToCurrentText();
 8004bf2:	9816      	ldr	r0, [sp, #88]	; 0x58
        wc1 = value;
 8004bf4:	f8c4 ab6c 	str.w	sl, [r4, #2924]	; 0xb6c
    Unicode::snprintf(ta_low_valueBuffer, TA_LOW_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RV3R).getText());
 8004bf8:	f504 6a71 	add.w	sl, r4, #3856	; 0xf10
    ta_hv_value.resizeToCurrentText();
 8004bfc:	f015 fa20 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004c00:	4a9f      	ldr	r2, [pc, #636]	; (8004e80 <_ZN15Screen2ViewBaseC1Ev+0x12f0>)
 8004c02:	2306      	movs	r3, #6
    ta_hv_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S5GX));
 8004c04:	4629      	mov	r1, r5
 8004c06:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004c08:	9233      	str	r2, [sp, #204]	; 0xcc
 8004c0a:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004c0e:	f015 fa37 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_hv.add(ta_hv_value);
 8004c12:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004c14:	ee18 0a10 	vmov	r0, s16
 8004c18:	f013 fd06 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004c1c:	ee18 1a10 	vmov	r1, s16
 8004c20:	4638      	mov	r0, r7
 8004c22:	f013 fd01 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_low.setPosition(386, 155, 84, 70);
 8004c26:	2146      	movs	r1, #70	; 0x46
 8004c28:	2354      	movs	r3, #84	; 0x54
 8004c2a:	229b      	movs	r2, #155	; 0x9b
 8004c2c:	9805      	ldr	r0, [sp, #20]
 8004c2e:	9100      	str	r1, [sp, #0]
 8004c30:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8004c34:	f7fe fe80 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    ta_low_value.setXY(14, 20);
 8004c38:	2214      	movs	r2, #20
 8004c3a:	210e      	movs	r1, #14
 8004c3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004c3e:	f7fe fe6e 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004c42:	4990      	ldr	r1, [pc, #576]	; (8004e84 <_ZN15Screen2ViewBaseC1Ev+0x12f4>)
        return TextArea::BoundingArea();
 8004c44:	4628      	mov	r0, r5
        linespace = space;
 8004c46:	f8a4 6bd0 	strh.w	r6, [r4, #3024]	; 0xbd0
        color = newColor;
 8004c4a:	f8c4 1bcc 	str.w	r1, [r4, #3020]	; 0xbcc
 8004c4e:	f7fe ff65 	bl	8003b1c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8004c52:	f604 33d8 	addw	r3, r4, #3032	; 0xbd8
 8004c56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004c5e:	f8d9 3000 	ldr.w	r3, [r9]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f43f a9be 	beq.w	8003fe4 <_ZN15Screen2ViewBaseC1Ev+0x454>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004c68:	4b83      	ldr	r3, [pc, #524]	; (8004e78 <_ZN15Screen2ViewBaseC1Ev+0x12e8>)
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	f67f a9c3 	bls.w	8003ff8 <_ZN15Screen2ViewBaseC1Ev+0x468>
        return texts->getText(typedTextId);
 8004c72:	2103      	movs	r1, #3
 8004c74:	f8db 0000 	ldr.w	r0, [fp]
 8004c78:	f000 fa70 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(ta_low_valueBuffer, TA_LOW_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RV3R).getText());
 8004c7c:	4a7f      	ldr	r2, [pc, #508]	; (8004e7c <_ZN15Screen2ViewBaseC1Ev+0x12ec>)
 8004c7e:	4603      	mov	r3, r0
 8004c80:	210a      	movs	r1, #10
 8004c82:	4650      	mov	r0, sl
        : typedTextId(id)
 8004c84:	f04f 0b04 	mov.w	fp, #4
 8004c88:	f019 ffe0 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ta_low_value.resizeToCurrentText();
 8004c8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
        wc1 = value;
 8004c8e:	f8c4 abe4 	str.w	sl, [r4, #3044]	; 0xbe4
    c_p2d.setPosition(10, 235, 150, 27);
 8004c92:	f04f 0a1b 	mov.w	sl, #27
    ta_low_value.resizeToCurrentText();
 8004c96:	f015 f9d3 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8004c9a:	4a79      	ldr	r2, [pc, #484]	; (8004e80 <_ZN15Screen2ViewBaseC1Ev+0x12f0>)
    ta_low_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KJRN));
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004ca0:	9233      	str	r2, [sp, #204]	; 0xcc
 8004ca2:	f04f 0901 	mov.w	r9, #1
 8004ca6:	f8ad b0d0 	strh.w	fp, [sp, #208]	; 0xd0
 8004caa:	f015 f9e9 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_low.add(ta_low_value);
 8004cae:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004cb0:	9805      	ldr	r0, [sp, #20]
 8004cb2:	f013 fcb9 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ta_low_title.setXY(26, 1);
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	9806      	ldr	r0, [sp, #24]
 8004cba:	211a      	movs	r1, #26
 8004cbc:	f7fe fe2f 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004cc0:	4b71      	ldr	r3, [pc, #452]	; (8004e88 <_ZN15Screen2ViewBaseC1Ev+0x12f8>)
        boundingArea = calculateBoundingArea();
 8004cc2:	9906      	ldr	r1, [sp, #24]
 8004cc4:	4640      	mov	r0, r8
        color = newColor;
 8004cc6:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
        linespace = space;
 8004cca:	f8a4 6c1c 	strh.w	r6, [r4, #3100]	; 0xc1c
        boundingArea = calculateBoundingArea();
 8004cce:	f014 ff2f 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004cd2:	9b06      	ldr	r3, [sp, #24]
 8004cd4:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004cd8:	333c      	adds	r3, #60	; 0x3c
 8004cda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004cde:	2302      	movs	r3, #2
 8004ce0:	4a67      	ldr	r2, [pc, #412]	; (8004e80 <_ZN15Screen2ViewBaseC1Ev+0x12f0>)
    ta_low_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A2OV));
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	9806      	ldr	r0, [sp, #24]
 8004ce6:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
 8004cea:	9233      	str	r2, [sp, #204]	; 0xcc
 8004cec:	f015 f9c8 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_low.add(ta_low_title);
 8004cf0:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8004cf4:	f013 fc98 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    img_low.setXY(0, 10);
 8004cf8:	220a      	movs	r2, #10
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8004cfe:	f7fe fe0e 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 8004d02:	f04f 0009 	mov.w	r0, #9
    img_low.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_3_ID));
 8004d06:	4629      	mov	r1, r5
 8004d08:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
 8004d0c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8004d0e:	f015 fafc 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_low.add(img_low);
 8004d12:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8004d14:	9805      	ldr	r0, [sp, #20]
 8004d16:	f013 fc87 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d1a:	9905      	ldr	r1, [sp, #20]
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f013 fc83 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_p2d.setPosition(10, 235, 150, 27);
 8004d22:	2396      	movs	r3, #150	; 0x96
 8004d24:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004d26:	22eb      	movs	r2, #235	; 0xeb
 8004d28:	210a      	movs	r1, #10
 8004d2a:	f8cd a000 	str.w	sl, [sp]
 8004d2e:	f7fe fe03 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    ta_p2d_title.setXY(60, 5);
 8004d32:	2205      	movs	r2, #5
 8004d34:	9807      	ldr	r0, [sp, #28]
 8004d36:	213c      	movs	r1, #60	; 0x3c
 8004d38:	f7fe fdf1 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004d3c:	4951      	ldr	r1, [pc, #324]	; (8004e84 <_ZN15Screen2ViewBaseC1Ev+0x12f4>)
        boundingArea = calculateBoundingArea();
 8004d3e:	4640      	mov	r0, r8
        linespace = space;
 8004d40:	f8a4 6cbc 	strh.w	r6, [r4, #3260]	; 0xcbc
        color = newColor;
 8004d44:	f8c4 1cb8 	str.w	r1, [r4, #3256]	; 0xcb8
        boundingArea = calculateBoundingArea();
 8004d48:	9907      	ldr	r1, [sp, #28]
 8004d4a:	f014 fef1 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004d4e:	9b07      	ldr	r3, [sp, #28]
 8004d50:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004d54:	333c      	adds	r3, #60	; 0x3c
 8004d56:	f8ad 90d0 	strh.w	r9, [sp, #208]	; 0xd0
 8004d5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004d5e:	4a48      	ldr	r2, [pc, #288]	; (8004e80 <_ZN15Screen2ViewBaseC1Ev+0x12f0>)
    ta_p2d_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TB9I));
 8004d60:	4629      	mov	r1, r5
 8004d62:	9807      	ldr	r0, [sp, #28]
 8004d64:	9233      	str	r2, [sp, #204]	; 0xcc
 8004d66:	f015 f98b 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_p2d.add(ta_p2d_title);
 8004d6a:	9907      	ldr	r1, [sp, #28]
 8004d6c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004d6e:	f013 fc5b 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    img_p2d.setXY(0, 0);
 8004d72:	4632      	mov	r2, r6
 8004d74:	4631      	mov	r1, r6
 8004d76:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8004d78:	f7fe fdd1 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
    img_p2d.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_10A_ID));
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8004d80:	f8ad 90cc 	strh.w	r9, [sp, #204]	; 0xcc
 8004d84:	f015 fac1 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_p2d.add(img_p2d);
 8004d88:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004d8a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004d8c:	f013 fc4c 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d90:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004d92:	4638      	mov	r0, r7
 8004d94:	f013 fc48 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_ts.setPosition(320, 235, 150, 27);
 8004d98:	2396      	movs	r3, #150	; 0x96
 8004d9a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004d9c:	22eb      	movs	r2, #235	; 0xeb
 8004d9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004da2:	f8cd a000 	str.w	sl, [sp]
 8004da6:	f7fe fdc7 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    ta_ts_title.setXY(66, 4);
 8004daa:	465a      	mov	r2, fp
 8004dac:	9808      	ldr	r0, [sp, #32]
 8004dae:	2142      	movs	r1, #66	; 0x42
 8004db0:	f7fe fdb5 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004db4:	4933      	ldr	r1, [pc, #204]	; (8004e84 <_ZN15Screen2ViewBaseC1Ev+0x12f4>)
        boundingArea = calculateBoundingArea();
 8004db6:	4640      	mov	r0, r8
        linespace = space;
 8004db8:	f8a4 6d5c 	strh.w	r6, [r4, #3420]	; 0xd5c
        color = newColor;
 8004dbc:	f8c4 1d58 	str.w	r1, [r4, #3416]	; 0xd58
        boundingArea = calculateBoundingArea();
 8004dc0:	9908      	ldr	r1, [sp, #32]
 8004dc2:	f014 feb5 	bl	8019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004dc6:	9b08      	ldr	r3, [sp, #32]
 8004dc8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004dcc:	333c      	adds	r3, #60	; 0x3c
 8004dce:	f8ad 60d0 	strh.w	r6, [sp, #208]	; 0xd0
 8004dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004dd6:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <_ZN15Screen2ViewBaseC1Ev+0x12f0>)
    ta_ts_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5OI7));
 8004dd8:	4629      	mov	r1, r5
 8004dda:	9808      	ldr	r0, [sp, #32]
 8004ddc:	9233      	str	r2, [sp, #204]	; 0xcc
 8004dde:	f015 f94f 	bl	801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    c_ts.add(ta_ts_title);
 8004de2:	9908      	ldr	r1, [sp, #32]
 8004de4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004de6:	f013 fc1f 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    img_ts.setXY(0, 0);
 8004dea:	4632      	mov	r2, r6
 8004dec:	4631      	mov	r1, r6
 8004dee:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8004df0:	f7fe fd95 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
    img_ts.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_10A_ID));
 8004df4:	4629      	mov	r1, r5
 8004df6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8004df8:	f8ad 90cc 	strh.w	r9, [sp, #204]	; 0xcc
 8004dfc:	f015 fa85 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_ts.add(img_ts);
 8004e00:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8004e02:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004e04:	f013 fc10 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004e08:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f013 fc0c 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    c_gas.setPosition(165, 235, 151, 27);
 8004e10:	2397      	movs	r3, #151	; 0x97
 8004e12:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004e14:	22eb      	movs	r2, #235	; 0xeb
 8004e16:	21a5      	movs	r1, #165	; 0xa5
 8004e18:	f8cd a000 	str.w	sl, [sp]
 8004e1c:	f7fe fd8c 	bl	8003938 <_ZN8touchgfx8Drawable11setPositionEssss>
    img_gasfill.setXY(5, 5);
 8004e20:	2205      	movs	r2, #5
 8004e22:	982b      	ldr	r0, [sp, #172]	; 0xac
 8004e24:	4611      	mov	r1, r2
 8004e26:	f7fe fd7a 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 8004e2a:	2303      	movs	r3, #3
    img_gasfill.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_10B_ID));
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8004e30:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
 8004e34:	f015 fa69 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_gas.add(img_gasfill);
 8004e38:	992b      	ldr	r1, [sp, #172]	; 0xac
 8004e3a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004e3c:	f013 fbf4 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    img_gasrec.setXY(0, 0);
 8004e40:	4632      	mov	r2, r6
 8004e42:	4631      	mov	r1, r6
 8004e44:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8004e46:	f7fe fd6a 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
    img_gasrec.setBitmap(touchgfx::Bitmap(BITMAP_DRIVE_10A_ID));
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8004e4e:	f8ad 90cc 	strh.w	r9, [sp, #204]	; 0xcc
 8004e52:	f015 fa5a 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    c_gas.add(img_gasrec);
 8004e56:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8004e58:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004e5a:	f013 fbe5 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004e5e:	4638      	mov	r0, r7
 8004e60:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e62:	f013 fbe1 	bl	8018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004e66:	4620      	mov	r0, r4
 8004e68:	b037      	add	sp, #220	; 0xdc
 8004e6a:	ecbd 8b10 	vpop	{d8-d15}
 8004e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e72:	bf00      	nop
 8004e74:	fffafafa 	.word	0xfffafafa
 8004e78:	20016010 	.word	0x20016010
 8004e7c:	0802f9b0 	.word	0x0802f9b0
 8004e80:	0802da24 	.word	0x0802da24
 8004e84:	fffaf5f5 	.word	0xfffaf5f5
 8004e88:	fffffcfc 	.word	0xfffffcfc

08004e8c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Roboto_Bold_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Roboto_Bold_16_4bpp();

touchgfx::GeneratedFont& getFont_Roboto_Bold_16_4bpp()
{
    static touchgfx::GeneratedFont Roboto_Bold_16_4bpp(glyphs_Roboto_Bold_16_4bpp, 21, 16, 16, 0, 0, 4, 1, 0, 1, unicodes_Roboto_Bold_16_4bpp, kerning_Roboto_Bold_16_4bpp, 63, 0, 0, 0);
 8004e8c:	4770      	bx	lr
	...

08004e90 <_Z27getFont_Roboto_Bold_16_4bppv>:
{
 8004e90:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Roboto_Bold_16_4bpp(glyphs_Roboto_Bold_16_4bpp, 21, 16, 16, 0, 0, 4, 1, 0, 1, unicodes_Roboto_Bold_16_4bpp, kerning_Roboto_Bold_16_4bpp, 63, 0, 0, 0);
 8004e92:	4d16      	ldr	r5, [pc, #88]	; (8004eec <_Z27getFont_Roboto_Bold_16_4bppv+0x5c>)
{
 8004e94:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont Roboto_Bold_16_4bpp(glyphs_Roboto_Bold_16_4bpp, 21, 16, 16, 0, 0, 4, 1, 0, 1, unicodes_Roboto_Bold_16_4bpp, kerning_Roboto_Bold_16_4bpp, 63, 0, 0, 0);
 8004e96:	782c      	ldrb	r4, [r5, #0]
 8004e98:	f3bf 8f5b 	dmb	ish
 8004e9c:	f014 0401 	ands.w	r4, r4, #1
 8004ea0:	d121      	bne.n	8004ee6 <_Z27getFont_Roboto_Bold_16_4bppv+0x56>
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f025 fd71 	bl	802a98a <__cxa_guard_acquire>
 8004ea8:	b1e8      	cbz	r0, 8004ee6 <_Z27getFont_Roboto_Bold_16_4bppv+0x56>
 8004eaa:	233f      	movs	r3, #63	; 0x3f
 8004eac:	2215      	movs	r2, #21
 8004eae:	4910      	ldr	r1, [pc, #64]	; (8004ef0 <_Z27getFont_Roboto_Bold_16_4bppv+0x60>)
 8004eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb2:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <_Z27getFont_Roboto_Bold_16_4bppv+0x64>)
 8004eb4:	4810      	ldr	r0, [pc, #64]	; (8004ef8 <_Z27getFont_Roboto_Bold_16_4bppv+0x68>)
 8004eb6:	9308      	str	r3, [sp, #32]
 8004eb8:	4b10      	ldr	r3, [pc, #64]	; (8004efc <_Z27getFont_Roboto_Bold_16_4bppv+0x6c>)
 8004eba:	940a      	str	r4, [sp, #40]	; 0x28
 8004ebc:	9307      	str	r3, [sp, #28]
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	9401      	str	r4, [sp, #4]
 8004ec2:	9304      	str	r3, [sp, #16]
 8004ec4:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8004ec8:	2304      	movs	r3, #4
 8004eca:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8004ece:	2310      	movs	r3, #16
 8004ed0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	f7fe fced 	bl	80038b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004eda:	4809      	ldr	r0, [pc, #36]	; (8004f00 <_Z27getFont_Roboto_Bold_16_4bppv+0x70>)
 8004edc:	f025 fda0 	bl	802aa20 <atexit>
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f025 fd5e 	bl	802a9a2 <__cxa_guard_release>
    return Roboto_Bold_16_4bpp;
}
 8004ee6:	4804      	ldr	r0, [pc, #16]	; (8004ef8 <_Z27getFont_Roboto_Bold_16_4bppv+0x68>)
 8004ee8:	b00f      	add	sp, #60	; 0x3c
 8004eea:	bd30      	pop	{r4, r5, pc}
 8004eec:	20002ba8 	.word	0x20002ba8
 8004ef0:	900df604 	.word	0x900df604
 8004ef4:	08030b98 	.word	0x08030b98
 8004ef8:	20002bac 	.word	0x20002bac
 8004efc:	08030bd0 	.word	0x08030bd0
 8004f00:	08004e8d 	.word	0x08004e8d

08004f04 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Roboto_Bold_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Roboto_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Roboto_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Roboto_Bold_30_4bpp(glyphs_Roboto_Bold_30_4bpp, 13, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_Roboto_Bold_30_4bpp, kerning_Roboto_Bold_30_4bpp, 63, 0, 0, 0);
 8004f04:	4770      	bx	lr
	...

08004f08 <_Z27getFont_Roboto_Bold_30_4bppv>:
{
 8004f08:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Roboto_Bold_30_4bpp(glyphs_Roboto_Bold_30_4bpp, 13, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_Roboto_Bold_30_4bpp, kerning_Roboto_Bold_30_4bpp, 63, 0, 0, 0);
 8004f0a:	4d16      	ldr	r5, [pc, #88]	; (8004f64 <_Z27getFont_Roboto_Bold_30_4bppv+0x5c>)
{
 8004f0c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont Roboto_Bold_30_4bpp(glyphs_Roboto_Bold_30_4bpp, 13, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_Roboto_Bold_30_4bpp, kerning_Roboto_Bold_30_4bpp, 63, 0, 0, 0);
 8004f0e:	782c      	ldrb	r4, [r5, #0]
 8004f10:	f3bf 8f5b 	dmb	ish
 8004f14:	f014 0401 	ands.w	r4, r4, #1
 8004f18:	d121      	bne.n	8004f5e <_Z27getFont_Roboto_Bold_30_4bppv+0x56>
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f025 fd35 	bl	802a98a <__cxa_guard_acquire>
 8004f20:	b1e8      	cbz	r0, 8004f5e <_Z27getFont_Roboto_Bold_30_4bppv+0x56>
 8004f22:	233f      	movs	r3, #63	; 0x3f
 8004f24:	2201      	movs	r2, #1
 8004f26:	4910      	ldr	r1, [pc, #64]	; (8004f68 <_Z27getFont_Roboto_Bold_30_4bppv+0x60>)
 8004f28:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <_Z27getFont_Roboto_Bold_30_4bppv+0x64>)
 8004f2c:	4810      	ldr	r0, [pc, #64]	; (8004f70 <_Z27getFont_Roboto_Bold_30_4bppv+0x68>)
 8004f2e:	9308      	str	r3, [sp, #32]
 8004f30:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <_Z27getFont_Roboto_Bold_30_4bppv+0x6c>)
 8004f32:	940a      	str	r4, [sp, #40]	; 0x28
 8004f34:	9405      	str	r4, [sp, #20]
 8004f36:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004f40:	231e      	movs	r3, #30
 8004f42:	220d      	movs	r2, #13
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004f4a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004f4e:	f7fe fcb1 	bl	80038b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004f52:	4809      	ldr	r0, [pc, #36]	; (8004f78 <_Z27getFont_Roboto_Bold_30_4bppv+0x70>)
 8004f54:	f025 fd64 	bl	802aa20 <atexit>
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f025 fd22 	bl	802a9a2 <__cxa_guard_release>
    return Roboto_Bold_30_4bpp;
}
 8004f5e:	4804      	ldr	r0, [pc, #16]	; (8004f70 <_Z27getFont_Roboto_Bold_30_4bppv+0x68>)
 8004f60:	b00f      	add	sp, #60	; 0x3c
 8004f62:	bd30      	pop	{r4, r5, pc}
 8004f64:	20002bd8 	.word	0x20002bd8
 8004f68:	900df72c 	.word	0x900df72c
 8004f6c:	08030bc8 	.word	0x08030bc8
 8004f70:	20002bdc 	.word	0x20002bdc
 8004f74:	08030bd4 	.word	0x08030bd4
 8004f78:	08004f05 	.word	0x08004f05

08004f7c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_48_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_48_4bpp();

touchgfx::GeneratedFont& getFont_verdana_48_4bpp()
{
    static touchgfx::GeneratedFont verdana_48_4bpp(glyphs_verdana_48_4bpp, 11, 49, 48, 0, 0, 4, 1, 0, 0, unicodes_verdana_48_4bpp, kerning_verdana_48_4bpp, 63, 0, 0, 0);
 8004f7c:	4770      	bx	lr
	...

08004f80 <_Z23getFont_verdana_48_4bppv>:
{
 8004f80:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_48_4bpp(glyphs_verdana_48_4bpp, 11, 49, 48, 0, 0, 4, 1, 0, 0, unicodes_verdana_48_4bpp, kerning_verdana_48_4bpp, 63, 0, 0, 0);
 8004f82:	4d17      	ldr	r5, [pc, #92]	; (8004fe0 <_Z23getFont_verdana_48_4bppv+0x60>)
{
 8004f84:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_48_4bpp(glyphs_verdana_48_4bpp, 11, 49, 48, 0, 0, 4, 1, 0, 0, unicodes_verdana_48_4bpp, kerning_verdana_48_4bpp, 63, 0, 0, 0);
 8004f86:	782c      	ldrb	r4, [r5, #0]
 8004f88:	f3bf 8f5b 	dmb	ish
 8004f8c:	f014 0401 	ands.w	r4, r4, #1
 8004f90:	d122      	bne.n	8004fd8 <_Z23getFont_verdana_48_4bppv+0x58>
 8004f92:	4628      	mov	r0, r5
 8004f94:	f025 fcf9 	bl	802a98a <__cxa_guard_acquire>
 8004f98:	b1f0      	cbz	r0, 8004fd8 <_Z23getFont_verdana_48_4bppv+0x58>
 8004f9a:	233f      	movs	r3, #63	; 0x3f
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	4911      	ldr	r1, [pc, #68]	; (8004fe4 <_Z23getFont_verdana_48_4bppv+0x64>)
 8004fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <_Z23getFont_verdana_48_4bppv+0x68>)
 8004fa4:	4811      	ldr	r0, [pc, #68]	; (8004fec <_Z23getFont_verdana_48_4bppv+0x6c>)
 8004fa6:	9308      	str	r3, [sp, #32]
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <_Z23getFont_verdana_48_4bppv+0x70>)
 8004faa:	940a      	str	r4, [sp, #40]	; 0x28
 8004fac:	9405      	str	r4, [sp, #20]
 8004fae:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004fb8:	2330      	movs	r3, #48	; 0x30
 8004fba:	220b      	movs	r2, #11
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2331      	movs	r3, #49	; 0x31
 8004fc0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004fc4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004fc8:	f7fe fc74 	bl	80038b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004fcc:	4809      	ldr	r0, [pc, #36]	; (8004ff4 <_Z23getFont_verdana_48_4bppv+0x74>)
 8004fce:	f025 fd27 	bl	802aa20 <atexit>
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f025 fce5 	bl	802a9a2 <__cxa_guard_release>
    return verdana_48_4bpp;
}
 8004fd8:	4804      	ldr	r0, [pc, #16]	; (8004fec <_Z23getFont_verdana_48_4bppv+0x6c>)
 8004fda:	b00f      	add	sp, #60	; 0x3c
 8004fdc:	bd30      	pop	{r4, r5, pc}
 8004fde:	bf00      	nop
 8004fe0:	20002c08 	.word	0x20002c08
 8004fe4:	900df7e4 	.word	0x900df7e4
 8004fe8:	08030bcc 	.word	0x08030bcc
 8004fec:	20002c0c 	.word	0x20002c0c
 8004ff0:	08030bd8 	.word	0x08030bd8
 8004ff4:	08004f7d 	.word	0x08004f7d

08004ff8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	4770      	bx	lr

08004ffc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	4770      	bx	lr

08005000 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005000:	b40e      	push	{r1, r2, r3}
 8005002:	b503      	push	{r0, r1, lr}
 8005004:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005006:	2100      	movs	r1, #0
{
 8005008:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 800500c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800500e:	f017 fdc1 	bl	801cb94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8005012:	b002      	add	sp, #8
 8005014:	f85d eb04 	ldr.w	lr, [sp], #4
 8005018:	b003      	add	sp, #12
 800501a:	4770      	bx	lr

0800501c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800501c:	b40c      	push	{r2, r3}
 800501e:	b507      	push	{r0, r1, r2, lr}
 8005020:	ab04      	add	r3, sp, #16
 8005022:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8005026:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005028:	f017 fdb4 	bl	801cb94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800502c:	b003      	add	sp, #12
 800502e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005032:	b002      	add	sp, #8
 8005034:	4770      	bx	lr
	...

08005038 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8005038:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800503a:	b510      	push	{r4, lr}
 800503c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800503e:	b373      	cbz	r3, 800509e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8005040:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8005042:	b92b      	cbnz	r3, 8005050 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8005044:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8005046:	21c5      	movs	r1, #197	; 0xc5
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800504a:	4819      	ldr	r0, [pc, #100]	; (80050b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 800504c:	f025 fcca 	bl	802a9e4 <__assert_func>
            return buffer[pos];
 8005050:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005052:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005056:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005058:	b30b      	cbz	r3, 800509e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800505a:	f019 f849 	bl	801e0f0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800505e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8005060:	2b01      	cmp	r3, #1
 8005062:	d803      	bhi.n	800506c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8005066:	21cb      	movs	r1, #203	; 0xcb
 8005068:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800506a:	e7ee      	b.n	800504a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800506c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800506e:	f640 103f 	movw	r0, #2367	; 0x93f
 8005072:	1c53      	adds	r3, r2, #1
 8005074:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8005076:	2b09      	cmp	r3, #9
 8005078:	4619      	mov	r1, r3
 800507a:	bf88      	it	hi
 800507c:	f1a3 010a 	subhi.w	r1, r3, #10
 8005080:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8005084:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8005086:	4281      	cmp	r1, r0
 8005088:	d109      	bne.n	800509e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800508a:	2b0a      	cmp	r3, #10
 800508c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8005090:	bf28      	it	cs
 8005092:	2300      	movcs	r3, #0
            return buffer[pos];
 8005094:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8005096:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800509a:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 800509c:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800509e:	4620      	mov	r0, r4
}
 80050a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80050a4:	f018 bf26 	b.w	801def4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80050a8:	0802e09c 	.word	0x0802e09c
 80050ac:	0802e0a5 	.word	0x0802e0a5
 80050b0:	0802e150 	.word	0x0802e150
 80050b4:	0802e19a 	.word	0x0802e19a
 80050b8:	0802e1a8 	.word	0x0802e1a8

080050bc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80050bc:	f018 bee3 	b.w	801de86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080050c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80050c0:	b510      	push	{r4, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	ac02      	add	r4, sp, #8
 80050c6:	e884 0006 	stmia.w	r4, {r1, r2}
 80050ca:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80050cc:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80050ce:	4621      	mov	r1, r4
    va_start(pArg, format);
 80050d0:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	9b08      	ldr	r3, [sp, #32]
 80050da:	f016 f9ff 	bl	801b4dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80050de:	b006      	add	sp, #24
 80050e0:	bd10      	pop	{r4, pc}
	...

080050e4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80050e4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80050e6:	bb18      	cbnz	r0, 8005130 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80050e8:	4b12      	ldr	r3, [pc, #72]	; (8005134 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80050ea:	4813      	ldr	r0, [pc, #76]	; (8005138 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4913      	ldr	r1, [pc, #76]	; (800513c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80050f0:	b1b3      	cbz	r3, 8005120 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80050f2:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80050f4:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80050f6:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80050f8:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80050fa:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	441a      	add	r2, r3
 8005100:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8005104:	2200      	movs	r2, #0
 8005106:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8005108:	f000 f838 	bl	800517c <_ZN17TypedTextDatabase8getFontsEv>
 800510c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800510e:	f000 f833 	bl	8005178 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8005114:	601c      	str	r4, [r3, #0]
        fonts = f;
 8005116:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8005118:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800511c:	8018      	strh	r0, [r3, #0]
    }
}
 800511e:	e007      	b.n	8005130 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8005122:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8005126:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800512a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800512c:	2c00      	cmp	r4, #0
 800512e:	d1e8      	bne.n	8005102 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8005130:	bd38      	pop	{r3, r4, r5, pc}
 8005132:	bf00      	nop
 8005134:	20002c38 	.word	0x20002c38
 8005138:	20002c3c 	.word	0x20002c3c
 800513c:	20002c40 	.word	0x20002c40
 8005140:	20002c44 	.word	0x20002c44
 8005144:	2001600c 	.word	0x2001600c
 8005148:	20016014 	.word	0x20016014
 800514c:	20016010 	.word	0x20016010
 8005150:	900df91c 	.word	0x900df91c
 8005154:	900df880 	.word	0x900df880
 8005158:	900df9f8 	.word	0x900df9f8

0800515c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20002c40 	.word	0x20002c40
 8005174:	20002c3c 	.word	0x20002c3c

08005178 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8005178:	2027      	movs	r0, #39	; 0x27
 800517a:	4770      	bx	lr

0800517c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800517c:	4800      	ldr	r0, [pc, #0]	; (8005180 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800517e:	4770      	bx	lr
 8005180:	20002c48 	.word	0x20002c48

08005184 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_48_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005184:	b510      	push	{r4, lr}
};
 8005186:	4c05      	ldr	r4, [pc, #20]	; (800519c <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_Roboto_Bold_16_4bpp()),
 8005188:	f7ff fe82 	bl	8004e90 <_Z27getFont_Roboto_Bold_16_4bppv>
};
 800518c:	6020      	str	r0, [r4, #0]
    &(getFont_Roboto_Bold_30_4bpp()),
 800518e:	f7ff febb 	bl	8004f08 <_Z27getFont_Roboto_Bold_30_4bppv>
};
 8005192:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_48_4bpp())
 8005194:	f7ff fef4 	bl	8004f80 <_Z23getFont_verdana_48_4bppv>
};
 8005198:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800519a:	bd10      	pop	{r4, pc}
 800519c:	20002c48 	.word	0x20002c48

080051a0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80051a0:	4770      	bx	lr

080051a2 <_ZN19FrontendApplicationD0Ev>:
 80051a2:	b510      	push	{r4, lr}
 80051a4:	4604      	mov	r4, r0
 80051a6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80051aa:	f025 fbec 	bl	802a986 <_ZdlPvj>
 80051ae:	4620      	mov	r0, r4
 80051b0:	bd10      	pop	{r4, pc}

080051b2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80051b2:	b510      	push	{r4, lr}
 80051b4:	4604      	mov	r4, r0
    {
        model.tick();
 80051b6:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80051ba:	f000 f813 	bl	80051e4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80051be:	4620      	mov	r0, r4
    }
 80051c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80051c4:	f016 be4e 	b.w	801be64 <_ZN8touchgfx11Application15handleTickEventEv>

080051c8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80051cc:	f7fe fb00 	bl	80037d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80051d0:	4b01      	ldr	r3, [pc, #4]	; (80051d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80051d2:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80051d4:	6023      	str	r3, [r4, #0]
}
 80051d6:	bd10      	pop	{r4, pc}
 80051d8:	0802e284 	.word	0x0802e284

080051dc <_ZN5ModelC1Ev>:
#include "cmsis_os.h"
#include "queue.h"	//dodane

extern osMessageQueueId_t queue_model_handle;

Model::Model() : modelListener(0)
 80051dc:	2200      	movs	r2, #0
 80051de:	6002      	str	r2, [r0, #0]
{

}
 80051e0:	4770      	bx	lr
	...

080051e4 <_ZN5Model4tickEv>:

void Model::tick()
{
 80051e4:	b513      	push	{r0, r1, r4, lr}
	Message_t message;

	if(osMessageQueueGet(queue_model_handle, &message, NULL, 0U) == osOK)
 80051e6:	2300      	movs	r3, #0
{
 80051e8:	4604      	mov	r4, r0
	if(osMessageQueueGet(queue_model_handle, &message, NULL, 0U) == osOK)
 80051ea:	482a      	ldr	r0, [pc, #168]	; (8005294 <_ZN5Model4tickEv+0xb0>)
 80051ec:	4669      	mov	r1, sp
 80051ee:	461a      	mov	r2, r3
 80051f0:	6800      	ldr	r0, [r0, #0]
 80051f2:	f004 f80f 	bl	8009214 <osMessageQueueGet>
 80051f6:	b998      	cbnz	r0, 8005220 <_ZN5Model4tickEv+0x3c>
	{
		switch(message.ID)
 80051f8:	f89d 3000 	ldrb.w	r3, [sp]
 80051fc:	3b3c      	subs	r3, #60	; 0x3c
 80051fe:	2b0e      	cmp	r3, #14
 8005200:	d80e      	bhi.n	8005220 <_ZN5Model4tickEv+0x3c>
 8005202:	e8df f003 	tbb	[pc, r3]
 8005206:	0f08      	.short	0x0f08
 8005208:	1f131b17 	.word	0x1f131b17
 800520c:	272b232f 	.word	0x272b232f
 8005210:	3f333b37 	.word	0x3f333b37
 8005214:	43          	.byte	0x43
 8005215:	00          	.byte	0x00
		{
		case MAP_I2C_ID:
			modelListener->map_update_value(message.value);
 8005216:	6820      	ldr	r0, [r4, #0]
 8005218:	6803      	ldr	r3, [r0, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
			break;
		case P2D_I2C_ID:
			modelListener->p2d_update_value(message.value);
			break;
		case TS_I2C_ID:
			modelListener->ts_update_value(message.value);
 800521c:	9901      	ldr	r1, [sp, #4]
 800521e:	4798      	blx	r3
			break;
		}
	}
}
 8005220:	b002      	add	sp, #8
 8005222:	bd10      	pop	{r4, pc}
			modelListener->tc_update_value(message.value);
 8005224:	6820      	ldr	r0, [r4, #0]
 8005226:	6803      	ldr	r3, [r0, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	e7f7      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->speed_update_value(message.value);
 800522c:	6820      	ldr	r0, [r4, #0]
 800522e:	6803      	ldr	r3, [r0, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	e7f3      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->diff_update_value(message.value);
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	6803      	ldr	r3, [r0, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	e7ef      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->tsac_update_value(message.value);
 800523c:	6820      	ldr	r0, [r4, #0]
 800523e:	6803      	ldr	r3, [r0, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	e7eb      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->leng_update_value(message.value);
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	6803      	ldr	r3, [r0, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	e7e7      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->linv_update_value(message.value);
 800524c:	6820      	ldr	r0, [r4, #0]
 800524e:	6803      	ldr	r3, [r0, #0]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	e7e3      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->bat_update_value(message.value);
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	6803      	ldr	r3, [r0, #0]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	e7df      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->rinv_update_value(message.value);
 800525c:	6820      	ldr	r0, [r4, #0]
 800525e:	6803      	ldr	r3, [r0, #0]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	e7db      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->reng_update_value(message.value);
 8005264:	6820      	ldr	r0, [r4, #0]
 8005266:	6803      	ldr	r3, [r0, #0]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	e7d7      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->err_update_value(message.value);
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	6803      	ldr	r3, [r0, #0]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	e7d3      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->hv_update_value(message.value);
 8005274:	6820      	ldr	r0, [r4, #0]
 8005276:	6803      	ldr	r3, [r0, #0]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	e7cf      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->low_update_value(message.value);
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	6803      	ldr	r3, [r0, #0]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	e7cb      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->p2d_update_value(message.value);
 8005284:	6820      	ldr	r0, [r4, #0]
 8005286:	6803      	ldr	r3, [r0, #0]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	e7c7      	b.n	800521c <_ZN5Model4tickEv+0x38>
			modelListener->ts_update_value(message.value);
 800528c:	6820      	ldr	r0, [r4, #0]
 800528e:	6803      	ldr	r3, [r0, #0]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	e7c3      	b.n	800521c <_ZN5Model4tickEv+0x38>
 8005294:	20000140 	.word	0x20000140

08005298 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8005298:	4770      	bx	lr

0800529a <_ZThn4_N16Screen2PresenterD1Ev>:
 800529a:	3804      	subs	r0, #4
 800529c:	4770      	bx	lr

0800529e <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 800529e:	4770      	bx	lr

080052a0 <_ZN16Screen2PresenterD0Ev>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	4604      	mov	r4, r0
 80052a4:	2110      	movs	r1, #16
 80052a6:	f025 fb6e 	bl	802a986 <_ZdlPvj>
 80052aa:	4620      	mov	r0, r4
 80052ac:	bd10      	pop	{r4, pc}

080052ae <_ZThn4_N16Screen2PresenterD0Ev>:
 80052ae:	f1a0 0004 	sub.w	r0, r0, #4
 80052b2:	e7f5      	b.n	80052a0 <_ZN16Screen2PresenterD0Ev>

080052b4 <_ZN16Screen2Presenter16map_update_valueEm>:

}

void Screen2Presenter::map_update_value(uint32_t value)		//funkcja dodana
{
	view.map_update_value(value);
 80052b4:	68c0      	ldr	r0, [r0, #12]
 80052b6:	f000 b9a1 	b.w	80055fc <_ZN11Screen2View16map_update_valueEm>

080052ba <_ZThn4_N16Screen2Presenter16map_update_valueEm>:

    void map_update_value(uint32_t value) override;
 80052ba:	f1a0 0004 	sub.w	r0, r0, #4
 80052be:	f7ff bff9 	b.w	80052b4 <_ZN16Screen2Presenter16map_update_valueEm>

080052c2 <_ZN16Screen2Presenter15tc_update_valueEm>:
}

void Screen2Presenter::tc_update_value(uint32_t value)
{
	view.tc_update_value(value);
 80052c2:	68c0      	ldr	r0, [r0, #12]
 80052c4:	f000 b9c6 	b.w	8005654 <_ZN11Screen2View15tc_update_valueEm>

080052c8 <_ZThn4_N16Screen2Presenter15tc_update_valueEm>:
    void tc_update_value(uint32_t value) override;
 80052c8:	f1a0 0004 	sub.w	r0, r0, #4
 80052cc:	f7ff bff9 	b.w	80052c2 <_ZN16Screen2Presenter15tc_update_valueEm>

080052d0 <_ZN16Screen2Presenter18speed_update_valueEm>:
}

void Screen2Presenter::speed_update_value(uint32_t value)
{
	view.speed_update_value(value);
 80052d0:	68c0      	ldr	r0, [r0, #12]
 80052d2:	f000 b8a9 	b.w	8005428 <_ZN11Screen2View18speed_update_valueEm>

080052d6 <_ZThn4_N16Screen2Presenter18speed_update_valueEm>:
    void speed_update_value(uint32_t value) override;
 80052d6:	f1a0 0004 	sub.w	r0, r0, #4
 80052da:	f7ff bff9 	b.w	80052d0 <_ZN16Screen2Presenter18speed_update_valueEm>

080052de <_ZN16Screen2Presenter17diff_update_valueEm>:
}

void Screen2Presenter::diff_update_value(uint32_t value)
{
	view.diff_update_value(value);
 80052de:	68c0      	ldr	r0, [r0, #12]
 80052e0:	f000 b9e4 	b.w	80056ac <_ZN11Screen2View17diff_update_valueEm>

080052e4 <_ZThn4_N16Screen2Presenter17diff_update_valueEm>:
    void diff_update_value(uint32_t value) override;
 80052e4:	f1a0 0004 	sub.w	r0, r0, #4
 80052e8:	f7ff bff9 	b.w	80052de <_ZN16Screen2Presenter17diff_update_valueEm>

080052ec <_ZN16Screen2Presenter17tsac_update_valueEm>:
}

void Screen2Presenter::tsac_update_value(uint32_t value)
{
	view.tsac_update_value(value);
 80052ec:	68c0      	ldr	r0, [r0, #12]
 80052ee:	f000 ba09 	b.w	8005704 <_ZN11Screen2View17tsac_update_valueEm>

080052f2 <_ZThn4_N16Screen2Presenter17tsac_update_valueEm>:
    void tsac_update_value(uint32_t value) override;
 80052f2:	f1a0 0004 	sub.w	r0, r0, #4
 80052f6:	f7ff bff9 	b.w	80052ec <_ZN16Screen2Presenter17tsac_update_valueEm>

080052fa <_ZN16Screen2Presenter17leng_update_valueEm>:
}

void Screen2Presenter::leng_update_value(uint32_t value)
{
	view.leng_update_value(value);
 80052fa:	68c0      	ldr	r0, [r0, #12]
 80052fc:	f000 b8ae 	b.w	800545c <_ZN11Screen2View17leng_update_valueEm>

08005300 <_ZThn4_N16Screen2Presenter17leng_update_valueEm>:
    void leng_update_value(uint32_t value) override;
 8005300:	f1a0 0004 	sub.w	r0, r0, #4
 8005304:	f7ff bff9 	b.w	80052fa <_ZN16Screen2Presenter17leng_update_valueEm>

08005308 <_ZN16Screen2Presenter17linv_update_valueEm>:
}

void Screen2Presenter::linv_update_value(uint32_t value)
{
	view.linv_update_value(value);
 8005308:	68c0      	ldr	r0, [r0, #12]
 800530a:	f000 b8c1 	b.w	8005490 <_ZN11Screen2View17linv_update_valueEm>

0800530e <_ZThn4_N16Screen2Presenter17linv_update_valueEm>:
    void linv_update_value(uint32_t value) override;
 800530e:	f1a0 0004 	sub.w	r0, r0, #4
 8005312:	f7ff bff9 	b.w	8005308 <_ZN16Screen2Presenter17linv_update_valueEm>

08005316 <_ZN16Screen2Presenter16bat_update_valueEm>:
}

void Screen2Presenter::bat_update_value(uint32_t value)
{
	view.bat_update_value(value);
 8005316:	68c0      	ldr	r0, [r0, #12]
 8005318:	f000 b8d4 	b.w	80054c4 <_ZN11Screen2View16bat_update_valueEm>

0800531c <_ZThn4_N16Screen2Presenter16bat_update_valueEm>:
    void bat_update_value(uint32_t value) override;
 800531c:	f1a0 0004 	sub.w	r0, r0, #4
 8005320:	f7ff bff9 	b.w	8005316 <_ZN16Screen2Presenter16bat_update_valueEm>

08005324 <_ZN16Screen2Presenter17rinv_update_valueEm>:
}

void Screen2Presenter::rinv_update_value(uint32_t value)
{
	view.rinv_update_value(value);
 8005324:	68c0      	ldr	r0, [r0, #12]
 8005326:	f000 b8e7 	b.w	80054f8 <_ZN11Screen2View17rinv_update_valueEm>

0800532a <_ZThn4_N16Screen2Presenter17rinv_update_valueEm>:
    void rinv_update_value(uint32_t value) override;
 800532a:	f1a0 0004 	sub.w	r0, r0, #4
 800532e:	f7ff bff9 	b.w	8005324 <_ZN16Screen2Presenter17rinv_update_valueEm>

08005332 <_ZN16Screen2Presenter17reng_update_valueEm>:
}

void Screen2Presenter::reng_update_value(uint32_t value)
{
	view.reng_update_value(value);
 8005332:	68c0      	ldr	r0, [r0, #12]
 8005334:	f000 b8fa 	b.w	800552c <_ZN11Screen2View17reng_update_valueEm>

08005338 <_ZThn4_N16Screen2Presenter17reng_update_valueEm>:
    void reng_update_value(uint32_t value) override;
 8005338:	f1a0 0004 	sub.w	r0, r0, #4
 800533c:	f7ff bff9 	b.w	8005332 <_ZN16Screen2Presenter17reng_update_valueEm>

08005340 <_ZN16Screen2Presenter16err_update_valueEm>:
}

void Screen2Presenter::err_update_value(uint32_t value)
{
	view.err_update_value(value);
 8005340:	68c0      	ldr	r0, [r0, #12]
 8005342:	f000 b90d 	b.w	8005560 <_ZN11Screen2View16err_update_valueEm>

08005346 <_ZThn4_N16Screen2Presenter16err_update_valueEm>:
    void err_update_value(uint32_t value) override;
 8005346:	f1a0 0004 	sub.w	r0, r0, #4
 800534a:	f7ff bff9 	b.w	8005340 <_ZN16Screen2Presenter16err_update_valueEm>

0800534e <_ZN16Screen2Presenter15hv_update_valueEm>:
}

void Screen2Presenter::hv_update_value(uint32_t value)
{
	view.hv_update_value(value);
 800534e:	68c0      	ldr	r0, [r0, #12]
 8005350:	f000 b920 	b.w	8005594 <_ZN11Screen2View15hv_update_valueEm>

08005354 <_ZThn4_N16Screen2Presenter15hv_update_valueEm>:
    void hv_update_value(uint32_t value) override;
 8005354:	f1a0 0004 	sub.w	r0, r0, #4
 8005358:	f7ff bff9 	b.w	800534e <_ZN16Screen2Presenter15hv_update_valueEm>

0800535c <_ZN16Screen2Presenter16low_update_valueEm>:
}

void Screen2Presenter::low_update_value(uint32_t value)
{
	view.low_update_value(value);
 800535c:	68c0      	ldr	r0, [r0, #12]
 800535e:	f000 b933 	b.w	80055c8 <_ZN11Screen2View16low_update_valueEm>

08005362 <_ZThn4_N16Screen2Presenter16low_update_valueEm>:
    void low_update_value(uint32_t value) override;
 8005362:	f1a0 0004 	sub.w	r0, r0, #4
 8005366:	f7ff bff9 	b.w	800535c <_ZN16Screen2Presenter16low_update_valueEm>

0800536a <_ZN16Screen2Presenter16p2d_update_valueEm>:
}

void Screen2Presenter::p2d_update_value(uint32_t value)
{
	view.p2d_update_value(value);
 800536a:	68c0      	ldr	r0, [r0, #12]
 800536c:	f000 b9f6 	b.w	800575c <_ZN11Screen2View16p2d_update_valueEm>

08005370 <_ZThn4_N16Screen2Presenter16p2d_update_valueEm>:
    void p2d_update_value(uint32_t value) override;
 8005370:	f1a0 0004 	sub.w	r0, r0, #4
 8005374:	f7ff bff9 	b.w	800536a <_ZN16Screen2Presenter16p2d_update_valueEm>

08005378 <_ZN16Screen2Presenter15ts_update_valueEm>:
}

void Screen2Presenter::ts_update_value(uint32_t value)
{
	view.ts_update_value(value);
 8005378:	68c0      	ldr	r0, [r0, #12]
 800537a:	f000 ba04 	b.w	8005786 <_ZN11Screen2View15ts_update_valueEm>

0800537e <_ZThn4_N16Screen2Presenter15ts_update_valueEm>:
    void ts_update_value(uint32_t value) override;
 800537e:	f1a0 0004 	sub.w	r0, r0, #4
 8005382:	f7ff bff9 	b.w	8005378 <_ZN16Screen2Presenter15ts_update_valueEm>
	...

08005388 <_ZN16Screen2PresenterC1ER11Screen2View>:
    ModelListener() : model(0) {}
 8005388:	2200      	movs	r2, #0
    : view(v)
 800538a:	60c1      	str	r1, [r0, #12]
 800538c:	6082      	str	r2, [r0, #8]
 800538e:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 8005390:	b510      	push	{r4, lr}
    : view(v)
 8005392:	f102 0408 	add.w	r4, r2, #8
 8005396:	325c      	adds	r2, #92	; 0x5c
 8005398:	6004      	str	r4, [r0, #0]
 800539a:	6042      	str	r2, [r0, #4]
}
 800539c:	bd10      	pop	{r4, pc}
 800539e:	bf00      	nop
 80053a0:	0802e2c8 	.word	0x0802e2c8

080053a4 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 80053a4:	4770      	bx	lr
	...

080053a8 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80053a8:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <_ZN11Screen2ViewD1Ev+0x10>)
 80053aa:	b510      	push	{r4, lr}
 80053ac:	4604      	mov	r4, r0
 80053ae:	6003      	str	r3, [r0, #0]
 80053b0:	f7fe fb2a 	bl	8003a08 <_ZN15Screen2ViewBaseD1Ev>
 80053b4:	4620      	mov	r0, r4
 80053b6:	bd10      	pop	{r4, pc}
 80053b8:	0802e410 	.word	0x0802e410

080053bc <_ZN11Screen2ViewD0Ev>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4604      	mov	r4, r0
 80053c0:	f7ff fff2 	bl	80053a8 <_ZN11Screen2ViewD1Ev>
 80053c4:	f640 7124 	movw	r1, #3876	; 0xf24
 80053c8:	4620      	mov	r0, r4
 80053ca:	f025 fadc 	bl	802a986 <_ZdlPvj>
 80053ce:	4620      	mov	r0, r4
 80053d0:	bd10      	pop	{r4, pc}
	...

080053d4 <_ZN8touchgfx8Drawable7centerXEv>:
        assert(parent && "Cannot center a Drawable with no parent");
 80053d4:	6942      	ldr	r2, [r0, #20]
    void centerX()
 80053d6:	b510      	push	{r4, lr}
        assert(parent && "Cannot center a Drawable with no parent");
 80053d8:	b932      	cbnz	r2, 80053e8 <_ZN8touchgfx8Drawable7centerXEv+0x14>
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <_ZN8touchgfx8Drawable7centerXEv+0x30>)
 80053dc:	f240 1101 	movw	r1, #257	; 0x101
 80053e0:	4a09      	ldr	r2, [pc, #36]	; (8005408 <_ZN8touchgfx8Drawable7centerXEv+0x34>)
 80053e2:	480a      	ldr	r0, [pc, #40]	; (800540c <_ZN8touchgfx8Drawable7centerXEv+0x38>)
 80053e4:	f025 fafe 	bl	802a9e4 <__assert_func>
        setX((parent->getWidth() - getWidth()) / 2);
 80053e8:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 80053ec:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80053f0:	6803      	ldr	r3, [r0, #0]
 80053f2:	1a89      	subs	r1, r1, r2
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    }
 80053fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        setX((parent->getWidth() - getWidth()) / 2);
 80053fe:	f341 014f 	sbfx	r1, r1, #1, #16
 8005402:	4718      	bx	r3
 8005404:	0802e368 	.word	0x0802e368
 8005408:	0802e39c 	.word	0x0802e39c
 800540c:	0802e3bf 	.word	0x0802e3bf

08005410 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8005410:	b510      	push	{r4, lr}
 8005412:	4604      	mov	r4, r0
 8005414:	f7fe fbbc 	bl	8003b90 <_ZN15Screen2ViewBaseC1Ev>
 8005418:	4b01      	ldr	r3, [pc, #4]	; (8005420 <_ZN11Screen2ViewC1Ev+0x10>)
}
 800541a:	4620      	mov	r0, r4
Screen2View::Screen2View()
 800541c:	6023      	str	r3, [r4, #0]
}
 800541e:	bd10      	pop	{r4, pc}
 8005420:	0802e410 	.word	0x0802e410

08005424 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8005424:	f7fe baf1 	b.w	8003a0a <_ZN15Screen2ViewBase11setupScreenEv>

08005428 <_ZN11Screen2View18speed_update_valueEm>:
		img_tc.invalidate();
	}
}

void Screen2View::speed_update_value(uint32_t value)
{
 8005428:	b513      	push	{r0, r1, r4, lr}
 800542a:	4604      	mov	r4, r0
 800542c:	460b      	mov	r3, r1
	Unicode::snprintf(ta_speed_valueBuffer, TA_SPEED_VALUE_SIZE, "%d", value);
 800542e:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <_ZN11Screen2View18speed_update_valueEm+0x30>)
 8005430:	210a      	movs	r1, #10
 8005432:	f600 6048 	addw	r0, r0, #3656	; 0xe48
 8005436:	f019 fc09 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_speed_value.resizeToCurrentTextWithAlignment();
 800543a:	f504 7032 	add.w	r0, r4, #712	; 0x2c8
 800543e:	9001      	str	r0, [sp, #4]
 8005440:	f014 fe3a 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_speed_value.centerX();
 8005444:	9801      	ldr	r0, [sp, #4]
 8005446:	f7ff ffc5 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_speed.invalidate();
 800544a:	f504 701c 	add.w	r0, r4, #624	; 0x270
}
 800544e:	b002      	add	sp, #8
 8005450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	c_speed.invalidate();
 8005454:	f017 bcc9 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 8005458:	0802f70e 	.word	0x0802f70e

0800545c <_ZN11Screen2View17leng_update_valueEm>:
		img_tsac.invalidate();
	}
}

void Screen2View::leng_update_value(uint32_t value)
{
 800545c:	b513      	push	{r0, r1, r4, lr}
 800545e:	4604      	mov	r4, r0
 8005460:	460b      	mov	r3, r1
	Unicode::snprintf(ta_leng_valueBuffer, TA_LENG_VALUE_SIZE, "%d", value);
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <_ZN11Screen2View17leng_update_valueEm+0x30>)
 8005464:	210a      	movs	r1, #10
 8005466:	f600 6084 	addw	r0, r0, #3716	; 0xe84
 800546a:	f019 fbef 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_leng_value.resizeToCurrentTextWithAlignment();
 800546e:	f204 5044 	addw	r0, r4, #1348	; 0x544
 8005472:	9001      	str	r0, [sp, #4]
 8005474:	f014 fe20 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_leng_value.centerX();
 8005478:	9801      	ldr	r0, [sp, #4]
 800547a:	f7ff ffab 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_leng.invalidate();
 800547e:	f204 40ec 	addw	r0, r4, #1260	; 0x4ec
}
 8005482:	b002      	add	sp, #8
 8005484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	c_leng.invalidate();
 8005488:	f017 bcaf 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 800548c:	0802f70e 	.word	0x0802f70e

08005490 <_ZN11Screen2View17linv_update_valueEm>:

void Screen2View::linv_update_value(uint32_t value)
{
 8005490:	b513      	push	{r0, r1, r4, lr}
 8005492:	4604      	mov	r4, r0
 8005494:	460b      	mov	r3, r1
	Unicode::snprintf(ta_linv_valueBuffer, TA_LINV_VALUE_SIZE, "%d", value);
 8005496:	4a0a      	ldr	r2, [pc, #40]	; (80054c0 <_ZN11Screen2View17linv_update_valueEm+0x30>)
 8005498:	210a      	movs	r1, #10
 800549a:	f600 6098 	addw	r0, r0, #3736	; 0xe98
 800549e:	f019 fbd5 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_linv_value.resizeToCurrentTextWithAlignment();
 80054a2:	f504 60c6 	add.w	r0, r4, #1584	; 0x630
 80054a6:	9001      	str	r0, [sp, #4]
 80054a8:	f014 fe06 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_linv_value.centerX();
 80054ac:	9801      	ldr	r0, [sp, #4]
 80054ae:	f7ff ff91 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_linv.invalidate();
 80054b2:	f504 60bb 	add.w	r0, r4, #1496	; 0x5d8
}
 80054b6:	b002      	add	sp, #8
 80054b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	c_linv.invalidate();
 80054bc:	f017 bc95 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 80054c0:	0802f70e 	.word	0x0802f70e

080054c4 <_ZN11Screen2View16bat_update_valueEm>:

void Screen2View::bat_update_value(uint32_t value)
{
 80054c4:	b513      	push	{r0, r1, r4, lr}
 80054c6:	4604      	mov	r4, r0
 80054c8:	460b      	mov	r3, r1
	Unicode::snprintf(ta_bat_valueBuffer, TA_BAT_VALUE_SIZE, "%d", value);
 80054ca:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <_ZN11Screen2View16bat_update_valueEm+0x30>)
 80054cc:	210a      	movs	r1, #10
 80054ce:	f600 60ac 	addw	r0, r0, #3756	; 0xeac
 80054d2:	f019 fbbb 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_bat_value.resizeToCurrentTextWithAlignment();
 80054d6:	f504 60de 	add.w	r0, r4, #1776	; 0x6f0
 80054da:	9001      	str	r0, [sp, #4]
 80054dc:	f014 fdec 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_bat_value.centerX();
 80054e0:	9801      	ldr	r0, [sp, #4]
 80054e2:	f7ff ff77 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_bat.invalidate();
 80054e6:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
}
 80054ea:	b002      	add	sp, #8
 80054ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	c_bat.invalidate();
 80054f0:	f017 bc7b 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 80054f4:	0802f70e 	.word	0x0802f70e

080054f8 <_ZN11Screen2View17rinv_update_valueEm>:

void Screen2View::rinv_update_value(uint32_t value)
{
 80054f8:	b513      	push	{r0, r1, r4, lr}
 80054fa:	4604      	mov	r4, r0
 80054fc:	460b      	mov	r3, r1
	Unicode::snprintf(ta_rinv_valueBuffer, TA_RINV_VALUE_SIZE, "%d", value);
 80054fe:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <_ZN11Screen2View17rinv_update_valueEm+0x30>)
 8005500:	210a      	movs	r1, #10
 8005502:	f500 606c 	add.w	r0, r0, #3776	; 0xec0
 8005506:	f019 fba1 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_rinv_value.resizeToCurrentTextWithAlignment();
 800550a:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
 800550e:	9001      	str	r0, [sp, #4]
 8005510:	f014 fdd2 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_rinv_value.centerX();
 8005514:	9801      	ldr	r0, [sp, #4]
 8005516:	f7ff ff5d 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_rinv.invalidate();
 800551a:	f504 60f6 	add.w	r0, r4, #1968	; 0x7b0
}
 800551e:	b002      	add	sp, #8
 8005520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	c_rinv.invalidate();
 8005524:	f017 bc61 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 8005528:	0802f70e 	.word	0x0802f70e

0800552c <_ZN11Screen2View17reng_update_valueEm>:

void Screen2View::reng_update_value(uint32_t value)
{
 800552c:	b513      	push	{r0, r1, r4, lr}
 800552e:	4604      	mov	r4, r0
 8005530:	460b      	mov	r3, r1
	Unicode::snprintf(ta_reng_valueBuffer, TA_RENG_VALUE_SIZE, "%d", value);
 8005532:	4a0a      	ldr	r2, [pc, #40]	; (800555c <_ZN11Screen2View17reng_update_valueEm+0x30>)
 8005534:	210a      	movs	r1, #10
 8005536:	f600 60d4 	addw	r0, r0, #3796	; 0xed4
 800553a:	f019 fb87 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_reng_value.resizeToCurrentTextWithAlignment();
 800553e:	f604 103c 	addw	r0, r4, #2364	; 0x93c
 8005542:	9001      	str	r0, [sp, #4]
 8005544:	f014 fdb8 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_reng_value.centerX();
 8005548:	9801      	ldr	r0, [sp, #4]
 800554a:	f7ff ff43 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_reng.invalidate();
 800554e:	f604 009c 	addw	r0, r4, #2204	; 0x89c
}
 8005552:	b002      	add	sp, #8
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	c_reng.invalidate();
 8005558:	f017 bc47 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 800555c:	0802f70e 	.word	0x0802f70e

08005560 <_ZN11Screen2View16err_update_valueEm>:

void Screen2View::err_update_value(uint32_t value)
{
 8005560:	b513      	push	{r0, r1, r4, lr}
 8005562:	4604      	mov	r4, r0
 8005564:	460b      	mov	r3, r1
	Unicode::snprintf(ta_err_valueBuffer, TA_ERR_VALUE_SIZE, "%d", value);
 8005566:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <_ZN11Screen2View16err_update_valueEm+0x30>)
 8005568:	210a      	movs	r1, #10
 800556a:	f600 60e8 	addw	r0, r0, #3816	; 0xee8
 800556e:	f019 fb6d 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_err_value.resizeToCurrentTextWithAlignment();
 8005572:	f604 10b4 	addw	r0, r4, #2484	; 0x9b4
 8005576:	9001      	str	r0, [sp, #4]
 8005578:	f014 fd9e 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_err_value.centerX();
 800557c:	9801      	ldr	r0, [sp, #4]
 800557e:	f7ff ff29 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_err.invalidate();
 8005582:	f604 1088 	addw	r0, r4, #2440	; 0x988
}
 8005586:	b002      	add	sp, #8
 8005588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	c_err.invalidate();
 800558c:	f017 bc2d 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 8005590:	0802f70e 	.word	0x0802f70e

08005594 <_ZN11Screen2View15hv_update_valueEm>:

void Screen2View::hv_update_value(uint32_t value)
{
 8005594:	b513      	push	{r0, r1, r4, lr}
 8005596:	4604      	mov	r4, r0
 8005598:	460b      	mov	r3, r1
	Unicode::snprintf(ta_hv_valueBuffer, TA_HV_VALUE_SIZE, "%d", value);
 800559a:	4a0a      	ldr	r2, [pc, #40]	; (80055c4 <_ZN11Screen2View15hv_update_valueEm+0x30>)
 800559c:	210a      	movs	r1, #10
 800559e:	f600 60fc 	addw	r0, r0, #3836	; 0xefc
 80055a2:	f019 fb53 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_hv_value.resizeToCurrentTextWithAlignment();
 80055a6:	f604 3024 	addw	r0, r4, #2852	; 0xb24
 80055aa:	9001      	str	r0, [sp, #4]
 80055ac:	f014 fd84 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_hv_value.centerX();
 80055b0:	9801      	ldr	r0, [sp, #4]
 80055b2:	f7ff ff0f 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_hv.invalidate();
 80055b6:	f604 2074 	addw	r0, r4, #2676	; 0xa74
}
 80055ba:	b002      	add	sp, #8
 80055bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	c_hv.invalidate();
 80055c0:	f017 bc13 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 80055c4:	0802f70e 	.word	0x0802f70e

080055c8 <_ZN11Screen2View16low_update_valueEm>:

void Screen2View::low_update_value(uint32_t value)
{
 80055c8:	b513      	push	{r0, r1, r4, lr}
 80055ca:	4604      	mov	r4, r0
 80055cc:	460b      	mov	r3, r1
	Unicode::snprintf(ta_low_valueBuffer, TA_LOW_VALUE_SIZE, "%d", value);
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <_ZN11Screen2View16low_update_valueEm+0x30>)
 80055d0:	210a      	movs	r1, #10
 80055d2:	f500 6071 	add.w	r0, r0, #3856	; 0xf10
 80055d6:	f019 fb39 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_low_value.resizeToCurrentTextWithAlignment();
 80055da:	f604 309c 	addw	r0, r4, #2972	; 0xb9c
 80055de:	9001      	str	r0, [sp, #4]
 80055e0:	f014 fd6a 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_low_value.centerX();
 80055e4:	9801      	ldr	r0, [sp, #4]
 80055e6:	f7ff fef5 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_low.invalidate();
 80055ea:	f504 6037 	add.w	r0, r4, #2928	; 0xb70
}
 80055ee:	b002      	add	sp, #8
 80055f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	c_low.invalidate();
 80055f4:	f017 bbf9 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 80055f8:	0802f70e 	.word	0x0802f70e

080055fc <_ZN11Screen2View16map_update_valueEm>:
{
 80055fc:	b530      	push	{r4, r5, lr}
 80055fe:	4604      	mov	r4, r0
 8005600:	b085      	sub	sp, #20
	Unicode::snprintf(ta_map_valueBuffer, TA_MAP_VALUE_SIZE, "%d", value);
 8005602:	460b      	mov	r3, r1
 8005604:	4a12      	ldr	r2, [pc, #72]	; (8005650 <_ZN11Screen2View16map_update_valueEm+0x54>)
{
 8005606:	460d      	mov	r5, r1
	Unicode::snprintf(ta_map_valueBuffer, TA_MAP_VALUE_SIZE, "%d", value);
 8005608:	f500 6062 	add.w	r0, r0, #3616	; 0xe20
 800560c:	210a      	movs	r1, #10
 800560e:	f019 fb1d 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_map_value.resizeToCurrentTextWithAlignment();
 8005612:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
	if(value >= 30 && value < 80)
 8005616:	3d1e      	subs	r5, #30
	ta_map_value.resizeToCurrentTextWithAlignment();
 8005618:	9001      	str	r0, [sp, #4]
 800561a:	f014 fd4d 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_map_value.centerX();
 800561e:	9801      	ldr	r0, [sp, #4]
 8005620:	f7ff fed8 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_map.invalidate();
 8005624:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8005628:	f017 fbdf 	bl	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
	if(value >= 30 && value < 80)
 800562c:	2d31      	cmp	r5, #49	; 0x31
		img_map.setBitmap(Bitmap(BITMAP_DRIVE_1_BLUE_ID));
 800562e:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
		img_map.setBitmap(Bitmap(BITMAP_DRIVE_1_ID));
 8005632:	a903      	add	r1, sp, #12
 8005634:	bf94      	ite	ls
 8005636:	2304      	movls	r3, #4
 8005638:	2300      	movhi	r3, #0
 800563a:	9001      	str	r0, [sp, #4]
 800563c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005640:	f014 fe63 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
		img_map.invalidate();
 8005644:	9801      	ldr	r0, [sp, #4]
}
 8005646:	b005      	add	sp, #20
 8005648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		img_map.invalidate();
 800564c:	f017 bbcd 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 8005650:	0802f70e 	.word	0x0802f70e

08005654 <_ZN11Screen2View15tc_update_valueEm>:
{
 8005654:	b530      	push	{r4, r5, lr}
 8005656:	4604      	mov	r4, r0
 8005658:	b085      	sub	sp, #20
	Unicode::snprintf(ta_tc_valueBuffer, TA_TC_VALUE_SIZE, "%d", value);
 800565a:	460b      	mov	r3, r1
 800565c:	4a12      	ldr	r2, [pc, #72]	; (80056a8 <_ZN11Screen2View15tc_update_valueEm+0x54>)
{
 800565e:	460d      	mov	r5, r1
	Unicode::snprintf(ta_tc_valueBuffer, TA_TC_VALUE_SIZE, "%d", value);
 8005660:	f600 6034 	addw	r0, r0, #3636	; 0xe34
 8005664:	210a      	movs	r1, #10
 8005666:	f019 faf1 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_tc_value.resizeToCurrentTextWithAlignment();
 800566a:	f504 7009 	add.w	r0, r4, #548	; 0x224
	if(value >= 30 && value < 80)
 800566e:	3d1e      	subs	r5, #30
	ta_tc_value.resizeToCurrentTextWithAlignment();
 8005670:	9001      	str	r0, [sp, #4]
 8005672:	f014 fd21 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_tc_value.centerX();
 8005676:	9801      	ldr	r0, [sp, #4]
 8005678:	f7ff feac 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_tc.invalidate();
 800567c:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 8005680:	f017 fbb3 	bl	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
	if(value >= 30 && value < 80)
 8005684:	2d31      	cmp	r5, #49	; 0x31
		img_tc.setBitmap(Bitmap(BITMAP_DRIVE_1_YELLOW_ID));
 8005686:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
		img_tc.setBitmap(Bitmap(BITMAP_DRIVE_1_ID));
 800568a:	a903      	add	r1, sp, #12
 800568c:	bf94      	ite	ls
 800568e:	2307      	movls	r3, #7
 8005690:	2300      	movhi	r3, #0
 8005692:	9001      	str	r0, [sp, #4]
 8005694:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005698:	f014 fe37 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
		img_tc.invalidate();
 800569c:	9801      	ldr	r0, [sp, #4]
}
 800569e:	b005      	add	sp, #20
 80056a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		img_tc.invalidate();
 80056a4:	f017 bba1 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 80056a8:	0802f70e 	.word	0x0802f70e

080056ac <_ZN11Screen2View17diff_update_valueEm>:
{
 80056ac:	b530      	push	{r4, r5, lr}
 80056ae:	4604      	mov	r4, r0
 80056b0:	b085      	sub	sp, #20
	Unicode::snprintf(ta_diff_valueBuffer, TA_DIFF_VALUE_SIZE, "%d", value);
 80056b2:	460b      	mov	r3, r1
 80056b4:	4a12      	ldr	r2, [pc, #72]	; (8005700 <_ZN11Screen2View17diff_update_valueEm+0x54>)
{
 80056b6:	460d      	mov	r5, r1
	Unicode::snprintf(ta_diff_valueBuffer, TA_DIFF_VALUE_SIZE, "%d", value);
 80056b8:	f600 605c 	addw	r0, r0, #3676	; 0xe5c
 80056bc:	210a      	movs	r1, #10
 80056be:	f019 fac5 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_diff_value.resizeToCurrentTextWithAlignment();
 80056c2:	f504 706d 	add.w	r0, r4, #948	; 0x3b4
	if(value >= 30 && value < 80)
 80056c6:	3d1e      	subs	r5, #30
	ta_diff_value.resizeToCurrentTextWithAlignment();
 80056c8:	9001      	str	r0, [sp, #4]
 80056ca:	f014 fcf5 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_diff_value.centerX();
 80056ce:	9801      	ldr	r0, [sp, #4]
 80056d0:	f7ff fe80 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_diff.invalidate();
 80056d4:	f504 7045 	add.w	r0, r4, #788	; 0x314
 80056d8:	f017 fb87 	bl	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
	if(value >= 30 && value < 80)
 80056dc:	2d31      	cmp	r5, #49	; 0x31
		img_diff.setBitmap(Bitmap(BITMAP_DRIVE_1_YELLOW_ID));
 80056de:	f504 7050 	add.w	r0, r4, #832	; 0x340
		img_diff.setBitmap(Bitmap(BITMAP_DRIVE_1_ID));
 80056e2:	a903      	add	r1, sp, #12
 80056e4:	bf94      	ite	ls
 80056e6:	2307      	movls	r3, #7
 80056e8:	2300      	movhi	r3, #0
 80056ea:	9001      	str	r0, [sp, #4]
 80056ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80056f0:	f014 fe0b 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
		img_diff.invalidate();
 80056f4:	9801      	ldr	r0, [sp, #4]
}
 80056f6:	b005      	add	sp, #20
 80056f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		img_diff.invalidate();
 80056fc:	f017 bb75 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 8005700:	0802f70e 	.word	0x0802f70e

08005704 <_ZN11Screen2View17tsac_update_valueEm>:
{
 8005704:	b530      	push	{r4, r5, lr}
 8005706:	4604      	mov	r4, r0
 8005708:	b085      	sub	sp, #20
	Unicode::snprintf(ta_tsac_valueBuffer, TA_TSAC_VALUE_SIZE, "%d", value);
 800570a:	460b      	mov	r3, r1
 800570c:	4a12      	ldr	r2, [pc, #72]	; (8005758 <_ZN11Screen2View17tsac_update_valueEm+0x54>)
{
 800570e:	460d      	mov	r5, r1
	Unicode::snprintf(ta_tsac_valueBuffer, TA_TSAC_VALUE_SIZE, "%d", value);
 8005710:	f500 6067 	add.w	r0, r0, #3696	; 0xe70
 8005714:	210a      	movs	r1, #10
 8005716:	f019 fa99 	bl	801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ta_tsac_value.resizeToCurrentTextWithAlignment();
 800571a:	f504 6094 	add.w	r0, r4, #1184	; 0x4a0
	if(value >= 30 && value < 80)
 800571e:	3d1e      	subs	r5, #30
	ta_tsac_value.resizeToCurrentTextWithAlignment();
 8005720:	9001      	str	r0, [sp, #4]
 8005722:	f014 fcc9 	bl	801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ta_tsac_value.centerX();
 8005726:	9801      	ldr	r0, [sp, #4]
 8005728:	f7ff fe54 	bl	80053d4 <_ZN8touchgfx8Drawable7centerXEv>
	c_tsac.invalidate();
 800572c:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8005730:	f017 fb5b 	bl	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
	if(value >= 30 && value < 80)
 8005734:	2d31      	cmp	r5, #49	; 0x31
		img_tsac.setBitmap(Bitmap(BITMAP_DRIVE_1_YELLOW_ID));
 8005736:	f204 402c 	addw	r0, r4, #1068	; 0x42c
		img_tsac.setBitmap(Bitmap(BITMAP_DRIVE_1_ID));
 800573a:	a903      	add	r1, sp, #12
 800573c:	bf94      	ite	ls
 800573e:	2307      	movls	r3, #7
 8005740:	2300      	movhi	r3, #0
 8005742:	9001      	str	r0, [sp, #4]
 8005744:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005748:	f014 fddf 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
		img_tsac.invalidate();
 800574c:	9801      	ldr	r0, [sp, #4]
}
 800574e:	b005      	add	sp, #20
 8005750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		img_tsac.invalidate();
 8005754:	f017 bb49 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
 8005758:	0802f70e 	.word	0x0802f70e

0800575c <_ZN11Screen2View16p2d_update_valueEm>:

void Screen2View::p2d_update_value(uint32_t value)
{

	if(value == 1)
 800575c:	2901      	cmp	r1, #1
{
 800575e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(value == 1)
 8005760:	d10e      	bne.n	8005780 <_ZN11Screen2View16p2d_update_valueEm+0x24>
	{
		img_p2d.setBitmap(Bitmap(BITMAP_DRIVE_10A_GREEN_ID));
 8005762:	f500 604d 	add.w	r0, r0, #3280	; 0xcd0
 8005766:	2302      	movs	r3, #2
 8005768:	a903      	add	r1, sp, #12
 800576a:	9001      	str	r0, [sp, #4]
 800576c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005770:	f014 fdcb 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
		img_p2d.invalidate();
 8005774:	9801      	ldr	r0, [sp, #4]
	}
}
 8005776:	b005      	add	sp, #20
 8005778:	f85d eb04 	ldr.w	lr, [sp], #4
		img_p2d.invalidate();
 800577c:	f017 bb35 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8005780:	b005      	add	sp, #20
 8005782:	f85d fb04 	ldr.w	pc, [sp], #4

08005786 <_ZN11Screen2View15ts_update_valueEm>:

void Screen2View::ts_update_value(uint32_t value)
{

	if(value == 1)
 8005786:	2901      	cmp	r1, #1
{
 8005788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(value == 1)
 800578a:	d10e      	bne.n	80057aa <_ZN11Screen2View15ts_update_valueEm+0x24>
	{
		img_ts.setBitmap(Bitmap(BITMAP_DRIVE_10A_GREEN_ID));
 800578c:	f500 6057 	add.w	r0, r0, #3440	; 0xd70
 8005790:	2302      	movs	r3, #2
 8005792:	a903      	add	r1, sp, #12
 8005794:	9001      	str	r0, [sp, #4]
 8005796:	f8ad 300c 	strh.w	r3, [sp, #12]
 800579a:	f014 fdb6 	bl	801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
		img_ts.invalidate();
 800579e:	9801      	ldr	r0, [sp, #4]
	}
}
 80057a0:	b005      	add	sp, #20
 80057a2:	f85d eb04 	ldr.w	lr, [sp], #4
		img_ts.invalidate();
 80057a6:	f017 bb20 	b.w	801cdea <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80057aa:	b005      	add	sp, #20
 80057ac:	f85d fb04 	ldr.w	pc, [sp], #4

080057b0 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80057b0:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80057b2:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80057b6:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80057b8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80057bc:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80057be:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80057c0:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80057c2:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 80057c4:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80057c6:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80057c8:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 80057ca:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 80057cc:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80057ce:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80057d0:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80057d2:	480b      	ldr	r0, [pc, #44]	; (8005800 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 80057d4:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80057d8:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80057dc:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80057e0:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80057e2:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 80057e4:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80057e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80057ea:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80057ec:	466a      	mov	r2, sp
 80057ee:	f002 f933 	bl	8007a58 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 80057f2:	3800      	subs	r0, #0
 80057f4:	bf18      	it	ne
 80057f6:	2001      	movne	r0, #1
 80057f8:	b015      	add	sp, #84	; 0x54
 80057fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80057fe:	bf00      	nop
 8005800:	20002c54 	.word	0x20002c54

08005804 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8005804:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005806:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800580a:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800580c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005810:	4817      	ldr	r0, [pc, #92]	; (8005870 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005812:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8005814:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005816:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8005818:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800581a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800581c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8005820:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8005822:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005824:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005826:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800582a:	f002 f8d2 	bl	80079d2 <HAL_QSPI_Command>
 800582e:	b9e0      	cbnz	r0, 800586a <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8005830:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8005832:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8005834:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005838:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800583a:	480d      	ldr	r0, [pc, #52]	; (8005870 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 800583c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8005840:	2310      	movs	r3, #16
 8005842:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8005846:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005848:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800584a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800584e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005852:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8005854:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005856:	f241 3388 	movw	r3, #5000	; 0x1388
 800585a:	f002 f8fd 	bl	8007a58 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 800585e:	3800      	subs	r0, #0
 8005860:	bf18      	it	ne
 8005862:	2001      	movne	r0, #1
}
 8005864:	b015      	add	sp, #84	; 0x54
 8005866:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 800586a:	2001      	movs	r0, #1
 800586c:	e7fa      	b.n	8005864 <QSPI_WriteEnable.constprop.0+0x60>
 800586e:	bf00      	nop
 8005870:	20002c54 	.word	0x20002c54

08005874 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8005874:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005876:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800587a:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800587c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005880:	480e      	ldr	r0, [pc, #56]	; (80058bc <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005882:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8005884:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005886:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8005888:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800588a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800588e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8005890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005894:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005896:	2300      	movs	r3, #0
 8005898:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800589c:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800589e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80058a0:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80058a2:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80058a4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80058a8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80058ac:	f002 f924 	bl	8007af8 <HAL_QSPI_MemoryMapped>
}
 80058b0:	3800      	subs	r0, #0
 80058b2:	bf18      	it	ne
 80058b4:	2001      	movne	r0, #1
 80058b6:	b011      	add	sp, #68	; 0x44
 80058b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80058bc:	20002c54 	.word	0x20002c54

080058c0 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 80058c0:	4b45      	ldr	r3, [pc, #276]	; (80059d8 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80058c2:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80058c4:	4845      	ldr	r0, [pc, #276]	; (80059dc <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 80058c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c8:	f042 0202 	orr.w	r2, r2, #2
{
 80058cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
{
 80058d0:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 80058d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80058d4:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80058d6:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80058d8:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 80058da:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80058de:	4d40      	ldr	r5, [pc, #256]	; (80059e0 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 80058e0:	9200      	str	r2, [sp, #0]
 80058e2:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	f042 0202 	orr.w	r2, r2, #2
 80058ea:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	f022 0202 	bic.w	r2, r2, #2
 80058f2:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 80058f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f6:	f042 0202 	orr.w	r2, r2, #2
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
 80058fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fe:	f002 0202 	and.w	r2, r2, #2
 8005902:	9201      	str	r2, [sp, #4]
 8005904:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005908:	f042 0202 	orr.w	r2, r2, #2
 800590c:	631a      	str	r2, [r3, #48]	; 0x30
 800590e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005910:	f002 0202 	and.w	r2, r2, #2
 8005914:	9202      	str	r2, [sp, #8]
 8005916:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8005918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
 8005920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005922:	f002 0208 	and.w	r2, r2, #8
 8005926:	9203      	str	r2, [sp, #12]
 8005928:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 800592a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800592c:	f042 0208 	orr.w	r2, r2, #8
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
 8005932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005934:	f002 0208 	and.w	r2, r2, #8
 8005938:	9204      	str	r2, [sp, #16]
 800593a:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 800593c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800593e:	f042 0210 	orr.w	r2, r2, #16
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
 8005944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005946:	f002 0210 	and.w	r2, r2, #16
 800594a:	9205      	str	r2, [sp, #20]
 800594c:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 800594e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005950:	f042 0208 	orr.w	r2, r2, #8
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005956:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	9306      	str	r3, [sp, #24]
 8005960:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005962:	2302      	movs	r3, #2
 8005964:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8005968:	2303      	movs	r3, #3
 800596a:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800596e:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8005970:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005972:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8005974:	f000 fc58 	bl	8006228 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005978:	a907      	add	r1, sp, #28
 800597a:	4818      	ldr	r0, [pc, #96]	; (80059dc <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800597c:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800597e:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005980:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005982:	f000 fc51 	bl	8006228 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8005986:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800598a:	a907      	add	r1, sp, #28
 800598c:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800598e:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8005990:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8005992:	f000 fc49 	bl	8006228 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8005996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800599a:	a907      	add	r1, sp, #28
 800599c:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800599e:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80059a0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80059a2:	f000 fc41 	bl	8006228 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80059a6:	a907      	add	r1, sp, #28
 80059a8:	480e      	ldr	r0, [pc, #56]	; (80059e4 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 80059aa:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80059ac:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80059ae:	f000 fc3b 	bl	8006228 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80059b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80059b6:	a907      	add	r1, sp, #28
 80059b8:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80059ba:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80059bc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80059be:	f000 fc33 	bl	8006228 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80059c2:	4632      	mov	r2, r6
 80059c4:	210f      	movs	r1, #15
 80059c6:	205c      	movs	r0, #92	; 0x5c
 80059c8:	f000 f9d8 	bl	8005d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80059cc:	205c      	movs	r0, #92	; 0x5c
 80059ce:	f000 fa07 	bl	8005de0 <HAL_NVIC_EnableIRQ>
}
 80059d2:	b00d      	add	sp, #52	; 0x34
 80059d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800
 80059dc:	40020400 	.word	0x40020400
 80059e0:	40020c00 	.word	0x40020c00
 80059e4:	40021000 	.word	0x40021000

080059e8 <BSP_QSPI_Init>:
{ 
 80059e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 80059ea:	4c49      	ldr	r4, [pc, #292]	; (8005b10 <BSP_QSPI_Init+0x128>)
{ 
 80059ec:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 80059ee:	4b49      	ldr	r3, [pc, #292]	; (8005b14 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80059f0:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 80059f2:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80059f4:	f001 ffda 	bl	80079ac <HAL_QSPI_DeInit>
 80059f8:	4605      	mov	r5, r0
 80059fa:	b110      	cbz	r0, 8005a02 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 80059fc:	2001      	movs	r0, #1
}
 80059fe:	b011      	add	sp, #68	; 0x44
 8005a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8005a02:	4601      	mov	r1, r0
 8005a04:	4620      	mov	r0, r4
 8005a06:	f7ff ff5b 	bl	80058c0 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8005a0a:	2601      	movs	r6, #1
 8005a0c:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8005a12:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8005a16:	2310      	movs	r3, #16
 8005a18:	60e3      	str	r3, [r4, #12]
 8005a1a:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8005a1e:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8005a22:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8005a24:	3b01      	subs	r3, #1
 8005a26:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8005a28:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8005a2c:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005a30:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8005a34:	f001 ff66 	bl	8007904 <HAL_QSPI_Init>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d1df      	bne.n	80059fc <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a3c:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8005a40:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8005a42:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8005a48:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a4a:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005a4c:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a4e:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8005a50:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a52:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005a56:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f001 ffb9 	bl	80079d2 <HAL_QSPI_Command>
 8005a60:	b108      	cbz	r0, 8005a66 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8005a62:	2004      	movs	r0, #4
 8005a64:	e7cb      	b.n	80059fe <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8005a66:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6c:	a902      	add	r1, sp, #8
 8005a6e:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8005a70:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a72:	f001 ffae 	bl	80079d2 <HAL_QSPI_Command>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d1f3      	bne.n	8005a62 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005a7a:	f241 3088 	movw	r0, #5000	; 0x1388
 8005a7e:	f7ff fe97 	bl	80057b0 <QSPI_AutoPollingMemReady.constprop.0>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d1ed      	bne.n	8005a62 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8005a86:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8005a88:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a8e:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a90:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8005a92:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8005a94:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a96:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005a9a:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005a9e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f001 ff95 	bl	80079d2 <HAL_QSPI_Command>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d1da      	bne.n	8005a62 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab0:	f10d 0107 	add.w	r1, sp, #7
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f002 f905 	bl	8007cc4 <HAL_QSPI_Receive>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d1d1      	bne.n	8005a62 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8005abe:	f7ff fea1 	bl	8005804 <QSPI_WriteEnable.constprop.0>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d1cd      	bne.n	8005a62 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8005ac6:	2381      	movs	r3, #129	; 0x81
 8005ac8:	22f0      	movs	r2, #240	; 0xf0
 8005aca:	9302      	str	r3, [sp, #8]
 8005acc:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8005ad0:	210a      	movs	r1, #10
 8005ad2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005ad6:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ada:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ae4:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8005ae6:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ae8:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8005aec:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005af0:	f001 ff6f 	bl	80079d2 <HAL_QSPI_Command>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d1b4      	bne.n	8005a62 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	f10d 0107 	add.w	r1, sp, #7
 8005b00:	4620      	mov	r0, r4
 8005b02:	f002 f883 	bl	8007c0c <HAL_QSPI_Transmit>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	f43f af79 	beq.w	80059fe <BSP_QSPI_Init+0x16>
 8005b0c:	e7a9      	b.n	8005a62 <BSP_QSPI_Init+0x7a>
 8005b0e:	bf00      	nop
 8005b10:	20002c54 	.word	0x20002c54
 8005b14:	a0001000 	.word	0xa0001000

08005b18 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b18:	490f      	ldr	r1, [pc, #60]	; (8005b58 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b1a:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b1c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005b28:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <SystemInit+0x44>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	f042 0201 	orr.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005b32:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005b3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005b40:	4a07      	ldr	r2, [pc, #28]	; (8005b60 <SystemInit+0x48>)
 8005b42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005b4c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b52:	608b      	str	r3, [r1, #8]
#endif
}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	e000ed00 	.word	0xe000ed00
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	24003010 	.word	0x24003010

08005b64 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8005b64:	4770      	bx	lr

08005b66 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8005b66:	2000      	movs	r0, #0
 8005b68:	4770      	bx	lr
	...

08005b6c <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 8005b6c:	2300      	movs	r3, #0
{
 8005b6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8005b70:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8005b74:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8005b76:	781a      	ldrb	r2, [r3, #0]
 8005b78:	b90a      	cbnz	r2, 8005b7e <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	701a      	strb	r2, [r3, #0]
{
 8005b7e:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8005b80:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005b82:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8005b84:	21a8      	movs	r1, #168	; 0xa8
 8005b86:	4628      	mov	r0, r5
 8005b88:	f7fc f890 	bl	8001cac <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005b8c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8005b90:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8005b94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b98:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005b9a:	d103      	bne.n	8005ba4 <ft5336_ReadID+0x38>
  return (ucReadId);
 8005b9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005ba0:	b003      	add	sp, #12
 8005ba2:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005ba4:	2b51      	cmp	r3, #81	; 0x51
 8005ba6:	d1ec      	bne.n	8005b82 <ft5336_ReadID+0x16>
 8005ba8:	e7f8      	b.n	8005b9c <ft5336_ReadID+0x30>
 8005baa:	bf00      	nop
 8005bac:	20002ca2 	.word	0x20002ca2

08005bb0 <ft5336_TS_DetectTouch>:
{
 8005bb0:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8005bb2:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8005bb8:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8005bbc:	f7fc f876 	bl	8001cac <TS_IO_Read>
 8005bc0:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8005bc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8005bd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d901      	bls.n	8005bdc <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8005bd8:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8005bdc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005be0:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8005be2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8005be6:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8005be8:	2200      	movs	r2, #0
 8005bea:	709a      	strb	r2, [r3, #2]
}
 8005bec:	b002      	add	sp, #8
 8005bee:	bd10      	pop	{r4, pc}
 8005bf0:	20002ca2 	.word	0x20002ca2

08005bf4 <ft5336_TS_GetXY>:
{
 8005bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005bf8:	4d2f      	ldr	r5, [pc, #188]	; (8005cb8 <ft5336_TS_GetXY+0xc4>)
{
 8005bfa:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8005bfc:	2300      	movs	r3, #0
{
 8005bfe:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005c00:	78ac      	ldrb	r4, [r5, #2]
 8005c02:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8005c04:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005c08:	42a2      	cmp	r2, r4
 8005c0a:	d94d      	bls.n	8005ca8 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 8005c0c:	2c09      	cmp	r4, #9
 8005c0e:	d84e      	bhi.n	8005cae <ft5336_TS_GetXY+0xba>
 8005c10:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	1d19      	adds	r1, r3, #4
 8005c1a:	f103 0b03 	add.w	fp, r3, #3
 8005c1e:	f103 0a06 	add.w	sl, r3, #6
 8005c22:	3305      	adds	r3, #5
 8005c24:	b2c9      	uxtb	r1, r1
 8005c26:	fa5f fb8b 	uxtb.w	fp, fp
 8005c2a:	fa5f fa8a 	uxtb.w	sl, sl
 8005c2e:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8005c32:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005c34:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8005cbc <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f7fc f837 	bl	8001cac <TS_IO_Read>
 8005c3e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005c46:	4659      	mov	r1, fp
 8005c48:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005c4a:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005c4e:	f7fc f82d 	bl	8001cac <TS_IO_Read>
 8005c52:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005c56:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005c5c:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005c5e:	f8b9 2000 	ldrh.w	r2, [r9]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c68:	4313      	orrs	r3, r2
    *X = coord;
 8005c6a:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005c6c:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005c70:	f7fc f81c 	bl	8001cac <TS_IO_Read>
 8005c74:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005c78:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005c7e:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005c80:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005c84:	f7fc f812 	bl	8001cac <TS_IO_Read>
 8005c88:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c90:	f8b9 2000 	ldrh.w	r2, [r9]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8005ca0:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8005ca2:	78ab      	ldrb	r3, [r5, #2]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	70ab      	strb	r3, [r5, #2]
}
 8005ca8:	b003      	add	sp, #12
 8005caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005cae:	4698      	mov	r8, r3
 8005cb0:	469a      	mov	sl, r3
 8005cb2:	469b      	mov	fp, r3
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	e7bc      	b.n	8005c32 <ft5336_TS_GetXY+0x3e>
 8005cb8:	20002ca2 	.word	0x20002ca2
 8005cbc:	20002ca0 	.word	0x20002ca0

08005cc0 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	21a4      	movs	r1, #164	; 0xa4
 8005cc4:	b2c0      	uxtb	r0, r0
 8005cc6:	f7fb bfd7 	b.w	8001c78 <TS_IO_Write>

08005cca <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005cca:	2200      	movs	r2, #0
 8005ccc:	21a4      	movs	r1, #164	; 0xa4
 8005cce:	b2c0      	uxtb	r0, r0
 8005cd0:	f7fb bfd2 	b.w	8001c78 <TS_IO_Write>

08005cd4 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8005cd4:	f7ff bff9 	b.w	8005cca <ft5336_TS_DisableIT>

08005cd8 <ft5336_TS_ClearIT>:
 8005cd8:	4770      	bx	lr
	...

08005cdc <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8005cdc:	4b02      	ldr	r3, [pc, #8]	; (8005ce8 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8005cde:	781a      	ldrb	r2, [r3, #0]
 8005ce0:	b90a      	cbnz	r2, 8005ce6 <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
}
 8005ce6:	4770      	bx	lr
 8005ce8:	20002ca2 	.word	0x20002ca2

08005cec <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cec:	4a07      	ldr	r2, [pc, #28]	; (8005d0c <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cee:	2003      	movs	r0, #3
{
 8005cf0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cf2:	6813      	ldr	r3, [r2, #0]
 8005cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cfa:	f000 f82d 	bl	8005d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f7fb fe48 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d04:	f7fb fb88 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005d08:	2000      	movs	r0, #0
 8005d0a:	bd08      	pop	{r3, pc}
 8005d0c:	40023c00 	.word	0x40023c00

08005d10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005d10:	4a03      	ldr	r2, [pc, #12]	; (8005d20 <HAL_IncTick+0x10>)
 8005d12:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <HAL_IncTick+0x14>)
 8005d14:	6811      	ldr	r1, [r2, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	440b      	add	r3, r1
 8005d1a:	6013      	str	r3, [r2, #0]
}
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20002ca8 	.word	0x20002ca8
 8005d24:	20000038 	.word	0x20000038

08005d28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005d28:	4b01      	ldr	r3, [pc, #4]	; (8005d30 <HAL_GetTick+0x8>)
 8005d2a:	6818      	ldr	r0, [r3, #0]
}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20002ca8 	.word	0x20002ca8

08005d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005d38:	f7ff fff6 	bl	8005d28 <HAL_GetTick>
 8005d3c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d3e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005d40:	bf1e      	ittt	ne
 8005d42:	4b04      	ldrne	r3, [pc, #16]	; (8005d54 <HAL_Delay+0x20>)
 8005d44:	781b      	ldrbne	r3, [r3, #0]
 8005d46:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d48:	f7ff ffee 	bl	8005d28 <HAL_GetTick>
 8005d4c:	1b43      	subs	r3, r0, r5
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	d3fa      	bcc.n	8005d48 <HAL_Delay+0x14>
  {
  }
}
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	20000038 	.word	0x20000038

08005d58 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d58:	4907      	ldr	r1, [pc, #28]	; (8005d78 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d5a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d5c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d66:	0412      	lsls	r2, r2, #16
 8005d68:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005d74:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005d76:	4770      	bx	lr
 8005d78:	e000ed00 	.word	0xe000ed00

08005d7c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d7c:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d7e:	b530      	push	{r4, r5, lr}
 8005d80:	68dc      	ldr	r4, [r3, #12]
 8005d82:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d86:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d8a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d8c:	2d04      	cmp	r5, #4
 8005d8e:	bf28      	it	cs
 8005d90:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d92:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d94:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d98:	bf8c      	ite	hi
 8005d9a:	3c03      	subhi	r4, #3
 8005d9c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d9e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8005da2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005da4:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da8:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dac:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005db0:	fa01 f104 	lsl.w	r1, r1, r4
 8005db4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005dbc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005dbe:	db06      	blt.n	8005dce <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005dc4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005dc8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005dcc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dce:	f000 000f 	and.w	r0, r0, #15
 8005dd2:	4a02      	ldr	r2, [pc, #8]	; (8005ddc <HAL_NVIC_SetPriority+0x60>)
 8005dd4:	5413      	strb	r3, [r2, r0]
 8005dd6:	e7f9      	b.n	8005dcc <HAL_NVIC_SetPriority+0x50>
 8005dd8:	e000ed00 	.word	0xe000ed00
 8005ddc:	e000ed14 	.word	0xe000ed14

08005de0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005de0:	2800      	cmp	r0, #0
 8005de2:	db08      	blt.n	8005df6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005de4:	0942      	lsrs	r2, r0, #5
 8005de6:	2301      	movs	r3, #1
 8005de8:	f000 001f 	and.w	r0, r0, #31
 8005dec:	fa03 f000 	lsl.w	r0, r3, r0
 8005df0:	4b01      	ldr	r3, [pc, #4]	; (8005df8 <HAL_NVIC_EnableIRQ+0x18>)
 8005df2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005df6:	4770      	bx	lr
 8005df8:	e000e100 	.word	0xe000e100

08005dfc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	db0d      	blt.n	8005e1c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e00:	0943      	lsrs	r3, r0, #5
 8005e02:	2201      	movs	r2, #1
 8005e04:	f000 001f 	and.w	r0, r0, #31
 8005e08:	3320      	adds	r3, #32
 8005e0a:	fa02 f000 	lsl.w	r0, r2, r0
 8005e0e:	4a04      	ldr	r2, [pc, #16]	; (8005e20 <HAL_NVIC_DisableIRQ+0x24>)
 8005e10:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005e18:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e100 	.word	0xe000e100

08005e24 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005e24:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <HAL_MPU_Disable+0x18>)
 8005e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	e000ed00 	.word	0xe000ed00

08005e40 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <HAL_MPU_Enable+0x1c>)
 8005e42:	f040 0001 	orr.w	r0, r0, #1
 8005e46:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e50:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005e52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005e56:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005e5a:	4770      	bx	lr
 8005e5c:	e000ed00 	.word	0xe000ed00

08005e60 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005e60:	7843      	ldrb	r3, [r0, #1]
 8005e62:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <HAL_MPU_ConfigRegion+0x54>)
{
 8005e64:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8005e66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8005e6a:	7801      	ldrb	r1, [r0, #0]
 8005e6c:	b1e9      	cbz	r1, 8005eaa <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8005e6e:	6843      	ldr	r3, [r0, #4]
 8005e70:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005e74:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e76:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005e78:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e7a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e7e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005e80:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e82:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005e86:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e88:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005e8c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e8e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005e92:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005e98:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005e9e:	7a01      	ldrb	r1, [r0, #8]
 8005ea0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ea4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005ea8:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8005eaa:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8005eae:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8005eb2:	e7f9      	b.n	8005ea8 <HAL_MPU_ConfigRegion+0x48>
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005eb8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005eba:	4604      	mov	r4, r0
 8005ebc:	b908      	cbnz	r0, 8005ec2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8005ebe:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005ec0:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005ec2:	7f43      	ldrb	r3, [r0, #29]
 8005ec4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ec8:	b913      	cbnz	r3, 8005ed0 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8005eca:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8005ecc:	f7fb fac2 	bl	8001454 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005ed4:	7923      	ldrb	r3, [r4, #4]
 8005ed6:	b9e3      	cbnz	r3, 8005f12 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <HAL_CRC_Init+0x70>)
 8005edc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	f022 0218 	bic.w	r2, r2, #24
 8005ee4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005ee6:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005ee8:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005eea:	b9d2      	cbnz	r2, 8005f22 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005eec:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005ef0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8005ef2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	6961      	ldr	r1, [r4, #20]
 8005ef8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005efc:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005efe:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f00:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8005f10:	e7d6      	b.n	8005ec0 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005f12:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 f808 	bl	8005f2c <HAL_CRCEx_Polynomial_Set>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0e2      	beq.n	8005ee6 <HAL_CRC_Init+0x2e>
 8005f20:	e7cd      	b.n	8005ebe <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f22:	6922      	ldr	r2, [r4, #16]
 8005f24:	e7e4      	b.n	8005ef0 <HAL_CRC_Init+0x38>
 8005f26:	bf00      	nop
 8005f28:	04c11db7 	.word	0x04c11db7

08005f2c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005f2c:	231f      	movs	r3, #31
{
 8005f2e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005f30:	3b01      	subs	r3, #1
 8005f32:	d31c      	bcc.n	8005f6e <HAL_CRCEx_Polynomial_Set+0x42>
 8005f34:	fa21 f403 	lsr.w	r4, r1, r3
 8005f38:	07e4      	lsls	r4, r4, #31
 8005f3a:	d5f9      	bpl.n	8005f30 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8005f3c:	2a10      	cmp	r2, #16
 8005f3e:	d012      	beq.n	8005f66 <HAL_CRCEx_Polynomial_Set+0x3a>
 8005f40:	d804      	bhi.n	8005f4c <HAL_CRCEx_Polynomial_Set+0x20>
 8005f42:	b13a      	cbz	r2, 8005f54 <HAL_CRCEx_Polynomial_Set+0x28>
 8005f44:	2a08      	cmp	r2, #8
 8005f46:	d010      	beq.n	8005f6a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8005f48:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8005f4a:	e00b      	b.n	8005f64 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8005f4c:	2a18      	cmp	r2, #24
 8005f4e:	d1fb      	bne.n	8005f48 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8005f50:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8005f52:	d8f9      	bhi.n	8005f48 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005f54:	6800      	ldr	r0, [r0, #0]
 8005f56:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005f58:	6883      	ldr	r3, [r0, #8]
 8005f5a:	f023 0318 	bic.w	r3, r3, #24
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	6082      	str	r2, [r0, #8]
 8005f62:	2000      	movs	r0, #0
}
 8005f64:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8005f66:	2b07      	cmp	r3, #7
 8005f68:	e7f3      	b.n	8005f52 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005f6a:	2b0f      	cmp	r3, #15
 8005f6c:	e7f1      	b.n	8005f52 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8005f6e:	2a00      	cmp	r2, #0
 8005f70:	d1ea      	bne.n	8005f48 <HAL_CRCEx_Polynomial_Set+0x1c>
 8005f72:	e7ef      	b.n	8005f54 <HAL_CRCEx_Polynomial_Set+0x28>

08005f74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f78:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8005f7a:	f7ff fed5 	bl	8005d28 <HAL_GetTick>
 8005f7e:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f80:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d006      	beq.n	8005f96 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f88:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8005f8a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f8c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	f022 0216 	bic.w	r2, r2, #22
 8005f9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fa6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fa8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005faa:	b90a      	cbnz	r2, 8005fb0 <HAL_DMA_Abort+0x3c>
 8005fac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005fae:	b11a      	cbz	r2, 8005fb8 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	f022 0208 	bic.w	r2, r2, #8
 8005fb6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f013 0301 	ands.w	r3, r3, #1
 8005fc8:	d10a      	bne.n	8005fe0 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005fcc:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8005fce:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fd0:	408a      	lsls	r2, r1
 8005fd2:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8005fd4:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8005fd6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005fda:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8005fde:	e7d9      	b.n	8005f94 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fe0:	f7ff fea2 	bl	8005d28 <HAL_GetTick>
 8005fe4:	1b40      	subs	r0, r0, r5
 8005fe6:	2805      	cmp	r0, #5
 8005fe8:	d9ea      	bls.n	8005fc0 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fea:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fec:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fee:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005ff0:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ff2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005ff6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8005ffa:	e7cb      	b.n	8005f94 <HAL_DMA_Abort+0x20>

08005ffc <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ffc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006000:	2b02      	cmp	r3, #2
 8006002:	d003      	beq.n	800600c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8006008:	2001      	movs	r0, #1
 800600a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800600c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800600e:	2305      	movs	r3, #5
 8006010:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  }

  return HAL_OK;
 8006014:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	6013      	str	r3, [r2, #0]
}
 800601e:	4770      	bx	lr

08006020 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8006020:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8006024:	4770      	bx	lr

08006026 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006026:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006028:	4604      	mov	r4, r0
 800602a:	b330      	cbz	r0, 800607a <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800602c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006030:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006034:	b91b      	cbnz	r3, 800603e <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006036:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800603a:	f7fb fa21 	bl	8001480 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800603e:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006040:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006042:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006044:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006046:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006050:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006052:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006054:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006056:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006058:	f023 0307 	bic.w	r3, r3, #7
 800605c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800605e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006060:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006062:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006064:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800606c:	430b      	orrs	r3, r1
 800606e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006070:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006072:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006074:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8006078:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800607a:	2001      	movs	r0, #1
 800607c:	e7fc      	b.n	8006078 <HAL_DMA2D_Init+0x52>

0800607e <HAL_DMA2D_LineEventCallback>:
 800607e:	4770      	bx	lr

08006080 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8006080:	4770      	bx	lr

08006082 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006082:	6803      	ldr	r3, [r0, #0]
{
 8006084:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006086:	685e      	ldr	r6, [r3, #4]
{
 8006088:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800608a:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800608c:	07f2      	lsls	r2, r6, #31
 800608e:	d514      	bpl.n	80060ba <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006090:	05e9      	lsls	r1, r5, #23
 8006092:	d512      	bpl.n	80060ba <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800609a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800609c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80060a4:	2201      	movs	r2, #1
 80060a6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80060a8:	2304      	movs	r3, #4
 80060aa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80060ae:	2300      	movs	r3, #0
 80060b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80060b4:	6943      	ldr	r3, [r0, #20]
 80060b6:	b103      	cbz	r3, 80060ba <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80060b8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80060ba:	06b2      	lsls	r2, r6, #26
 80060bc:	d516      	bpl.n	80060ec <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80060be:	04ab      	lsls	r3, r5, #18
 80060c0:	d514      	bpl.n	80060ec <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ca:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80060cc:	2220      	movs	r2, #32
 80060ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80060d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060d2:	f043 0302 	orr.w	r3, r3, #2
 80060d6:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80060d8:	2304      	movs	r3, #4
 80060da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80060de:	2300      	movs	r3, #0
 80060e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80060e4:	6963      	ldr	r3, [r4, #20]
 80060e6:	b10b      	cbz	r3, 80060ec <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80060e8:	4620      	mov	r0, r4
 80060ea:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80060ec:	0730      	lsls	r0, r6, #28
 80060ee:	d516      	bpl.n	800611e <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80060f0:	0529      	lsls	r1, r5, #20
 80060f2:	d514      	bpl.n	800611e <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060fc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80060fe:	2208      	movs	r2, #8
 8006100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006102:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006104:	f043 0304 	orr.w	r3, r3, #4
 8006108:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800610a:	2304      	movs	r3, #4
 800610c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006110:	2300      	movs	r3, #0
 8006112:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006116:	6963      	ldr	r3, [r4, #20]
 8006118:	b10b      	cbz	r3, 800611e <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800611a:	4620      	mov	r0, r4
 800611c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800611e:	0772      	lsls	r2, r6, #29
 8006120:	d50b      	bpl.n	800613a <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006122:	056b      	lsls	r3, r5, #21
 8006124:	d509      	bpl.n	800613a <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006126:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006128:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006130:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006132:	2204      	movs	r2, #4
 8006134:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006136:	f7ff ffa2 	bl	800607e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800613a:	07b0      	lsls	r0, r6, #30
 800613c:	d514      	bpl.n	8006168 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800613e:	05a9      	lsls	r1, r5, #22
 8006140:	d512      	bpl.n	8006168 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800614a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800614c:	2202      	movs	r2, #2
 800614e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006152:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006154:	2301      	movs	r3, #1
 8006156:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800615a:	2300      	movs	r3, #0
 800615c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	b10b      	cbz	r3, 8006168 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006164:	4620      	mov	r0, r4
 8006166:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006168:	06f2      	lsls	r2, r6, #27
 800616a:	d513      	bpl.n	8006194 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800616c:	04eb      	lsls	r3, r5, #19
 800616e:	d511      	bpl.n	8006194 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006170:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006172:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800617a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800617c:	2210      	movs	r2, #16
 800617e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006180:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006182:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006184:	2301      	movs	r3, #1
 8006186:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800618a:	2300      	movs	r3, #0
 800618c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006190:	f7ff ff76 	bl	8006080 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006194:	bd70      	pop	{r4, r5, r6, pc}
	...

08006198 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006198:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800619a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800619e:	2b01      	cmp	r3, #1
 80061a0:	f04f 0302 	mov.w	r3, #2
 80061a4:	d02b      	beq.n	80061fe <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061a6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80061aa:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80061ac:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80061b0:	4f1c      	ldr	r7, [pc, #112]	; (8006224 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 80061b2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80061b6:	010e      	lsls	r6, r1, #4
 80061b8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80061ba:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 80061be:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80061c2:	3c09      	subs	r4, #9
 80061c4:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80061c6:	bf96      	itet	ls
 80061c8:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80061cc:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80061d0:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80061d2:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80061d4:	b9a9      	cbnz	r1, 8006202 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80061d6:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80061d8:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80061da:	ea01 0107 	and.w	r1, r1, r7
 80061de:	ea42 0201 	orr.w	r2, r2, r1
 80061e2:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80061e4:	6982      	ldr	r2, [r0, #24]
 80061e6:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80061e8:	d803      	bhi.n	80061f2 <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80061ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80061ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80061f0:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80061f2:	2301      	movs	r3, #1
 80061f4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80061f8:	2300      	movs	r3, #0
 80061fa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80061fe:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006202:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006204:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006206:	ea01 0107 	and.w	r1, r1, r7
 800620a:	ea42 0201 	orr.w	r2, r2, r1
 800620e:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006210:	eb00 0206 	add.w	r2, r0, r6
 8006214:	6992      	ldr	r2, [r2, #24]
 8006216:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006218:	d8eb      	bhi.n	80061f2 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800621a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800621e:	621d      	str	r5, [r3, #32]
 8006220:	e7e7      	b.n	80061f2 <HAL_DMA2D_ConfigLayer+0x5a>
 8006222:	bf00      	nop
 8006224:	00fcfff0 	.word	0x00fcfff0

08006228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800622c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800622e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80063ec <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006232:	4a6c      	ldr	r2, [pc, #432]	; (80063e4 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8006234:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006236:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8006238:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800623a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800623e:	43ac      	bics	r4, r5
 8006240:	f040 80b6 	bne.w	80063b0 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006244:	684d      	ldr	r5, [r1, #4]
 8006246:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800624a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800624c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006250:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006254:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006256:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006258:	2f01      	cmp	r7, #1
 800625a:	d834      	bhi.n	80062c6 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 800625c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800625e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8006262:	68cf      	ldr	r7, [r1, #12]
 8006264:	fa07 f708 	lsl.w	r7, r7, r8
 8006268:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800626c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800626e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006270:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006274:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8006278:	409f      	lsls	r7, r3
 800627a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800627e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006280:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006282:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006284:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006288:	688f      	ldr	r7, [r1, #8]
 800628a:	fa07 f708 	lsl.w	r7, r7, r8
 800628e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8006292:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006294:	d119      	bne.n	80062ca <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8006296:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800629a:	f003 0b07 	and.w	fp, r3, #7
 800629e:	f04f 0e0f 	mov.w	lr, #15
 80062a2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80062a6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80062aa:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062ae:	fa0e fe0b 	lsl.w	lr, lr, fp
 80062b2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80062b6:	690f      	ldr	r7, [r1, #16]
 80062b8:	fa07 f70b 	lsl.w	r7, r7, fp
 80062bc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80062c0:	f8ca 7020 	str.w	r7, [sl, #32]
 80062c4:	e001      	b.n	80062ca <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062c6:	2c03      	cmp	r4, #3
 80062c8:	d1da      	bne.n	8006280 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80062ca:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80062cc:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062d0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062d4:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80062d8:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80062dc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062de:	d067      	beq.n	80063b0 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062e0:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80062e4:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80062e8:	f003 0703 	and.w	r7, r3, #3
 80062ec:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062f0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80062f4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80062f8:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062fa:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80062fe:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8006302:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8006306:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800630a:	9401      	str	r4, [sp, #4]
 800630c:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800630e:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8006312:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006316:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800631a:	4c33      	ldr	r4, [pc, #204]	; (80063e8 <HAL_GPIO_Init+0x1c0>)
 800631c:	42a0      	cmp	r0, r4
 800631e:	d04e      	beq.n	80063be <HAL_GPIO_Init+0x196>
 8006320:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006324:	42a0      	cmp	r0, r4
 8006326:	d04c      	beq.n	80063c2 <HAL_GPIO_Init+0x19a>
 8006328:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800632c:	42a0      	cmp	r0, r4
 800632e:	d04a      	beq.n	80063c6 <HAL_GPIO_Init+0x19e>
 8006330:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006334:	42a0      	cmp	r0, r4
 8006336:	d048      	beq.n	80063ca <HAL_GPIO_Init+0x1a2>
 8006338:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800633c:	42a0      	cmp	r0, r4
 800633e:	d046      	beq.n	80063ce <HAL_GPIO_Init+0x1a6>
 8006340:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006344:	42a0      	cmp	r0, r4
 8006346:	d044      	beq.n	80063d2 <HAL_GPIO_Init+0x1aa>
 8006348:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800634c:	42a0      	cmp	r0, r4
 800634e:	d042      	beq.n	80063d6 <HAL_GPIO_Init+0x1ae>
 8006350:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006354:	42a0      	cmp	r0, r4
 8006356:	d040      	beq.n	80063da <HAL_GPIO_Init+0x1b2>
 8006358:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800635c:	42a0      	cmp	r0, r4
 800635e:	d03e      	beq.n	80063de <HAL_GPIO_Init+0x1b6>
 8006360:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006364:	42a0      	cmp	r0, r4
 8006366:	bf0c      	ite	eq
 8006368:	2409      	moveq	r4, #9
 800636a:	240a      	movne	r4, #10
 800636c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800636e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006370:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8006374:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8006376:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800637a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800637c:	bf54      	ite	pl
 800637e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006380:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006384:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8006386:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8006388:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800638a:	bf54      	ite	pl
 800638c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800638e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006392:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8006394:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8006396:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8006398:	bf54      	ite	pl
 800639a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800639c:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063a0:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80063a2:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80063a4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80063a6:	bf54      	ite	pl
 80063a8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80063aa:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80063ae:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80063b0:	3301      	adds	r3, #1
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	f47f af3e 	bne.w	8006234 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80063b8:	b003      	add	sp, #12
 80063ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80063be:	2400      	movs	r4, #0
 80063c0:	e7d4      	b.n	800636c <HAL_GPIO_Init+0x144>
 80063c2:	2401      	movs	r4, #1
 80063c4:	e7d2      	b.n	800636c <HAL_GPIO_Init+0x144>
 80063c6:	2402      	movs	r4, #2
 80063c8:	e7d0      	b.n	800636c <HAL_GPIO_Init+0x144>
 80063ca:	2403      	movs	r4, #3
 80063cc:	e7ce      	b.n	800636c <HAL_GPIO_Init+0x144>
 80063ce:	2404      	movs	r4, #4
 80063d0:	e7cc      	b.n	800636c <HAL_GPIO_Init+0x144>
 80063d2:	2405      	movs	r4, #5
 80063d4:	e7ca      	b.n	800636c <HAL_GPIO_Init+0x144>
 80063d6:	2406      	movs	r4, #6
 80063d8:	e7c8      	b.n	800636c <HAL_GPIO_Init+0x144>
 80063da:	2407      	movs	r4, #7
 80063dc:	e7c6      	b.n	800636c <HAL_GPIO_Init+0x144>
 80063de:	2408      	movs	r4, #8
 80063e0:	e7c4      	b.n	800636c <HAL_GPIO_Init+0x144>
 80063e2:	bf00      	nop
 80063e4:	40013c00 	.word	0x40013c00
 80063e8:	40020000 	.word	0x40020000
 80063ec:	40023800 	.word	0x40023800

080063f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80063f4:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80063f6:	4c4a      	ldr	r4, [pc, #296]	; (8006520 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80063f8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8006528 <HAL_GPIO_DeInit+0x138>
 80063fc:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800652c <HAL_GPIO_DeInit+0x13c>
 8006400:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006530 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8006404:	2301      	movs	r3, #1
 8006406:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800640a:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800640e:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8006412:	d16e      	bne.n	80064f2 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8006414:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006418:	f002 0c03 	and.w	ip, r2, #3
 800641c:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800641e:	4b41      	ldr	r3, [pc, #260]	; (8006524 <HAL_GPIO_DeInit+0x134>)
 8006420:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006424:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006428:	4298      	cmp	r0, r3
 800642a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800642e:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8006432:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006436:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800643a:	d05f      	beq.n	80064fc <HAL_GPIO_DeInit+0x10c>
 800643c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006440:	4298      	cmp	r0, r3
 8006442:	d05d      	beq.n	8006500 <HAL_GPIO_DeInit+0x110>
 8006444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006448:	4298      	cmp	r0, r3
 800644a:	d05b      	beq.n	8006504 <HAL_GPIO_DeInit+0x114>
 800644c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006450:	4298      	cmp	r0, r3
 8006452:	d059      	beq.n	8006508 <HAL_GPIO_DeInit+0x118>
 8006454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006458:	4298      	cmp	r0, r3
 800645a:	d057      	beq.n	800650c <HAL_GPIO_DeInit+0x11c>
 800645c:	4548      	cmp	r0, r9
 800645e:	d057      	beq.n	8006510 <HAL_GPIO_DeInit+0x120>
 8006460:	4550      	cmp	r0, sl
 8006462:	d057      	beq.n	8006514 <HAL_GPIO_DeInit+0x124>
 8006464:	4558      	cmp	r0, fp
 8006466:	d057      	beq.n	8006518 <HAL_GPIO_DeInit+0x128>
 8006468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800646c:	4298      	cmp	r0, r3
 800646e:	d055      	beq.n	800651c <HAL_GPIO_DeInit+0x12c>
 8006470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006474:	4298      	cmp	r0, r3
 8006476:	bf0c      	ite	eq
 8006478:	2309      	moveq	r3, #9
 800647a:	230a      	movne	r3, #10
 800647c:	fa03 f30c 	lsl.w	r3, r3, ip
 8006480:	4543      	cmp	r3, r8
 8006482:	d113      	bne.n	80064ac <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	ea23 0307 	bic.w	r3, r3, r7
 800648a:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800648c:	6863      	ldr	r3, [r4, #4]
 800648e:	ea23 0307 	bic.w	r3, r3, r7
 8006492:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006494:	68e3      	ldr	r3, [r4, #12]
 8006496:	ea23 0307 	bic.w	r3, r3, r7
 800649a:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800649c:	68a3      	ldr	r3, [r4, #8]
 800649e:	ea23 0307 	bic.w	r3, r3, r7
 80064a2:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80064a4:	68ab      	ldr	r3, [r5, #8]
 80064a6:	ea23 0306 	bic.w	r3, r3, r6
 80064aa:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064ac:	2603      	movs	r6, #3
 80064ae:	0053      	lsls	r3, r2, #1
 80064b0:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80064b2:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064b6:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80064ba:	270f      	movs	r7, #15
 80064bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064c0:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80064c4:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064c8:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80064ca:	fa22 f506 	lsr.w	r5, r2, r6
 80064ce:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80064d2:	6a2e      	ldr	r6, [r5, #32]
 80064d4:	ea26 0707 	bic.w	r7, r6, r7
 80064d8:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80064da:	68c5      	ldr	r5, [r0, #12]
 80064dc:	ea25 0503 	bic.w	r5, r5, r3
 80064e0:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064e2:	6845      	ldr	r5, [r0, #4]
 80064e4:	ea25 050e 	bic.w	r5, r5, lr
 80064e8:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80064ea:	6885      	ldr	r5, [r0, #8]
 80064ec:	ea25 0303 	bic.w	r3, r5, r3
 80064f0:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80064f2:	3201      	adds	r2, #1
 80064f4:	2a10      	cmp	r2, #16
 80064f6:	d185      	bne.n	8006404 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80064fc:	2300      	movs	r3, #0
 80064fe:	e7bd      	b.n	800647c <HAL_GPIO_DeInit+0x8c>
 8006500:	2301      	movs	r3, #1
 8006502:	e7bb      	b.n	800647c <HAL_GPIO_DeInit+0x8c>
 8006504:	2302      	movs	r3, #2
 8006506:	e7b9      	b.n	800647c <HAL_GPIO_DeInit+0x8c>
 8006508:	2303      	movs	r3, #3
 800650a:	e7b7      	b.n	800647c <HAL_GPIO_DeInit+0x8c>
 800650c:	2304      	movs	r3, #4
 800650e:	e7b5      	b.n	800647c <HAL_GPIO_DeInit+0x8c>
 8006510:	2305      	movs	r3, #5
 8006512:	e7b3      	b.n	800647c <HAL_GPIO_DeInit+0x8c>
 8006514:	2306      	movs	r3, #6
 8006516:	e7b1      	b.n	800647c <HAL_GPIO_DeInit+0x8c>
 8006518:	2307      	movs	r3, #7
 800651a:	e7af      	b.n	800647c <HAL_GPIO_DeInit+0x8c>
 800651c:	2308      	movs	r3, #8
 800651e:	e7ad      	b.n	800647c <HAL_GPIO_DeInit+0x8c>
 8006520:	40013c00 	.word	0x40013c00
 8006524:	40020000 	.word	0x40020000
 8006528:	40021400 	.word	0x40021400
 800652c:	40021800 	.word	0x40021800
 8006530:	40021c00 	.word	0x40021c00

08006534 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006534:	6903      	ldr	r3, [r0, #16]
 8006536:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006538:	bf14      	ite	ne
 800653a:	2001      	movne	r0, #1
 800653c:	2000      	moveq	r0, #0
 800653e:	4770      	bx	lr

08006540 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006540:	b10a      	cbz	r2, 8006546 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006542:	6181      	str	r1, [r0, #24]
  }
}
 8006544:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006546:	0409      	lsls	r1, r1, #16
 8006548:	e7fb      	b.n	8006542 <HAL_GPIO_WritePin+0x2>

0800654a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800654a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800654c:	ea01 0203 	and.w	r2, r1, r3
 8006550:	ea21 0103 	bic.w	r1, r1, r3
 8006554:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006558:	6181      	str	r1, [r0, #24]
}
 800655a:	4770      	bx	lr

0800655c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800655c:	6803      	ldr	r3, [r0, #0]
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	0791      	lsls	r1, r2, #30
 8006562:	d501      	bpl.n	8006568 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006564:	2200      	movs	r2, #0
 8006566:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	07d2      	lsls	r2, r2, #31
 800656c:	d403      	bmi.n	8006576 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	f042 0201 	orr.w	r2, r2, #1
 8006574:	619a      	str	r2, [r3, #24]
  }
}
 8006576:	4770      	bx	lr

08006578 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006578:	b530      	push	{r4, r5, lr}
 800657a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800657c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006580:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006582:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8006584:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800658a:	4a05      	ldr	r2, [pc, #20]	; (80065a0 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800658c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800658e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006592:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006596:	ea20 0002 	bic.w	r0, r0, r2
 800659a:	4303      	orrs	r3, r0
 800659c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800659e:	bd30      	pop	{r4, r5, pc}
 80065a0:	03ff63ff 	.word	0x03ff63ff

080065a4 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065a4:	f011 0301 	ands.w	r3, r1, #1
 80065a8:	d007      	beq.n	80065ba <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80065ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065b2:	2b28      	cmp	r3, #40	; 0x28
 80065b4:	bf0c      	ite	eq
 80065b6:	2342      	moveq	r3, #66	; 0x42
 80065b8:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065ba:	078a      	lsls	r2, r1, #30
 80065bc:	d509      	bpl.n	80065d2 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065be:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80065c2:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80065c6:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065c8:	bf0c      	ite	eq
 80065ca:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065ce:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065d2:	040a      	lsls	r2, r1, #16
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065d4:	6801      	ldr	r1, [r0, #0]
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065d6:	bf48      	it	mi
 80065d8:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065dc:	680a      	ldr	r2, [r1, #0]
 80065de:	ea22 0303 	bic.w	r3, r2, r3
 80065e2:	600b      	str	r3, [r1, #0]
}
 80065e4:	4770      	bx	lr

080065e6 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80065e6:	6803      	ldr	r3, [r0, #0]
{
 80065e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80065ec:	699c      	ldr	r4, [r3, #24]
{
 80065ee:	4605      	mov	r5, r0
 80065f0:	460f      	mov	r7, r1
 80065f2:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065f4:	f014 0410 	ands.w	r4, r4, #16
 80065f8:	d070      	beq.n	80066dc <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 80065fa:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065fc:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80065fe:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006600:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	0692      	lsls	r2, r2, #26
 8006608:	d462      	bmi.n	80066d0 <I2C_IsErrorOccurred+0xea>
 800660a:	f1b8 0f00 	cmp.w	r8, #0
 800660e:	d036      	beq.n	800667e <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 8006610:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8006614:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8006616:	682b      	ldr	r3, [r5, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800661a:	05d6      	lsls	r6, r2, #23
 800661c:	d505      	bpl.n	800662a <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800661e:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8006622:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8006626:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006628:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800662a:	0551      	lsls	r1, r2, #21
 800662c:	d505      	bpl.n	800663a <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800662e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006632:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8006636:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006638:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800663a:	0592      	lsls	r2, r2, #22
 800663c:	d550      	bpl.n	80066e0 <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800663e:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006642:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006646:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8006648:	4628      	mov	r0, r5
 800664a:	f7ff ff87 	bl	800655c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800664e:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8006650:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8006652:	6853      	ldr	r3, [r2, #4]
 8006654:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006658:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800665c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006660:	f023 0301 	bic.w	r3, r3, #1
 8006664:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006666:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006668:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800666a:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800666c:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800666e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006672:	2300      	movs	r3, #0
 8006674:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006678:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800667c:	e032      	b.n	80066e4 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 800667e:	1c7a      	adds	r2, r7, #1
 8006680:	d0c0      	beq.n	8006604 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006682:	f7ff fb51 	bl	8005d28 <HAL_GetTick>
 8006686:	1b80      	subs	r0, r0, r6
 8006688:	42b8      	cmp	r0, r7
 800668a:	d801      	bhi.n	8006690 <I2C_IsErrorOccurred+0xaa>
 800668c:	2f00      	cmp	r7, #0
 800668e:	d1b8      	bne.n	8006602 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8006694:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006698:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800669a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800669c:	0400      	lsls	r0, r0, #16
 800669e:	d50a      	bpl.n	80066b6 <I2C_IsErrorOccurred+0xd0>
 80066a0:	0448      	lsls	r0, r1, #17
 80066a2:	d408      	bmi.n	80066b6 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 80066a4:	2a20      	cmp	r2, #32
 80066a6:	d006      	beq.n	80066b6 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ae:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80066b0:	f7ff fb3a 	bl	8005d28 <HAL_GetTick>
 80066b4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066b6:	682b      	ldr	r3, [r5, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	0699      	lsls	r1, r3, #26
 80066bc:	d4a1      	bmi.n	8006602 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80066be:	f7ff fb33 	bl	8005d28 <HAL_GetTick>
 80066c2:	1b80      	subs	r0, r0, r6
 80066c4:	2819      	cmp	r0, #25
 80066c6:	d9f6      	bls.n	80066b6 <I2C_IsErrorOccurred+0xd0>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80066c8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80066ca:	f04f 0801 	mov.w	r8, #1
 80066ce:	e798      	b.n	8006602 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80066d0:	f1b8 0f00 	cmp.w	r8, #0
 80066d4:	d19c      	bne.n	8006610 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d6:	2220      	movs	r2, #32
 80066d8:	61da      	str	r2, [r3, #28]
 80066da:	e799      	b.n	8006610 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80066dc:	4620      	mov	r0, r4
 80066de:	e79a      	b.n	8006616 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d1b1      	bne.n	8006648 <I2C_IsErrorOccurred+0x62>
}
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066e8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	4604      	mov	r4, r0
 80066ec:	460d      	mov	r5, r1
 80066ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	079b      	lsls	r3, r3, #30
 80066f6:	d501      	bpl.n	80066fc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80066f8:	2000      	movs	r0, #0
}
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066fc:	4632      	mov	r2, r6
 80066fe:	4629      	mov	r1, r5
 8006700:	4620      	mov	r0, r4
 8006702:	f7ff ff70 	bl	80065e6 <I2C_IsErrorOccurred>
 8006706:	b9a0      	cbnz	r0, 8006732 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006708:	1c6a      	adds	r2, r5, #1
 800670a:	d0f1      	beq.n	80066f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670c:	f7ff fb0c 	bl	8005d28 <HAL_GetTick>
 8006710:	1b80      	subs	r0, r0, r6
 8006712:	42a8      	cmp	r0, r5
 8006714:	d801      	bhi.n	800671a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006716:	2d00      	cmp	r5, #0
 8006718:	d1ea      	bne.n	80066f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800671a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800671c:	f043 0320 	orr.w	r3, r3, #32
 8006720:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006722:	2320      	movs	r3, #32
 8006724:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006728:	2300      	movs	r3, #0
 800672a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800672e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006732:	2001      	movs	r0, #1
 8006734:	e7e1      	b.n	80066fa <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08006736 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8006736:	b570      	push	{r4, r5, r6, lr}
 8006738:	4604      	mov	r4, r0
 800673a:	460d      	mov	r5, r1
 800673c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	075b      	lsls	r3, r3, #29
 8006744:	d40e      	bmi.n	8006764 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006746:	4632      	mov	r2, r6
 8006748:	4629      	mov	r1, r5
 800674a:	4620      	mov	r0, r4
 800674c:	f7ff ff4b 	bl	80065e6 <I2C_IsErrorOccurred>
 8006750:	bb28      	cbnz	r0, 800679e <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	0691      	lsls	r1, r2, #26
 8006758:	d523      	bpl.n	80067a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800675a:	699a      	ldr	r2, [r3, #24]
 800675c:	0752      	lsls	r2, r2, #29
 800675e:	d503      	bpl.n	8006768 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8006760:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006762:	b10a      	cbz	r2, 8006768 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8006764:	2000      	movs	r0, #0
}
 8006766:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	f012 0210 	ands.w	r2, r2, #16
 800676e:	d002      	beq.n	8006776 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006770:	2210      	movs	r2, #16
 8006772:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006774:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006776:	2120      	movs	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006778:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800677a:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006782:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8006786:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8006792:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006796:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800679a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800679e:	2001      	movs	r0, #1
 80067a0:	e7e1      	b.n	8006766 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a2:	f7ff fac1 	bl	8005d28 <HAL_GetTick>
 80067a6:	1b80      	subs	r0, r0, r6
 80067a8:	42a8      	cmp	r0, r5
 80067aa:	d801      	bhi.n	80067b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
 80067ac:	2d00      	cmp	r5, #0
 80067ae:	d1c6      	bne.n	800673e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80067b2:	f043 0320 	orr.w	r3, r3, #32
 80067b6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80067b8:	2320      	movs	r3, #32
 80067ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80067be:	2300      	movs	r3, #0
 80067c0:	e7eb      	b.n	800679a <I2C_WaitOnRXNEFlagUntilTimeout+0x64>

080067c2 <I2C_WaitOnFlagUntilTimeout>:
{
 80067c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c6:	9f06      	ldr	r7, [sp, #24]
 80067c8:	4604      	mov	r4, r0
 80067ca:	4688      	mov	r8, r1
 80067cc:	4616      	mov	r6, r2
 80067ce:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	6993      	ldr	r3, [r2, #24]
 80067d4:	ea38 0303 	bics.w	r3, r8, r3
 80067d8:	bf0c      	ite	eq
 80067da:	2301      	moveq	r3, #1
 80067dc:	2300      	movne	r3, #0
 80067de:	42b3      	cmp	r3, r6
 80067e0:	d001      	beq.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80067e2:	2000      	movs	r0, #0
 80067e4:	e015      	b.n	8006812 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80067e6:	1c6b      	adds	r3, r5, #1
 80067e8:	d0f3      	beq.n	80067d2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ea:	f7ff fa9d 	bl	8005d28 <HAL_GetTick>
 80067ee:	1bc0      	subs	r0, r0, r7
 80067f0:	42a8      	cmp	r0, r5
 80067f2:	d801      	bhi.n	80067f8 <I2C_WaitOnFlagUntilTimeout+0x36>
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	d1eb      	bne.n	80067d0 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80067fa:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067fc:	f043 0320 	orr.w	r3, r3, #32
 8006800:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006802:	2320      	movs	r3, #32
 8006804:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006808:	2300      	movs	r3, #0
 800680a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800680e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006816 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006816:	b570      	push	{r4, r5, r6, lr}
 8006818:	4604      	mov	r4, r0
 800681a:	460d      	mov	r5, r1
 800681c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	069b      	lsls	r3, r3, #26
 8006824:	d501      	bpl.n	800682a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006826:	2000      	movs	r0, #0
}
 8006828:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800682a:	4632      	mov	r2, r6
 800682c:	4629      	mov	r1, r5
 800682e:	4620      	mov	r0, r4
 8006830:	f7ff fed9 	bl	80065e6 <I2C_IsErrorOccurred>
 8006834:	b990      	cbnz	r0, 800685c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7ff fa77 	bl	8005d28 <HAL_GetTick>
 800683a:	1b80      	subs	r0, r0, r6
 800683c:	42a8      	cmp	r0, r5
 800683e:	d801      	bhi.n	8006844 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8006840:	2d00      	cmp	r5, #0
 8006842:	d1ec      	bne.n	800681e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006844:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006846:	f043 0320 	orr.w	r3, r3, #32
 800684a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800684c:	2320      	movs	r3, #32
 800684e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006852:	2300      	movs	r3, #0
 8006854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006858:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800685c:	2001      	movs	r0, #1
 800685e:	e7e3      	b.n	8006828 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08006860 <HAL_I2C_Init>:
{
 8006860:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006862:	4604      	mov	r4, r0
 8006864:	2800      	cmp	r0, #0
 8006866:	d04a      	beq.n	80068fe <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006868:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800686c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006870:	b91b      	cbnz	r3, 800687a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8006872:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006876:	f7fa fe23 	bl	80014c0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800687a:	2324      	movs	r3, #36	; 0x24
 800687c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	f022 0201 	bic.w	r2, r2, #1
 8006888:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800688a:	6862      	ldr	r2, [r4, #4]
 800688c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006890:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006898:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800689a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800689e:	2901      	cmp	r1, #1
 80068a0:	d124      	bne.n	80068ec <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068a6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068a8:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068aa:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068ac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80068b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068bc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068be:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80068c2:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068c4:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80068ca:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068cc:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80068dc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068de:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068e4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80068ea:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80068ec:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068f0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80068f2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068f4:	d1d8      	bne.n	80068a8 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80068f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068fa:	605a      	str	r2, [r3, #4]
 80068fc:	e7d4      	b.n	80068a8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80068fe:	2001      	movs	r0, #1
 8006900:	e7f3      	b.n	80068ea <HAL_I2C_Init+0x8a>

08006902 <HAL_I2C_DeInit>:
{
 8006902:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006904:	4604      	mov	r4, r0
 8006906:	b198      	cbz	r0, 8006930 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8006908:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800690a:	2324      	movs	r3, #36	; 0x24
 800690c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006910:	6813      	ldr	r3, [r2, #0]
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006918:	f7fa fe5a 	bl	80015d0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800691c:	2000      	movs	r0, #0
 800691e:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8006920:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8006924:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006928:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800692a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800692e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006930:	2001      	movs	r0, #1
 8006932:	e7fc      	b.n	800692e <HAL_I2C_DeInit+0x2c>

08006934 <HAL_I2C_Slave_Receive>:
{
 8006934:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006938:	461e      	mov	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800693a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800693e:	4604      	mov	r4, r0
 8006940:	4689      	mov	r9, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006942:	2b20      	cmp	r3, #32
{
 8006944:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006946:	fa5f fa83 	uxtb.w	sl, r3
 800694a:	f040 8091 	bne.w	8006a70 <HAL_I2C_Slave_Receive+0x13c>
    if ((pData == NULL) || (Size == 0U))
 800694e:	b101      	cbz	r1, 8006952 <HAL_I2C_Slave_Receive+0x1e>
 8006950:	b922      	cbnz	r2, 800695c <HAL_I2C_Slave_Receive+0x28>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006956:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8006958:	2001      	movs	r0, #1
 800695a:	e086      	b.n	8006a6a <HAL_I2C_Slave_Receive+0x136>
    __HAL_LOCK(hi2c);
 800695c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006960:	2b01      	cmp	r3, #1
 8006962:	f000 8085 	beq.w	8006a70 <HAL_I2C_Slave_Receive+0x13c>
 8006966:	2501      	movs	r5, #1
 8006968:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800696c:	f7ff f9dc 	bl	8005d28 <HAL_GetTick>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006970:	2200      	movs	r2, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006972:	2322      	movs	r3, #34	; 0x22
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006974:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr  = pData;
 8006976:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800697a:	4607      	mov	r7, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800697c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006980:	f884 a042 	strb.w	sl, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006984:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8006986:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
 800698a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800698c:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->XferSize = hi2c->XferCount;
 800698e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006990:	684b      	ldr	r3, [r1, #4]
 8006992:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006996:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8006998:	4633      	mov	r3, r6
 800699a:	9000      	str	r0, [sp, #0]
 800699c:	2108      	movs	r1, #8
 800699e:	4620      	mov	r0, r4
 80069a0:	f7ff ff0f 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	b120      	cbz	r0, 80069b2 <HAL_I2C_Slave_Receive+0x7e>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ae:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80069b0:	e7d2      	b.n	8006958 <HAL_I2C_Slave_Receive+0x24>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069b2:	2208      	movs	r2, #8
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 80069b4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80069b8:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069ba:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 80069bc:	4633      	mov	r3, r6
 80069be:	462a      	mov	r2, r5
 80069c0:	9700      	str	r7, [sp, #0]
 80069c2:	f7ff fefe 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d02b      	beq.n	8006a22 <HAL_I2C_Slave_Receive+0xee>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80069ca:	6822      	ldr	r2, [r4, #0]
 80069cc:	6853      	ldr	r3, [r2, #4]
 80069ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d2:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 80069d4:	e7c0      	b.n	8006958 <HAL_I2C_Slave_Receive+0x24>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069d6:	f7ff feae 	bl	8006736 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	b1a0      	cbz	r0, 8006a08 <HAL_I2C_Slave_Receive+0xd4>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069e4:	605a      	str	r2, [r3, #4]
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	0752      	lsls	r2, r2, #29
 80069ea:	d5b5      	bpl.n	8006958 <HAL_I2C_Slave_Receive+0x24>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80069f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f4:	3301      	adds	r3, #1
 80069f6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80069f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006a00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006a02:	3b01      	subs	r3, #1
 8006a04:	8523      	strh	r3, [r4, #40]	; 0x28
 8006a06:	e7a7      	b.n	8006958 <HAL_I2C_Slave_Receive+0x24>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a0c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a10:	3301      	adds	r3, #1
 8006a12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006a14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006a1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	8523      	strh	r3, [r4, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8006a22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a24:	463a      	mov	r2, r7
 8006a26:	4631      	mov	r1, r6
 8006a28:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1d2      	bne.n	80069d6 <HAL_I2C_Slave_Receive+0xa2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a30:	f7ff fef1 	bl	8006816 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d1b6      	bne.n	80069a8 <HAL_I2C_Slave_Receive+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a3a:	2520      	movs	r5, #32
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a42:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a44:	61dd      	str	r5, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8006a46:	4633      	mov	r3, r6
 8006a48:	9700      	str	r7, [sp, #0]
 8006a4a:	f7ff feba 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 8006a4e:	6823      	ldr	r3, [r4, #0]
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a56:	605a      	str	r2, [r3, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f47f af7d 	bne.w	8006958 <HAL_I2C_Slave_Receive+0x24>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a5e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006a62:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a66:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006a6a:	b002      	add	sp, #8
 8006a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8006a70:	2002      	movs	r0, #2
 8006a72:	e7fa      	b.n	8006a6a <HAL_I2C_Slave_Receive+0x136>

08006a74 <HAL_I2C_Mem_Write>:
{
 8006a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a7a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006a7e:	4604      	mov	r4, r0
 8006a80:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a82:	2b20      	cmp	r3, #32
{
 8006a84:	4616      	mov	r6, r2
 8006a86:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8006a8a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a8e:	f040 80c6 	bne.w	8006c1e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8006a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a94:	b113      	cbz	r3, 8006a9c <HAL_I2C_Mem_Write+0x28>
 8006a96:	f1ba 0f00 	cmp.w	sl, #0
 8006a9a:	d106      	bne.n	8006aaa <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006aa2:	2001      	movs	r0, #1
}
 8006aa4:	b003      	add	sp, #12
 8006aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006aaa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	f000 80b5 	beq.w	8006c1e <HAL_I2C_Mem_Write+0x1aa>
 8006ab4:	f04f 0b01 	mov.w	fp, #1
 8006ab8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006abc:	f7ff f934 	bl	8005d28 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ac0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8006ac2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ac4:	9000      	str	r0, [sp, #0]
 8006ac6:	465a      	mov	r2, fp
 8006ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7ff fe78 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ad6:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006ad8:	fa5f f289 	uxtb.w	r2, r9
 8006adc:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8006ade:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ae0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8006aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aec:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006aee:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8006af0:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006af2:	4b4c      	ldr	r3, [pc, #304]	; (8006c24 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8006af4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006afe:	f7ff fd3b 	bl	8006578 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b02:	462a      	mov	r2, r5
 8006b04:	4641      	mov	r1, r8
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7ff fdee 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b0c:	bb18      	cbnz	r0, 8006b56 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b0e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b12:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b14:	d115      	bne.n	8006b42 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b16:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2180      	movs	r1, #128	; 0x80
 8006b1c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b1e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b20:	4643      	mov	r3, r8
 8006b22:	9500      	str	r5, [sp, #0]
 8006b24:	f7ff fe4d 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 8006b28:	b9a8      	cbnz	r0, 8006b56 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2bff      	cmp	r3, #255	; 0xff
 8006b30:	d815      	bhi.n	8006b5e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8006b32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b38:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8006b3a:	b292      	uxth	r2, r2
 8006b3c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	e012      	b.n	8006b68 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b42:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b44:	4641      	mov	r1, r8
 8006b46:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b48:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b4a:	462a      	mov	r2, r5
 8006b4c:	f7ff fdcc 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b50:	b908      	cbnz	r0, 8006b56 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	e7df      	b.n	8006b16 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8006b56:	2300      	movs	r3, #0
 8006b58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006b5c:	e7a1      	b.n	8006aa2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b5e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b64:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b66:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7ff fd04 	bl	8006578 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b70:	462a      	mov	r2, r5
 8006b72:	4641      	mov	r1, r8
 8006b74:	4620      	mov	r0, r4
 8006b76:	f7ff fdb7 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d191      	bne.n	8006aa2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006b86:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006b88:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006b8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006b8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006b8e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006b90:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006b92:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006b94:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006b96:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006b9a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	b1b3      	cbz	r3, 8006bce <HAL_I2C_Mem_Write+0x15a>
 8006ba0:	b9aa      	cbnz	r2, 8006bce <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ba2:	4643      	mov	r3, r8
 8006ba4:	2180      	movs	r1, #128	; 0x80
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	9500      	str	r5, [sp, #0]
 8006baa:	f7ff fe0a 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f47f af77 	bne.w	8006aa2 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2bff      	cmp	r3, #255	; 0xff
 8006bba:	d928      	bls.n	8006c0e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bbc:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bc2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bc4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f7ff fcd5 	bl	8006578 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006bce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1cc      	bne.n	8006b70 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd6:	462a      	mov	r2, r5
 8006bd8:	4641      	mov	r1, r8
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f7ff fe1b 	bl	8006816 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	f47f af5e 	bne.w	8006aa2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	2120      	movs	r1, #32
 8006bea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006bf2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8006bf6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8006bfa:	f022 0201 	bic.w	r2, r2, #1
 8006bfe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006c00:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006c04:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8006c0c:	e74a      	b.n	8006aa4 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8006c0e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c14:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8006c16:	b292      	uxth	r2, r2
 8006c18:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	e7d3      	b.n	8006bc6 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8006c1e:	2002      	movs	r0, #2
 8006c20:	e740      	b.n	8006aa4 <HAL_I2C_Mem_Write+0x30>
 8006c22:	bf00      	nop
 8006c24:	80002000 	.word	0x80002000

08006c28 <HAL_I2C_Mem_Read>:
{
 8006c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006c32:	4604      	mov	r4, r0
 8006c34:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c36:	2b20      	cmp	r3, #32
{
 8006c38:	4616      	mov	r6, r2
 8006c3a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8006c3e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c42:	f040 80c9 	bne.w	8006dd8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8006c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c48:	b113      	cbz	r3, 8006c50 <HAL_I2C_Mem_Read+0x28>
 8006c4a:	f1ba 0f00 	cmp.w	sl, #0
 8006c4e:	d106      	bne.n	8006c5e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c54:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006c56:	2001      	movs	r0, #1
}
 8006c58:	b003      	add	sp, #12
 8006c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006c5e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	f000 80b8 	beq.w	8006dd8 <HAL_I2C_Mem_Read+0x1b0>
 8006c68:	f04f 0b01 	mov.w	fp, #1
 8006c6c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006c70:	f7ff f85a 	bl	8005d28 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c74:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8006c76:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c78:	9000      	str	r0, [sp, #0]
 8006c7a:	465a      	mov	r2, fp
 8006c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7ff fd9e 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d1e5      	bne.n	8006c56 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c8a:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c8c:	fa5f f289 	uxtb.w	r2, r9
 8006c90:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8006c92:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8006c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ca0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006ca2:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006ca4:	4b4d      	ldr	r3, [pc, #308]	; (8006ddc <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8006ca6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4603      	mov	r3, r0
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f7ff fc62 	bl	8006578 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cb4:	462a      	mov	r2, r5
 8006cb6:	4641      	mov	r1, r8
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f7ff fd15 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cbe:	bb20      	cbnz	r0, 8006d0a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cc0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cc6:	d116      	bne.n	8006cf6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2140      	movs	r1, #64	; 0x40
 8006cce:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cd0:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd2:	4643      	mov	r3, r8
 8006cd4:	9500      	str	r5, [sp, #0]
 8006cd6:	f7ff fd74 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 8006cda:	b9b0      	cbnz	r0, 8006d0a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2bff      	cmp	r3, #255	; 0xff
 8006ce2:	4b3f      	ldr	r3, [pc, #252]	; (8006de0 <HAL_I2C_Mem_Read+0x1b8>)
 8006ce4:	d815      	bhi.n	8006d12 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8006ce6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8006cee:	b292      	uxth	r2, r2
 8006cf0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	e012      	b.n	8006d1c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cf6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cfc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cfe:	462a      	mov	r2, r5
 8006d00:	f7ff fcf2 	bl	80066e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d04:	b908      	cbnz	r0, 8006d0a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	e7de      	b.n	8006cc8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006d10:	e7a1      	b.n	8006c56 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d12:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d1a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff fc2a 	bl	8006578 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006d24:	4643      	mov	r3, r8
 8006d26:	2200      	movs	r2, #0
 8006d28:	2104      	movs	r1, #4
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	9500      	str	r5, [sp, #0]
 8006d2e:	f7ff fd48 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d18f      	bne.n	8006c56 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d3c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006d40:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006d42:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8006d44:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8006d46:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006d48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006d4a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006d4c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006d4e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	b1b3      	cbz	r3, 8006d88 <HAL_I2C_Mem_Read+0x160>
 8006d5a:	b9aa      	cbnz	r2, 8006d88 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d5c:	4643      	mov	r3, r8
 8006d5e:	2180      	movs	r1, #128	; 0x80
 8006d60:	4620      	mov	r0, r4
 8006d62:	9500      	str	r5, [sp, #0]
 8006d64:	f7ff fd2d 	bl	80067c2 <I2C_WaitOnFlagUntilTimeout>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f47f af74 	bne.w	8006c56 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2bff      	cmp	r3, #255	; 0xff
 8006d74:	d928      	bls.n	8006dc8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d76:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d7c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d7e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d80:	4639      	mov	r1, r7
 8006d82:	4620      	mov	r0, r4
 8006d84:	f7ff fbf8 	bl	8006578 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006d88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1c9      	bne.n	8006d24 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d90:	462a      	mov	r2, r5
 8006d92:	4641      	mov	r1, r8
 8006d94:	4620      	mov	r0, r4
 8006d96:	f7ff fd3e 	bl	8006816 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	f47f af5b 	bne.w	8006c56 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	2120      	movs	r1, #32
 8006da4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006dac:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8006db0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006dba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006dbe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dc2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8006dc6:	e747      	b.n	8006c58 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8006dc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dce:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8006dd0:	b292      	uxth	r2, r2
 8006dd2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	e7d3      	b.n	8006d80 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8006dd8:	2002      	movs	r0, #2
 8006dda:	e73d      	b.n	8006c58 <HAL_I2C_Mem_Read+0x30>
 8006ddc:	80002000 	.word	0x80002000
 8006de0:	80002400 	.word	0x80002400

08006de4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006de4:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8006de6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006de8:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006dea:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8006dec:	b103      	cbz	r3, 8006df0 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006dee:	4718      	bx	r3
}
 8006df0:	4770      	bx	lr

08006df2 <HAL_I2C_SlaveTxCpltCallback>:
 8006df2:	4770      	bx	lr

08006df4 <HAL_I2C_SlaveRxCpltCallback>:
 8006df4:	4770      	bx	lr

08006df6 <I2C_ITSlaveSeqCplt>:
{
 8006df6:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006df8:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfa:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006dfc:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfe:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e02:	0451      	lsls	r1, r2, #17
 8006e04:	d515      	bpl.n	8006e32 <I2C_ITSlaveSeqCplt+0x3c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e0c:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e0e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006e12:	2b29      	cmp	r3, #41	; 0x29
 8006e14:	d113      	bne.n	8006e3e <I2C_ITSlaveSeqCplt+0x48>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e16:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e18:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e1a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e1e:	2321      	movs	r3, #33	; 0x21
 8006e20:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e22:	f7ff fbbf 	bl	80065a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e26:	2300      	movs	r3, #0
 8006e28:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e2c:	f7ff ffe1 	bl	8006df2 <HAL_I2C_SlaveTxCpltCallback>
}
 8006e30:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e32:	0412      	lsls	r2, r2, #16
 8006e34:	d5eb      	bpl.n	8006e0e <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e3c:	e7e6      	b.n	8006e0c <I2C_ITSlaveSeqCplt+0x16>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006e42:	2b2a      	cmp	r3, #42	; 0x2a
 8006e44:	d1f4      	bne.n	8006e30 <I2C_ITSlaveSeqCplt+0x3a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e46:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e48:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e4a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e4e:	2322      	movs	r3, #34	; 0x22
 8006e50:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e52:	f7ff fba7 	bl	80065a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e56:	2300      	movs	r3, #0
 8006e58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e5c:	f7ff ffca 	bl	8006df4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e60:	e7e6      	b.n	8006e30 <I2C_ITSlaveSeqCplt+0x3a>

08006e62 <HAL_I2C_AddrCallback>:
}
 8006e62:	4770      	bx	lr

08006e64 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e64:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006e68:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8006e6c:	2a28      	cmp	r2, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8006e70:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e72:	d135      	bne.n	8006ee0 <I2C_ITAddrCplt.constprop.0+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8006e74:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e76:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006e78:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 8006e7a:	f3c6 4600 	ubfx	r6, r6, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e7e:	2a02      	cmp	r2, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006e80:	6899      	ldr	r1, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006e82:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006e86:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006e88:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e8c:	d11f      	bne.n	8006ece <I2C_ITAddrCplt.constprop.0+0x6a>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006e8e:	ea85 15d1 	eor.w	r5, r5, r1, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006e92:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006e96:	f015 0506 	ands.w	r5, r5, #6
 8006e9a:	d10e      	bne.n	8006eba <I2C_ITAddrCplt.constprop.0+0x56>
        hi2c->AddrEventCount++;
 8006e9c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006e9e:	3101      	adds	r1, #1
 8006ea0:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006ea2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006ea4:	2902      	cmp	r1, #2
 8006ea6:	d107      	bne.n	8006eb8 <I2C_ITAddrCplt.constprop.0+0x54>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ea8:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8006eaa:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006eac:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8006eae:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	f7ff ffd5 	bl	8006e62 <HAL_I2C_AddrCallback>
}
 8006eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ebe:	f7ff fb71 	bl	80065a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006ec2:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ec4:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8006ec8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ecc:	e7f1      	b.n	8006eb2 <I2C_ITAddrCplt.constprop.0+0x4e>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ece:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ed2:	f7ff fb67 	bl	80065a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006ed6:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ed8:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 8006eda:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ede:	e7e8      	b.n	8006eb2 <I2C_ITAddrCplt.constprop.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8006eea:	e7e5      	b.n	8006eb8 <I2C_ITAddrCplt.constprop.0+0x54>

08006eec <HAL_I2C_ListenCpltCallback>:
 8006eec:	4770      	bx	lr
	...

08006ef0 <I2C_ITListenCplt>:
{
 8006ef0:	b508      	push	{r3, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef2:	4b16      	ldr	r3, [pc, #88]	; (8006f4c <I2C_ITListenCplt+0x5c>)
  hi2c->State = HAL_I2C_STATE_READY;
 8006ef4:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8006efc:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f02:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f06:	074b      	lsls	r3, r1, #29
 8006f08:	d512      	bpl.n	8006f30 <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f0a:	6803      	ldr	r3, [r0, #0]
 8006f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f14:	3301      	adds	r3, #1
 8006f16:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006f18:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8006f1a:	b14b      	cbz	r3, 8006f30 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8006f20:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006f2a:	f043 0304 	orr.w	r3, r3, #4
 8006f2e:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f30:	f248 0103 	movw	r1, #32771	; 0x8003
 8006f34:	f7ff fb36 	bl	80065a4 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f38:	6803      	ldr	r3, [r0, #0]
 8006f3a:	2210      	movs	r2, #16
 8006f3c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f44:	f7ff ffd2 	bl	8006eec <HAL_I2C_ListenCpltCallback>
}
 8006f48:	bd08      	pop	{r3, pc}
 8006f4a:	bf00      	nop
 8006f4c:	ffff0000 	.word	0xffff0000

08006f50 <HAL_I2C_ErrorCallback>:
 8006f50:	4770      	bx	lr

08006f52 <HAL_I2C_AbortCpltCallback>:
 8006f52:	4770      	bx	lr

08006f54 <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f54:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006f58:	2a60      	cmp	r2, #96	; 0x60
 8006f5a:	f04f 0200 	mov.w	r2, #0
{
 8006f5e:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f60:	d108      	bne.n	8006f74 <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f62:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8006f64:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006f68:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f6c:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f6e:	f7ff fff0 	bl	8006f52 <HAL_I2C_AbortCpltCallback>
}
 8006f72:	bd08      	pop	{r3, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f74:	6302      	str	r2, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f76:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006f7a:	f7ff ffe9 	bl	8006f50 <HAL_I2C_ErrorCallback>
}
 8006f7e:	e7f8      	b.n	8006f72 <I2C_TreatErrorCallback+0x1e>

08006f80 <I2C_ITError>:
{
 8006f80:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f82:	4a35      	ldr	r2, [pc, #212]	; (8007058 <I2C_ITError+0xd8>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f84:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006f8a:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f8c:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006f90:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f92:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006f94:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006f96:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006f98:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8006f9a:	ea41 0102 	orr.w	r1, r1, r2
 8006f9e:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006fa0:	d829      	bhi.n	8006ff6 <I2C_ITError+0x76>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fa2:	2103      	movs	r1, #3
 8006fa4:	f7ff fafe 	bl	80065a4 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fa8:	2328      	movs	r3, #40	; 0x28
 8006faa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006fae:	4b2b      	ldr	r3, [pc, #172]	; (800705c <I2C_ITError+0xdc>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006fb0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = NULL;
 8006fb2:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8006fb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006fb6:	b380      	cbz	r0, 800701a <I2C_ITError+0x9a>
 8006fb8:	2b11      	cmp	r3, #17
 8006fba:	d001      	beq.n	8006fc0 <I2C_ITError+0x40>
 8006fbc:	2b21      	cmp	r3, #33	; 0x21
 8006fbe:	d12c      	bne.n	800701a <I2C_ITError+0x9a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	0451      	lsls	r1, r2, #17
 8006fc6:	d503      	bpl.n	8006fd0 <I2C_ITError+0x50>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fce:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fd0:	f7ff f826 	bl	8006020 <HAL_DMA_GetState>
 8006fd4:	2801      	cmp	r0, #1
 8006fd6:	d01b      	beq.n	8007010 <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fd8:	4b21      	ldr	r3, [pc, #132]	; (8007060 <I2C_ITError+0xe0>)
 8006fda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006fdc:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fe4:	f7ff f80a 	bl	8005ffc <HAL_DMA_Abort_IT>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d034      	beq.n	8007056 <I2C_ITError+0xd6>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006fee:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8006ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ff4:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ff6:	f248 0103 	movw	r1, #32771	; 0x8003
 8006ffa:	f7ff fad3 	bl	80065a4 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006ffe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007002:	2b60      	cmp	r3, #96	; 0x60
 8007004:	d002      	beq.n	800700c <I2C_ITError+0x8c>
      hi2c->State         = HAL_I2C_STATE_READY;
 8007006:	2320      	movs	r3, #32
 8007008:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = NULL;
 800700c:	2300      	movs	r3, #0
 800700e:	e7cf      	b.n	8006fb0 <I2C_ITError+0x30>
      I2C_TreatErrorCallback(hi2c);
 8007010:	4620      	mov	r0, r4
}
 8007012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_TreatErrorCallback(hi2c);
 8007016:	f7ff bf9d 	b.w	8006f54 <I2C_TreatErrorCallback>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800701a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800701c:	2800      	cmp	r0, #0
 800701e:	d0f7      	beq.n	8007010 <I2C_ITError+0x90>
 8007020:	2b12      	cmp	r3, #18
 8007022:	d001      	beq.n	8007028 <I2C_ITError+0xa8>
 8007024:	2b22      	cmp	r3, #34	; 0x22
 8007026:	d1f3      	bne.n	8007010 <I2C_ITError+0x90>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	0412      	lsls	r2, r2, #16
 800702e:	d503      	bpl.n	8007038 <I2C_ITError+0xb8>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007036:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007038:	f7fe fff2 	bl	8006020 <HAL_DMA_GetState>
 800703c:	2801      	cmp	r0, #1
 800703e:	d0e7      	beq.n	8007010 <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007040:	4b07      	ldr	r3, [pc, #28]	; (8007060 <I2C_ITError+0xe0>)
 8007042:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007044:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007046:	2300      	movs	r3, #0
 8007048:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800704c:	f7fe ffd6 	bl	8005ffc <HAL_DMA_Abort_IT>
 8007050:	b108      	cbz	r0, 8007056 <I2C_ITError+0xd6>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007052:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007054:	e7cb      	b.n	8006fee <I2C_ITError+0x6e>
}
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	ffff0000 	.word	0xffff0000
 800705c:	0800718d 	.word	0x0800718d
 8007060:	080072ff 	.word	0x080072ff

08007064 <I2C_ITSlaveCplt>:
{
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007066:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007068:	2220      	movs	r2, #32
{
 800706a:	4604      	mov	r4, r0
 800706c:	460e      	mov	r6, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800706e:	681f      	ldr	r7, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007070:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007074:	61da      	str	r2, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007076:	f005 05f7 	and.w	r5, r5, #247	; 0xf7
 800707a:	2d21      	cmp	r5, #33	; 0x21
 800707c:	d151      	bne.n	8007122 <I2C_ITSlaveCplt+0xbe>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800707e:	f248 0101 	movw	r1, #32769	; 0x8001
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007082:	f7ff fa8f 	bl	80065a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007086:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007088:	6823      	ldr	r3, [r4, #0]
  I2C_Flush_TXDR(hi2c);
 800708a:	4620      	mov	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007092:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800709a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800709e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80070a8:	f7ff fa58 	bl	800655c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80070ac:	0479      	lsls	r1, r7, #17
 80070ae:	d53d      	bpl.n	800712c <I2C_ITSlaveCplt+0xc8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	6813      	ldr	r3, [r2, #0]
 80070b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070b8:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80070ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 80070bc:	b11b      	cbz	r3, 80070c6 <I2C_ITSlaveCplt+0x62>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80070c6:	0773      	lsls	r3, r6, #29
 80070c8:	d510      	bpl.n	80070ec <I2C_ITSlaveCplt+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070ca:	6823      	ldr	r3, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80070cc:	f026 0604 	bic.w	r6, r6, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d8:	3301      	adds	r3, #1
 80070da:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80070dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80070de:	b12b      	cbz	r3, 80070ec <I2C_ITSlaveCplt+0x88>
      hi2c->XferSize--;
 80070e0:	3b01      	subs	r3, #1
 80070e2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80070e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80070ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	b11b      	cbz	r3, 80070fa <I2C_ITSlaveCplt+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80070f4:	f043 0304 	orr.w	r3, r3, #4
 80070f8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007100:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8007102:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007104:	b1dd      	cbz	r5, 800713e <I2C_ITSlaveCplt+0xda>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007106:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007108:	4620      	mov	r0, r4
 800710a:	f7ff ff39 	bl	8006f80 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800710e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007112:	2b28      	cmp	r3, #40	; 0x28
 8007114:	d125      	bne.n	8007162 <I2C_ITSlaveCplt+0xfe>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007116:	4631      	mov	r1, r6
 8007118:	4620      	mov	r0, r4
}
 800711a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800711e:	f7ff bee7 	b.w	8006ef0 <I2C_ITListenCplt>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007122:	2d22      	cmp	r5, #34	; 0x22
 8007124:	d1b0      	bne.n	8007088 <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007126:	f248 0102 	movw	r1, #32770	; 0x8002
 800712a:	e7aa      	b.n	8007082 <I2C_ITSlaveCplt+0x1e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800712c:	043a      	lsls	r2, r7, #16
 800712e:	d5ca      	bpl.n	80070c6 <I2C_ITSlaveCplt+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007130:	6822      	ldr	r2, [r4, #0]
 8007132:	6813      	ldr	r3, [r2, #0]
 8007134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007138:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800713a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800713c:	e7be      	b.n	80070bc <I2C_ITSlaveCplt+0x58>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800713e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007144:	d00e      	beq.n	8007164 <I2C_ITSlaveCplt+0x100>
    I2C_ITSlaveSeqCplt(hi2c);
 8007146:	4620      	mov	r0, r4
 8007148:	f7ff fe55 	bl	8006df6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800714c:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <I2C_ITSlaveCplt+0x124>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800714e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8007150:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007154:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007156:	2320      	movs	r3, #32
 8007158:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800715c:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800715e:	f7ff fec5 	bl	8006eec <HAL_I2C_ListenCpltCallback>
}
 8007162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007164:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007168:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800716a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800716e:	2b22      	cmp	r3, #34	; 0x22
 8007170:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8007174:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007178:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800717a:	d102      	bne.n	8007182 <I2C_ITSlaveCplt+0x11e>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800717c:	f7ff fe3a 	bl	8006df4 <HAL_I2C_SlaveRxCpltCallback>
 8007180:	e7ef      	b.n	8007162 <I2C_ITSlaveCplt+0xfe>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007182:	f7ff fe36 	bl	8006df2 <HAL_I2C_SlaveTxCpltCallback>
}
 8007186:	e7ec      	b.n	8007162 <I2C_ITSlaveCplt+0xfe>
 8007188:	ffff0000 	.word	0xffff0000

0800718c <I2C_Slave_ISR_IT>:
{
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800718e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
{
 8007192:	4604      	mov	r4, r0
 8007194:	460d      	mov	r5, r1
 8007196:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8007198:	2b01      	cmp	r3, #1
  uint32_t tmpoptions = hi2c->XferOptions;
 800719a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800719c:	d07d      	beq.n	800729a <I2C_Slave_ISR_IT+0x10e>
 800719e:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80071a0:	068a      	lsls	r2, r1, #26
  __HAL_LOCK(hi2c);
 80071a2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80071a6:	d503      	bpl.n	80071b0 <I2C_Slave_ISR_IT+0x24>
 80071a8:	06b3      	lsls	r3, r6, #26
 80071aa:	d501      	bpl.n	80071b0 <I2C_Slave_ISR_IT+0x24>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80071ac:	f7ff ff5a 	bl	8007064 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80071b0:	06e8      	lsls	r0, r5, #27
 80071b2:	d533      	bpl.n	800721c <I2C_Slave_ISR_IT+0x90>
 80071b4:	06f1      	lsls	r1, r6, #27
 80071b6:	d531      	bpl.n	800721c <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 80071b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	b9fb      	cbnz	r3, 80071fe <I2C_Slave_ISR_IT+0x72>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80071be:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80071c2:	2b28      	cmp	r3, #40	; 0x28
 80071c4:	d10a      	bne.n	80071dc <I2C_Slave_ISR_IT+0x50>
 80071c6:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80071ca:	d107      	bne.n	80071dc <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80071cc:	4629      	mov	r1, r5
 80071ce:	4620      	mov	r0, r4
 80071d0:	f7ff fe8e 	bl	8006ef0 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 80071d4:	2000      	movs	r0, #0
 80071d6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80071da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80071dc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071e0:	6823      	ldr	r3, [r4, #0]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80071e2:	2a29      	cmp	r2, #41	; 0x29
 80071e4:	f04f 0210 	mov.w	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071e8:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80071ea:	d1f3      	bne.n	80071d4 <I2C_Slave_ISR_IT+0x48>
 80071ec:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80071f0:	d0f0      	beq.n	80071d4 <I2C_Slave_ISR_IT+0x48>
        I2C_Flush_TXDR(hi2c);
 80071f2:	4620      	mov	r0, r4
 80071f4:	f7ff f9b2 	bl	800655c <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 80071f8:	f7ff fdfd 	bl	8006df6 <I2C_ITSlaveSeqCplt>
 80071fc:	e7ea      	b.n	80071d4 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	2210      	movs	r2, #16
 8007202:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007204:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007206:	f043 0304 	orr.w	r3, r3, #4
 800720a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800720c:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8007210:	d1e0      	bne.n	80071d4 <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007212:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007214:	4620      	mov	r0, r4
 8007216:	f7ff feb3 	bl	8006f80 <I2C_ITError>
 800721a:	e7db      	b.n	80071d4 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800721c:	076a      	lsls	r2, r5, #29
 800721e:	d51b      	bpl.n	8007258 <I2C_Slave_ISR_IT+0xcc>
 8007220:	0773      	lsls	r3, r6, #29
 8007222:	d519      	bpl.n	8007258 <I2C_Slave_ISR_IT+0xcc>
    if (hi2c->XferCount > 0U)
 8007224:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007226:	b29b      	uxth	r3, r3
 8007228:	b16b      	cbz	r3, 8007246 <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800722e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007230:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007234:	3301      	adds	r3, #1
 8007236:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007238:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800723a:	3b01      	subs	r3, #1
 800723c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800723e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007240:	3b01      	subs	r3, #1
 8007242:	b29b      	uxth	r3, r3
 8007244:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8007246:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1c2      	bne.n	80071d4 <I2C_Slave_ISR_IT+0x48>
 800724e:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8007252:	d0bf      	beq.n	80071d4 <I2C_Slave_ISR_IT+0x48>
      I2C_ITSlaveSeqCplt(hi2c);
 8007254:	4620      	mov	r0, r4
 8007256:	e7cf      	b.n	80071f8 <I2C_Slave_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007258:	0728      	lsls	r0, r5, #28
 800725a:	d505      	bpl.n	8007268 <I2C_Slave_ISR_IT+0xdc>
 800725c:	0731      	lsls	r1, r6, #28
 800725e:	d503      	bpl.n	8007268 <I2C_Slave_ISR_IT+0xdc>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007260:	4620      	mov	r0, r4
 8007262:	f7ff fdff 	bl	8006e64 <I2C_ITAddrCplt.constprop.0>
 8007266:	e7b5      	b.n	80071d4 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007268:	07aa      	lsls	r2, r5, #30
 800726a:	d5b3      	bpl.n	80071d4 <I2C_Slave_ISR_IT+0x48>
 800726c:	07b3      	lsls	r3, r6, #30
 800726e:	d5b1      	bpl.n	80071d4 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 8007270:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007272:	b29b      	uxth	r3, r3
 8007274:	b16b      	cbz	r3, 8007292 <I2C_Slave_ISR_IT+0x106>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007278:	6822      	ldr	r2, [r4, #0]
 800727a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800727e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007280:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007282:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007284:	3b01      	subs	r3, #1
 8007286:	b29b      	uxth	r3, r3
 8007288:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800728a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800728c:	3b01      	subs	r3, #1
 800728e:	8523      	strh	r3, [r4, #40]	; 0x28
 8007290:	e7a0      	b.n	80071d4 <I2C_Slave_ISR_IT+0x48>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007292:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8007296:	d0dd      	beq.n	8007254 <I2C_Slave_ISR_IT+0xc8>
 8007298:	e79c      	b.n	80071d4 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 800729a:	2002      	movs	r0, #2
 800729c:	e79d      	b.n	80071da <I2C_Slave_ISR_IT+0x4e>

0800729e <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800729e:	6803      	ldr	r3, [r0, #0]
 80072a0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80072a2:	681a      	ldr	r2, [r3, #0]
{
 80072a4:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80072a6:	05cc      	lsls	r4, r1, #23
 80072a8:	d508      	bpl.n	80072bc <HAL_I2C_ER_IRQHandler+0x1e>
 80072aa:	0614      	lsls	r4, r2, #24
 80072ac:	d506      	bpl.n	80072bc <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80072ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80072b0:	f044 0401 	orr.w	r4, r4, #1
 80072b4:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072b6:	f44f 7480 	mov.w	r4, #256	; 0x100
 80072ba:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80072bc:	054c      	lsls	r4, r1, #21
 80072be:	d508      	bpl.n	80072d2 <HAL_I2C_ER_IRQHandler+0x34>
 80072c0:	0614      	lsls	r4, r2, #24
 80072c2:	d506      	bpl.n	80072d2 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80072c4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80072c6:	f044 0408 	orr.w	r4, r4, #8
 80072ca:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80072d0:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80072d2:	0589      	lsls	r1, r1, #22
 80072d4:	d508      	bpl.n	80072e8 <HAL_I2C_ER_IRQHandler+0x4a>
 80072d6:	0612      	lsls	r2, r2, #24
 80072d8:	d506      	bpl.n	80072e8 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80072da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072dc:	f042 0202 	orr.w	r2, r2, #2
 80072e0:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072e6:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80072e8:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80072ea:	f011 0f0b 	tst.w	r1, #11
 80072ee:	d003      	beq.n	80072f8 <HAL_I2C_ER_IRQHandler+0x5a>
}
 80072f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 80072f4:	f7ff be44 	b.w	8006f80 <I2C_ITError>
}
 80072f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8007300:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007302:	b10b      	cbz	r3, 8007308 <I2C_DMAAbort+0xa>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007304:	2200      	movs	r2, #0
 8007306:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8007308:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800730a:	b10b      	cbz	r3, 8007310 <I2C_DMAAbort+0x12>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800730c:	2200      	movs	r2, #0
 800730e:	651a      	str	r2, [r3, #80]	; 0x50
  I2C_TreatErrorCallback(hi2c);
 8007310:	f7ff be20 	b.w	8006f54 <I2C_TreatErrorCallback>

08007314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007314:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007316:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800731a:	2b20      	cmp	r3, #32
 800731c:	b2dc      	uxtb	r4, r3
 800731e:	d11d      	bne.n	800735c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007320:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007324:	2b01      	cmp	r3, #1
 8007326:	d019      	beq.n	800735c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007328:	2324      	movs	r3, #36	; 0x24
 800732a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800732e:	6803      	ldr	r3, [r0, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800733e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	4311      	orrs	r1, r2
 8007344:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	f042 0201 	orr.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800734e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007350:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007354:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007358:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800735a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800735c:	2002      	movs	r0, #2
 800735e:	e7fc      	b.n	800735a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007360 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007360:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007362:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007366:	2b20      	cmp	r3, #32
 8007368:	b2dc      	uxtb	r4, r3
 800736a:	d11c      	bne.n	80073a6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800736c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007370:	2b01      	cmp	r3, #1
 8007372:	d018      	beq.n	80073a6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007374:	2324      	movs	r3, #36	; 0x24
 8007376:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800737a:	6803      	ldr	r3, [r0, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	f022 0201 	bic.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007384:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007386:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800738a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800738e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	f042 0201 	orr.w	r2, r2, #1
 8007396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007398:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800739a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800739e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80073a2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80073a4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80073a6:	2002      	movs	r0, #2
 80073a8:	e7fc      	b.n	80073a4 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080073aa <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80073aa:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80073ac:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80073ae:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80073b2:	3284      	adds	r2, #132	; 0x84
 80073b4:	1883      	adds	r3, r0, r2
{
 80073b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80073ba:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80073bc:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80073c0:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80073c2:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80073c6:	684c      	ldr	r4, [r1, #4]
 80073c8:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80073cc:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80073d0:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80073d4:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80073d6:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80073d8:	68c5      	ldr	r5, [r0, #12]
 80073da:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80073de:	443d      	add	r5, r7
 80073e0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80073e4:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80073e6:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80073e8:	68c5      	ldr	r5, [r0, #12]
 80073ea:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80073ee:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80073f0:	689d      	ldr	r5, [r3, #8]
 80073f2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80073f6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80073f8:	688d      	ldr	r5, [r1, #8]
 80073fa:	68c7      	ldr	r7, [r0, #12]
 80073fc:	3501      	adds	r5, #1
 80073fe:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8007402:	443d      	add	r5, r7
 8007404:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007408:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800740a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800740c:	691d      	ldr	r5, [r3, #16]
 800740e:	f025 0507 	bic.w	r5, r5, #7
 8007412:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007414:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007416:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007418:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800741c:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007420:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007424:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8007428:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800742c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8007430:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8007434:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007436:	695d      	ldr	r5, [r3, #20]
 8007438:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800743c:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800743e:	694d      	ldr	r5, [r1, #20]
 8007440:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007442:	69dd      	ldr	r5, [r3, #28]
 8007444:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8007448:	f025 0507 	bic.w	r5, r5, #7
 800744c:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800744e:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8007452:	433d      	orrs	r5, r7
 8007454:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007456:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007458:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800745a:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800745e:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007460:	b31e      	cbz	r6, 80074aa <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007462:	2e01      	cmp	r6, #1
 8007464:	d023      	beq.n	80074ae <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007466:	1eb5      	subs	r5, r6, #2
 8007468:	2d02      	cmp	r5, #2
 800746a:	d922      	bls.n	80074b2 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800746c:	2e07      	cmp	r6, #7
 800746e:	bf0c      	ite	eq
 8007470:	2502      	moveq	r5, #2
 8007472:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007474:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007476:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800747a:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800747e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007480:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007482:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007484:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007486:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007488:	436e      	muls	r6, r5
 800748a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800748e:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007490:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8007492:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8007496:	f024 0407 	bic.w	r4, r4, #7
 800749a:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800749c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800749e:	5883      	ldr	r3, [r0, r2]
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	5083      	str	r3, [r0, r2]
}
 80074a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80074aa:	2504      	movs	r5, #4
 80074ac:	e7e2      	b.n	8007474 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80074ae:	2503      	movs	r5, #3
 80074b0:	e7e0      	b.n	8007474 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80074b2:	2502      	movs	r5, #2
 80074b4:	e7de      	b.n	8007474 <LTDC_SetConfig+0xca>
	...

080074b8 <HAL_LTDC_Init>:
{
 80074b8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80074ba:	4604      	mov	r4, r0
 80074bc:	2800      	cmp	r0, #0
 80074be:	d063      	beq.n	8007588 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80074c0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80074c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074c8:	b91b      	cbnz	r3, 80074d2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80074ca:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80074ce:	f7fa f8b9 	bl	8001644 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074d2:	2302      	movs	r3, #2
 80074d4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	699a      	ldr	r2, [r3, #24]
 80074dc:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80074e0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80074e2:	6999      	ldr	r1, [r3, #24]
 80074e4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80074e8:	4302      	orrs	r2, r0
 80074ea:	68e0      	ldr	r0, [r4, #12]
 80074ec:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80074ee:	6920      	ldr	r0, [r4, #16]
 80074f0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80074f2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80074f4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80074f6:	4925      	ldr	r1, [pc, #148]	; (800758c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80074f8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	400a      	ands	r2, r1
 80074fe:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007506:	69a0      	ldr	r0, [r4, #24]
 8007508:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800750a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800750c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	400a      	ands	r2, r1
 8007512:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800751a:	6a20      	ldr	r0, [r4, #32]
 800751c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800751e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007520:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	400a      	ands	r2, r1
 8007526:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800752e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007530:	4302      	orrs	r2, r0
 8007532:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	4011      	ands	r1, r2
 8007538:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800753a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007542:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007544:	430a      	orrs	r2, r1
 8007546:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007548:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800754a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800754e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007552:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007556:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800755a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800755e:	430a      	orrs	r2, r1
 8007560:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007564:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007568:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800756c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800756e:	f042 0206 	orr.w	r2, r2, #6
 8007572:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800757c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800757e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007582:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8007586:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007588:	2001      	movs	r0, #1
 800758a:	e7fc      	b.n	8007586 <HAL_LTDC_Init+0xce>
 800758c:	f000f800 	.word	0xf000f800

08007590 <HAL_LTDC_ErrorCallback>:
 8007590:	4770      	bx	lr

08007592 <HAL_LTDC_ReloadEventCallback>:
 8007592:	4770      	bx	lr

08007594 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007594:	6803      	ldr	r3, [r0, #0]
{
 8007596:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007598:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800759a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800759c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800759e:	0772      	lsls	r2, r6, #29
 80075a0:	d514      	bpl.n	80075cc <HAL_LTDC_IRQHandler+0x38>
 80075a2:	0769      	lsls	r1, r5, #29
 80075a4:	d512      	bpl.n	80075cc <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80075a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a8:	f022 0204 	bic.w	r2, r2, #4
 80075ac:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80075ae:	2204      	movs	r2, #4
 80075b0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80075b2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80075be:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80075c0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80075c4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80075c8:	f7ff ffe2 	bl	8007590 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80075cc:	07b2      	lsls	r2, r6, #30
 80075ce:	d516      	bpl.n	80075fe <HAL_LTDC_IRQHandler+0x6a>
 80075d0:	07ab      	lsls	r3, r5, #30
 80075d2:	d514      	bpl.n	80075fe <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80075d4:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80075d6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80075d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075da:	f022 0202 	bic.w	r2, r2, #2
 80075de:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80075e0:	2202      	movs	r2, #2
 80075e2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80075e4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80075ee:	2304      	movs	r3, #4
 80075f0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80075f4:	2300      	movs	r3, #0
 80075f6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80075fa:	f7ff ffc9 	bl	8007590 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80075fe:	07f0      	lsls	r0, r6, #31
 8007600:	d510      	bpl.n	8007624 <HAL_LTDC_IRQHandler+0x90>
 8007602:	07e9      	lsls	r1, r5, #31
 8007604:	d50e      	bpl.n	8007624 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007606:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8007608:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800760a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007612:	2201      	movs	r2, #1
 8007614:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8007616:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8007618:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800761c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007620:	f7fb fe64 	bl	80032ec <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007624:	0732      	lsls	r2, r6, #28
 8007626:	d511      	bpl.n	800764c <HAL_LTDC_IRQHandler+0xb8>
 8007628:	072b      	lsls	r3, r5, #28
 800762a:	d50f      	bpl.n	800764c <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800762c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800762e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007632:	f022 0208 	bic.w	r2, r2, #8
 8007636:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007638:	2208      	movs	r2, #8
 800763a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800763c:	2301      	movs	r3, #1
 800763e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007642:	2300      	movs	r3, #0
 8007644:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007648:	f7ff ffa3 	bl	8007592 <HAL_LTDC_ReloadEventCallback>
}
 800764c:	bd70      	pop	{r4, r5, r6, pc}

0800764e <HAL_LTDC_ConfigLayer>:
{
 800764e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8007652:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8007656:	4606      	mov	r6, r0
 8007658:	460f      	mov	r7, r1
 800765a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800765c:	2b01      	cmp	r3, #1
 800765e:	f04f 0002 	mov.w	r0, #2
 8007662:	d01f      	beq.n	80076a4 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007664:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007666:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800766a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800766c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007670:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8007674:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007678:	3438      	adds	r4, #56	; 0x38
 800767a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800767c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800767e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007686:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007688:	4630      	mov	r0, r6
 800768a:	4662      	mov	r2, ip
 800768c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800768e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007690:	f7ff fe8b 	bl	80073aa <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007694:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8007696:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007698:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800769c:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80076a0:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80076a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076a8 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80076a8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	f04f 0302 	mov.w	r3, #2
 80076b2:	d012      	beq.n	80076da <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80076b4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80076b8:	6803      	ldr	r3, [r0, #0]
 80076ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076bc:	f022 0201 	bic.w	r2, r2, #1
 80076c0:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80076c2:	4a07      	ldr	r2, [pc, #28]	; (80076e0 <HAL_LTDC_ProgramLineEvent+0x38>)
 80076c4:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80076c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076c8:	f042 0201 	orr.w	r2, r2, #1
 80076cc:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80076ce:	2301      	movs	r3, #1
 80076d0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80076d4:	2300      	movs	r3, #0
 80076d6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80076da:	4618      	mov	r0, r3
}
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40016800 	.word	0x40016800

080076e4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <HAL_PWREx_EnableOverDrive+0x68>)
{
 80076e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80076e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076ea:	4c19      	ldr	r4, [pc, #100]	; (8007750 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80076ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007702:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007704:	f7fe fb10 	bl	8005d28 <HAL_GetTick>
 8007708:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800770a:	6863      	ldr	r3, [r4, #4]
 800770c:	03da      	lsls	r2, r3, #15
 800770e:	d50c      	bpl.n	800772a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007710:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007712:	4d0f      	ldr	r5, [pc, #60]	; (8007750 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007718:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800771a:	f7fe fb05 	bl	8005d28 <HAL_GetTick>
 800771e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007720:	686b      	ldr	r3, [r5, #4]
 8007722:	039b      	lsls	r3, r3, #14
 8007724:	d50a      	bpl.n	800773c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8007726:	2000      	movs	r0, #0
 8007728:	e006      	b.n	8007738 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800772a:	f7fe fafd 	bl	8005d28 <HAL_GetTick>
 800772e:	1b40      	subs	r0, r0, r5
 8007730:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007734:	d9e9      	bls.n	800770a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8007736:	2003      	movs	r0, #3
}
 8007738:	b003      	add	sp, #12
 800773a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800773c:	f7fe faf4 	bl	8005d28 <HAL_GetTick>
 8007740:	1b00      	subs	r0, r0, r4
 8007742:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007746:	d9eb      	bls.n	8007720 <HAL_PWREx_EnableOverDrive+0x3c>
 8007748:	e7f5      	b.n	8007736 <HAL_PWREx_EnableOverDrive+0x52>
 800774a:	bf00      	nop
 800774c:	40023800 	.word	0x40023800
 8007750:	40007000 	.word	0x40007000

08007754 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007758:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800775a:	b136      	cbz	r6, 800776a <QSPI_Config+0x16>
 800775c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8007760:	d003      	beq.n	800776a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007762:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007764:	6804      	ldr	r4, [r0, #0]
 8007766:	3b01      	subs	r3, #1
 8007768:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800776a:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800776e:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007772:	f1b9 0f00 	cmp.w	r9, #0
 8007776:	d04f      	beq.n	8007818 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007778:	694b      	ldr	r3, [r1, #20]
 800777a:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800777e:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007780:	f8d1 a000 	ldr.w	sl, [r1]
 8007784:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8007788:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 800778c:	ea49 0902 	orr.w	r9, r9, r2
 8007790:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007794:	b335      	cbz	r5, 80077e4 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007796:	688b      	ldr	r3, [r1, #8]
 8007798:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800779c:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800779e:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80077a0:	b19f      	cbz	r7, 80077ca <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077a2:	ea4a 0307 	orr.w	r3, sl, r7
 80077a6:	4323      	orrs	r3, r4
 80077a8:	68cc      	ldr	r4, [r1, #12]
 80077aa:	ea43 0308 	orr.w	r3, r3, r8
 80077ae:	ea43 030e 	orr.w	r3, r3, lr
 80077b2:	4333      	orrs	r3, r6
 80077b4:	4323      	orrs	r3, r4
 80077b6:	ea43 030c 	orr.w	r3, r3, ip
 80077ba:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80077bc:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077c0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80077c2:	d00d      	beq.n	80077e0 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80077c4:	684b      	ldr	r3, [r1, #4]
 80077c6:	6183      	str	r3, [r0, #24]
 80077c8:	e00a      	b.n	80077e0 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077ca:	ea4a 0304 	orr.w	r3, sl, r4
 80077ce:	ea43 0308 	orr.w	r3, r3, r8
 80077d2:	ea43 030e 	orr.w	r3, r3, lr
 80077d6:	4333      	orrs	r3, r6
 80077d8:	ea43 030c 	orr.w	r3, r3, ip
 80077dc:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077de:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80077e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80077e4:	b16f      	cbz	r7, 8007802 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077e6:	ea4a 0307 	orr.w	r3, sl, r7
 80077ea:	4323      	orrs	r3, r4
 80077ec:	68cc      	ldr	r4, [r1, #12]
 80077ee:	ea43 0308 	orr.w	r3, r3, r8
 80077f2:	ea43 030e 	orr.w	r3, r3, lr
 80077f6:	4323      	orrs	r3, r4
 80077f8:	ea43 030c 	orr.w	r3, r3, ip
 80077fc:	ea43 0309 	orr.w	r3, r3, r9
 8007800:	e7dc      	b.n	80077bc <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007802:	ea4a 0304 	orr.w	r3, sl, r4
 8007806:	ea43 0308 	orr.w	r3, r3, r8
 800780a:	ea43 030e 	orr.w	r3, r3, lr
 800780e:	ea43 030c 	orr.w	r3, r3, ip
 8007812:	ea43 0309 	orr.w	r3, r3, r9
 8007816:	e7e2      	b.n	80077de <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007818:	b365      	cbz	r5, 8007874 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800781a:	6804      	ldr	r4, [r0, #0]
 800781c:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800781e:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007820:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007822:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007826:	694e      	ldr	r6, [r1, #20]
 8007828:	ea43 0502 	orr.w	r5, r3, r2
 800782c:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8007830:	04b6      	lsls	r6, r6, #18
 8007832:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007836:	b1a7      	cbz	r7, 8007862 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007838:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800783a:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800783e:	ea40 0008 	orr.w	r0, r0, r8
 8007842:	ea43 0300 	orr.w	r3, r3, r0
 8007846:	68c8      	ldr	r0, [r1, #12]
 8007848:	ea43 030c 	orr.w	r3, r3, ip
 800784c:	ea43 0300 	orr.w	r3, r3, r0
 8007850:	ea43 0306 	orr.w	r3, r3, r6
 8007854:	ea43 0305 	orr.w	r3, r3, r5
 8007858:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800785a:	d0c1      	beq.n	80077e0 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800785c:	684b      	ldr	r3, [r1, #4]
 800785e:	61a3      	str	r3, [r4, #24]
 8007860:	e7be      	b.n	80077e0 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007862:	ea40 0008 	orr.w	r0, r0, r8
 8007866:	4303      	orrs	r3, r0
 8007868:	ea43 030c 	orr.w	r3, r3, ip
 800786c:	4333      	orrs	r3, r6
 800786e:	432b      	orrs	r3, r5
 8007870:	6163      	str	r3, [r4, #20]
 8007872:	e7b5      	b.n	80077e0 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007874:	b17f      	cbz	r7, 8007896 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007876:	ea46 0307 	orr.w	r3, r6, r7
 800787a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	4313      	orrs	r3, r2
 8007880:	4323      	orrs	r3, r4
 8007882:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8007884:	4323      	orrs	r3, r4
 8007886:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007888:	4323      	orrs	r3, r4
 800788a:	68cc      	ldr	r4, [r1, #12]
 800788c:	4323      	orrs	r3, r4
 800788e:	694c      	ldr	r4, [r1, #20]
 8007890:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8007894:	e792      	b.n	80077bc <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007896:	2e00      	cmp	r6, #0
 8007898:	d0a2      	beq.n	80077e0 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800789a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800789c:	6800      	ldr	r0, [r0, #0]
 800789e:	4333      	orrs	r3, r6
 80078a0:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80078a2:	431a      	orrs	r2, r3
 80078a4:	694b      	ldr	r3, [r1, #20]
 80078a6:	4332      	orrs	r2, r6
 80078a8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80078aa:	4332      	orrs	r2, r6
 80078ac:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80078b0:	6142      	str	r2, [r0, #20]
}
 80078b2:	e795      	b.n	80077e0 <QSPI_Config+0x8c>

080078b4 <QSPI_WaitFlagStateUntilTimeout>:
{
 80078b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80078bc:	4604      	mov	r4, r0
 80078be:	460e      	mov	r6, r1
 80078c0:	4615      	mov	r5, r2
 80078c2:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80078c4:	6822      	ldr	r2, [r4, #0]
 80078c6:	6893      	ldr	r3, [r2, #8]
 80078c8:	4233      	tst	r3, r6
 80078ca:	bf14      	ite	ne
 80078cc:	2301      	movne	r3, #1
 80078ce:	2300      	moveq	r3, #0
 80078d0:	42ab      	cmp	r3, r5
 80078d2:	d101      	bne.n	80078d8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80078d4:	2000      	movs	r0, #0
 80078d6:	e012      	b.n	80078fe <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80078d8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80078dc:	d0f3      	beq.n	80078c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078de:	f7fe fa23 	bl	8005d28 <HAL_GetTick>
 80078e2:	1bc0      	subs	r0, r0, r7
 80078e4:	4540      	cmp	r0, r8
 80078e6:	d802      	bhi.n	80078ee <QSPI_WaitFlagStateUntilTimeout+0x3a>
 80078e8:	f1b8 0f00 	cmp.w	r8, #0
 80078ec:	d1ea      	bne.n	80078c4 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80078ee:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80078f0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80078f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80078f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80078f8:	f043 0301 	orr.w	r3, r3, #1
 80078fc:	6463      	str	r3, [r4, #68]	; 0x44
}
 80078fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007904 <HAL_QSPI_Init>:
{
 8007904:	b530      	push	{r4, r5, lr}
 8007906:	4604      	mov	r4, r0
 8007908:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800790a:	f7fe fa0d 	bl	8005d28 <HAL_GetTick>
 800790e:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8007910:	2c00      	cmp	r4, #0
 8007912:	d047      	beq.n	80079a4 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007914:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007918:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800791c:	b94a      	cbnz	r2, 8007932 <HAL_QSPI_Init+0x2e>
 800791e:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8007920:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8007922:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8007926:	f7f9 ff3b 	bl	80017a0 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800792a:	f241 3288 	movw	r2, #5000	; 0x1388
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007932:	6820      	ldr	r0, [r4, #0]
 8007934:	68a1      	ldr	r1, [r4, #8]
 8007936:	6802      	ldr	r2, [r0, #0]
 8007938:	3901      	subs	r1, #1
 800793a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800793e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007942:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007944:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007946:	4620      	mov	r0, r4
 8007948:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800794a:	9200      	str	r2, [sp, #0]
 800794c:	2200      	movs	r2, #0
 800794e:	f7ff ffb1 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8007952:	bb10      	cbnz	r0, 800799a <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007954:	6822      	ldr	r2, [r4, #0]
 8007956:	69e5      	ldr	r5, [r4, #28]
 8007958:	68e3      	ldr	r3, [r4, #12]
 800795a:	6811      	ldr	r1, [r2, #0]
 800795c:	432b      	orrs	r3, r5
 800795e:	6a25      	ldr	r5, [r4, #32]
 8007960:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007964:	432b      	orrs	r3, r5
 8007966:	6865      	ldr	r5, [r4, #4]
 8007968:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800796c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8007970:	430b      	orrs	r3, r1
 8007972:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007974:	6855      	ldr	r5, [r2, #4]
 8007976:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800797a:	430b      	orrs	r3, r1
 800797c:	6921      	ldr	r1, [r4, #16]
 800797e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007982:	4909      	ldr	r1, [pc, #36]	; (80079a8 <HAL_QSPI_Init+0xa4>)
 8007984:	4029      	ands	r1, r5
 8007986:	430b      	orrs	r3, r1
 8007988:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800798a:	6813      	ldr	r3, [r2, #0]
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8007992:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007994:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8007996:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800799a:	2300      	movs	r3, #0
 800799c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80079a0:	b005      	add	sp, #20
 80079a2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80079a4:	2001      	movs	r0, #1
 80079a6:	e7fb      	b.n	80079a0 <HAL_QSPI_Init+0x9c>
 80079a8:	ffe0f8fe 	.word	0xffe0f8fe

080079ac <HAL_QSPI_DeInit>:
{
 80079ac:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 80079ae:	4604      	mov	r4, r0
 80079b0:	b168      	cbz	r0, 80079ce <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 80079b2:	6802      	ldr	r2, [r0, #0]
 80079b4:	6813      	ldr	r3, [r2, #0]
 80079b6:	f023 0301 	bic.w	r3, r3, #1
 80079ba:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 80079bc:	f7f9 ff5e 	bl	800187c <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80079c0:	2000      	movs	r0, #0
 80079c2:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 80079c4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80079c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80079cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80079ce:	2001      	movs	r0, #1
 80079d0:	e7fc      	b.n	80079cc <HAL_QSPI_DeInit+0x20>

080079d2 <HAL_QSPI_Command>:
{
 80079d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079d6:	4604      	mov	r4, r0
 80079d8:	b085      	sub	sp, #20
 80079da:	4617      	mov	r7, r2
 80079dc:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 80079de:	f7fe f9a3 	bl	8005d28 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80079e2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80079e6:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80079e8:	2a01      	cmp	r2, #1
 80079ea:	d033      	beq.n	8007a54 <HAL_QSPI_Command+0x82>
 80079ec:	2201      	movs	r2, #1
 80079ee:	2602      	movs	r6, #2
 80079f0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80079f4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80079f8:	2a01      	cmp	r2, #1
 80079fa:	fa5f f882 	uxtb.w	r8, r2
 80079fe:	d127      	bne.n	8007a50 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007a00:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007a02:	9003      	str	r0, [sp, #12]
 8007a04:	2120      	movs	r1, #32
 8007a06:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007a08:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007a0a:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007a0c:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007a10:	f7ff ff50 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007a14:	4605      	mov	r5, r0
 8007a16:	b9a0      	cbnz	r0, 8007a42 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007a18:	4602      	mov	r2, r0
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f7ff fe99 	bl	8007754 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8007a22:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	b94a      	cbnz	r2, 8007a3e <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4620      	mov	r0, r4
 8007a30:	9700      	str	r7, [sp, #0]
 8007a32:	f7ff ff3f 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007a36:	4605      	mov	r5, r0
 8007a38:	b918      	cbnz	r0, 8007a42 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8007a3e:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007a42:	2300      	movs	r3, #0
 8007a44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007a48:	4628      	mov	r0, r5
 8007a4a:	b005      	add	sp, #20
 8007a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8007a50:	4635      	mov	r5, r6
 8007a52:	e7f6      	b.n	8007a42 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8007a54:	2502      	movs	r5, #2
 8007a56:	e7f7      	b.n	8007a48 <HAL_QSPI_Command+0x76>

08007a58 <HAL_QSPI_AutoPolling>:
{
 8007a58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	4615      	mov	r5, r2
 8007a60:	461e      	mov	r6, r3
 8007a62:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8007a64:	f7fe f960 	bl	8005d28 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007a68:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007a6c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8007a6e:	2a01      	cmp	r2, #1
 8007a70:	d040      	beq.n	8007af4 <HAL_QSPI_AutoPolling+0x9c>
 8007a72:	2201      	movs	r2, #1
 8007a74:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007a78:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007a7c:	2a01      	cmp	r2, #1
 8007a7e:	b2d7      	uxtb	r7, r2
 8007a80:	d136      	bne.n	8007af0 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007a82:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007a84:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007a86:	9003      	str	r0, [sp, #12]
 8007a88:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007a8a:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007a8c:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007a8e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007a92:	2120      	movs	r1, #32
 8007a94:	f7ff ff0e 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007a98:	bb20      	cbnz	r0, 8007ae4 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007a9a:	6821      	ldr	r1, [r4, #0]
 8007a9c:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007a9e:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007aa0:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8007aa2:	686a      	ldr	r2, [r5, #4]
 8007aa4:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007aa6:	68aa      	ldr	r2, [r5, #8]
 8007aa8:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007aaa:	680a      	ldr	r2, [r1, #0]
 8007aac:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007ab0:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007ab2:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007ab4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007ab8:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007aba:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8007abc:	68ea      	ldr	r2, [r5, #12]
 8007abe:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ac6:	f7ff fe45 	bl	8007754 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	463a      	mov	r2, r7
 8007ace:	2108      	movs	r1, #8
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	9600      	str	r6, [sp, #0]
 8007ad4:	f7ff feee 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007ad8:	b920      	cbnz	r0, 8007ae4 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	2208      	movs	r2, #8
 8007ade:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8007ae0:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007aea:	b004      	add	sp, #16
 8007aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8007af0:	2002      	movs	r0, #2
 8007af2:	e7f7      	b.n	8007ae4 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8007af4:	2002      	movs	r0, #2
 8007af6:	e7f8      	b.n	8007aea <HAL_QSPI_AutoPolling+0x92>

08007af8 <HAL_QSPI_MemoryMapped>:
{
 8007af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007afa:	4604      	mov	r4, r0
 8007afc:	4616      	mov	r6, r2
 8007afe:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8007b00:	f7fe f912 	bl	8005d28 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007b04:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007b08:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8007b0a:	2a01      	cmp	r2, #1
 8007b0c:	d033      	beq.n	8007b76 <HAL_QSPI_MemoryMapped+0x7e>
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007b14:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007b18:	2a01      	cmp	r2, #1
 8007b1a:	d12a      	bne.n	8007b72 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007b1c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8007b1e:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007b20:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007b22:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8007b24:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007b28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b2a:	9100      	str	r1, [sp, #0]
 8007b2c:	2120      	movs	r1, #32
 8007b2e:	f7ff fec1 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007b32:	4605      	mov	r5, r0
 8007b34:	b9b8      	cbnz	r0, 8007b66 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	6872      	ldr	r2, [r6, #4]
 8007b3a:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8007b3c:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8007b3e:	f020 0008 	bic.w	r0, r0, #8
 8007b42:	ea40 0002 	orr.w	r0, r0, r2
 8007b46:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8007b48:	d107      	bne.n	8007b5a <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8007b4a:	6832      	ldr	r2, [r6, #0]
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8007b4e:	2210      	movs	r2, #16
 8007b50:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b58:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8007b5a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8007b5e:	4639      	mov	r1, r7
 8007b60:	4620      	mov	r0, r4
 8007b62:	f7ff fdf7 	bl	8007754 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8007b66:	2300      	movs	r3, #0
 8007b68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	b003      	add	sp, #12
 8007b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8007b72:	2502      	movs	r5, #2
 8007b74:	e7f7      	b.n	8007b66 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8007b76:	2502      	movs	r5, #2
 8007b78:	e7f8      	b.n	8007b6c <HAL_QSPI_MemoryMapped+0x74>

08007b7a <HAL_QSPI_Abort>:
{
 8007b7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b7c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007b7e:	f7fe f8d3 	bl	8005d28 <HAL_GetTick>
 8007b82:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8007b84:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8007b88:	f010 0002 	ands.w	r0, r0, #2
 8007b8c:	d03a      	beq.n	8007c04 <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 8007b8e:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007b90:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 8007b92:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007b96:	680a      	ldr	r2, [r1, #0]
 8007b98:	f012 0204 	ands.w	r2, r2, #4
 8007b9c:	d034      	beq.n	8007c08 <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007b9e:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8007ba0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007ba2:	f022 0204 	bic.w	r2, r2, #4
 8007ba6:	9303      	str	r3, [sp, #12]
 8007ba8:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8007baa:	f7fe f9e3 	bl	8005f74 <HAL_DMA_Abort>
      if(status != HAL_OK)
 8007bae:	9b03      	ldr	r3, [sp, #12]
 8007bb0:	b118      	cbz	r0, 8007bba <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8007bb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007bb4:	f042 0204 	orr.w	r2, r2, #4
 8007bb8:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8007bba:	6822      	ldr	r2, [r4, #0]
 8007bbc:	6891      	ldr	r1, [r2, #8]
 8007bbe:	0689      	lsls	r1, r1, #26
 8007bc0:	d51d      	bpl.n	8007bfe <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007bc2:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007bc8:	f041 0102 	orr.w	r1, r1, #2
 8007bcc:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8007bce:	2102      	movs	r1, #2
 8007bd0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007bd2:	9200      	str	r2, [sp, #0]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f7ff fe6d 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	b990      	cbnz	r0, 8007c04 <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007bde:	6822      	ldr	r2, [r4, #0]
 8007be0:	2102      	movs	r1, #2
 8007be2:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007be4:	2120      	movs	r1, #32
 8007be6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007be8:	9200      	str	r2, [sp, #0]
 8007bea:	4602      	mov	r2, r0
 8007bec:	4620      	mov	r0, r4
 8007bee:	f7ff fe61 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007bf2:	b938      	cbnz	r0, 8007c04 <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8007bf4:	6822      	ldr	r2, [r4, #0]
 8007bf6:	6953      	ldr	r3, [r2, #20]
 8007bf8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007bfc:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8007c04:	b004      	add	sp, #16
 8007c06:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8007c08:	4610      	mov	r0, r2
 8007c0a:	e7d6      	b.n	8007bba <HAL_QSPI_Abort+0x40>

08007c0c <HAL_QSPI_Transmit>:
{
 8007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c0e:	4604      	mov	r4, r0
 8007c10:	b085      	sub	sp, #20
 8007c12:	4616      	mov	r6, r2
 8007c14:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8007c16:	f7fe f887 	bl	8005d28 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007c1a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007c1e:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007c20:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8007c22:	2a01      	cmp	r2, #1
 8007c24:	d04c      	beq.n	8007cc0 <HAL_QSPI_Transmit+0xb4>
 8007c26:	2201      	movs	r2, #1
 8007c28:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007c2c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007c30:	2a01      	cmp	r2, #1
 8007c32:	b2d0      	uxtb	r0, r2
 8007c34:	d142      	bne.n	8007cbc <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007c36:	2200      	movs	r2, #0
 8007c38:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8007c3a:	2f00      	cmp	r7, #0
 8007c3c:	d039      	beq.n	8007cb2 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007c3e:	2212      	movs	r2, #18
 8007c40:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007c44:	692a      	ldr	r2, [r5, #16]
 8007c46:	3201      	adds	r2, #1
 8007c48:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007c4a:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8007c4c:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007c4e:	3201      	adds	r2, #1
 8007c50:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007c52:	696a      	ldr	r2, [r5, #20]
 8007c54:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007c58:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8007c5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007c5c:	b9a2      	cbnz	r2, 8007c88 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007c5e:	2201      	movs	r2, #1
 8007c60:	2102      	movs	r1, #2
 8007c62:	4620      	mov	r0, r4
 8007c64:	9600      	str	r6, [sp, #0]
 8007c66:	f7ff fe25 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007c6a:	b928      	cbnz	r0, 8007c78 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8007c70:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007c72:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8007c74:	f7ff ff81 	bl	8007b7a <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007c84:	b005      	add	sp, #20
 8007c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007c88:	2201      	movs	r2, #1
 8007c8a:	2104      	movs	r1, #4
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	9600      	str	r6, [sp, #0]
 8007c90:	9303      	str	r3, [sp, #12]
 8007c92:	f7ff fe0f 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d1ee      	bne.n	8007c78 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007c9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8007c9c:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007c9e:	7812      	ldrb	r2, [r2, #0]
 8007ca0:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8007ca4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ca6:	3201      	adds	r2, #1
 8007ca8:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8007caa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007cac:	3a01      	subs	r2, #1
 8007cae:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007cb0:	e7d3      	b.n	8007c5a <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007cb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007cb4:	f043 0308 	orr.w	r3, r3, #8
 8007cb8:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8007cba:	e7e0      	b.n	8007c7e <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8007cbc:	2002      	movs	r0, #2
 8007cbe:	e7de      	b.n	8007c7e <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8007cc0:	2002      	movs	r0, #2
 8007cc2:	e7df      	b.n	8007c84 <HAL_QSPI_Transmit+0x78>

08007cc4 <HAL_QSPI_Receive>:
{
 8007cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	b085      	sub	sp, #20
 8007cca:	4616      	mov	r6, r2
 8007ccc:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8007cce:	f7fe f82b 	bl	8005d28 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007cd2:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007cd4:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007cd6:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8007cda:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8007cde:	2a01      	cmp	r2, #1
 8007ce0:	d050      	beq.n	8007d84 <HAL_QSPI_Receive+0xc0>
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007ce8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007cec:	2a01      	cmp	r2, #1
 8007cee:	b2d0      	uxtb	r0, r2
 8007cf0:	d146      	bne.n	8007d80 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8007cf6:	2f00      	cmp	r7, #0
 8007cf8:	d03d      	beq.n	8007d76 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007cfa:	2222      	movs	r2, #34	; 0x22
 8007cfc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007d00:	692a      	ldr	r2, [r5, #16]
 8007d02:	3201      	adds	r2, #1
 8007d04:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007d06:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8007d08:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007d0a:	3201      	adds	r2, #1
 8007d0c:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007d0e:	6969      	ldr	r1, [r5, #20]
 8007d10:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8007d14:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8007d18:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007d1a:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8007d1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007d20:	b9a2      	cbnz	r2, 8007d4c <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007d22:	2201      	movs	r2, #1
 8007d24:	2102      	movs	r1, #2
 8007d26:	4620      	mov	r0, r4
 8007d28:	9600      	str	r6, [sp, #0]
 8007d2a:	f7ff fdc3 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8007d2e:	b928      	cbnz	r0, 8007d3c <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8007d34:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007d36:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8007d38:	f7ff ff1f 	bl	8007b7a <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007d42:	2300      	movs	r3, #0
 8007d44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007d48:	b005      	add	sp, #20
 8007d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	2106      	movs	r1, #6
 8007d50:	4620      	mov	r0, r4
 8007d52:	9600      	str	r6, [sp, #0]
 8007d54:	9303      	str	r3, [sp, #12]
 8007d56:	f7ff fdad 	bl	80078b4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d1ee      	bne.n	8007d3c <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007d5e:	f895 1020 	ldrb.w	r1, [r5, #32]
 8007d62:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8007d64:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007d66:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8007d68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007d6a:	3201      	adds	r2, #1
 8007d6c:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8007d6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007d70:	3a01      	subs	r2, #1
 8007d72:	63a2      	str	r2, [r4, #56]	; 0x38
 8007d74:	e7d3      	b.n	8007d1e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007d76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007d78:	f043 0308 	orr.w	r3, r3, #8
 8007d7c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8007d7e:	e7e0      	b.n	8007d42 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 8007d80:	2002      	movs	r0, #2
 8007d82:	e7de      	b.n	8007d42 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8007d84:	2002      	movs	r0, #2
 8007d86:	e7df      	b.n	8007d48 <HAL_QSPI_Receive+0x84>

08007d88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	b340      	cbz	r0, 8007de2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d90:	6803      	ldr	r3, [r0, #0]
 8007d92:	07db      	lsls	r3, r3, #31
 8007d94:	d410      	bmi.n	8007db8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	079f      	lsls	r7, r3, #30
 8007d9a:	d464      	bmi.n	8007e66 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	0719      	lsls	r1, r3, #28
 8007da0:	f100 80aa 	bmi.w	8007ef8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	075a      	lsls	r2, r3, #29
 8007da8:	f100 80cb 	bmi.w	8007f42 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dac:	69a2      	ldr	r2, [r4, #24]
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	f040 8134 	bne.w	800801c <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007db4:	2000      	movs	r0, #0
 8007db6:	e02b      	b.n	8007e10 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007db8:	4b96      	ldr	r3, [pc, #600]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	f002 020c 	and.w	r2, r2, #12
 8007dc0:	2a04      	cmp	r2, #4
 8007dc2:	d007      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dc4:	689a      	ldr	r2, [r3, #8]
 8007dc6:	f002 020c 	and.w	r2, r2, #12
 8007dca:	2a08      	cmp	r2, #8
 8007dcc:	d10b      	bne.n	8007de6 <HAL_RCC_OscConfig+0x5e>
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	0256      	lsls	r6, r2, #9
 8007dd2:	d508      	bpl.n	8007de6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dd4:	4b8f      	ldr	r3, [pc, #572]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	039d      	lsls	r5, r3, #14
 8007dda:	d5dc      	bpl.n	8007d96 <HAL_RCC_OscConfig+0xe>
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1d9      	bne.n	8007d96 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8007de2:	2001      	movs	r0, #1
 8007de4:	e014      	b.n	8007e10 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007de6:	6862      	ldr	r2, [r4, #4]
 8007de8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007dec:	d113      	bne.n	8007e16 <HAL_RCC_OscConfig+0x8e>
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007df4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007df6:	f7fd ff97 	bl	8005d28 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dfa:	4e86      	ldr	r6, [pc, #536]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8007dfc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dfe:	6833      	ldr	r3, [r6, #0]
 8007e00:	0398      	lsls	r0, r3, #14
 8007e02:	d4c8      	bmi.n	8007d96 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e04:	f7fd ff90 	bl	8005d28 <HAL_GetTick>
 8007e08:	1b40      	subs	r0, r0, r5
 8007e0a:	2864      	cmp	r0, #100	; 0x64
 8007e0c:	d9f7      	bls.n	8007dfe <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8007e0e:	2003      	movs	r0, #3
}
 8007e10:	b002      	add	sp, #8
 8007e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e16:	4d7f      	ldr	r5, [pc, #508]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b992      	cbnz	r2, 8007e42 <HAL_RCC_OscConfig+0xba>
 8007e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e20:	602b      	str	r3, [r5, #0]
 8007e22:	682b      	ldr	r3, [r5, #0]
 8007e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e28:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007e2a:	f7fd ff7d 	bl	8005d28 <HAL_GetTick>
 8007e2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	0399      	lsls	r1, r3, #14
 8007e34:	d5af      	bpl.n	8007d96 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e36:	f7fd ff77 	bl	8005d28 <HAL_GetTick>
 8007e3a:	1b80      	subs	r0, r0, r6
 8007e3c:	2864      	cmp	r0, #100	; 0x64
 8007e3e:	d9f7      	bls.n	8007e30 <HAL_RCC_OscConfig+0xa8>
 8007e40:	e7e5      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e42:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8007e46:	d107      	bne.n	8007e58 <HAL_RCC_OscConfig+0xd0>
 8007e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e4c:	602b      	str	r3, [r5, #0]
 8007e4e:	682b      	ldr	r3, [r5, #0]
 8007e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e54:	602b      	str	r3, [r5, #0]
 8007e56:	e7ce      	b.n	8007df6 <HAL_RCC_OscConfig+0x6e>
 8007e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e5c:	602b      	str	r3, [r5, #0]
 8007e5e:	682b      	ldr	r3, [r5, #0]
 8007e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e64:	e7f6      	b.n	8007e54 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e66:	4b6b      	ldr	r3, [pc, #428]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	f012 0f0c 	tst.w	r2, #12
 8007e6e:	d007      	beq.n	8007e80 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	f002 020c 	and.w	r2, r2, #12
 8007e76:	2a08      	cmp	r2, #8
 8007e78:	d111      	bne.n	8007e9e <HAL_RCC_OscConfig+0x116>
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	0252      	lsls	r2, r2, #9
 8007e7e:	d40e      	bmi.n	8007e9e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e80:	4a64      	ldr	r2, [pc, #400]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	079b      	lsls	r3, r3, #30
 8007e86:	d502      	bpl.n	8007e8e <HAL_RCC_OscConfig+0x106>
 8007e88:	68e3      	ldr	r3, [r4, #12]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d1a9      	bne.n	8007de2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e8e:	6813      	ldr	r3, [r2, #0]
 8007e90:	6921      	ldr	r1, [r4, #16]
 8007e92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007e9a:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e9c:	e77e      	b.n	8007d9c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e9e:	68e2      	ldr	r2, [r4, #12]
 8007ea0:	b1c2      	cbz	r2, 8007ed4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8007ea2:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ea4:	4d5b      	ldr	r5, [pc, #364]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007eac:	f7fd ff3c 	bl	8005d28 <HAL_GetTick>
 8007eb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	079f      	lsls	r7, r3, #30
 8007eb6:	d507      	bpl.n	8007ec8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	6922      	ldr	r2, [r4, #16]
 8007ebc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ec0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007ec4:	602b      	str	r3, [r5, #0]
 8007ec6:	e769      	b.n	8007d9c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ec8:	f7fd ff2e 	bl	8005d28 <HAL_GetTick>
 8007ecc:	1b80      	subs	r0, r0, r6
 8007ece:	2802      	cmp	r0, #2
 8007ed0:	d9ef      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x12a>
 8007ed2:	e79c      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8007ed4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ed6:	4e4f      	ldr	r6, [pc, #316]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8007ed8:	f022 0201 	bic.w	r2, r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007ede:	f7fd ff23 	bl	8005d28 <HAL_GetTick>
 8007ee2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ee4:	6833      	ldr	r3, [r6, #0]
 8007ee6:	0798      	lsls	r0, r3, #30
 8007ee8:	f57f af58 	bpl.w	8007d9c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eec:	f7fd ff1c 	bl	8005d28 <HAL_GetTick>
 8007ef0:	1b40      	subs	r0, r0, r5
 8007ef2:	2802      	cmp	r0, #2
 8007ef4:	d9f6      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x15c>
 8007ef6:	e78a      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ef8:	6963      	ldr	r3, [r4, #20]
 8007efa:	4d46      	ldr	r5, [pc, #280]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
 8007efc:	b183      	cbz	r3, 8007f20 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8007efe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007f00:	f043 0301 	orr.w	r3, r3, #1
 8007f04:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007f06:	f7fd ff0f 	bl	8005d28 <HAL_GetTick>
 8007f0a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007f0e:	079b      	lsls	r3, r3, #30
 8007f10:	f53f af48 	bmi.w	8007da4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f14:	f7fd ff08 	bl	8005d28 <HAL_GetTick>
 8007f18:	1b80      	subs	r0, r0, r6
 8007f1a:	2802      	cmp	r0, #2
 8007f1c:	d9f6      	bls.n	8007f0c <HAL_RCC_OscConfig+0x184>
 8007f1e:	e776      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8007f20:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007f28:	f7fd fefe 	bl	8005d28 <HAL_GetTick>
 8007f2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f2e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007f30:	079f      	lsls	r7, r3, #30
 8007f32:	f57f af37 	bpl.w	8007da4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f36:	f7fd fef7 	bl	8005d28 <HAL_GetTick>
 8007f3a:	1b80      	subs	r0, r0, r6
 8007f3c:	2802      	cmp	r0, #2
 8007f3e:	d9f6      	bls.n	8007f2e <HAL_RCC_OscConfig+0x1a6>
 8007f40:	e765      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f42:	4b34      	ldr	r3, [pc, #208]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
 8007f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f46:	00d0      	lsls	r0, r2, #3
 8007f48:	d427      	bmi.n	8007f9a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8007f4c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f52:	641a      	str	r2, [r3, #64]	; 0x40
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f5e:	4d2e      	ldr	r5, [pc, #184]	; (8008018 <HAL_RCC_OscConfig+0x290>)
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	05d9      	lsls	r1, r3, #23
 8007f64:	d51b      	bpl.n	8007f9e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f66:	68a3      	ldr	r3, [r4, #8]
 8007f68:	4d2a      	ldr	r5, [pc, #168]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d127      	bne.n	8007fbe <HAL_RCC_OscConfig+0x236>
 8007f6e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007f70:	f043 0301 	orr.w	r3, r3, #1
 8007f74:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f76:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007f7a:	f7fd fed5 	bl	8005d28 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f7e:	4e25      	ldr	r6, [pc, #148]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8007f80:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f82:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007f84:	079b      	lsls	r3, r3, #30
 8007f86:	d53f      	bpl.n	8008008 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8007f88:	2f00      	cmp	r7, #0
 8007f8a:	f43f af0f 	beq.w	8007dac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f8e:	4a21      	ldr	r2, [pc, #132]	; (8008014 <HAL_RCC_OscConfig+0x28c>)
 8007f90:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f96:	6413      	str	r3, [r2, #64]	; 0x40
 8007f98:	e708      	b.n	8007dac <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8007f9a:	2700      	movs	r7, #0
 8007f9c:	e7df      	b.n	8007f5e <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8007fa6:	f7fd febf 	bl	8005d28 <HAL_GetTick>
 8007faa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	05da      	lsls	r2, r3, #23
 8007fb0:	d4d9      	bmi.n	8007f66 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb2:	f7fd feb9 	bl	8005d28 <HAL_GetTick>
 8007fb6:	1b80      	subs	r0, r0, r6
 8007fb8:	2864      	cmp	r0, #100	; 0x64
 8007fba:	d9f7      	bls.n	8007fac <HAL_RCC_OscConfig+0x224>
 8007fbc:	e727      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fbe:	b9ab      	cbnz	r3, 8007fec <HAL_RCC_OscConfig+0x264>
 8007fc0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fc2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fc6:	f023 0301 	bic.w	r3, r3, #1
 8007fca:	672b      	str	r3, [r5, #112]	; 0x70
 8007fcc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007fce:	f023 0304 	bic.w	r3, r3, #4
 8007fd2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007fd4:	f7fd fea8 	bl	8005d28 <HAL_GetTick>
 8007fd8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fda:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007fdc:	0798      	lsls	r0, r3, #30
 8007fde:	d5d3      	bpl.n	8007f88 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fe0:	f7fd fea2 	bl	8005d28 <HAL_GetTick>
 8007fe4:	1b80      	subs	r0, r0, r6
 8007fe6:	4540      	cmp	r0, r8
 8007fe8:	d9f7      	bls.n	8007fda <HAL_RCC_OscConfig+0x252>
 8007fea:	e710      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fec:	2b05      	cmp	r3, #5
 8007fee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007ff0:	d103      	bne.n	8007ffa <HAL_RCC_OscConfig+0x272>
 8007ff2:	f043 0304 	orr.w	r3, r3, #4
 8007ff6:	672b      	str	r3, [r5, #112]	; 0x70
 8007ff8:	e7b9      	b.n	8007f6e <HAL_RCC_OscConfig+0x1e6>
 8007ffa:	f023 0301 	bic.w	r3, r3, #1
 8007ffe:	672b      	str	r3, [r5, #112]	; 0x70
 8008000:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008002:	f023 0304 	bic.w	r3, r3, #4
 8008006:	e7b5      	b.n	8007f74 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008008:	f7fd fe8e 	bl	8005d28 <HAL_GetTick>
 800800c:	1b40      	subs	r0, r0, r5
 800800e:	4540      	cmp	r0, r8
 8008010:	d9b7      	bls.n	8007f82 <HAL_RCC_OscConfig+0x1fa>
 8008012:	e6fc      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
 8008014:	40023800 	.word	0x40023800
 8008018:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800801c:	4d38      	ldr	r5, [pc, #224]	; (8008100 <HAL_RCC_OscConfig+0x378>)
 800801e:	68ab      	ldr	r3, [r5, #8]
 8008020:	f003 030c 	and.w	r3, r3, #12
 8008024:	2b08      	cmp	r3, #8
 8008026:	d041      	beq.n	80080ac <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8008028:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800802a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800802c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008030:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008032:	d12e      	bne.n	8008092 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8008034:	f7fd fe78 	bl	8005d28 <HAL_GetTick>
 8008038:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800803a:	682b      	ldr	r3, [r5, #0]
 800803c:	0199      	lsls	r1, r3, #6
 800803e:	d422      	bmi.n	8008086 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008040:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008042:	085b      	lsrs	r3, r3, #1
 8008044:	1e5a      	subs	r2, r3, #1
 8008046:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800804a:	430b      	orrs	r3, r1
 800804c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008050:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008052:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008056:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008058:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800805c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008060:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008062:	682b      	ldr	r3, [r5, #0]
 8008064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008068:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800806a:	f7fd fe5d 	bl	8005d28 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800806e:	4d24      	ldr	r5, [pc, #144]	; (8008100 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8008070:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008072:	682b      	ldr	r3, [r5, #0]
 8008074:	019a      	lsls	r2, r3, #6
 8008076:	f53f ae9d 	bmi.w	8007db4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800807a:	f7fd fe55 	bl	8005d28 <HAL_GetTick>
 800807e:	1b00      	subs	r0, r0, r4
 8008080:	2802      	cmp	r0, #2
 8008082:	d9f6      	bls.n	8008072 <HAL_RCC_OscConfig+0x2ea>
 8008084:	e6c3      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008086:	f7fd fe4f 	bl	8005d28 <HAL_GetTick>
 800808a:	1b80      	subs	r0, r0, r6
 800808c:	2802      	cmp	r0, #2
 800808e:	d9d4      	bls.n	800803a <HAL_RCC_OscConfig+0x2b2>
 8008090:	e6bd      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8008092:	f7fd fe49 	bl	8005d28 <HAL_GetTick>
 8008096:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	019b      	lsls	r3, r3, #6
 800809c:	f57f ae8a 	bpl.w	8007db4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080a0:	f7fd fe42 	bl	8005d28 <HAL_GetTick>
 80080a4:	1b00      	subs	r0, r0, r4
 80080a6:	2802      	cmp	r0, #2
 80080a8:	d9f6      	bls.n	8008098 <HAL_RCC_OscConfig+0x310>
 80080aa:	e6b0      	b.n	8007e0e <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080ac:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80080ae:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080b0:	f43f ae97 	beq.w	8007de2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080b8:	69e1      	ldr	r1, [r4, #28]
 80080ba:	428a      	cmp	r2, r1
 80080bc:	f47f ae91 	bne.w	8007de2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080c4:	6a21      	ldr	r1, [r4, #32]
 80080c6:	428a      	cmp	r2, r1
 80080c8:	f47f ae8b 	bne.w	8007de2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080cc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080d2:	401a      	ands	r2, r3
 80080d4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80080d8:	f47f ae83 	bne.w	8007de2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80080de:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80080e2:	0852      	lsrs	r2, r2, #1
 80080e4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080e6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80080ea:	f47f ae7a 	bne.w	8007de2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080ee:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80080f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080f4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80080f8:	f43f ae5c 	beq.w	8007db4 <HAL_RCC_OscConfig+0x2c>
 80080fc:	e671      	b.n	8007de2 <HAL_RCC_OscConfig+0x5a>
 80080fe:	bf00      	nop
 8008100:	40023800 	.word	0x40023800

08008104 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008104:	4913      	ldr	r1, [pc, #76]	; (8008154 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8008106:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008108:	688b      	ldr	r3, [r1, #8]
 800810a:	f003 030c 	and.w	r3, r3, #12
 800810e:	2b04      	cmp	r3, #4
 8008110:	d01b      	beq.n	800814a <HAL_RCC_GetSysClockFreq+0x46>
 8008112:	2b08      	cmp	r3, #8
 8008114:	d11b      	bne.n	800814e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008116:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008118:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800811a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800811c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008120:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008124:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8008128:	bf1a      	itte	ne
 800812a:	480b      	ldrne	r0, [pc, #44]	; (8008158 <HAL_RCC_GetSysClockFreq+0x54>)
 800812c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800812e:	480b      	ldreq	r0, [pc, #44]	; (800815c <HAL_RCC_GetSysClockFreq+0x58>)
 8008130:	fba1 0100 	umull	r0, r1, r1, r0
 8008134:	f7f8 fcda 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <HAL_RCC_GetSysClockFreq+0x50>)
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8008140:	3301      	adds	r3, #1
 8008142:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8008144:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008148:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800814a:	4803      	ldr	r0, [pc, #12]	; (8008158 <HAL_RCC_GetSysClockFreq+0x54>)
 800814c:	e7fc      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800814e:	4803      	ldr	r0, [pc, #12]	; (800815c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8008150:	e7fa      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x44>
 8008152:	bf00      	nop
 8008154:	40023800 	.word	0x40023800
 8008158:	017d7840 	.word	0x017d7840
 800815c:	00f42400 	.word	0x00f42400

08008160 <HAL_RCC_ClockConfig>:
{
 8008160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008164:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8008166:	4604      	mov	r4, r0
 8008168:	b910      	cbnz	r0, 8008170 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800816a:	2001      	movs	r0, #1
}
 800816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008170:	4a46      	ldr	r2, [pc, #280]	; (800828c <HAL_RCC_ClockConfig+0x12c>)
 8008172:	6813      	ldr	r3, [r2, #0]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	428b      	cmp	r3, r1
 800817a:	d328      	bcc.n	80081ce <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800817c:	6822      	ldr	r2, [r4, #0]
 800817e:	0797      	lsls	r7, r2, #30
 8008180:	d430      	bmi.n	80081e4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008182:	07d0      	lsls	r0, r2, #31
 8008184:	d444      	bmi.n	8008210 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008186:	4a41      	ldr	r2, [pc, #260]	; (800828c <HAL_RCC_ClockConfig+0x12c>)
 8008188:	6813      	ldr	r3, [r2, #0]
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	42ab      	cmp	r3, r5
 8008190:	d867      	bhi.n	8008262 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008192:	6822      	ldr	r2, [r4, #0]
 8008194:	0751      	lsls	r1, r2, #29
 8008196:	d470      	bmi.n	800827a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008198:	0713      	lsls	r3, r2, #28
 800819a:	d507      	bpl.n	80081ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800819c:	4a3c      	ldr	r2, [pc, #240]	; (8008290 <HAL_RCC_ClockConfig+0x130>)
 800819e:	6921      	ldr	r1, [r4, #16]
 80081a0:	6893      	ldr	r3, [r2, #8]
 80081a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80081a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80081aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081ac:	f7ff ffaa 	bl	8008104 <HAL_RCC_GetSysClockFreq>
 80081b0:	4b37      	ldr	r3, [pc, #220]	; (8008290 <HAL_RCC_ClockConfig+0x130>)
 80081b2:	4a38      	ldr	r2, [pc, #224]	; (8008294 <HAL_RCC_ClockConfig+0x134>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80081ba:	5cd3      	ldrb	r3, [r2, r3]
 80081bc:	40d8      	lsrs	r0, r3
 80081be:	4b36      	ldr	r3, [pc, #216]	; (8008298 <HAL_RCC_ClockConfig+0x138>)
 80081c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80081c2:	4b36      	ldr	r3, [pc, #216]	; (800829c <HAL_RCC_ClockConfig+0x13c>)
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	f7f9 fbe5 	bl	8001994 <HAL_InitTick>
  return HAL_OK;
 80081ca:	2000      	movs	r0, #0
 80081cc:	e7ce      	b.n	800816c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ce:	6813      	ldr	r3, [r2, #0]
 80081d0:	f023 030f 	bic.w	r3, r3, #15
 80081d4:	430b      	orrs	r3, r1
 80081d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d8:	6813      	ldr	r3, [r2, #0]
 80081da:	f003 030f 	and.w	r3, r3, #15
 80081de:	428b      	cmp	r3, r1
 80081e0:	d1c3      	bne.n	800816a <HAL_RCC_ClockConfig+0xa>
 80081e2:	e7cb      	b.n	800817c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e4:	f012 0f04 	tst.w	r2, #4
 80081e8:	4b29      	ldr	r3, [pc, #164]	; (8008290 <HAL_RCC_ClockConfig+0x130>)
 80081ea:	d003      	beq.n	80081f4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081ec:	6899      	ldr	r1, [r3, #8]
 80081ee:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80081f2:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081f4:	0716      	lsls	r6, r2, #28
 80081f6:	d503      	bpl.n	8008200 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081f8:	6899      	ldr	r1, [r3, #8]
 80081fa:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80081fe:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008200:	4923      	ldr	r1, [pc, #140]	; (8008290 <HAL_RCC_ClockConfig+0x130>)
 8008202:	68a0      	ldr	r0, [r4, #8]
 8008204:	688b      	ldr	r3, [r1, #8]
 8008206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800820a:	4303      	orrs	r3, r0
 800820c:	608b      	str	r3, [r1, #8]
 800820e:	e7b8      	b.n	8008182 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008210:	6861      	ldr	r1, [r4, #4]
 8008212:	4b1f      	ldr	r3, [pc, #124]	; (8008290 <HAL_RCC_ClockConfig+0x130>)
 8008214:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008216:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008218:	d11b      	bne.n	8008252 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800821a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800821e:	d0a4      	beq.n	800816a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008220:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008222:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008226:	4f1a      	ldr	r7, [pc, #104]	; (8008290 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008228:	f022 0203 	bic.w	r2, r2, #3
 800822c:	430a      	orrs	r2, r1
 800822e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8008230:	f7fd fd7a 	bl	8005d28 <HAL_GetTick>
 8008234:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6862      	ldr	r2, [r4, #4]
 800823a:	f003 030c 	and.w	r3, r3, #12
 800823e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008242:	d0a0      	beq.n	8008186 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008244:	f7fd fd70 	bl	8005d28 <HAL_GetTick>
 8008248:	1b80      	subs	r0, r0, r6
 800824a:	4540      	cmp	r0, r8
 800824c:	d9f3      	bls.n	8008236 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800824e:	2003      	movs	r0, #3
 8008250:	e78c      	b.n	800816c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008252:	2902      	cmp	r1, #2
 8008254:	d102      	bne.n	800825c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008256:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800825a:	e7e0      	b.n	800821e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800825c:	f012 0f02 	tst.w	r2, #2
 8008260:	e7dd      	b.n	800821e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	f023 030f 	bic.w	r3, r3, #15
 8008268:	432b      	orrs	r3, r5
 800826a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800826c:	6813      	ldr	r3, [r2, #0]
 800826e:	f003 030f 	and.w	r3, r3, #15
 8008272:	42ab      	cmp	r3, r5
 8008274:	f47f af79 	bne.w	800816a <HAL_RCC_ClockConfig+0xa>
 8008278:	e78b      	b.n	8008192 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800827a:	4905      	ldr	r1, [pc, #20]	; (8008290 <HAL_RCC_ClockConfig+0x130>)
 800827c:	68e0      	ldr	r0, [r4, #12]
 800827e:	688b      	ldr	r3, [r1, #8]
 8008280:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008284:	4303      	orrs	r3, r0
 8008286:	608b      	str	r3, [r1, #8]
 8008288:	e786      	b.n	8008198 <HAL_RCC_ClockConfig+0x38>
 800828a:	bf00      	nop
 800828c:	40023c00 	.word	0x40023c00
 8008290:	40023800 	.word	0x40023800
 8008294:	0802e43c 	.word	0x0802e43c
 8008298:	2000000c 	.word	0x2000000c
 800829c:	2000003c 	.word	0x2000003c

080082a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082a0:	4b04      	ldr	r3, [pc, #16]	; (80082b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80082a2:	4a05      	ldr	r2, [pc, #20]	; (80082b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80082aa:	5cd3      	ldrb	r3, [r2, r3]
 80082ac:	4a03      	ldr	r2, [pc, #12]	; (80082bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80082ae:	6810      	ldr	r0, [r2, #0]
}
 80082b0:	40d8      	lsrs	r0, r3
 80082b2:	4770      	bx	lr
 80082b4:	40023800 	.word	0x40023800
 80082b8:	0802e44c 	.word	0x0802e44c
 80082bc:	2000000c 	.word	0x2000000c

080082c0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80082c0:	230f      	movs	r3, #15
 80082c2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <HAL_RCC_GetClockConfig+0x34>)
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	f002 0203 	and.w	r2, r2, #3
 80082cc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80082d4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80082dc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	08db      	lsrs	r3, r3, #3
 80082e2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80082e6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80082e8:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <HAL_RCC_GetClockConfig+0x38>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	600b      	str	r3, [r1, #0]
}
 80082f2:	4770      	bx	lr
 80082f4:	40023800 	.word	0x40023800
 80082f8:	40023c00 	.word	0x40023c00

080082fc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082fc:	6803      	ldr	r3, [r0, #0]
{
 80082fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008302:	f013 0601 	ands.w	r6, r3, #1
{
 8008306:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008308:	d00b      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800830a:	4aaa      	ldr	r2, [pc, #680]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800830c:	6891      	ldr	r1, [r2, #8]
 800830e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8008312:	6091      	str	r1, [r2, #8]
 8008314:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8008316:	6891      	ldr	r1, [r2, #8]
 8008318:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800831a:	fab6 f686 	clz	r6, r6
 800831e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008320:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008322:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8008326:	d012      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008328:	49a2      	ldr	r1, [pc, #648]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800832a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800832c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008330:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008334:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8008338:	bf08      	it	eq
 800833a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800833c:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008340:	bf16      	itet	ne
 8008342:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8008346:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008348:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800834a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800834e:	02d8      	lsls	r0, r3, #11
 8008350:	d510      	bpl.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008352:	4898      	ldr	r0, [pc, #608]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008354:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008356:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800835a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800835e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008362:	ea42 0201 	orr.w	r2, r2, r1
 8008366:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800836a:	f000 8184 	beq.w	8008676 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800836e:	2900      	cmp	r1, #0
 8008370:	bf08      	it	eq
 8008372:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8008374:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008378:	bf18      	it	ne
 800837a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800837c:	0699      	lsls	r1, r3, #26
 800837e:	d531      	bpl.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008380:	4b8c      	ldr	r3, [pc, #560]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008382:	4f8d      	ldr	r7, [pc, #564]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8008384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008386:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800838a:	641a      	str	r2, [r3, #64]	; 0x40
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800839e:	f7fd fcc3 	bl	8005d28 <HAL_GetTick>
 80083a2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	05da      	lsls	r2, r3, #23
 80083a8:	f140 8167 	bpl.w	800867a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083ac:	4f81      	ldr	r7, [pc, #516]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80083ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80083b4:	f040 816c 	bne.w	8008690 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80083be:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80083c2:	4a7c      	ldr	r2, [pc, #496]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80083c4:	f040 818a 	bne.w	80086dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80083c8:	6891      	ldr	r1, [r2, #8]
 80083ca:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80083ce:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80083d2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80083d6:	4301      	orrs	r1, r0
 80083d8:	6091      	str	r1, [r2, #8]
 80083da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083de:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80083e0:	430b      	orrs	r3, r1
 80083e2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	06d9      	lsls	r1, r3, #27
 80083e8:	d50c      	bpl.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083ea:	4a72      	ldr	r2, [pc, #456]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80083ec:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80083f0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80083f4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80083f8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80083fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80083fe:	4301      	orrs	r1, r0
 8008400:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008404:	045a      	lsls	r2, r3, #17
 8008406:	d508      	bpl.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008408:	496a      	ldr	r1, [pc, #424]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800840a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800840c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008410:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008414:	4302      	orrs	r2, r0
 8008416:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800841a:	041f      	lsls	r7, r3, #16
 800841c:	d508      	bpl.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800841e:	4965      	ldr	r1, [pc, #404]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008420:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008422:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008426:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800842a:	4302      	orrs	r2, r0
 800842c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008430:	03d8      	lsls	r0, r3, #15
 8008432:	d508      	bpl.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008434:	495f      	ldr	r1, [pc, #380]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008436:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008438:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800843c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008440:	4302      	orrs	r2, r0
 8008442:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008446:	0399      	lsls	r1, r3, #14
 8008448:	d508      	bpl.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800844a:	495a      	ldr	r1, [pc, #360]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800844c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800844e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008452:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008456:	4302      	orrs	r2, r0
 8008458:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800845c:	065a      	lsls	r2, r3, #25
 800845e:	d508      	bpl.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008460:	4954      	ldr	r1, [pc, #336]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008462:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008464:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008468:	f022 0203 	bic.w	r2, r2, #3
 800846c:	4302      	orrs	r2, r0
 800846e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008472:	061f      	lsls	r7, r3, #24
 8008474:	d508      	bpl.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008476:	494f      	ldr	r1, [pc, #316]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008478:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800847a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800847e:	f022 020c 	bic.w	r2, r2, #12
 8008482:	4302      	orrs	r2, r0
 8008484:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008488:	05d8      	lsls	r0, r3, #23
 800848a:	d508      	bpl.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800848c:	4949      	ldr	r1, [pc, #292]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800848e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008490:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008494:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008498:	4302      	orrs	r2, r0
 800849a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800849e:	0599      	lsls	r1, r3, #22
 80084a0:	d508      	bpl.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084a2:	4944      	ldr	r1, [pc, #272]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80084a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80084a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80084aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80084ae:	4302      	orrs	r2, r0
 80084b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084b4:	055a      	lsls	r2, r3, #21
 80084b6:	d508      	bpl.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084b8:	493e      	ldr	r1, [pc, #248]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80084ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80084c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80084c4:	4302      	orrs	r2, r0
 80084c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80084ca:	051f      	lsls	r7, r3, #20
 80084cc:	d508      	bpl.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80084ce:	4939      	ldr	r1, [pc, #228]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80084d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80084d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80084da:	4302      	orrs	r2, r0
 80084dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80084e0:	04d8      	lsls	r0, r3, #19
 80084e2:	d508      	bpl.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80084e4:	4933      	ldr	r1, [pc, #204]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80084e6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80084e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80084ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80084f0:	4302      	orrs	r2, r0
 80084f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80084f6:	0499      	lsls	r1, r3, #18
 80084f8:	d508      	bpl.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80084fa:	492e      	ldr	r1, [pc, #184]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80084fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80084fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008502:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008506:	4302      	orrs	r2, r0
 8008508:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800850c:	025a      	lsls	r2, r3, #9
 800850e:	d508      	bpl.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008510:	4928      	ldr	r1, [pc, #160]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008512:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008514:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008518:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800851c:	4302      	orrs	r2, r0
 800851e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008522:	029f      	lsls	r7, r3, #10
 8008524:	d50c      	bpl.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008526:	4823      	ldr	r0, [pc, #140]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008528:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800852a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800852e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008532:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8008536:	bf08      	it	eq
 8008538:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800853a:	430a      	orrs	r2, r1
 800853c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8008540:	f013 0f08 	tst.w	r3, #8
 8008544:	bf18      	it	ne
 8008546:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008548:	0358      	lsls	r0, r3, #13
 800854a:	d508      	bpl.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800854c:	4919      	ldr	r1, [pc, #100]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800854e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008550:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008554:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008558:	4302      	orrs	r2, r0
 800855a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800855e:	0219      	lsls	r1, r3, #8
 8008560:	d509      	bpl.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008562:	4914      	ldr	r1, [pc, #80]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008564:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8008568:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800856c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008570:	4302      	orrs	r2, r0
 8008572:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008576:	2e01      	cmp	r6, #1
 8008578:	f000 80b4 	beq.w	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800857c:	019a      	lsls	r2, r3, #6
 800857e:	f100 80b1 	bmi.w	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008582:	2d01      	cmp	r5, #1
 8008584:	d175      	bne.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008586:	4d0b      	ldr	r5, [pc, #44]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800858e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008590:	f7fd fbca 	bl	8005d28 <HAL_GetTick>
 8008594:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008596:	682b      	ldr	r3, [r5, #0]
 8008598:	009f      	lsls	r7, r3, #2
 800859a:	f100 8127 	bmi.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	0316      	lsls	r6, r2, #12
 80085a2:	d501      	bpl.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80085a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085a6:	b14b      	cbz	r3, 80085bc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80085a8:	02d0      	lsls	r0, r2, #11
 80085aa:	d522      	bpl.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085ae:	bb03      	cbnz	r3, 80085f2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80085b0:	e004      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80085b2:	bf00      	nop
 80085b4:	40023800 	.word	0x40023800
 80085b8:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085bc:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085c0:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80085c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085c8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80085cc:	430b      	orrs	r3, r1
 80085ce:	6961      	ldr	r1, [r4, #20]
 80085d0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80085d4:	69a1      	ldr	r1, [r4, #24]
 80085d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80085da:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80085de:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80085e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80085e4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80085e8:	3901      	subs	r1, #1
 80085ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80085ee:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80085f2:	0291      	lsls	r1, r2, #10
 80085f4:	d515      	bpl.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80085f6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80085f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085fc:	d111      	bne.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085fe:	4982      	ldr	r1, [pc, #520]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008600:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008604:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008608:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800860c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8008610:	4303      	orrs	r3, r0
 8008612:	6960      	ldr	r0, [r4, #20]
 8008614:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8008618:	6a20      	ldr	r0, [r4, #32]
 800861a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800861e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008622:	0712      	lsls	r2, r2, #28
 8008624:	d519      	bpl.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008626:	4a78      	ldr	r2, [pc, #480]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008628:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800862c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008630:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008638:	430b      	orrs	r3, r1
 800863a:	6961      	ldr	r1, [r4, #20]
 800863c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008640:	69e1      	ldr	r1, [r4, #28]
 8008642:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008646:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800864a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800864e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008650:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008654:	430b      	orrs	r3, r1
 8008656:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800865a:	4c6b      	ldr	r4, [pc, #428]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008662:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008664:	f7fd fb60 	bl	8005d28 <HAL_GetTick>
 8008668:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	f140 80c4 	bpl.w	80087fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8008672:	2000      	movs	r0, #0
 8008674:	e009      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8008676:	2601      	movs	r6, #1
 8008678:	e67c      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800867a:	f7fd fb55 	bl	8005d28 <HAL_GetTick>
 800867e:	eba0 0008 	sub.w	r0, r0, r8
 8008682:	2864      	cmp	r0, #100	; 0x64
 8008684:	f67f ae8e 	bls.w	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8008688:	2003      	movs	r0, #3
}
 800868a:	b003      	add	sp, #12
 800868c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008690:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008692:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008696:	4293      	cmp	r3, r2
 8008698:	f43f ae8e 	beq.w	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800869c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800869e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80086a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80086a8:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80086ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80086b0:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80086b2:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086b6:	07db      	lsls	r3, r3, #31
 80086b8:	f57f ae7e 	bpl.w	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80086bc:	f7fd fb34 	bl	8005d28 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086c0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80086c4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086c8:	0798      	lsls	r0, r3, #30
 80086ca:	f53f ae75 	bmi.w	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086ce:	f7fd fb2b 	bl	8005d28 <HAL_GetTick>
 80086d2:	eba0 0008 	sub.w	r0, r0, r8
 80086d6:	4548      	cmp	r0, r9
 80086d8:	d9f5      	bls.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80086da:	e7d5      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086dc:	6891      	ldr	r1, [r2, #8]
 80086de:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80086e2:	e679      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80086e4:	4e48      	ldr	r6, [pc, #288]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80086e6:	6833      	ldr	r3, [r6, #0]
 80086e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086ec:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80086ee:	f7fd fb1b 	bl	8005d28 <HAL_GetTick>
 80086f2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086f4:	6833      	ldr	r3, [r6, #0]
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	d472      	bmi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80086fa:	6822      	ldr	r2, [r4, #0]
 80086fc:	07d7      	lsls	r7, r2, #31
 80086fe:	d512      	bpl.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8008700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008702:	b983      	cbnz	r3, 8008726 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008704:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008708:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800870c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008710:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008714:	430b      	orrs	r3, r1
 8008716:	6861      	ldr	r1, [r4, #4]
 8008718:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800871c:	68a1      	ldr	r1, [r4, #8]
 800871e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008722:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008726:	0316      	lsls	r6, r2, #12
 8008728:	d503      	bpl.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800872a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800872c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008730:	d005      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008732:	02d0      	lsls	r0, r2, #11
 8008734:	d51e      	bpl.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800873c:	d11a      	bne.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800873e:	4932      	ldr	r1, [pc, #200]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008740:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008744:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800874c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8008750:	4303      	orrs	r3, r0
 8008752:	6860      	ldr	r0, [r4, #4]
 8008754:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8008758:	68e0      	ldr	r0, [r4, #12]
 800875a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800875e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008762:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8008766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008768:	f020 001f 	bic.w	r0, r0, #31
 800876c:	3b01      	subs	r3, #1
 800876e:	4303      	orrs	r3, r0
 8008770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008774:	01d1      	lsls	r1, r2, #7
 8008776:	d511      	bpl.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008778:	4923      	ldr	r1, [pc, #140]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800877a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800877e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008782:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008786:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800878a:	4303      	orrs	r3, r0
 800878c:	6860      	ldr	r0, [r4, #4]
 800878e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8008792:	6920      	ldr	r0, [r4, #16]
 8008794:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800879c:	0192      	lsls	r2, r2, #6
 800879e:	d50d      	bpl.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	6862      	ldr	r2, [r4, #4]
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80087aa:	68e2      	ldr	r2, [r4, #12]
 80087ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80087b0:	68a2      	ldr	r2, [r4, #8]
 80087b2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80087b6:	4a14      	ldr	r2, [pc, #80]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80087b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80087bc:	4e12      	ldr	r6, [pc, #72]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80087be:	6833      	ldr	r3, [r6, #0]
 80087c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087c4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80087c6:	f7fd faaf 	bl	8005d28 <HAL_GetTick>
 80087ca:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087cc:	6833      	ldr	r3, [r6, #0]
 80087ce:	011b      	lsls	r3, r3, #4
 80087d0:	f53f aed7 	bmi.w	8008582 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087d4:	f7fd faa8 	bl	8005d28 <HAL_GetTick>
 80087d8:	1bc0      	subs	r0, r0, r7
 80087da:	2864      	cmp	r0, #100	; 0x64
 80087dc:	d9f6      	bls.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80087de:	e753      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087e0:	f7fd faa2 	bl	8005d28 <HAL_GetTick>
 80087e4:	1bc0      	subs	r0, r0, r7
 80087e6:	2864      	cmp	r0, #100	; 0x64
 80087e8:	d984      	bls.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80087ea:	e74d      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087ec:	f7fd fa9c 	bl	8005d28 <HAL_GetTick>
 80087f0:	1b80      	subs	r0, r0, r6
 80087f2:	2864      	cmp	r0, #100	; 0x64
 80087f4:	f67f aecf 	bls.w	8008596 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80087f8:	e746      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087fa:	f7fd fa95 	bl	8005d28 <HAL_GetTick>
 80087fe:	1b40      	subs	r0, r0, r5
 8008800:	2864      	cmp	r0, #100	; 0x64
 8008802:	f67f af32 	bls.w	800866a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008806:	e73f      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8008808:	40023800 	.word	0x40023800

0800880c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008810:	4604      	mov	r4, r0
 8008812:	b1c8      	cbz	r0, 8008848 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008814:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008818:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800881c:	b91b      	cbnz	r3, 8008826 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800881e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008822:	f7f9 f84f 	bl	80018c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008826:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008828:	1d21      	adds	r1, r4, #4
 800882a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800882c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008830:	f000 f9cf 	bl	8008bd2 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008834:	6862      	ldr	r2, [r4, #4]
 8008836:	4629      	mov	r1, r5
 8008838:	6820      	ldr	r0, [r4, #0]
 800883a:	f000 fa05 	bl	8008c48 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800883e:	2301      	movs	r3, #1

  return HAL_OK;
 8008840:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008842:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8008846:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008848:	2001      	movs	r0, #1
 800884a:	e7fc      	b.n	8008846 <HAL_SDRAM_Init+0x3a>

0800884c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800884c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800884e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8008852:	4605      	mov	r5, r0
 8008854:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008856:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008858:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800885a:	d010      	beq.n	800887e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800885c:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8008860:	2c01      	cmp	r4, #1
 8008862:	d110      	bne.n	8008886 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008864:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008866:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008868:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800886c:	f000 fa22 	bl	8008cb4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008870:	6833      	ldr	r3, [r6, #0]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d104      	bne.n	8008880 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008876:	2305      	movs	r3, #5
 8008878:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800887c:	2000      	movs	r0, #0
}
 800887e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008880:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8008884:	e7fa      	b.n	800887c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8008886:	2001      	movs	r0, #1
 8008888:	e7f9      	b.n	800887e <HAL_SDRAM_SendCommand+0x32>

0800888a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800888a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800888c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8008890:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008892:	2b02      	cmp	r3, #2
 8008894:	b2d8      	uxtb	r0, r3
 8008896:	d00d      	beq.n	80088b4 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008898:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800889c:	2b01      	cmp	r3, #1
 800889e:	b2dd      	uxtb	r5, r3
 80088a0:	d109      	bne.n	80088b6 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80088a2:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80088a4:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80088a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80088aa:	f000 fa15 	bl	8008cd8 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80088ae:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80088b0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80088b4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80088b6:	2001      	movs	r0, #1
 80088b8:	e7fc      	b.n	80088b4 <HAL_SDRAM_ProgramRefreshRate+0x2a>

080088ba <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80088ba:	4770      	bx	lr

080088bc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d133      	bne.n	800892c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c4:	2302      	movs	r3, #2
 80088c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088ca:	6803      	ldr	r3, [r0, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d4:	4a16      	ldr	r2, [pc, #88]	; (8008930 <HAL_TIM_Base_Start_IT+0x74>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d01a      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x54>
 80088da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088de:	d017      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x54>
 80088e0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d013      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x54>
 80088e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00f      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x54>
 80088f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00b      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x54>
 80088f8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d007      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x54>
 8008900:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008904:	4293      	cmp	r3, r2
 8008906:	d003      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x54>
 8008908:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800890c:	4293      	cmp	r3, r2
 800890e:	d107      	bne.n	8008920 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008910:	6899      	ldr	r1, [r3, #8]
 8008912:	4a08      	ldr	r2, [pc, #32]	; (8008934 <HAL_TIM_Base_Start_IT+0x78>)
 8008914:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008916:	2a06      	cmp	r2, #6
 8008918:	d006      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x6c>
 800891a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800891e:	d003      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	f042 0201 	orr.w	r2, r2, #1
 8008926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008928:	2000      	movs	r0, #0
}
 800892a:	4770      	bx	lr
    return HAL_ERROR;
 800892c:	2001      	movs	r0, #1
 800892e:	4770      	bx	lr
 8008930:	40010000 	.word	0x40010000
 8008934:	00010007 	.word	0x00010007

08008938 <HAL_TIM_OC_DelayElapsedCallback>:
 8008938:	4770      	bx	lr

0800893a <HAL_TIM_IC_CaptureCallback>:
 800893a:	4770      	bx	lr

0800893c <HAL_TIM_PWM_PulseFinishedCallback>:
 800893c:	4770      	bx	lr

0800893e <HAL_TIM_TriggerCallback>:
 800893e:	4770      	bx	lr

08008940 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008940:	6803      	ldr	r3, [r0, #0]
 8008942:	691a      	ldr	r2, [r3, #16]
 8008944:	0791      	lsls	r1, r2, #30
{
 8008946:	b510      	push	{r4, lr}
 8008948:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800894a:	d50f      	bpl.n	800896c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	0792      	lsls	r2, r2, #30
 8008950:	d50c      	bpl.n	800896c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008952:	f06f 0202 	mvn.w	r2, #2
 8008956:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008958:	2201      	movs	r2, #1
 800895a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	0799      	lsls	r1, r3, #30
 8008960:	f000 8085 	beq.w	8008a6e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008964:	f7ff ffe9 	bl	800893a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008968:	2300      	movs	r3, #0
 800896a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	0752      	lsls	r2, r2, #29
 8008972:	d510      	bpl.n	8008996 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	0750      	lsls	r0, r2, #29
 8008978:	d50d      	bpl.n	8008996 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800897a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800897e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008982:	2202      	movs	r2, #2
 8008984:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f413 7f40 	tst.w	r3, #768	; 0x300
 800898c:	d075      	beq.n	8008a7a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800898e:	f7ff ffd4 	bl	800893a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008992:	2300      	movs	r3, #0
 8008994:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	691a      	ldr	r2, [r3, #16]
 800899a:	0711      	lsls	r1, r2, #28
 800899c:	d50f      	bpl.n	80089be <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800899e:	68da      	ldr	r2, [r3, #12]
 80089a0:	0712      	lsls	r2, r2, #28
 80089a2:	d50c      	bpl.n	80089be <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089a4:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089ac:	2204      	movs	r2, #4
 80089ae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	079b      	lsls	r3, r3, #30
 80089b4:	d067      	beq.n	8008a86 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80089b6:	f7ff ffc0 	bl	800893a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ba:	2300      	movs	r3, #0
 80089bc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	06d0      	lsls	r0, r2, #27
 80089c4:	d510      	bpl.n	80089e8 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	06d1      	lsls	r1, r2, #27
 80089ca:	d50d      	bpl.n	80089e8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089cc:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089d4:	2208      	movs	r2, #8
 80089d6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	f413 7f40 	tst.w	r3, #768	; 0x300
 80089de:	d058      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80089e0:	f7ff ffab 	bl	800893a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e4:	2300      	movs	r3, #0
 80089e6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	07d2      	lsls	r2, r2, #31
 80089ee:	d508      	bpl.n	8008a02 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	07d0      	lsls	r0, r2, #31
 80089f4:	d505      	bpl.n	8008a02 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089f6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80089fe:	f7f8 fcff 	bl	8001400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	691a      	ldr	r2, [r3, #16]
 8008a06:	0611      	lsls	r1, r2, #24
 8008a08:	d508      	bpl.n	8008a1c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	0612      	lsls	r2, r2, #24
 8008a0e:	d505      	bpl.n	8008a1c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a14:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008a18:	f000 f8d9 	bl	8008bce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	691a      	ldr	r2, [r3, #16]
 8008a20:	05d0      	lsls	r0, r2, #23
 8008a22:	d508      	bpl.n	8008a36 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	0611      	lsls	r1, r2, #24
 8008a28:	d505      	bpl.n	8008a36 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008a32:	f000 f8cd 	bl	8008bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	691a      	ldr	r2, [r3, #16]
 8008a3a:	0652      	lsls	r2, r2, #25
 8008a3c:	d508      	bpl.n	8008a50 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	0650      	lsls	r0, r2, #25
 8008a42:	d505      	bpl.n	8008a50 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a48:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008a4c:	f7ff ff77 	bl	800893e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	0691      	lsls	r1, r2, #26
 8008a56:	d522      	bpl.n	8008a9e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	0692      	lsls	r2, r2, #26
 8008a5c:	d51f      	bpl.n	8008a9e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a5e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a64:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8008a6a:	f000 b8af 	b.w	8008bcc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6e:	f7ff ff63 	bl	8008938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a72:	4620      	mov	r0, r4
 8008a74:	f7ff ff62 	bl	800893c <HAL_TIM_PWM_PulseFinishedCallback>
 8008a78:	e776      	b.n	8008968 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a7a:	f7ff ff5d 	bl	8008938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f7ff ff5c 	bl	800893c <HAL_TIM_PWM_PulseFinishedCallback>
 8008a84:	e785      	b.n	8008992 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a86:	f7ff ff57 	bl	8008938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7ff ff56 	bl	800893c <HAL_TIM_PWM_PulseFinishedCallback>
 8008a90:	e793      	b.n	80089ba <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a92:	f7ff ff51 	bl	8008938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7ff ff50 	bl	800893c <HAL_TIM_PWM_PulseFinishedCallback>
 8008a9c:	e7a2      	b.n	80089e4 <HAL_TIM_IRQHandler+0xa4>
}
 8008a9e:	bd10      	pop	{r4, pc}

08008aa0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008aa0:	4a30      	ldr	r2, [pc, #192]	; (8008b64 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8008aa2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008aa4:	4290      	cmp	r0, r2
 8008aa6:	d012      	beq.n	8008ace <TIM_Base_SetConfig+0x2e>
 8008aa8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008aac:	d00f      	beq.n	8008ace <TIM_Base_SetConfig+0x2e>
 8008aae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008ab2:	4290      	cmp	r0, r2
 8008ab4:	d00b      	beq.n	8008ace <TIM_Base_SetConfig+0x2e>
 8008ab6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008aba:	4290      	cmp	r0, r2
 8008abc:	d007      	beq.n	8008ace <TIM_Base_SetConfig+0x2e>
 8008abe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ac2:	4290      	cmp	r0, r2
 8008ac4:	d003      	beq.n	8008ace <TIM_Base_SetConfig+0x2e>
 8008ac6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008aca:	4290      	cmp	r0, r2
 8008acc:	d119      	bne.n	8008b02 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8008ace:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008ad4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ad6:	4a23      	ldr	r2, [pc, #140]	; (8008b64 <TIM_Base_SetConfig+0xc4>)
 8008ad8:	4290      	cmp	r0, r2
 8008ada:	d029      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008adc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008ae0:	d026      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008ae2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008ae6:	4290      	cmp	r0, r2
 8008ae8:	d022      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008aee:	4290      	cmp	r0, r2
 8008af0:	d01e      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008af2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008af6:	4290      	cmp	r0, r2
 8008af8:	d01a      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008afa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008afe:	4290      	cmp	r0, r2
 8008b00:	d016      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008b02:	4a19      	ldr	r2, [pc, #100]	; (8008b68 <TIM_Base_SetConfig+0xc8>)
 8008b04:	4290      	cmp	r0, r2
 8008b06:	d013      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008b08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b0c:	4290      	cmp	r0, r2
 8008b0e:	d00f      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008b10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b14:	4290      	cmp	r0, r2
 8008b16:	d00b      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008b18:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8008b1c:	4290      	cmp	r0, r2
 8008b1e:	d007      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008b20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b24:	4290      	cmp	r0, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_Base_SetConfig+0x90>
 8008b28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b2c:	4290      	cmp	r0, r2
 8008b2e:	d103      	bne.n	8008b38 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b34:	68ca      	ldr	r2, [r1, #12]
 8008b36:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b38:	694a      	ldr	r2, [r1, #20]
 8008b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b3e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008b40:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b42:	688b      	ldr	r3, [r1, #8]
 8008b44:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b46:	680b      	ldr	r3, [r1, #0]
 8008b48:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b4a:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <TIM_Base_SetConfig+0xc4>)
 8008b4c:	4298      	cmp	r0, r3
 8008b4e:	d003      	beq.n	8008b58 <TIM_Base_SetConfig+0xb8>
 8008b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b54:	4298      	cmp	r0, r3
 8008b56:	d101      	bne.n	8008b5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b58:	690b      	ldr	r3, [r1, #16]
 8008b5a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	6143      	str	r3, [r0, #20]
}
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	40010000 	.word	0x40010000
 8008b68:	40014000 	.word	0x40014000

08008b6c <HAL_TIM_Base_Init>:
{
 8008b6c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008b6e:	4604      	mov	r4, r0
 8008b70:	b350      	cbz	r0, 8008bc8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b7a:	b91b      	cbnz	r3, 8008b84 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008b7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008b80:	f7ff fe9b 	bl	80088ba <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008b84:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8008b8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b8e:	f7ff ff87 	bl	8008aa0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b92:	2301      	movs	r3, #1
  return HAL_OK;
 8008b94:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b96:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008b9e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008ba2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008ba6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008baa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008bbe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008bc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008bc6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008bc8:	2001      	movs	r0, #1
 8008bca:	e7fc      	b.n	8008bc6 <HAL_TIM_Base_Init+0x5a>

08008bcc <HAL_TIMEx_CommutCallback>:
 8008bcc:	4770      	bx	lr

08008bce <HAL_TIMEx_BreakCallback>:
 8008bce:	4770      	bx	lr

08008bd0 <HAL_TIMEx_Break2Callback>:
 8008bd0:	4770      	bx	lr

08008bd2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008bd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008bd6:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008bd8:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8008bdc:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8008be0:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8008be4:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8008be8:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8008bec:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008bee:	b9a2      	cbnz	r2, 8008c1a <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008bf0:	ea43 0209 	orr.w	r2, r3, r9
 8008bf4:	6801      	ldr	r1, [r0, #0]
 8008bf6:	432a      	orrs	r2, r5
 8008bf8:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8008bfc:	ea42 0308 	orr.w	r3, r2, r8
 8008c00:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8008c04:	ea43 030e 	orr.w	r3, r3, lr
 8008c08:	ea43 030c 	orr.w	r3, r3, ip
 8008c0c:	433b      	orrs	r3, r7
 8008c0e:	4333      	orrs	r3, r6
 8008c10:	430b      	orrs	r3, r1
 8008c12:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8008c14:	2000      	movs	r0, #0
 8008c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008c1a:	6802      	ldr	r2, [r0, #0]
 8008c1c:	ea43 0309 	orr.w	r3, r3, r9
 8008c20:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008c24:	4313      	orrs	r3, r2
 8008c26:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008c28:	ea45 0308 	orr.w	r3, r5, r8
 8008c2c:	6842      	ldr	r2, [r0, #4]
 8008c2e:	ea43 030e 	orr.w	r3, r3, lr
 8008c32:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8008c36:	ea43 030c 	orr.w	r3, r3, ip
 8008c3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8008c3e:	433b      	orrs	r3, r7
 8008c40:	4333      	orrs	r3, r6
 8008c42:	4313      	orrs	r3, r2
 8008c44:	6043      	str	r3, [r0, #4]
 8008c46:	e7e5      	b.n	8008c14 <FMC_SDRAM_Init+0x42>

08008c48 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008c48:	68cb      	ldr	r3, [r1, #12]
 8008c4a:	f103 3cff 	add.w	ip, r3, #4294967295
 8008c4e:	694b      	ldr	r3, [r1, #20]
{
 8008c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008c52:	3b01      	subs	r3, #1
 8008c54:	680f      	ldr	r7, [r1, #0]
 8008c56:	684c      	ldr	r4, [r1, #4]
 8008c58:	688e      	ldr	r6, [r1, #8]
 8008c5a:	051b      	lsls	r3, r3, #20
 8008c5c:	690d      	ldr	r5, [r1, #16]
 8008c5e:	3c01      	subs	r4, #1
 8008c60:	6989      	ldr	r1, [r1, #24]
 8008c62:	3e01      	subs	r6, #1
 8008c64:	3d01      	subs	r5, #1
 8008c66:	3f01      	subs	r7, #1
 8008c68:	3901      	subs	r1, #1
 8008c6a:	0124      	lsls	r4, r4, #4
 8008c6c:	0236      	lsls	r6, r6, #8
 8008c6e:	042d      	lsls	r5, r5, #16
 8008c70:	0609      	lsls	r1, r1, #24
 8008c72:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8008c76:	b95a      	cbnz	r2, 8008c90 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008c78:	433b      	orrs	r3, r7
 8008c7a:	6882      	ldr	r2, [r0, #8]
 8008c7c:	4323      	orrs	r3, r4
 8008c7e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008c82:	4333      	orrs	r3, r6
 8008c84:	432b      	orrs	r3, r5
 8008c86:	430b      	orrs	r3, r1
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008c90:	6882      	ldr	r2, [r0, #8]
 8008c92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008c96:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8008c9a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008c9c:	ea44 0306 	orr.w	r3, r4, r6
 8008ca0:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008ca2:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008ca4:	68c2      	ldr	r2, [r0, #12]
 8008ca6:	432b      	orrs	r3, r5
 8008ca8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008cac:	430b      	orrs	r3, r1
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60c3      	str	r3, [r0, #12]
 8008cb2:	e7eb      	b.n	8008c8c <FMC_SDRAM_Timing_Init+0x44>

08008cb4 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008cb4:	6902      	ldr	r2, [r0, #16]
{
 8008cb6:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008cb8:	e9d1 3400 	ldrd	r3, r4, [r1]
 8008cbc:	0d92      	lsrs	r2, r2, #22
 8008cbe:	4323      	orrs	r3, r4
 8008cc0:	68cc      	ldr	r4, [r1, #12]
 8008cc2:	0592      	lsls	r2, r2, #22
 8008cc4:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	688a      	ldr	r2, [r1, #8]
 8008ccc:	3a01      	subs	r2, #1
 8008cce:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8008cd2:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	bd10      	pop	{r4, pc}

08008cd8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008cd8:	6943      	ldr	r3, [r0, #20]
 8008cda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008cde:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008ce2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8008ce6:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8008ce8:	2000      	movs	r0, #0
 8008cea:	4770      	bx	lr

08008cec <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cec:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cf0:	b113      	cbz	r3, 8008cf8 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8008cf2:	f06f 0005 	mvn.w	r0, #5
 8008cf6:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cf8:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8008cfc:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8008cfe:	b912      	cbnz	r2, 8008d06 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d00:	f3ef 8211 	mrs	r2, BASEPRI
 8008d04:	b112      	cbz	r2, 8008d0c <osKernelInitialize+0x20>
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	2a02      	cmp	r2, #2
 8008d0a:	d0f2      	beq.n	8008cf2 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	b910      	cbnz	r0, 8008d16 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d10:	2201      	movs	r2, #1
 8008d12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d14:	4770      	bx	lr
    } else {
      stat = osError;
 8008d16:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008d1a:	4770      	bx	lr
 8008d1c:	20002f6c 	.word	0x20002f6c

08008d20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d20:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d22:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d26:	b113      	cbz	r3, 8008d2e <osKernelStart+0xe>
    stat = osErrorISR;
 8008d28:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8008d2c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2e:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8008d32:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8008d34:	b912      	cbnz	r2, 8008d3c <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d36:	f3ef 8211 	mrs	r2, BASEPRI
 8008d3a:	b112      	cbz	r2, 8008d42 <osKernelStart+0x22>
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	2a02      	cmp	r2, #2
 8008d40:	d0f2      	beq.n	8008d28 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	2a01      	cmp	r2, #1
 8008d46:	d105      	bne.n	8008d54 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8008d48:	2202      	movs	r2, #2
 8008d4a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008d4c:	f001 fe8e 	bl	800aa6c <vTaskStartScheduler>
      stat = osOK;
 8008d50:	2000      	movs	r0, #0
 8008d52:	e7eb      	b.n	8008d2c <osKernelStart+0xc>
      stat = osError;
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8008d58:	e7e8      	b.n	8008d2c <osKernelStart+0xc>
 8008d5a:	bf00      	nop
 8008d5c:	20002f6c 	.word	0x20002f6c

08008d60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	4614      	mov	r4, r2
 8008d64:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d66:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d68:	460b      	mov	r3, r1
  hTask = NULL;
 8008d6a:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d6c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008d70:	bb22      	cbnz	r2, 8008dbc <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d72:	f3ef 8210 	mrs	r2, PRIMASK
 8008d76:	b912      	cbnz	r2, 8008d7e <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d78:	f3ef 8211 	mrs	r2, BASEPRI
 8008d7c:	b11a      	cbz	r2, 8008d86 <osThreadNew+0x26>
 8008d7e:	4a22      	ldr	r2, [pc, #136]	; (8008e08 <osThreadNew+0xa8>)
 8008d80:	6812      	ldr	r2, [r2, #0]
 8008d82:	2a02      	cmp	r2, #2
 8008d84:	d01a      	beq.n	8008dbc <osThreadNew+0x5c>
 8008d86:	b1c8      	cbz	r0, 8008dbc <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008d88:	2c00      	cmp	r4, #0
 8008d8a:	d02f      	beq.n	8008dec <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008d8c:	69a5      	ldr	r5, [r4, #24]
 8008d8e:	2d00      	cmp	r5, #0
 8008d90:	bf08      	it	eq
 8008d92:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d94:	1e6a      	subs	r2, r5, #1
 8008d96:	46ac      	mov	ip, r5
 8008d98:	2a37      	cmp	r2, #55	; 0x37
 8008d9a:	d82b      	bhi.n	8008df4 <osThreadNew+0x94>
 8008d9c:	6862      	ldr	r2, [r4, #4]
 8008d9e:	07d2      	lsls	r2, r2, #31
 8008da0:	d428      	bmi.n	8008df4 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008da2:	6966      	ldr	r6, [r4, #20]
 8008da4:	b16e      	cbz	r6, 8008dc2 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008da6:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8008da8:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008daa:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8008dae:	b157      	cbz	r7, 8008dc6 <osThreadNew+0x66>
 8008db0:	f1be 0fbf 	cmp.w	lr, #191	; 0xbf
 8008db4:	d902      	bls.n	8008dbc <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008db6:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008db8:	b104      	cbz	r4, 8008dbc <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008dba:	b9ee      	cbnz	r6, 8008df8 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008dbc:	9805      	ldr	r0, [sp, #20]
}
 8008dbe:	b007      	add	sp, #28
 8008dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8008dc2:	2280      	movs	r2, #128	; 0x80
 8008dc4:	e7f0      	b.n	8008da8 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008dc6:	f1be 0f00 	cmp.w	lr, #0
 8008dca:	d1f7      	bne.n	8008dbc <osThreadNew+0x5c>
      if (mem == 0) {
 8008dcc:	6924      	ldr	r4, [r4, #16]
 8008dce:	2c00      	cmp	r4, #0
 8008dd0:	d1f4      	bne.n	8008dbc <osThreadNew+0x5c>
 8008dd2:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008dd4:	a905      	add	r1, sp, #20
 8008dd6:	b292      	uxth	r2, r2
 8008dd8:	e9cd c100 	strd	ip, r1, [sp]
 8008ddc:	4621      	mov	r1, r4
 8008dde:	f001 fcb9 	bl	800a754 <xTaskCreate>
 8008de2:	2801      	cmp	r0, #1
          hTask = NULL;
 8008de4:	bf1c      	itt	ne
 8008de6:	2300      	movne	r3, #0
 8008de8:	9305      	strne	r3, [sp, #20]
 8008dea:	e7e7      	b.n	8008dbc <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 8008dec:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8008df0:	2280      	movs	r2, #128	; 0x80
 8008df2:	e7ef      	b.n	8008dd4 <osThreadNew+0x74>
        return (NULL);
 8008df4:	2000      	movs	r0, #0
 8008df6:	e7e2      	b.n	8008dbe <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008df8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8008dfc:	9500      	str	r5, [sp, #0]
 8008dfe:	f001 fc6b 	bl	800a6d8 <xTaskCreateStatic>
 8008e02:	9005      	str	r0, [sp, #20]
 8008e04:	e7da      	b.n	8008dbc <osThreadNew+0x5c>
 8008e06:	bf00      	nop
 8008e08:	20002f6c 	.word	0x20002f6c

08008e0c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008e0c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e0e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e12:	b113      	cbz	r3, 8008e1a <osDelay+0xe>
    stat = osErrorISR;
 8008e14:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008e18:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e1a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8008e1e:	b913      	cbnz	r3, 8008e26 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e20:	f3ef 8311 	mrs	r3, BASEPRI
 8008e24:	b11b      	cbz	r3, 8008e2e <osDelay+0x22>
 8008e26:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <osDelay+0x30>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d0f2      	beq.n	8008e14 <osDelay+0x8>
    if (ticks != 0U) {
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d0f2      	beq.n	8008e18 <osDelay+0xc>
      vTaskDelay(ticks);
 8008e32:	f001 fdd9 	bl	800a9e8 <vTaskDelay>
    stat = osOK;
 8008e36:	2000      	movs	r0, #0
 8008e38:	e7ee      	b.n	8008e18 <osDelay+0xc>
 8008e3a:	bf00      	nop
 8008e3c:	20002f6c 	.word	0x20002f6c

08008e40 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e44:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8008e48:	b116      	cbz	r6, 8008e50 <osMutexNew+0x10>
  hMutex = NULL;
 8008e4a:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e50:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8008e54:	b912      	cbnz	r2, 8008e5c <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e56:	f3ef 8211 	mrs	r2, BASEPRI
 8008e5a:	b11a      	cbz	r2, 8008e64 <osMutexNew+0x24>
 8008e5c:	4a18      	ldr	r2, [pc, #96]	; (8008ec0 <osMutexNew+0x80>)
 8008e5e:	6812      	ldr	r2, [r2, #0]
 8008e60:	2a02      	cmp	r2, #2
 8008e62:	d0f2      	beq.n	8008e4a <osMutexNew+0xa>
    if (attr != NULL) {
 8008e64:	b115      	cbz	r5, 8008e6c <osMutexNew+0x2c>
      type = attr->attr_bits;
 8008e66:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8008e68:	0733      	lsls	r3, r6, #28
 8008e6a:	d4ee      	bmi.n	8008e4a <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008e6c:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8008e70:	b17d      	cbz	r5, 8008e92 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008e72:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8008e76:	b151      	cbz	r1, 8008e8e <osMutexNew+0x4e>
 8008e78:	2b4f      	cmp	r3, #79	; 0x4f
 8008e7a:	d9e6      	bls.n	8008e4a <osMutexNew+0xa>
        if (rmtx != 0U) {
 8008e7c:	b1de      	cbz	r6, 8008eb6 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008e7e:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008e80:	f000 ff4c 	bl	8009d1c <xQueueCreateMutexStatic>
 8008e84:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d0df      	beq.n	8008e4a <osMutexNew+0xa>
          name = attr->name;
 8008e8a:	682d      	ldr	r5, [r5, #0]
 8008e8c:	e00a      	b.n	8008ea4 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1db      	bne.n	8008e4a <osMutexNew+0xa>
          if (rmtx != 0U) {
 8008e92:	b196      	cbz	r6, 8008eba <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008e94:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8008e96:	f000 ff76 	bl	8009d86 <xQueueCreateMutex>
 8008e9a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d0d4      	beq.n	8008e4a <osMutexNew+0xa>
        if (attr != NULL) {
 8008ea0:	2d00      	cmp	r5, #0
 8008ea2:	d1f2      	bne.n	8008e8a <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f001 fa38 	bl	800a31c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008eac:	2e00      	cmp	r6, #0
 8008eae:	d0cd      	beq.n	8008e4c <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008eb0:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8008eb4:	e7ca      	b.n	8008e4c <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	e7e2      	b.n	8008e80 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8008eba:	2001      	movs	r0, #1
 8008ebc:	e7eb      	b.n	8008e96 <osMutexNew+0x56>
 8008ebe:	bf00      	nop
 8008ec0:	20002f6c 	.word	0x20002f6c

08008ec4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008ec4:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008ec6:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008eca:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8008ecc:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008ed0:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ed2:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8008ed6:	b112      	cbz	r2, 8008ede <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8008ed8:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8008edc:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ede:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8008ee2:	b912      	cbnz	r2, 8008eea <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ee4:	f3ef 8211 	mrs	r2, BASEPRI
 8008ee8:	b11a      	cbz	r2, 8008ef2 <osMutexAcquire+0x2e>
 8008eea:	4a0d      	ldr	r2, [pc, #52]	; (8008f20 <osMutexAcquire+0x5c>)
 8008eec:	6812      	ldr	r2, [r2, #0]
 8008eee:	2a02      	cmp	r2, #2
 8008ef0:	d0f2      	beq.n	8008ed8 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8008ef2:	b188      	cbz	r0, 8008f18 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008ef4:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8008ef6:	b163      	cbz	r3, 8008f12 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008ef8:	f001 f997 	bl	800a22a <xQueueTakeMutexRecursive>
 8008efc:	2801      	cmp	r0, #1
 8008efe:	d101      	bne.n	8008f04 <osMutexAcquire+0x40>
  stat = osOK;
 8008f00:	2000      	movs	r0, #0
 8008f02:	e7eb      	b.n	8008edc <osMutexAcquire+0x18>
          stat = osErrorResource;
 8008f04:	2c00      	cmp	r4, #0
 8008f06:	bf14      	ite	ne
 8008f08:	f06f 0001 	mvnne.w	r0, #1
 8008f0c:	f06f 0002 	mvneq.w	r0, #2
 8008f10:	e7e4      	b.n	8008edc <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008f12:	f001 f8bf 	bl	800a094 <xQueueSemaphoreTake>
 8008f16:	e7f1      	b.n	8008efc <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8008f18:	f06f 0003 	mvn.w	r0, #3
 8008f1c:	e7de      	b.n	8008edc <osMutexAcquire+0x18>
 8008f1e:	bf00      	nop
 8008f20:	20002f6c 	.word	0x20002f6c

08008f24 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008f24:	b508      	push	{r3, lr}
 8008f26:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008f28:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8008f2c:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f30:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8008f34:	b112      	cbz	r2, 8008f3c <osMutexRelease+0x18>
    stat = osErrorISR;
 8008f36:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8008f3a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f3c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8008f40:	b912      	cbnz	r2, 8008f48 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f42:	f3ef 8211 	mrs	r2, BASEPRI
 8008f46:	b11a      	cbz	r2, 8008f50 <osMutexRelease+0x2c>
 8008f48:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <osMutexRelease+0x50>)
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	2a02      	cmp	r2, #2
 8008f4e:	d0f2      	beq.n	8008f36 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8008f50:	b168      	cbz	r0, 8008f6e <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8008f52:	b13b      	cbz	r3, 8008f64 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008f54:	f000 fef7 	bl	8009d46 <xQueueGiveMutexRecursive>
 8008f58:	2801      	cmp	r0, #1
  stat = osOK;
 8008f5a:	bf0c      	ite	eq
 8008f5c:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8008f5e:	f06f 0002 	mvnne.w	r0, #2
 8008f62:	e7ea      	b.n	8008f3a <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008f64:	461a      	mov	r2, r3
 8008f66:	4619      	mov	r1, r3
 8008f68:	f000 fe1d 	bl	8009ba6 <xQueueGenericSend>
 8008f6c:	e7f4      	b.n	8008f58 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8008f6e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008f72:	e7e2      	b.n	8008f3a <osMutexRelease+0x16>
 8008f74:	20002f6c 	.word	0x20002f6c

08008f78 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008f78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f7a:	460e      	mov	r6, r1
 8008f7c:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f7e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008f82:	b11b      	cbz	r3, 8008f8c <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8008f84:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8008f86:	4620      	mov	r0, r4
 8008f88:	b002      	add	sp, #8
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f8c:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008f90:	b913      	cbnz	r3, 8008f98 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f92:	f3ef 8311 	mrs	r3, BASEPRI
 8008f96:	b11b      	cbz	r3, 8008fa0 <osSemaphoreNew+0x28>
 8008f98:	4b21      	ldr	r3, [pc, #132]	; (8009020 <osSemaphoreNew+0xa8>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d0f1      	beq.n	8008f84 <osSemaphoreNew+0xc>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d0ef      	beq.n	8008f84 <osSemaphoreNew+0xc>
 8008fa4:	42b0      	cmp	r0, r6
 8008fa6:	d3ed      	bcc.n	8008f84 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8008fa8:	b1ed      	cbz	r5, 8008fe6 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008faa:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8008fae:	b1c3      	cbz	r3, 8008fe2 <osSemaphoreNew+0x6a>
 8008fb0:	2a4f      	cmp	r2, #79	; 0x4f
 8008fb2:	d9e7      	bls.n	8008f84 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8008fb4:	2801      	cmp	r0, #1
 8008fb6:	d129      	bne.n	800900c <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008fb8:	2203      	movs	r2, #3
 8008fba:	9200      	str	r2, [sp, #0]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	f000 fd6c 	bl	8009a9c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8008fc4:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d0dc      	beq.n	8008f84 <osSemaphoreNew+0xc>
 8008fca:	b1ce      	cbz	r6, 8009000 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008fcc:	2300      	movs	r3, #0
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	f000 fde8 	bl	8009ba6 <xQueueGenericSend>
 8008fd6:	2801      	cmp	r0, #1
 8008fd8:	d012      	beq.n	8009000 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f001 f9c4 	bl	800a368 <vQueueDelete>
 8008fe0:	e7d0      	b.n	8008f84 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	d1ce      	bne.n	8008f84 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8008fe6:	2801      	cmp	r0, #1
 8008fe8:	d104      	bne.n	8008ff4 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8008fea:	2203      	movs	r2, #3
 8008fec:	2100      	movs	r1, #0
 8008fee:	f000 fd69 	bl	8009ac4 <xQueueGenericCreate>
 8008ff2:	e7e7      	b.n	8008fc4 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	f000 fdb4 	bl	8009b62 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d0c1      	beq.n	8008f84 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8009000:	b95d      	cbnz	r5, 800901a <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 8009002:	4629      	mov	r1, r5
 8009004:	4620      	mov	r0, r4
 8009006:	f001 f989 	bl	800a31c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800900a:	e7bc      	b.n	8008f86 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800900c:	461a      	mov	r2, r3
 800900e:	4631      	mov	r1, r6
 8009010:	f000 fd81 	bl	8009b16 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8009014:	4604      	mov	r4, r0
 8009016:	2800      	cmp	r0, #0
 8009018:	d0b4      	beq.n	8008f84 <osSemaphoreNew+0xc>
          name = attr->name;
 800901a:	682d      	ldr	r5, [r5, #0]
 800901c:	e7f1      	b.n	8009002 <osSemaphoreNew+0x8a>
 800901e:	bf00      	nop
 8009020:	20002f6c 	.word	0x20002f6c

08009024 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009024:	b513      	push	{r0, r1, r4, lr}
 8009026:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009028:	b918      	cbnz	r0, 8009032 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800902a:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800902e:	b002      	add	sp, #8
 8009030:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009032:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8009036:	b163      	cbz	r3, 8009052 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 8009038:	2c00      	cmp	r4, #0
 800903a:	d1f6      	bne.n	800902a <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800903c:	aa01      	add	r2, sp, #4
 800903e:	4621      	mov	r1, r4
      yield = pdFALSE;
 8009040:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009042:	f001 f916 	bl	800a272 <xQueueReceiveFromISR>
 8009046:	2801      	cmp	r0, #1
 8009048:	d113      	bne.n	8009072 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800904a:	9b01      	ldr	r3, [sp, #4]
 800904c:	b9a3      	cbnz	r3, 8009078 <osSemaphoreAcquire+0x54>
  stat = osOK;
 800904e:	2000      	movs	r0, #0
 8009050:	e7ed      	b.n	800902e <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009052:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8009056:	b913      	cbnz	r3, 800905e <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009058:	f3ef 8311 	mrs	r3, BASEPRI
 800905c:	b11b      	cbz	r3, 8009066 <osSemaphoreAcquire+0x42>
 800905e:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <osSemaphoreAcquire+0x70>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b02      	cmp	r3, #2
 8009064:	d0e8      	beq.n	8009038 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009066:	4621      	mov	r1, r4
 8009068:	f001 f814 	bl	800a094 <xQueueSemaphoreTake>
 800906c:	2801      	cmp	r0, #1
 800906e:	d0ee      	beq.n	800904e <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8009070:	b96c      	cbnz	r4, 800908e <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 8009072:	f06f 0002 	mvn.w	r0, #2
 8009076:	e7da      	b.n	800902e <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8009078:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800907c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009080:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	e7df      	b.n	800904e <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800908e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8009092:	e7cc      	b.n	800902e <osSemaphoreAcquire+0xa>
 8009094:	20002f6c 	.word	0x20002f6c

08009098 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009098:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800909a:	b370      	cbz	r0, 80090fa <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800909c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80090a0:	b14b      	cbz	r3, 80090b6 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 80090a2:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80090a4:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80090a6:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80090a8:	f000 fef3 	bl	8009e92 <xQueueGiveFromISR>
 80090ac:	2801      	cmp	r0, #1
 80090ae:	d014      	beq.n	80090da <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80090b0:	f06f 0002 	mvn.w	r0, #2
 80090b4:	e014      	b.n	80090e0 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b6:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80090ba:	b913      	cbnz	r3, 80090c2 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090bc:	f3ef 8311 	mrs	r3, BASEPRI
 80090c0:	b11b      	cbz	r3, 80090ca <osSemaphoreRelease+0x32>
 80090c2:	4b0f      	ldr	r3, [pc, #60]	; (8009100 <osSemaphoreRelease+0x68>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d0eb      	beq.n	80090a2 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80090ca:	2300      	movs	r3, #0
 80090cc:	461a      	mov	r2, r3
 80090ce:	4619      	mov	r1, r3
 80090d0:	f000 fd69 	bl	8009ba6 <xQueueGenericSend>
 80090d4:	2801      	cmp	r0, #1
 80090d6:	d002      	beq.n	80090de <osSemaphoreRelease+0x46>
 80090d8:	e7ea      	b.n	80090b0 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 80090da:	9b01      	ldr	r3, [sp, #4]
 80090dc:	b913      	cbnz	r3, 80090e4 <osSemaphoreRelease+0x4c>
  stat = osOK;
 80090de:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80090e0:	b002      	add	sp, #8
 80090e2:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 80090e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80090e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	e7f1      	b.n	80090de <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80090fa:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80090fe:	e7ef      	b.n	80090e0 <osSemaphoreRelease+0x48>
 8009100:	20002f6c 	.word	0x20002f6c

08009104 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009104:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009106:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009108:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800910c:	b11b      	cbz	r3, 8009116 <osMessageQueueNew+0x12>
  hQueue = NULL;
 800910e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009110:	4628      	mov	r0, r5
 8009112:	b002      	add	sp, #8
 8009114:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009116:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800911a:	b913      	cbnz	r3, 8009122 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800911c:	f3ef 8311 	mrs	r3, BASEPRI
 8009120:	b11b      	cbz	r3, 800912a <osMessageQueueNew+0x26>
 8009122:	4b1a      	ldr	r3, [pc, #104]	; (800918c <osMessageQueueNew+0x88>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b02      	cmp	r3, #2
 8009128:	d0f1      	beq.n	800910e <osMessageQueueNew+0xa>
 800912a:	2800      	cmp	r0, #0
 800912c:	d0ef      	beq.n	800910e <osMessageQueueNew+0xa>
 800912e:	2900      	cmp	r1, #0
 8009130:	d0ed      	beq.n	800910e <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8009132:	b1ec      	cbz	r4, 8009170 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009134:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8009138:	b193      	cbz	r3, 8009160 <osMessageQueueNew+0x5c>
 800913a:	2a4f      	cmp	r2, #79	; 0x4f
 800913c:	d9e7      	bls.n	800910e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800913e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009140:	2a00      	cmp	r2, #0
 8009142:	d0e4      	beq.n	800910e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009144:	fb01 f500 	mul.w	r5, r1, r0
 8009148:	6966      	ldr	r6, [r4, #20]
 800914a:	42ae      	cmp	r6, r5
 800914c:	d3df      	bcc.n	800910e <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800914e:	2500      	movs	r5, #0
 8009150:	9500      	str	r5, [sp, #0]
 8009152:	f000 fca3 	bl	8009a9c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8009156:	4605      	mov	r5, r0
 8009158:	2800      	cmp	r0, #0
 800915a:	d0d8      	beq.n	800910e <osMessageQueueNew+0xa>
        name = attr->name;
 800915c:	6824      	ldr	r4, [r4, #0]
 800915e:	e00f      	b.n	8009180 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009160:	2a00      	cmp	r2, #0
 8009162:	d1d4      	bne.n	800910e <osMessageQueueNew+0xa>
 8009164:	6923      	ldr	r3, [r4, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1d1      	bne.n	800910e <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800916a:	6963      	ldr	r3, [r4, #20]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1ce      	bne.n	800910e <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009170:	2200      	movs	r2, #0
 8009172:	f000 fca7 	bl	8009ac4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8009176:	4605      	mov	r5, r0
 8009178:	2800      	cmp	r0, #0
 800917a:	d0c8      	beq.n	800910e <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800917c:	2c00      	cmp	r4, #0
 800917e:	d1ed      	bne.n	800915c <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8009180:	4621      	mov	r1, r4
 8009182:	4628      	mov	r0, r5
 8009184:	f001 f8ca 	bl	800a31c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8009188:	e7c2      	b.n	8009110 <osMessageQueueNew+0xc>
 800918a:	bf00      	nop
 800918c:	20002f6c 	.word	0x20002f6c

08009190 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009190:	b513      	push	{r0, r1, r4, lr}
 8009192:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009194:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009198:	b123      	cbz	r3, 80091a4 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800919a:	b9d8      	cbnz	r0, 80091d4 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800919c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80091a0:	b002      	add	sp, #8
 80091a2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091a4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80091a8:	b913      	cbnz	r3, 80091b0 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091aa:	f3ef 8311 	mrs	r3, BASEPRI
 80091ae:	b11b      	cbz	r3, 80091b8 <osMessageQueuePut+0x28>
 80091b0:	4b17      	ldr	r3, [pc, #92]	; (8009210 <osMessageQueuePut+0x80>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d0f0      	beq.n	800919a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d0ef      	beq.n	800919c <osMessageQueuePut+0xc>
 80091bc:	2900      	cmp	r1, #0
 80091be:	d0ed      	beq.n	800919c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80091c0:	2300      	movs	r3, #0
 80091c2:	4622      	mov	r2, r4
 80091c4:	f000 fcef 	bl	8009ba6 <xQueueGenericSend>
 80091c8:	2801      	cmp	r0, #1
 80091ca:	d010      	beq.n	80091ee <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 80091cc:	b9e4      	cbnz	r4, 8009208 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 80091ce:	f06f 0002 	mvn.w	r0, #2
 80091d2:	e7e5      	b.n	80091a0 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d0e1      	beq.n	800919c <osMessageQueuePut+0xc>
 80091d8:	2c00      	cmp	r4, #0
 80091da:	d1df      	bne.n	800919c <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80091dc:	4623      	mov	r3, r4
 80091de:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80091e0:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80091e2:	f000 fded 	bl	8009dc0 <xQueueGenericSendFromISR>
 80091e6:	2801      	cmp	r0, #1
 80091e8:	d1f1      	bne.n	80091ce <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 80091ea:	9b01      	ldr	r3, [sp, #4]
 80091ec:	b90b      	cbnz	r3, 80091f2 <osMessageQueuePut+0x62>
  stat = osOK;
 80091ee:	2000      	movs	r0, #0
 80091f0:	e7d6      	b.n	80091a0 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80091f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	e7f2      	b.n	80091ee <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8009208:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800920c:	e7c8      	b.n	80091a0 <osMessageQueuePut+0x10>
 800920e:	bf00      	nop
 8009210:	20002f6c 	.word	0x20002f6c

08009214 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009214:	b513      	push	{r0, r1, r4, lr}
 8009216:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009218:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800921c:	b123      	cbz	r3, 8009228 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800921e:	b9d0      	cbnz	r0, 8009256 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8009220:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8009224:	b002      	add	sp, #8
 8009226:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009228:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800922c:	b913      	cbnz	r3, 8009234 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800922e:	f3ef 8311 	mrs	r3, BASEPRI
 8009232:	b11b      	cbz	r3, 800923c <osMessageQueueGet+0x28>
 8009234:	4b16      	ldr	r3, [pc, #88]	; (8009290 <osMessageQueueGet+0x7c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d0f0      	beq.n	800921e <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800923c:	2800      	cmp	r0, #0
 800923e:	d0ef      	beq.n	8009220 <osMessageQueueGet+0xc>
 8009240:	2900      	cmp	r1, #0
 8009242:	d0ed      	beq.n	8009220 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009244:	4622      	mov	r2, r4
 8009246:	f000 fe80 	bl	8009f4a <xQueueReceive>
 800924a:	2801      	cmp	r0, #1
 800924c:	d00f      	beq.n	800926e <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800924e:	b9dc      	cbnz	r4, 8009288 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 8009250:	f06f 0002 	mvn.w	r0, #2
 8009254:	e7e6      	b.n	8009224 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009256:	2900      	cmp	r1, #0
 8009258:	d0e2      	beq.n	8009220 <osMessageQueueGet+0xc>
 800925a:	2c00      	cmp	r4, #0
 800925c:	d1e0      	bne.n	8009220 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800925e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8009260:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009262:	f001 f806 	bl	800a272 <xQueueReceiveFromISR>
 8009266:	2801      	cmp	r0, #1
 8009268:	d1f2      	bne.n	8009250 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	b90b      	cbnz	r3, 8009272 <osMessageQueueGet+0x5e>
  stat = osOK;
 800926e:	2000      	movs	r0, #0
 8009270:	e7d8      	b.n	8009224 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8009272:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	e7f2      	b.n	800926e <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8009288:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800928c:	e7ca      	b.n	8009224 <osMessageQueueGet+0x10>
 800928e:	bf00      	nop
 8009290:	20002f6c 	.word	0x20002f6c

08009294 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009294:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <vApplicationGetIdleTaskMemory+0x10>)
 8009296:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009298:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <vApplicationGetIdleTaskMemory+0x14>)
 800929a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800929c:	2380      	movs	r3, #128	; 0x80
 800929e:	6013      	str	r3, [r2, #0]
}
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20002eac 	.word	0x20002eac
 80092a8:	20002cac 	.word	0x20002cac

080092ac <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092ac:	4b03      	ldr	r3, [pc, #12]	; (80092bc <vApplicationGetTimerTaskMemory+0x10>)
 80092ae:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092b0:	4b03      	ldr	r3, [pc, #12]	; (80092c0 <vApplicationGetTimerTaskMemory+0x14>)
 80092b2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b8:	6013      	str	r3, [r2, #0]
}
 80092ba:	4770      	bx	lr
 80092bc:	20003370 	.word	0x20003370
 80092c0:	20002f70 	.word	0x20002f70

080092c4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092c4:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <prvInsertBlockIntoFreeList+0x40>)
{
 80092c6:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092c8:	461a      	mov	r2, r3
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4283      	cmp	r3, r0
 80092ce:	d3fb      	bcc.n	80092c8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092d0:	6854      	ldr	r4, [r2, #4]
 80092d2:	1911      	adds	r1, r2, r4
 80092d4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092d6:	bf01      	itttt	eq
 80092d8:	6841      	ldreq	r1, [r0, #4]
 80092da:	4610      	moveq	r0, r2
 80092dc:	1909      	addeq	r1, r1, r4
 80092de:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092e0:	6844      	ldr	r4, [r0, #4]
 80092e2:	1901      	adds	r1, r0, r4
 80092e4:	428b      	cmp	r3, r1
 80092e6:	d107      	bne.n	80092f8 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092e8:	4907      	ldr	r1, [pc, #28]	; (8009308 <prvInsertBlockIntoFreeList+0x44>)
 80092ea:	6809      	ldr	r1, [r1, #0]
 80092ec:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092ee:	bf1f      	itttt	ne
 80092f0:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092f2:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092f4:	1909      	addne	r1, r1, r4
 80092f6:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092f8:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092fa:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092fc:	bf18      	it	ne
 80092fe:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009300:	bd10      	pop	{r4, pc}
 8009302:	bf00      	nop
 8009304:	20015938 	.word	0x20015938
 8009308:	20003430 	.word	0x20003430

0800930c <pvPortMalloc>:
{
 800930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8009310:	4f41      	ldr	r7, [pc, #260]	; (8009418 <pvPortMalloc+0x10c>)
{
 8009312:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009314:	f001 fa4c 	bl	800a7b0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009318:	4840      	ldr	r0, [pc, #256]	; (800941c <pvPortMalloc+0x110>)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	b9f3      	cbnz	r3, 800935c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800931e:	4940      	ldr	r1, [pc, #256]	; (8009420 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8009320:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009322:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009324:	4d3f      	ldr	r5, [pc, #252]	; (8009424 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009326:	bf1b      	ittet	ne
 8009328:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800932a:	4a3f      	ldrne	r2, [pc, #252]	; (8009428 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800932c:	4a3f      	ldreq	r2, [pc, #252]	; (800942c <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800932e:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009332:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009334:	bf18      	it	ne
 8009336:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009338:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800933a:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 800933c:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800933e:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8009342:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009346:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8009348:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800934a:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800934e:	4a38      	ldr	r2, [pc, #224]	; (8009430 <pvPortMalloc+0x124>)
 8009350:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009352:	4a38      	ldr	r2, [pc, #224]	; (8009434 <pvPortMalloc+0x128>)
 8009354:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009356:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800935a:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800935c:	f8d0 8000 	ldr.w	r8, [r0]
 8009360:	ea18 0f04 	tst.w	r8, r4
 8009364:	d152      	bne.n	800940c <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8009366:	2c00      	cmp	r4, #0
 8009368:	d041      	beq.n	80093ee <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800936a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800936e:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009370:	bf1c      	itt	ne
 8009372:	f023 0307 	bicne.w	r3, r3, #7
 8009376:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009378:	2b00      	cmp	r3, #0
 800937a:	d047      	beq.n	800940c <pvPortMalloc+0x100>
 800937c:	4c2d      	ldr	r4, [pc, #180]	; (8009434 <pvPortMalloc+0x128>)
 800937e:	6826      	ldr	r6, [r4, #0]
 8009380:	429e      	cmp	r6, r3
 8009382:	d343      	bcc.n	800940c <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8009384:	4a27      	ldr	r2, [pc, #156]	; (8009424 <pvPortMalloc+0x118>)
 8009386:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009388:	6869      	ldr	r1, [r5, #4]
 800938a:	4299      	cmp	r1, r3
 800938c:	d201      	bcs.n	8009392 <pvPortMalloc+0x86>
 800938e:	6828      	ldr	r0, [r5, #0]
 8009390:	b9b0      	cbnz	r0, 80093c0 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8009392:	6838      	ldr	r0, [r7, #0]
 8009394:	42a8      	cmp	r0, r5
 8009396:	d039      	beq.n	800940c <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009398:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800939a:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800939c:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800939e:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093a0:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093a2:	d914      	bls.n	80093ce <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093a4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a6:	0742      	lsls	r2, r0, #29
 80093a8:	d00d      	beq.n	80093c6 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	b672      	cpsid	i
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	b662      	cpsie	i
 80093be:	e7fe      	b.n	80093be <pvPortMalloc+0xb2>
 80093c0:	462a      	mov	r2, r5
 80093c2:	4605      	mov	r5, r0
 80093c4:	e7e0      	b.n	8009388 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093c6:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093c8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093ca:	f7ff ff7b 	bl	80092c4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093ce:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093d0:	4917      	ldr	r1, [pc, #92]	; (8009430 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093d2:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093d4:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093d8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093da:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093dc:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093e0:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093e2:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093e4:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093e8:	bf38      	it	cc
 80093ea:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80093ec:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80093ee:	f001 fa85 	bl	800a8fc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093f2:	0763      	lsls	r3, r4, #29
 80093f4:	d00c      	beq.n	8009410 <pvPortMalloc+0x104>
 80093f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fa:	b672      	cpsid	i
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	b662      	cpsie	i
 800940a:	e7fe      	b.n	800940a <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800940c:	2400      	movs	r4, #0
 800940e:	e7ee      	b.n	80093ee <pvPortMalloc+0xe2>
}
 8009410:	4620      	mov	r0, r4
 8009412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009416:	bf00      	nop
 8009418:	20003430 	.word	0x20003430
 800941c:	2001592c 	.word	0x2001592c
 8009420:	20003434 	.word	0x20003434
 8009424:	20015938 	.word	0x20015938
 8009428:	2001592c 	.word	0x2001592c
 800942c:	000124f8 	.word	0x000124f8
 8009430:	20015934 	.word	0x20015934
 8009434:	20015930 	.word	0x20015930

08009438 <vPortFree>:
{
 8009438:	b510      	push	{r4, lr}
	if( pv != NULL )
 800943a:	4604      	mov	r4, r0
 800943c:	2800      	cmp	r0, #0
 800943e:	d032      	beq.n	80094a6 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009440:	4a19      	ldr	r2, [pc, #100]	; (80094a8 <vPortFree+0x70>)
 8009442:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009446:	6812      	ldr	r2, [r2, #0]
 8009448:	4213      	tst	r3, r2
 800944a:	d10a      	bne.n	8009462 <vPortFree+0x2a>
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	b672      	cpsid	i
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	b662      	cpsie	i
 8009460:	e7fe      	b.n	8009460 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009462:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009466:	b151      	cbz	r1, 800947e <vPortFree+0x46>
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	b672      	cpsid	i
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	b662      	cpsie	i
 800947c:	e7fe      	b.n	800947c <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800947e:	ea23 0302 	bic.w	r3, r3, r2
 8009482:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009486:	f001 f993 	bl	800a7b0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800948a:	4a08      	ldr	r2, [pc, #32]	; (80094ac <vPortFree+0x74>)
 800948c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009490:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009494:	6811      	ldr	r1, [r2, #0]
 8009496:	440b      	add	r3, r1
 8009498:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800949a:	f7ff ff13 	bl	80092c4 <prvInsertBlockIntoFreeList>
}
 800949e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80094a2:	f001 ba2b 	b.w	800a8fc <xTaskResumeAll>
}
 80094a6:	bd10      	pop	{r4, pc}
 80094a8:	2001592c 	.word	0x2001592c
 80094ac:	20015930 	.word	0x20015930

080094b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094ba:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094bc:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094c4:	4770      	bx	lr

080094c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094ca:	4770      	bx	lr

080094cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80094cc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094ce:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80094d0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094d4:	689a      	ldr	r2, [r3, #8]
 80094d6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094d8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80094da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80094dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80094de:	3301      	adds	r3, #1
 80094e0:	6003      	str	r3, [r0, #0]
}
 80094e2:	4770      	bx	lr

080094e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094e4:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094e6:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094e8:	1c63      	adds	r3, r4, #1
 80094ea:	d10a      	bne.n	8009502 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094ec:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094f2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094f4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80094f6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80094f8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80094fa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80094fc:	3301      	adds	r3, #1
 80094fe:	6003      	str	r3, [r0, #0]
}
 8009500:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009502:	f100 0208 	add.w	r2, r0, #8
 8009506:	4613      	mov	r3, r2
 8009508:	6852      	ldr	r2, [r2, #4]
 800950a:	6815      	ldr	r5, [r2, #0]
 800950c:	42a5      	cmp	r5, r4
 800950e:	d9fa      	bls.n	8009506 <vListInsert+0x22>
 8009510:	e7ed      	b.n	80094ee <vListInsert+0xa>

08009512 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009512:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009514:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009518:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800951a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800951c:	6859      	ldr	r1, [r3, #4]
 800951e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009520:	bf08      	it	eq
 8009522:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009524:	2200      	movs	r2, #0
 8009526:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	3a01      	subs	r2, #1
 800952c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800952e:	6818      	ldr	r0, [r3, #0]
}
 8009530:	4770      	bx	lr
	...

08009534 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009534:	4808      	ldr	r0, [pc, #32]	; (8009558 <prvPortStartFirstTask+0x24>)
 8009536:	6800      	ldr	r0, [r0, #0]
 8009538:	6800      	ldr	r0, [r0, #0]
 800953a:	f380 8808 	msr	MSP, r0
 800953e:	f04f 0000 	mov.w	r0, #0
 8009542:	f380 8814 	msr	CONTROL, r0
 8009546:	b662      	cpsie	i
 8009548:	b661      	cpsie	f
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	df00      	svc	0
 8009554:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009556:	0000      	.short	0x0000
 8009558:	e000ed08 	.word	0xe000ed08

0800955c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800955c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800956c <vPortEnableVFP+0x10>
 8009560:	6801      	ldr	r1, [r0, #0]
 8009562:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009566:	6001      	str	r1, [r0, #0]
 8009568:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800956a:	0000      	.short	0x0000
 800956c:	e000ed88 	.word	0xe000ed88

08009570 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8009570:	2300      	movs	r3, #0
{
 8009572:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009574:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009576:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <prvTaskExitError+0x44>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3301      	adds	r3, #1
 800957c:	d00a      	beq.n	8009594 <prvTaskExitError+0x24>
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	b672      	cpsid	i
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	b662      	cpsie	i
 8009592:	e7fe      	b.n	8009592 <prvTaskExitError+0x22>
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	b672      	cpsid	i
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	b662      	cpsie	i
	while( ulDummy == 0 )
 80095a8:	9b01      	ldr	r3, [sp, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0fc      	beq.n	80095a8 <prvTaskExitError+0x38>
}
 80095ae:	b002      	add	sp, #8
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20000040 	.word	0x20000040

080095b8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095bc:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095c0:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80095c4:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095c6:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095c8:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095ca:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095cc:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095ce:	f06f 0302 	mvn.w	r3, #2
 80095d2:	6203      	str	r3, [r0, #32]
}
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	08009571 	.word	0x08009571
 80095dc:	00000000 	.word	0x00000000

080095e0 <SVC_Handler>:
	__asm volatile (
 80095e0:	4b07      	ldr	r3, [pc, #28]	; (8009600 <pxCurrentTCBConst2>)
 80095e2:	6819      	ldr	r1, [r3, #0]
 80095e4:	6808      	ldr	r0, [r1, #0]
 80095e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ea:	f380 8809 	msr	PSP, r0
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f04f 0000 	mov.w	r0, #0
 80095f6:	f380 8811 	msr	BASEPRI, r0
 80095fa:	4770      	bx	lr
 80095fc:	f3af 8000 	nop.w

08009600 <pxCurrentTCBConst2>:
 8009600:	20015988 	.word	0x20015988

08009604 <vPortEnterCritical>:
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	b672      	cpsid	i
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	b662      	cpsie	i
	uxCriticalNesting++;
 8009618:	4a0b      	ldr	r2, [pc, #44]	; (8009648 <vPortEnterCritical+0x44>)
 800961a:	6813      	ldr	r3, [r2, #0]
 800961c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800961e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009622:	d110      	bne.n	8009646 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009624:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009628:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800962c:	b2db      	uxtb	r3, r3
 800962e:	b153      	cbz	r3, 8009646 <vPortEnterCritical+0x42>
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	b672      	cpsid	i
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	b662      	cpsie	i
 8009644:	e7fe      	b.n	8009644 <vPortEnterCritical+0x40>
}
 8009646:	4770      	bx	lr
 8009648:	20000040 	.word	0x20000040

0800964c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800964c:	4a09      	ldr	r2, [pc, #36]	; (8009674 <vPortExitCritical+0x28>)
 800964e:	6813      	ldr	r3, [r2, #0]
 8009650:	b953      	cbnz	r3, 8009668 <vPortExitCritical+0x1c>
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	b672      	cpsid	i
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	b662      	cpsie	i
 8009666:	e7fe      	b.n	8009666 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8009668:	3b01      	subs	r3, #1
 800966a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800966c:	b90b      	cbnz	r3, 8009672 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800966e:	f383 8811 	msr	BASEPRI, r3
}
 8009672:	4770      	bx	lr
 8009674:	20000040 	.word	0x20000040
	...

08009680 <PendSV_Handler>:
	__asm volatile
 8009680:	f3ef 8009 	mrs	r0, PSP
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <pxCurrentTCBConst>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	f01e 0f10 	tst.w	lr, #16
 8009690:	bf08      	it	eq
 8009692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	6010      	str	r0, [r2, #0]
 800969c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096a4:	b672      	cpsid	i
 80096a6:	f380 8811 	msr	BASEPRI, r0
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	b662      	cpsie	i
 80096b4:	f001 fa32 	bl	800ab1c <vTaskSwitchContext>
 80096b8:	f04f 0000 	mov.w	r0, #0
 80096bc:	f380 8811 	msr	BASEPRI, r0
 80096c0:	bc09      	pop	{r0, r3}
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	6808      	ldr	r0, [r1, #0]
 80096c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	f01e 0f10 	tst.w	lr, #16
 80096ce:	bf08      	it	eq
 80096d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80096d4:	f380 8809 	msr	PSP, r0
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop

080096e0 <pxCurrentTCBConst>:
 80096e0:	20015988 	.word	0x20015988

080096e4 <SysTick_Handler>:
{
 80096e4:	b508      	push	{r3, lr}
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	b672      	cpsid	i
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80096fa:	f001 f867 	bl	800a7cc <xTaskIncrementTick>
 80096fe:	b128      	cbz	r0, 800970c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009700:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009708:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800970c:	2300      	movs	r3, #0
 800970e:	f383 8811 	msr	BASEPRI, r3
}
 8009712:	bd08      	pop	{r3, pc}

08009714 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009714:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009718:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800971a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800971e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009720:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009722:	4b04      	ldr	r3, [pc, #16]	; (8009734 <vPortSetupTimerInterrupt+0x20>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	fbb3 f3f1 	udiv	r3, r3, r1
 800972a:	3b01      	subs	r3, #1
 800972c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800972e:	2307      	movs	r3, #7
 8009730:	6113      	str	r3, [r2, #16]
}
 8009732:	4770      	bx	lr
 8009734:	2000000c 	.word	0x2000000c

08009738 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009738:	4b2e      	ldr	r3, [pc, #184]	; (80097f4 <xPortStartScheduler+0xbc>)
{
 800973a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800973c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800973e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009740:	b2d2      	uxtb	r2, r2
 8009742:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009744:	22ff      	movs	r2, #255	; 0xff
 8009746:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009748:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800974a:	4a2b      	ldr	r2, [pc, #172]	; (80097f8 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800974c:	b2db      	uxtb	r3, r3
 800974e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009752:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009756:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800975a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800975c:	2307      	movs	r3, #7
 800975e:	4a27      	ldr	r2, [pc, #156]	; (80097fc <xPortStartScheduler+0xc4>)
 8009760:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009762:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009766:	1e5c      	subs	r4, r3, #1
 8009768:	0600      	lsls	r0, r0, #24
 800976a:	d40e      	bmi.n	800978a <xPortStartScheduler+0x52>
 800976c:	b111      	cbz	r1, 8009774 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800976e:	2b03      	cmp	r3, #3
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	d013      	beq.n	800979c <xPortStartScheduler+0x64>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	b672      	cpsid	i
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	b662      	cpsie	i
 8009788:	e7fe      	b.n	8009788 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800978a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800978e:	2101      	movs	r1, #1
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f88d 3003 	strb.w	r3, [sp, #3]
 8009798:	4623      	mov	r3, r4
 800979a:	e7e2      	b.n	8009762 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800979c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097a0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 80097a4:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097a6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097a8:	9b01      	ldr	r3, [sp, #4]
 80097aa:	4a12      	ldr	r2, [pc, #72]	; (80097f4 <xPortStartScheduler+0xbc>)
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097b0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80097b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097b8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097bc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80097c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097c4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80097c8:	f7ff ffa4 	bl	8009714 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80097cc:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <xPortStartScheduler+0xc8>)
 80097ce:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80097d0:	f7ff fec4 	bl	800955c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097d4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80097d8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097dc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80097e0:	f7ff fea8 	bl	8009534 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80097e4:	f001 f99a 	bl	800ab1c <vTaskSwitchContext>
}
 80097e8:	4628      	mov	r0, r5
	prvTaskExitError();
 80097ea:	f7ff fec1 	bl	8009570 <prvTaskExitError>
}
 80097ee:	b003      	add	sp, #12
 80097f0:	bd30      	pop	{r4, r5, pc}
 80097f2:	bf00      	nop
 80097f4:	e000e400 	.word	0xe000e400
 80097f8:	20015940 	.word	0x20015940
 80097fc:	20015944 	.word	0x20015944
 8009800:	20000040 	.word	0x20000040

08009804 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009804:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009808:	2b0f      	cmp	r3, #15
 800980a:	d910      	bls.n	800982e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800980c:	4a13      	ldr	r2, [pc, #76]	; (800985c <vPortValidateInterruptPriority+0x58>)
 800980e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009810:	4a13      	ldr	r2, [pc, #76]	; (8009860 <vPortValidateInterruptPriority+0x5c>)
 8009812:	7812      	ldrb	r2, [r2, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d90a      	bls.n	800982e <vPortValidateInterruptPriority+0x2a>
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	b672      	cpsid	i
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	b662      	cpsie	i
 800982c:	e7fe      	b.n	800982c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800982e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009832:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <vPortValidateInterruptPriority+0x60>)
 8009834:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009838:	6812      	ldr	r2, [r2, #0]
 800983a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800983e:	4293      	cmp	r3, r2
 8009840:	d90a      	bls.n	8009858 <vPortValidateInterruptPriority+0x54>
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	b672      	cpsid	i
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	b662      	cpsie	i
 8009856:	e7fe      	b.n	8009856 <vPortValidateInterruptPriority+0x52>
	}
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	e000e3f0 	.word	0xe000e3f0
 8009860:	20015940 	.word	0x20015940
 8009864:	20015944 	.word	0x20015944

08009868 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009868:	b510      	push	{r4, lr}
 800986a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800986c:	f7ff feca 	bl	8009604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009870:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009872:	f7ff feeb 	bl	800964c <vPortExitCritical>

	return xReturn;
}
 8009876:	fab4 f084 	clz	r0, r4
 800987a:	0940      	lsrs	r0, r0, #5
 800987c:	bd10      	pop	{r4, pc}

0800987e <prvCopyDataToQueue>:
{
 800987e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009880:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009882:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8009884:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009886:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009888:	b952      	cbnz	r2, 80098a0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800988a:	6807      	ldr	r7, [r0, #0]
 800988c:	bb47      	cbnz	r7, 80098e0 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800988e:	6880      	ldr	r0, [r0, #8]
 8009890:	f001 fab8 	bl	800ae04 <xTaskPriorityDisinherit>
 8009894:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009896:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009898:	3601      	adds	r6, #1
}
 800989a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800989c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800989e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80098a0:	b965      	cbnz	r5, 80098bc <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098a2:	6840      	ldr	r0, [r0, #4]
 80098a4:	f021 fa16 	bl	802acd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098a8:	6863      	ldr	r3, [r4, #4]
 80098aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80098ac:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098ae:	68a2      	ldr	r2, [r4, #8]
 80098b0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098b2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098b4:	d3f0      	bcc.n	8009898 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	e7ed      	b.n	8009898 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098bc:	68c0      	ldr	r0, [r0, #12]
 80098be:	f021 fa09 	bl	802acd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80098c4:	68e3      	ldr	r3, [r4, #12]
 80098c6:	4251      	negs	r1, r2
 80098c8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098ca:	6822      	ldr	r2, [r4, #0]
 80098cc:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098ce:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098d0:	bf3e      	ittt	cc
 80098d2:	68a3      	ldrcc	r3, [r4, #8]
 80098d4:	185b      	addcc	r3, r3, r1
 80098d6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80098d8:	2d02      	cmp	r5, #2
 80098da:	d101      	bne.n	80098e0 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098dc:	b116      	cbz	r6, 80098e4 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80098de:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80098e0:	2500      	movs	r5, #0
 80098e2:	e7d9      	b.n	8009898 <prvCopyDataToQueue+0x1a>
 80098e4:	4635      	mov	r5, r6
 80098e6:	e7d7      	b.n	8009898 <prvCopyDataToQueue+0x1a>

080098e8 <prvCopyDataFromQueue>:
{
 80098e8:	4603      	mov	r3, r0
 80098ea:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80098ee:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098f0:	b162      	cbz	r2, 800990c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098f2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098f4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098f6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098f8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098fa:	60dc      	str	r4, [r3, #12]
}
 80098fc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009900:	bf24      	itt	cs
 8009902:	6819      	ldrcs	r1, [r3, #0]
 8009904:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009906:	68d9      	ldr	r1, [r3, #12]
 8009908:	f021 b9e4 	b.w	802acd4 <memcpy>
}
 800990c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009910:	4770      	bx	lr

08009912 <prvUnlockQueue>:
{
 8009912:	b570      	push	{r4, r5, r6, lr}
 8009914:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009916:	f7ff fe75 	bl	8009604 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800991a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800991e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8009922:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009924:	2d00      	cmp	r5, #0
 8009926:	dc14      	bgt.n	8009952 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8009928:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800992a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800992e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009932:	f7ff fe8b 	bl	800964c <vPortExitCritical>
	taskENTER_CRITICAL();
 8009936:	f7ff fe65 	bl	8009604 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800993a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800993e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009940:	2d00      	cmp	r5, #0
 8009942:	dc12      	bgt.n	800996a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8009944:	23ff      	movs	r3, #255	; 0xff
 8009946:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800994a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800994e:	f7ff be7d 	b.w	800964c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0e7      	beq.n	8009928 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009958:	4630      	mov	r0, r6
 800995a:	f001 f965 	bl	800ac28 <xTaskRemoveFromEventList>
 800995e:	b108      	cbz	r0, 8009964 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8009960:	f001 f9f4 	bl	800ad4c <vTaskMissedYield>
			--cTxLock;
 8009964:	3d01      	subs	r5, #1
 8009966:	b26d      	sxtb	r5, r5
 8009968:	e7dc      	b.n	8009924 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d0e9      	beq.n	8009944 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009970:	4630      	mov	r0, r6
 8009972:	f001 f959 	bl	800ac28 <xTaskRemoveFromEventList>
 8009976:	b108      	cbz	r0, 800997c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8009978:	f001 f9e8 	bl	800ad4c <vTaskMissedYield>
				--cRxLock;
 800997c:	3d01      	subs	r5, #1
 800997e:	b26d      	sxtb	r5, r5
 8009980:	e7de      	b.n	8009940 <prvUnlockQueue+0x2e>

08009982 <xQueueGenericReset>:
{
 8009982:	b538      	push	{r3, r4, r5, lr}
 8009984:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009986:	4604      	mov	r4, r0
 8009988:	b950      	cbnz	r0, 80099a0 <xQueueGenericReset+0x1e>
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	b672      	cpsid	i
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	b662      	cpsie	i
 800999e:	e7fe      	b.n	800999e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80099a0:	f7ff fe30 	bl	8009604 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099aa:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099ac:	434b      	muls	r3, r1
 80099ae:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099b0:	1a5b      	subs	r3, r3, r1
 80099b2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099b4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099b6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099b8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099ba:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099bc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80099be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80099c6:	b9a5      	cbnz	r5, 80099f2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	b173      	cbz	r3, 80099ea <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099cc:	f104 0010 	add.w	r0, r4, #16
 80099d0:	f001 f92a 	bl	800ac28 <xTaskRemoveFromEventList>
 80099d4:	b148      	cbz	r0, 80099ea <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 80099d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80099da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80099ea:	f7ff fe2f 	bl	800964c <vPortExitCritical>
}
 80099ee:	2001      	movs	r0, #1
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099f2:	f104 0010 	add.w	r0, r4, #16
 80099f6:	f7ff fd5b 	bl	80094b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80099fe:	f7ff fd57 	bl	80094b0 <vListInitialise>
 8009a02:	e7f2      	b.n	80099ea <xQueueGenericReset+0x68>

08009a04 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8009a04:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8009a06:	461c      	mov	r4, r3
 8009a08:	b953      	cbnz	r3, 8009a20 <xQueueGenericCreateStatic.part.0+0x1c>
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	b672      	cpsid	i
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	b662      	cpsie	i
 8009a1e:	e7fe      	b.n	8009a1e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a20:	b15a      	cbz	r2, 8009a3a <xQueueGenericCreateStatic.part.0+0x36>
 8009a22:	b9b1      	cbnz	r1, 8009a52 <xQueueGenericCreateStatic.part.0+0x4e>
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	b672      	cpsid	i
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	b662      	cpsie	i
 8009a38:	e7fe      	b.n	8009a38 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a3a:	b151      	cbz	r1, 8009a52 <xQueueGenericCreateStatic.part.0+0x4e>
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	b672      	cpsid	i
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	b662      	cpsie	i
 8009a50:	e7fe      	b.n	8009a50 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a52:	2350      	movs	r3, #80	; 0x50
 8009a54:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a56:	9b01      	ldr	r3, [sp, #4]
 8009a58:	2b50      	cmp	r3, #80	; 0x50
 8009a5a:	d00a      	beq.n	8009a72 <xQueueGenericCreateStatic.part.0+0x6e>
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	b672      	cpsid	i
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	b662      	cpsie	i
 8009a70:	e7fe      	b.n	8009a70 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a72:	2900      	cmp	r1, #0
 8009a74:	bf08      	it	eq
 8009a76:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a78:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	6022      	str	r2, [r4, #0]
 8009a7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8009a82:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a86:	4619      	mov	r1, r3
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f7ff ff7a 	bl	8009982 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009a8e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8009a92:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8009a94:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd10      	pop	{r4, pc}

08009a9c <xQueueGenericCreateStatic>:
	{
 8009a9c:	b410      	push	{r4}
 8009a9e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009aa2:	b950      	cbnz	r0, 8009aba <xQueueGenericCreateStatic+0x1e>
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	b672      	cpsid	i
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	b662      	cpsie	i
 8009ab8:	e7fe      	b.n	8009ab8 <xQueueGenericCreateStatic+0x1c>
 8009aba:	9401      	str	r4, [sp, #4]
	}
 8009abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ac0:	f7ff bfa0 	b.w	8009a04 <xQueueGenericCreateStatic.part.0>

08009ac4 <xQueueGenericCreate>:
	{
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	460d      	mov	r5, r1
 8009ac8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009aca:	4606      	mov	r6, r0
 8009acc:	b950      	cbnz	r0, 8009ae4 <xQueueGenericCreate+0x20>
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	b672      	cpsid	i
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	b662      	cpsie	i
 8009ae2:	e7fe      	b.n	8009ae2 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ae6:	3050      	adds	r0, #80	; 0x50
 8009ae8:	f7ff fc10 	bl	800930c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009aec:	4604      	mov	r4, r0
 8009aee:	b170      	cbz	r0, 8009b0e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009af6:	b165      	cbz	r5, 8009b12 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009af8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009afc:	2101      	movs	r1, #1
 8009afe:	4620      	mov	r0, r4
 8009b00:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8009b02:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b06:	f7ff ff3c 	bl	8009982 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009b0a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8009b0e:	4620      	mov	r0, r4
 8009b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b12:	4603      	mov	r3, r0
 8009b14:	e7f2      	b.n	8009afc <xQueueGenericCreate+0x38>

08009b16 <xQueueCreateCountingSemaphoreStatic>:
	{
 8009b16:	b513      	push	{r0, r1, r4, lr}
 8009b18:	4613      	mov	r3, r2
 8009b1a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009b1c:	b950      	cbnz	r0, 8009b34 <xQueueCreateCountingSemaphoreStatic+0x1e>
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	b672      	cpsid	i
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	b662      	cpsie	i
 8009b32:	e7fe      	b.n	8009b32 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b34:	4288      	cmp	r0, r1
 8009b36:	d20a      	bcs.n	8009b4e <xQueueCreateCountingSemaphoreStatic+0x38>
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	b672      	cpsid	i
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	b662      	cpsie	i
 8009b4c:	e7fe      	b.n	8009b4c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b4e:	2202      	movs	r2, #2
 8009b50:	9200      	str	r2, [sp, #0]
 8009b52:	2200      	movs	r2, #0
 8009b54:	4611      	mov	r1, r2
 8009b56:	f7ff ffa1 	bl	8009a9c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8009b5a:	b100      	cbz	r0, 8009b5e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b5c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009b5e:	b002      	add	sp, #8
 8009b60:	bd10      	pop	{r4, pc}

08009b62 <xQueueCreateCountingSemaphore>:
	{
 8009b62:	b510      	push	{r4, lr}
 8009b64:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009b66:	b950      	cbnz	r0, 8009b7e <xQueueCreateCountingSemaphore+0x1c>
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	b672      	cpsid	i
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	b662      	cpsie	i
 8009b7c:	e7fe      	b.n	8009b7c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b7e:	4288      	cmp	r0, r1
 8009b80:	d20a      	bcs.n	8009b98 <xQueueCreateCountingSemaphore+0x36>
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	b672      	cpsid	i
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	b662      	cpsie	i
 8009b96:	e7fe      	b.n	8009b96 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b98:	2202      	movs	r2, #2
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	f7ff ff92 	bl	8009ac4 <xQueueGenericCreate>
		if( xHandle != NULL )
 8009ba0:	b100      	cbz	r0, 8009ba4 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ba2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009ba4:	bd10      	pop	{r4, pc}

08009ba6 <xQueueGenericSend>:
{
 8009ba6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009baa:	b085      	sub	sp, #20
 8009bac:	4688      	mov	r8, r1
 8009bae:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009bb0:	4604      	mov	r4, r0
{
 8009bb2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009bb4:	b950      	cbnz	r0, 8009bcc <xQueueGenericSend+0x26>
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	b672      	cpsid	i
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	b662      	cpsie	i
 8009bca:	e7fe      	b.n	8009bca <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bcc:	b961      	cbnz	r1, 8009be8 <xQueueGenericSend+0x42>
 8009bce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009bd0:	b153      	cbz	r3, 8009be8 <xQueueGenericSend+0x42>
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	b672      	cpsid	i
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	b662      	cpsie	i
 8009be6:	e7fe      	b.n	8009be6 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009be8:	2f02      	cmp	r7, #2
 8009bea:	d10d      	bne.n	8009c08 <xQueueGenericSend+0x62>
 8009bec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d00a      	beq.n	8009c08 <xQueueGenericSend+0x62>
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	b672      	cpsid	i
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	b662      	cpsie	i
 8009c06:	e7fe      	b.n	8009c06 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c08:	f001 f8ac 	bl	800ad64 <xTaskGetSchedulerState>
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	b960      	cbnz	r0, 8009c2a <xQueueGenericSend+0x84>
 8009c10:	9b01      	ldr	r3, [sp, #4]
 8009c12:	b15b      	cbz	r3, 8009c2c <xQueueGenericSend+0x86>
 8009c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c18:	b672      	cpsid	i
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	b662      	cpsie	i
 8009c28:	e7fe      	b.n	8009c28 <xQueueGenericSend+0x82>
 8009c2a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009c2c:	f04f 0900 	mov.w	r9, #0
 8009c30:	e037      	b.n	8009ca2 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c32:	9d01      	ldr	r5, [sp, #4]
 8009c34:	b91d      	cbnz	r5, 8009c3e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8009c36:	f7ff fd09 	bl	800964c <vPortExitCritical>
			return errQUEUE_FULL;
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	e052      	b.n	8009ce4 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8009c3e:	b916      	cbnz	r6, 8009c46 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c40:	a802      	add	r0, sp, #8
 8009c42:	f001 f837 	bl	800acb4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009c46:	f7ff fd01 	bl	800964c <vPortExitCritical>
		vTaskSuspendAll();
 8009c4a:	f000 fdb1 	bl	800a7b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c4e:	f7ff fcd9 	bl	8009604 <vPortEnterCritical>
 8009c52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009c56:	2bff      	cmp	r3, #255	; 0xff
 8009c58:	d101      	bne.n	8009c5e <xQueueGenericSend+0xb8>
 8009c5a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8009c5e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009c62:	2bff      	cmp	r3, #255	; 0xff
 8009c64:	d101      	bne.n	8009c6a <xQueueGenericSend+0xc4>
 8009c66:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8009c6a:	f7ff fcef 	bl	800964c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c6e:	a901      	add	r1, sp, #4
 8009c70:	a802      	add	r0, sp, #8
 8009c72:	f001 f82b 	bl	800accc <xTaskCheckForTimeOut>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d14a      	bne.n	8009d10 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c7a:	f7ff fcc3 	bl	8009604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009c80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d131      	bne.n	8009cea <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009c86:	f7ff fce1 	bl	800964c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c8a:	9901      	ldr	r1, [sp, #4]
 8009c8c:	f104 0010 	add.w	r0, r4, #16
 8009c90:	f000 ff8e 	bl	800abb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c94:	4620      	mov	r0, r4
 8009c96:	f7ff fe3c 	bl	8009912 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c9a:	f000 fe2f 	bl	800a8fc <xTaskResumeAll>
 8009c9e:	b360      	cbz	r0, 8009cfa <xQueueGenericSend+0x154>
 8009ca0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009ca2:	f7ff fcaf 	bl	8009604 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ca6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ca8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d301      	bcc.n	8009cb2 <xQueueGenericSend+0x10c>
 8009cae:	2f02      	cmp	r7, #2
 8009cb0:	d1bf      	bne.n	8009c32 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cb2:	463a      	mov	r2, r7
 8009cb4:	4641      	mov	r1, r8
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7ff fde1 	bl	800987e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cbe:	b11b      	cbz	r3, 8009cc8 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009cc4:	f000 ffb0 	bl	800ac28 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8009cc8:	b148      	cbz	r0, 8009cde <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8009cca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009cde:	f7ff fcb5 	bl	800964c <vPortExitCritical>
				return pdPASS;
 8009ce2:	2001      	movs	r0, #1
}
 8009ce4:	b005      	add	sp, #20
 8009ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8009cea:	f7ff fcaf 	bl	800964c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f7ff fe0f 	bl	8009912 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cf4:	f000 fe02 	bl	800a8fc <xTaskResumeAll>
 8009cf8:	e7d2      	b.n	8009ca0 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8009cfa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	e7c7      	b.n	8009ca0 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8009d10:	4620      	mov	r0, r4
 8009d12:	f7ff fdfe 	bl	8009912 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d16:	f000 fdf1 	bl	800a8fc <xTaskResumeAll>
 8009d1a:	e78e      	b.n	8009c3a <xQueueGenericSend+0x94>

08009d1c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009d1c:	2200      	movs	r2, #0
	{
 8009d1e:	460b      	mov	r3, r1
 8009d20:	b513      	push	{r0, r1, r4, lr}
 8009d22:	4611      	mov	r1, r2
 8009d24:	9000      	str	r0, [sp, #0]
 8009d26:	2001      	movs	r0, #1
 8009d28:	f7ff fe6c 	bl	8009a04 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	b138      	cbz	r0, 8009d40 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d30:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009d32:	461a      	mov	r2, r3
 8009d34:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d36:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009d38:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009d3a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009d3c:	f7ff ff33 	bl	8009ba6 <xQueueGenericSend>
	}
 8009d40:	4620      	mov	r0, r4
 8009d42:	b002      	add	sp, #8
 8009d44:	bd10      	pop	{r4, pc}

08009d46 <xQueueGiveMutexRecursive>:
	{
 8009d46:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8009d48:	4604      	mov	r4, r0
 8009d4a:	b950      	cbnz	r0, 8009d62 <xQueueGiveMutexRecursive+0x1c>
 8009d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d50:	b672      	cpsid	i
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	b662      	cpsie	i
 8009d60:	e7fe      	b.n	8009d60 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009d62:	6885      	ldr	r5, [r0, #8]
 8009d64:	f000 fff8 	bl	800ad58 <xTaskGetCurrentTaskHandle>
 8009d68:	4285      	cmp	r5, r0
 8009d6a:	d10a      	bne.n	8009d82 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009d6c:	68e3      	ldr	r3, [r4, #12]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009d72:	b923      	cbnz	r3, 8009d7e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009d74:	461a      	mov	r2, r3
 8009d76:	4619      	mov	r1, r3
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f7ff ff14 	bl	8009ba6 <xQueueGenericSend>
			xReturn = pdPASS;
 8009d7e:	2001      	movs	r0, #1
		return xReturn;
 8009d80:	e000      	b.n	8009d84 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8009d82:	2000      	movs	r0, #0
	}
 8009d84:	bd38      	pop	{r3, r4, r5, pc}

08009d86 <xQueueCreateMutex>:
	{
 8009d86:	b570      	push	{r4, r5, r6, lr}
 8009d88:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d8a:	2050      	movs	r0, #80	; 0x50
 8009d8c:	f7ff fabe 	bl	800930c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009d90:	4604      	mov	r4, r0
 8009d92:	b198      	cbz	r0, 8009dbc <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d94:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8009d96:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d98:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d9a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8009d9e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009da2:	f7ff fdee 	bl	8009982 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009da6:	462b      	mov	r3, r5
 8009da8:	462a      	mov	r2, r5
 8009daa:	4629      	mov	r1, r5
 8009dac:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8009dae:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009db2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009db4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009db6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009db8:	f7ff fef5 	bl	8009ba6 <xQueueGenericSend>
	}
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}

08009dc0 <xQueueGenericSendFromISR>:
{
 8009dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	4690      	mov	r8, r2
 8009dc8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009dca:	4604      	mov	r4, r0
 8009dcc:	b950      	cbnz	r0, 8009de4 <xQueueGenericSendFromISR+0x24>
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	b672      	cpsid	i
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	b662      	cpsie	i
 8009de2:	e7fe      	b.n	8009de2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009de4:	b961      	cbnz	r1, 8009e00 <xQueueGenericSendFromISR+0x40>
 8009de6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009de8:	b153      	cbz	r3, 8009e00 <xQueueGenericSendFromISR+0x40>
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	b672      	cpsid	i
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	b662      	cpsie	i
 8009dfe:	e7fe      	b.n	8009dfe <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e00:	2f02      	cmp	r7, #2
 8009e02:	d10d      	bne.n	8009e20 <xQueueGenericSendFromISR+0x60>
 8009e04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d00a      	beq.n	8009e20 <xQueueGenericSendFromISR+0x60>
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	b672      	cpsid	i
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	b662      	cpsie	i
 8009e1e:	e7fe      	b.n	8009e1e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e20:	f7ff fcf0 	bl	8009804 <vPortValidateInterruptPriority>
	__asm volatile
 8009e24:	f3ef 8611 	mrs	r6, BASEPRI
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	b672      	cpsid	i
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d301      	bcc.n	8009e48 <xQueueGenericSendFromISR+0x88>
 8009e44:	2f02      	cmp	r7, #2
 8009e46:	d122      	bne.n	8009e8e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e48:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e4c:	463a      	mov	r2, r7
 8009e4e:	4649      	mov	r1, r9
 8009e50:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e52:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e54:	f7ff fd13 	bl	800987e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009e58:	1c6b      	adds	r3, r5, #1
 8009e5a:	d113      	bne.n	8009e84 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e5e:	b90b      	cbnz	r3, 8009e64 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8009e60:	2001      	movs	r0, #1
 8009e62:	e00b      	b.n	8009e7c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e68:	f000 fede 	bl	800ac28 <xTaskRemoveFromEventList>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d0f7      	beq.n	8009e60 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8009e70:	f1b8 0f00 	cmp.w	r8, #0
 8009e74:	d0f4      	beq.n	8009e60 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e76:	2001      	movs	r0, #1
 8009e78:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8009e7c:	f386 8811 	msr	BASEPRI, r6
}
 8009e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e84:	3501      	adds	r5, #1
 8009e86:	b26d      	sxtb	r5, r5
 8009e88:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8009e8c:	e7e8      	b.n	8009e60 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8009e8e:	2000      	movs	r0, #0
 8009e90:	e7f4      	b.n	8009e7c <xQueueGenericSendFromISR+0xbc>

08009e92 <xQueueGiveFromISR>:
{
 8009e92:	b570      	push	{r4, r5, r6, lr}
 8009e94:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009e96:	4604      	mov	r4, r0
 8009e98:	b950      	cbnz	r0, 8009eb0 <xQueueGiveFromISR+0x1e>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	b672      	cpsid	i
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	b662      	cpsie	i
 8009eae:	e7fe      	b.n	8009eae <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009eb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009eb2:	b153      	cbz	r3, 8009eca <xQueueGiveFromISR+0x38>
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	b672      	cpsid	i
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	b662      	cpsie	i
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009eca:	6803      	ldr	r3, [r0, #0]
 8009ecc:	b963      	cbnz	r3, 8009ee8 <xQueueGiveFromISR+0x56>
 8009ece:	6883      	ldr	r3, [r0, #8]
 8009ed0:	b153      	cbz	r3, 8009ee8 <xQueueGiveFromISR+0x56>
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	b672      	cpsid	i
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	b662      	cpsie	i
 8009ee6:	e7fe      	b.n	8009ee6 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ee8:	f7ff fc8c 	bl	8009804 <vPortValidateInterruptPriority>
	__asm volatile
 8009eec:	f3ef 8611 	mrs	r6, BASEPRI
 8009ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef4:	b672      	cpsid	i
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d91c      	bls.n	8009f46 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f10:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8009f12:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f14:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f16:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009f18:	d110      	bne.n	8009f3c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f1c:	b90b      	cbnz	r3, 8009f22 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8009f1e:	2001      	movs	r0, #1
 8009f20:	e009      	b.n	8009f36 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f26:	f000 fe7f 	bl	800ac28 <xTaskRemoveFromEventList>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	d0f7      	beq.n	8009f1e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8009f2e:	2d00      	cmp	r5, #0
 8009f30:	d0f5      	beq.n	8009f1e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f32:	2001      	movs	r0, #1
 8009f34:	6028      	str	r0, [r5, #0]
	__asm volatile
 8009f36:	f386 8811 	msr	BASEPRI, r6
}
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	b25b      	sxtb	r3, r3
 8009f40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f44:	e7eb      	b.n	8009f1e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8009f46:	2000      	movs	r0, #0
 8009f48:	e7f5      	b.n	8009f36 <xQueueGiveFromISR+0xa4>

08009f4a <xQueueReceive>:
{
 8009f4a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009f4e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8009f50:	4604      	mov	r4, r0
{
 8009f52:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009f54:	b950      	cbnz	r0, 8009f6c <xQueueReceive+0x22>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	b672      	cpsid	i
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	b662      	cpsie	i
 8009f6a:	e7fe      	b.n	8009f6a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f6c:	b961      	cbnz	r1, 8009f88 <xQueueReceive+0x3e>
 8009f6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009f70:	b153      	cbz	r3, 8009f88 <xQueueReceive+0x3e>
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	b672      	cpsid	i
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	b662      	cpsie	i
 8009f86:	e7fe      	b.n	8009f86 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f88:	f000 feec 	bl	800ad64 <xTaskGetSchedulerState>
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	b960      	cbnz	r0, 8009faa <xQueueReceive+0x60>
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	b15b      	cbz	r3, 8009fac <xQueueReceive+0x62>
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	b672      	cpsid	i
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	b662      	cpsie	i
 8009fa8:	e7fe      	b.n	8009fa8 <xQueueReceive+0x5e>
 8009faa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009fac:	f04f 0800 	mov.w	r8, #0
 8009fb0:	e03d      	b.n	800a02e <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fb2:	9d01      	ldr	r5, [sp, #4]
 8009fb4:	b91d      	cbnz	r5, 8009fbe <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8009fb6:	f7ff fb49 	bl	800964c <vPortExitCritical>
				return errQUEUE_EMPTY;
 8009fba:	2000      	movs	r0, #0
 8009fbc:	e056      	b.n	800a06c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 8009fbe:	b916      	cbnz	r6, 8009fc6 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fc0:	a802      	add	r0, sp, #8
 8009fc2:	f000 fe77 	bl	800acb4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009fc6:	f7ff fb41 	bl	800964c <vPortExitCritical>
		vTaskSuspendAll();
 8009fca:	f000 fbf1 	bl	800a7b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fce:	f7ff fb19 	bl	8009604 <vPortEnterCritical>
 8009fd2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009fd6:	2bff      	cmp	r3, #255	; 0xff
 8009fd8:	d101      	bne.n	8009fde <xQueueReceive+0x94>
 8009fda:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8009fde:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009fe2:	2bff      	cmp	r3, #255	; 0xff
 8009fe4:	d101      	bne.n	8009fea <xQueueReceive+0xa0>
 8009fe6:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8009fea:	f7ff fb2f 	bl	800964c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fee:	a901      	add	r1, sp, #4
 8009ff0:	a802      	add	r0, sp, #8
 8009ff2:	f000 fe6b 	bl	800accc <xTaskCheckForTimeOut>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d141      	bne.n	800a07e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f7ff fc34 	bl	8009868 <prvIsQueueEmpty>
 800a000:	b3b8      	cbz	r0, 800a072 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a002:	9901      	ldr	r1, [sp, #4]
 800a004:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a008:	f000 fdd2 	bl	800abb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a00c:	4620      	mov	r0, r4
 800a00e:	f7ff fc80 	bl	8009912 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a012:	f000 fc73 	bl	800a8fc <xTaskResumeAll>
 800a016:	b948      	cbnz	r0, 800a02c <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800a018:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a020:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a02e:	f7ff fae9 	bl	8009604 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a032:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a034:	2d00      	cmp	r5, #0
 800a036:	d0bc      	beq.n	8009fb2 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a038:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a03a:	4639      	mov	r1, r7
 800a03c:	4620      	mov	r0, r4
 800a03e:	f7ff fc53 	bl	80098e8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a042:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	b173      	cbz	r3, 800a066 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a048:	f104 0010 	add.w	r0, r4, #16
 800a04c:	f000 fdec 	bl	800ac28 <xTaskRemoveFromEventList>
 800a050:	b148      	cbz	r0, 800a066 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800a052:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a05a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a066:	f7ff faf1 	bl	800964c <vPortExitCritical>
				return pdPASS;
 800a06a:	2001      	movs	r0, #1
}
 800a06c:	b004      	add	sp, #16
 800a06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800a072:	4620      	mov	r0, r4
 800a074:	f7ff fc4d 	bl	8009912 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a078:	f000 fc40 	bl	800a8fc <xTaskResumeAll>
 800a07c:	e7d6      	b.n	800a02c <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800a07e:	4620      	mov	r0, r4
 800a080:	f7ff fc47 	bl	8009912 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a084:	f000 fc3a 	bl	800a8fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a088:	4620      	mov	r0, r4
 800a08a:	f7ff fbed 	bl	8009868 <prvIsQueueEmpty>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d0cc      	beq.n	800a02c <xQueueReceive+0xe2>
 800a092:	e792      	b.n	8009fba <xQueueReceive+0x70>

0800a094 <xQueueSemaphoreTake>:
{
 800a094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a096:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800a098:	4604      	mov	r4, r0
{
 800a09a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a09c:	b950      	cbnz	r0, 800a0b4 <xQueueSemaphoreTake+0x20>
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	b672      	cpsid	i
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	b662      	cpsie	i
 800a0b2:	e7fe      	b.n	800a0b2 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a0b4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800a0b6:	b155      	cbz	r5, 800a0ce <xQueueSemaphoreTake+0x3a>
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	b672      	cpsid	i
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	b662      	cpsie	i
 800a0cc:	e7fe      	b.n	800a0cc <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0ce:	f000 fe49 	bl	800ad64 <xTaskGetSchedulerState>
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	b960      	cbnz	r0, 800a0f0 <xQueueSemaphoreTake+0x5c>
 800a0d6:	9b01      	ldr	r3, [sp, #4]
 800a0d8:	b16b      	cbz	r3, 800a0f6 <xQueueSemaphoreTake+0x62>
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	b672      	cpsid	i
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	b662      	cpsie	i
 800a0ee:	e7fe      	b.n	800a0ee <xQueueSemaphoreTake+0x5a>
 800a0f0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800a0f2:	2700      	movs	r7, #0
 800a0f4:	e055      	b.n	800a1a2 <xQueueSemaphoreTake+0x10e>
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	e7fb      	b.n	800a0f2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	b973      	cbnz	r3, 800a11c <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a0fe:	b155      	cbz	r5, 800a116 <xQueueSemaphoreTake+0x82>
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	b672      	cpsid	i
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	b662      	cpsie	i
 800a114:	e7fe      	b.n	800a114 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 800a116:	f7ff fa99 	bl	800964c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a11a:	e062      	b.n	800a1e2 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800a11c:	b916      	cbnz	r6, 800a124 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a11e:	a802      	add	r0, sp, #8
 800a120:	f000 fdc8 	bl	800acb4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a124:	f7ff fa92 	bl	800964c <vPortExitCritical>
		vTaskSuspendAll();
 800a128:	f000 fb42 	bl	800a7b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a12c:	f7ff fa6a 	bl	8009604 <vPortEnterCritical>
 800a130:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a134:	2bff      	cmp	r3, #255	; 0xff
 800a136:	d101      	bne.n	800a13c <xQueueSemaphoreTake+0xa8>
 800a138:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a13c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a140:	2bff      	cmp	r3, #255	; 0xff
 800a142:	d101      	bne.n	800a148 <xQueueSemaphoreTake+0xb4>
 800a144:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a148:	f7ff fa80 	bl	800964c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a14c:	a901      	add	r1, sp, #4
 800a14e:	a802      	add	r0, sp, #8
 800a150:	f000 fdbc 	bl	800accc <xTaskCheckForTimeOut>
 800a154:	2800      	cmp	r0, #0
 800a156:	d14d      	bne.n	800a1f4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a158:	4620      	mov	r0, r4
 800a15a:	f7ff fb85 	bl	8009868 <prvIsQueueEmpty>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d042      	beq.n	800a1e8 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	b93b      	cbnz	r3, 800a176 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 800a166:	f7ff fa4d 	bl	8009604 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a16a:	68a0      	ldr	r0, [r4, #8]
 800a16c:	f000 fe0a 	bl	800ad84 <xTaskPriorityInherit>
 800a170:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800a172:	f7ff fa6b 	bl	800964c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a176:	9901      	ldr	r1, [sp, #4]
 800a178:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a17c:	f000 fd18 	bl	800abb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a180:	4620      	mov	r0, r4
 800a182:	f7ff fbc6 	bl	8009912 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a186:	f000 fbb9 	bl	800a8fc <xTaskResumeAll>
 800a18a:	b948      	cbnz	r0, 800a1a0 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800a18c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a194:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a1a2:	f7ff fa2f 	bl	8009604 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a1a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0a6      	beq.n	800a0fa <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	b913      	cbnz	r3, 800a1ba <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a1b4:	f000 fec4 	bl	800af40 <pvTaskIncrementMutexHeldCount>
 800a1b8:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	b173      	cbz	r3, 800a1dc <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1be:	f104 0010 	add.w	r0, r4, #16
 800a1c2:	f000 fd31 	bl	800ac28 <xTaskRemoveFromEventList>
 800a1c6:	b148      	cbz	r0, 800a1dc <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 800a1c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800a1dc:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800a1de:	f7ff fa35 	bl	800964c <vPortExitCritical>
}
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	b005      	add	sp, #20
 800a1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f7ff fb92 	bl	8009912 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1ee:	f000 fb85 	bl	800a8fc <xTaskResumeAll>
 800a1f2:	e7d5      	b.n	800a1a0 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f7ff fb8c 	bl	8009912 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1fa:	f000 fb7f 	bl	800a8fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7ff fb32 	bl	8009868 <prvIsQueueEmpty>
 800a204:	2800      	cmp	r0, #0
 800a206:	d0cb      	beq.n	800a1a0 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800a208:	2d00      	cmp	r5, #0
 800a20a:	d0ea      	beq.n	800a1e2 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800a20c:	f7ff f9fa 	bl	8009604 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a210:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a212:	b119      	cbz	r1, 800a21c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a214:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a216:	6819      	ldr	r1, [r3, #0]
 800a218:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a21c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800a21e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a220:	f000 fe38 	bl	800ae94 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a224:	f7ff fa12 	bl	800964c <vPortExitCritical>
 800a228:	e7db      	b.n	800a1e2 <xQueueSemaphoreTake+0x14e>

0800a22a <xQueueTakeMutexRecursive>:
	{
 800a22a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800a22c:	4604      	mov	r4, r0
 800a22e:	b950      	cbnz	r0, 800a246 <xQueueTakeMutexRecursive+0x1c>
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	b672      	cpsid	i
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	b662      	cpsie	i
 800a244:	e7fe      	b.n	800a244 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a246:	6885      	ldr	r5, [r0, #8]
 800a248:	9101      	str	r1, [sp, #4]
 800a24a:	f000 fd85 	bl	800ad58 <xTaskGetCurrentTaskHandle>
 800a24e:	4285      	cmp	r5, r0
 800a250:	9901      	ldr	r1, [sp, #4]
 800a252:	d105      	bne.n	800a260 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a254:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800a256:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a258:	3301      	adds	r3, #1
 800a25a:	60e3      	str	r3, [r4, #12]
	}
 800a25c:	b003      	add	sp, #12
 800a25e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a260:	4620      	mov	r0, r4
 800a262:	f7ff ff17 	bl	800a094 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800a266:	2800      	cmp	r0, #0
 800a268:	d0f8      	beq.n	800a25c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a26a:	68e3      	ldr	r3, [r4, #12]
 800a26c:	3301      	adds	r3, #1
 800a26e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800a270:	e7f4      	b.n	800a25c <xQueueTakeMutexRecursive+0x32>

0800a272 <xQueueReceiveFromISR>:
{
 800a272:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a276:	4689      	mov	r9, r1
 800a278:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800a27a:	4605      	mov	r5, r0
 800a27c:	b950      	cbnz	r0, 800a294 <xQueueReceiveFromISR+0x22>
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	b672      	cpsid	i
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	b662      	cpsie	i
 800a292:	e7fe      	b.n	800a292 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a294:	b961      	cbnz	r1, 800a2b0 <xQueueReceiveFromISR+0x3e>
 800a296:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a298:	b153      	cbz	r3, 800a2b0 <xQueueReceiveFromISR+0x3e>
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	b672      	cpsid	i
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	b662      	cpsie	i
 800a2ae:	e7fe      	b.n	800a2ae <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2b0:	f7ff faa8 	bl	8009804 <vPortValidateInterruptPriority>
	__asm volatile
 800a2b4:	f3ef 8711 	mrs	r7, BASEPRI
 800a2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2bc:	b672      	cpsid	i
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2cc:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2ce:	b31c      	cbz	r4, 800a318 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2d0:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2d8:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2da:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2dc:	f7ff fb04 	bl	80098e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2e0:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a2e2:	1c73      	adds	r3, r6, #1
 800a2e4:	d113      	bne.n	800a30e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2e6:	692b      	ldr	r3, [r5, #16]
 800a2e8:	b90b      	cbnz	r3, 800a2ee <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800a2ea:	2001      	movs	r0, #1
 800a2ec:	e00b      	b.n	800a306 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2ee:	f105 0010 	add.w	r0, r5, #16
 800a2f2:	f000 fc99 	bl	800ac28 <xTaskRemoveFromEventList>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d0f7      	beq.n	800a2ea <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800a2fa:	f1b8 0f00 	cmp.w	r8, #0
 800a2fe:	d0f4      	beq.n	800a2ea <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a300:	2001      	movs	r0, #1
 800a302:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800a306:	f387 8811 	msr	BASEPRI, r7
}
 800a30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a30e:	3601      	adds	r6, #1
 800a310:	b276      	sxtb	r6, r6
 800a312:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800a316:	e7e8      	b.n	800a2ea <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800a318:	4620      	mov	r0, r4
 800a31a:	e7f4      	b.n	800a306 <xQueueReceiveFromISR+0x94>

0800a31c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a31c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a31e:	4a07      	ldr	r2, [pc, #28]	; (800a33c <vQueueAddToRegistry+0x20>)
	{
 800a320:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a322:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800a326:	b92c      	cbnz	r4, 800a334 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a328:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a32c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a330:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a332:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a334:	3301      	adds	r3, #1
 800a336:	2b08      	cmp	r3, #8
 800a338:	d1f3      	bne.n	800a322 <vQueueAddToRegistry+0x6>
 800a33a:	e7fa      	b.n	800a332 <vQueueAddToRegistry+0x16>
 800a33c:	20015948 	.word	0x20015948

0800a340 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a340:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a342:	4a08      	ldr	r2, [pc, #32]	; (800a364 <vQueueUnregisterQueue+0x24>)
	{
 800a344:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a346:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a34a:	684c      	ldr	r4, [r1, #4]
 800a34c:	4284      	cmp	r4, r0
 800a34e:	d104      	bne.n	800a35a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a350:	2000      	movs	r0, #0
 800a352:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a356:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a358:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a35a:	3301      	adds	r3, #1
 800a35c:	2b08      	cmp	r3, #8
 800a35e:	d1f2      	bne.n	800a346 <vQueueUnregisterQueue+0x6>
 800a360:	e7fa      	b.n	800a358 <vQueueUnregisterQueue+0x18>
 800a362:	bf00      	nop
 800a364:	20015948 	.word	0x20015948

0800a368 <vQueueDelete>:
{
 800a368:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800a36a:	4604      	mov	r4, r0
 800a36c:	b950      	cbnz	r0, 800a384 <vQueueDelete+0x1c>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	b672      	cpsid	i
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	b662      	cpsie	i
 800a382:	e7fe      	b.n	800a382 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 800a384:	f7ff ffdc 	bl	800a340 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a388:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a38c:	b923      	cbnz	r3, 800a398 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800a38e:	4620      	mov	r0, r4
}
 800a390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800a394:	f7ff b850 	b.w	8009438 <vPortFree>
}
 800a398:	bd10      	pop	{r4, pc}

0800a39a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a39a:	b570      	push	{r4, r5, r6, lr}
 800a39c:	4604      	mov	r4, r0
 800a39e:	460d      	mov	r5, r1
 800a3a0:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3a2:	f7ff f92f 	bl	8009604 <vPortEnterCritical>
 800a3a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a3aa:	2bff      	cmp	r3, #255	; 0xff
 800a3ac:	d102      	bne.n	800a3b4 <vQueueWaitForMessageRestricted+0x1a>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a3b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a3b8:	2bff      	cmp	r3, #255	; 0xff
 800a3ba:	d102      	bne.n	800a3c2 <vQueueWaitForMessageRestricted+0x28>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3c2:	f7ff f943 	bl	800964c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3c8:	b92b      	cbnz	r3, 800a3d6 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3ca:	4632      	mov	r2, r6
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a3d2:	f000 fc09 	bl	800abe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3d6:	4620      	mov	r0, r4
	}
 800a3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800a3dc:	f7ff ba99 	b.w	8009912 <prvUnlockQueue>

0800a3e0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3e6:	f7ff f90d 	bl	8009604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3ea:	4b2f      	ldr	r3, [pc, #188]	; (800a4a8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800a3ec:	4e2f      	ldr	r6, [pc, #188]	; (800a4ac <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	4f2f      	ldr	r7, [pc, #188]	; (800a4b0 <prvAddNewTaskToReadyList+0xd0>)
 800a3f2:	3201      	adds	r2, #1
 800a3f4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a3f6:	6835      	ldr	r5, [r6, #0]
 800a3f8:	2d00      	cmp	r5, #0
 800a3fa:	d14a      	bne.n	800a492 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3fc:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d11f      	bne.n	800a444 <prvAddNewTaskToReadyList+0x64>
 800a404:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a406:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a408:	4640      	mov	r0, r8
 800a40a:	f7ff f851 	bl	80094b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a40e:	f108 0814 	add.w	r8, r8, #20
 800a412:	2d38      	cmp	r5, #56	; 0x38
 800a414:	d1f7      	bne.n	800a406 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a416:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800a4d8 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800a41a:	4d26      	ldr	r5, [pc, #152]	; (800a4b4 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800a41c:	4640      	mov	r0, r8
 800a41e:	f7ff f847 	bl	80094b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a422:	4628      	mov	r0, r5
 800a424:	f7ff f844 	bl	80094b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a428:	4823      	ldr	r0, [pc, #140]	; (800a4b8 <prvAddNewTaskToReadyList+0xd8>)
 800a42a:	f7ff f841 	bl	80094b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a42e:	4823      	ldr	r0, [pc, #140]	; (800a4bc <prvAddNewTaskToReadyList+0xdc>)
 800a430:	f7ff f83e 	bl	80094b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a434:	4822      	ldr	r0, [pc, #136]	; (800a4c0 <prvAddNewTaskToReadyList+0xe0>)
 800a436:	f7ff f83b 	bl	80094b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a43a:	4b22      	ldr	r3, [pc, #136]	; (800a4c4 <prvAddNewTaskToReadyList+0xe4>)
 800a43c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a440:	4b21      	ldr	r3, [pc, #132]	; (800a4c8 <prvAddNewTaskToReadyList+0xe8>)
 800a442:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800a444:	4a21      	ldr	r2, [pc, #132]	; (800a4cc <prvAddNewTaskToReadyList+0xec>)
 800a446:	6813      	ldr	r3, [r2, #0]
 800a448:	3301      	adds	r3, #1
 800a44a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a44c:	4a20      	ldr	r2, [pc, #128]	; (800a4d0 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a44e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a450:	6811      	ldr	r1, [r2, #0]
 800a452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a454:	428b      	cmp	r3, r1
 800a456:	d900      	bls.n	800a45a <prvAddNewTaskToReadyList+0x7a>
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	2014      	movs	r0, #20
 800a45c:	1d21      	adds	r1, r4, #4
 800a45e:	fb00 7003 	mla	r0, r0, r3, r7
 800a462:	f7ff f833 	bl	80094cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a466:	f7ff f8f1 	bl	800964c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a46a:	4b1a      	ldr	r3, [pc, #104]	; (800a4d4 <prvAddNewTaskToReadyList+0xf4>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	b173      	cbz	r3, 800a48e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a470:	6833      	ldr	r3, [r6, #0]
 800a472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a474:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a476:	429a      	cmp	r2, r3
 800a478:	d209      	bcs.n	800a48e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800a47a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a482:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	f3bf 8f6f 	isb	sy
}
 800a48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800a492:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <prvAddNewTaskToReadyList+0xf4>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1d4      	bne.n	800a444 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a49a:	6833      	ldr	r3, [r6, #0]
 800a49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d8cf      	bhi.n	800a444 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800a4a4:	6034      	str	r4, [r6, #0]
 800a4a6:	e7cd      	b.n	800a444 <prvAddNewTaskToReadyList+0x64>
 800a4a8:	20015df4 	.word	0x20015df4
 800a4ac:	20015988 	.word	0x20015988
 800a4b0:	20015994 	.word	0x20015994
 800a4b4:	20015e20 	.word	0x20015e20
 800a4b8:	20015e3c 	.word	0x20015e3c
 800a4bc:	20015e68 	.word	0x20015e68
 800a4c0:	20015e54 	.word	0x20015e54
 800a4c4:	2001598c 	.word	0x2001598c
 800a4c8:	20015990 	.word	0x20015990
 800a4cc:	20015e04 	.word	0x20015e04
 800a4d0:	20015e08 	.word	0x20015e08
 800a4d4:	20015e50 	.word	0x20015e50
 800a4d8:	20015e0c 	.word	0x20015e0c

0800a4dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4de:	4b15      	ldr	r3, [pc, #84]	; (800a534 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800a4e0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4e2:	4e15      	ldr	r6, [pc, #84]	; (800a538 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800a4e4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800a4e6:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4e8:	6830      	ldr	r0, [r6, #0]
 800a4ea:	3004      	adds	r0, #4
 800a4ec:	f7ff f811 	bl	8009512 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a4f0:	1c63      	adds	r3, r4, #1
 800a4f2:	d107      	bne.n	800a504 <prvAddCurrentTaskToDelayedList+0x28>
 800a4f4:	b137      	cbz	r7, 800a504 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4f6:	6831      	ldr	r1, [r6, #0]
 800a4f8:	4810      	ldr	r0, [pc, #64]	; (800a53c <prvAddCurrentTaskToDelayedList+0x60>)
 800a4fa:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a500:	f7fe bfe4 	b.w	80094cc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a504:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a506:	6833      	ldr	r3, [r6, #0]
 800a508:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a50a:	d307      	bcc.n	800a51c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a50c:	4b0c      	ldr	r3, [pc, #48]	; (800a540 <prvAddCurrentTaskToDelayedList+0x64>)
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	6831      	ldr	r1, [r6, #0]
}
 800a512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a516:	3104      	adds	r1, #4
 800a518:	f7fe bfe4 	b.w	80094e4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a51c:	4b09      	ldr	r3, [pc, #36]	; (800a544 <prvAddCurrentTaskToDelayedList+0x68>)
 800a51e:	6818      	ldr	r0, [r3, #0]
 800a520:	6831      	ldr	r1, [r6, #0]
 800a522:	3104      	adds	r1, #4
 800a524:	f7fe ffde 	bl	80094e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a528:	4b07      	ldr	r3, [pc, #28]	; (800a548 <prvAddCurrentTaskToDelayedList+0x6c>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	42a2      	cmp	r2, r4
 800a52e:	d900      	bls.n	800a532 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800a530:	601c      	str	r4, [r3, #0]
}
 800a532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a534:	20015e7c 	.word	0x20015e7c
 800a538:	20015988 	.word	0x20015988
 800a53c:	20015e54 	.word	0x20015e54
 800a540:	20015990 	.word	0x20015990
 800a544:	2001598c 	.word	0x2001598c
 800a548:	20015e34 	.word	0x20015e34

0800a54c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a54c:	4a06      	ldr	r2, [pc, #24]	; (800a568 <prvResetNextTaskUnblockTime+0x1c>)
 800a54e:	6813      	ldr	r3, [r2, #0]
 800a550:	6819      	ldr	r1, [r3, #0]
 800a552:	4b06      	ldr	r3, [pc, #24]	; (800a56c <prvResetNextTaskUnblockTime+0x20>)
 800a554:	b919      	cbnz	r1, 800a55e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a556:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a55a:	601a      	str	r2, [r3, #0]
}
 800a55c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a55e:	6812      	ldr	r2, [r2, #0]
 800a560:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a562:	68d2      	ldr	r2, [r2, #12]
 800a564:	6852      	ldr	r2, [r2, #4]
 800a566:	e7f8      	b.n	800a55a <prvResetNextTaskUnblockTime+0xe>
 800a568:	2001598c 	.word	0x2001598c
 800a56c:	20015e34 	.word	0x20015e34

0800a570 <prvDeleteTCB>:
	{
 800a570:	b510      	push	{r4, lr}
 800a572:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a574:	3058      	adds	r0, #88	; 0x58
 800a576:	f020 ff9f 	bl	802b4b8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a57a:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 800a57e:	b93b      	cbnz	r3, 800a590 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800a580:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a582:	f7fe ff59 	bl	8009438 <vPortFree>
				vPortFree( pxTCB );
 800a586:	4620      	mov	r0, r4
	}
 800a588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800a58c:	f7fe bf54 	b.w	8009438 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a590:	2b01      	cmp	r3, #1
 800a592:	d0f8      	beq.n	800a586 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a594:	2b02      	cmp	r3, #2
 800a596:	d00a      	beq.n	800a5ae <prvDeleteTCB+0x3e>
 800a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59c:	b672      	cpsid	i
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	b662      	cpsie	i
 800a5ac:	e7fe      	b.n	800a5ac <prvDeleteTCB+0x3c>
	}
 800a5ae:	bd10      	pop	{r4, pc}

0800a5b0 <prvIdleTask>:
{
 800a5b0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5b2:	4c14      	ldr	r4, [pc, #80]	; (800a604 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b4:	4f14      	ldr	r7, [pc, #80]	; (800a608 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800a5b6:	4d15      	ldr	r5, [pc, #84]	; (800a60c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	b983      	cbnz	r3, 800a5de <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5bc:	4b14      	ldr	r3, [pc, #80]	; (800a610 <prvIdleTask+0x60>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d909      	bls.n	800a5d8 <prvIdleTask+0x28>
				taskYIELD();
 800a5c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a5c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800a5d8:	f7f6 fc30 	bl	8000e3c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a5dc:	e7eb      	b.n	800a5b6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800a5de:	f7ff f811 	bl	8009604 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5e6:	1d30      	adds	r0, r6, #4
 800a5e8:	f7fe ff93 	bl	8009512 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800a5f8:	f7ff f828 	bl	800964c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	f7ff ffb7 	bl	800a570 <prvDeleteTCB>
 800a602:	e7d9      	b.n	800a5b8 <prvIdleTask+0x8>
 800a604:	20015df8 	.word	0x20015df8
 800a608:	20015e68 	.word	0x20015e68
 800a60c:	20015df4 	.word	0x20015df4
 800a610:	20015994 	.word	0x20015994

0800a614 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a618:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a61c:	4606      	mov	r6, r0
 800a61e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a620:	21a5      	movs	r1, #165	; 0xa5
 800a622:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a624:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a626:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a62a:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a62e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a630:	f020 fb5e 	bl	802acf0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a634:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a636:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a638:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800a63c:	2d00      	cmp	r5, #0
 800a63e:	d042      	beq.n	800a6c6 <prvInitialiseNewTask.constprop.0+0xb2>
 800a640:	1e6b      	subs	r3, r5, #1
 800a642:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800a646:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a648:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800a64c:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800a650:	b108      	cbz	r0, 800a656 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a652:	42ab      	cmp	r3, r5
 800a654:	d1f8      	bne.n	800a648 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a656:	2300      	movs	r3, #0
 800a658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a65c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800a65e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a662:	1d20      	adds	r0, r4, #4
 800a664:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800a666:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800a66a:	bf28      	it	cs
 800a66c:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a66e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a670:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a672:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a676:	f7fe ff26 	bl	80094c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a67a:	f104 0018 	add.w	r0, r4, #24
 800a67e:	f7fe ff22 	bl	80094c6 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a682:	2260      	movs	r2, #96	; 0x60
 800a684:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800a686:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a68a:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a68e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a690:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a692:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800a694:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a698:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a69c:	f020 fb28 	bl	802acf0 <memset>
 800a6a0:	4b0a      	ldr	r3, [pc, #40]	; (800a6cc <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6a2:	463a      	mov	r2, r7
 800a6a4:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a6a6:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6a8:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a6aa:	4b09      	ldr	r3, [pc, #36]	; (800a6d0 <prvInitialiseNewTask.constprop.0+0xbc>)
 800a6ac:	6623      	str	r3, [r4, #96]	; 0x60
 800a6ae:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <prvInitialiseNewTask.constprop.0+0xc0>)
 800a6b0:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6b2:	f7fe ff81 	bl	80095b8 <pxPortInitialiseStack>
 800a6b6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a6b8:	f1b8 0f00 	cmp.w	r8, #0
 800a6bc:	d001      	beq.n	800a6c2 <prvInitialiseNewTask.constprop.0+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6be:	f8c8 4000 	str.w	r4, [r8]
}
 800a6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a6c6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800a6ca:	e7c7      	b.n	800a65c <prvInitialiseNewTask.constprop.0+0x48>
 800a6cc:	08030b1c 	.word	0x08030b1c
 800a6d0:	08030b3c 	.word	0x08030b3c
 800a6d4:	08030afc 	.word	0x08030afc

0800a6d8 <xTaskCreateStatic>:
	{
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a6e0:	b955      	cbnz	r5, 800a6f8 <xTaskCreateStatic+0x20>
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	b672      	cpsid	i
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	b662      	cpsie	i
 800a6f6:	e7fe      	b.n	800a6f6 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800a6f8:	b954      	cbnz	r4, 800a710 <xTaskCreateStatic+0x38>
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	b672      	cpsid	i
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	b662      	cpsie	i
 800a70e:	e7fe      	b.n	800a70e <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a710:	26c0      	movs	r6, #192	; 0xc0
 800a712:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a714:	9e05      	ldr	r6, [sp, #20]
 800a716:	2ec0      	cmp	r6, #192	; 0xc0
 800a718:	d00a      	beq.n	800a730 <xTaskCreateStatic+0x58>
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	b672      	cpsid	i
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	b662      	cpsie	i
 800a72e:	e7fe      	b.n	800a72e <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a730:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a732:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a734:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a736:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a73a:	ad04      	add	r5, sp, #16
 800a73c:	9402      	str	r4, [sp, #8]
 800a73e:	9501      	str	r5, [sp, #4]
 800a740:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a742:	9500      	str	r5, [sp, #0]
 800a744:	f7ff ff66 	bl	800a614 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a748:	4620      	mov	r0, r4
 800a74a:	f7ff fe49 	bl	800a3e0 <prvAddNewTaskToReadyList>
	}
 800a74e:	9804      	ldr	r0, [sp, #16]
 800a750:	b006      	add	sp, #24
 800a752:	bd70      	pop	{r4, r5, r6, pc}

0800a754 <xTaskCreate>:
	{
 800a754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a758:	4607      	mov	r7, r0
 800a75a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a75c:	0090      	lsls	r0, r2, #2
	{
 800a75e:	4688      	mov	r8, r1
 800a760:	4616      	mov	r6, r2
 800a762:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a764:	f7fe fdd2 	bl	800930c <pvPortMalloc>
			if( pxStack != NULL )
 800a768:	4605      	mov	r5, r0
 800a76a:	b1e8      	cbz	r0, 800a7a8 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a76c:	20c0      	movs	r0, #192	; 0xc0
 800a76e:	f7fe fdcd 	bl	800930c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a772:	4604      	mov	r4, r0
 800a774:	b1a8      	cbz	r0, 800a7a2 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a776:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800a778:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a77a:	4632      	mov	r2, r6
 800a77c:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a77e:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a784:	9002      	str	r0, [sp, #8]
 800a786:	4638      	mov	r0, r7
 800a788:	9301      	str	r3, [sp, #4]
 800a78a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	464b      	mov	r3, r9
 800a790:	f7ff ff40 	bl	800a614 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a794:	4620      	mov	r0, r4
 800a796:	f7ff fe23 	bl	800a3e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a79a:	2001      	movs	r0, #1
	}
 800a79c:	b005      	add	sp, #20
 800a79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f7fe fe48 	bl	8009438 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800a7ac:	e7f6      	b.n	800a79c <xTaskCreate+0x48>
	...

0800a7b0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a7b0:	4a02      	ldr	r2, [pc, #8]	; (800a7bc <vTaskSuspendAll+0xc>)
 800a7b2:	6813      	ldr	r3, [r2, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	6013      	str	r3, [r2, #0]
}
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20015e00 	.word	0x20015e00

0800a7c0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a7c0:	4b01      	ldr	r3, [pc, #4]	; (800a7c8 <xTaskGetTickCount+0x8>)
 800a7c2:	6818      	ldr	r0, [r3, #0]
}
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	20015e7c 	.word	0x20015e7c

0800a7cc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7cc:	4b40      	ldr	r3, [pc, #256]	; (800a8d0 <xTaskIncrementTick+0x104>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
{
 800a7d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d174      	bne.n	800a8c2 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7d8:	4b3e      	ldr	r3, [pc, #248]	; (800a8d4 <xTaskIncrementTick+0x108>)
 800a7da:	681d      	ldr	r5, [r3, #0]
 800a7dc:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a7de:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7e0:	b9cd      	cbnz	r5, 800a816 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800a7e2:	4b3d      	ldr	r3, [pc, #244]	; (800a8d8 <xTaskIncrementTick+0x10c>)
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	6812      	ldr	r2, [r2, #0]
 800a7e8:	b152      	cbz	r2, 800a800 <xTaskIncrementTick+0x34>
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	b672      	cpsid	i
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	b662      	cpsie	i
 800a7fe:	e7fe      	b.n	800a7fe <xTaskIncrementTick+0x32>
 800a800:	4a36      	ldr	r2, [pc, #216]	; (800a8dc <xTaskIncrementTick+0x110>)
 800a802:	6819      	ldr	r1, [r3, #0]
 800a804:	6810      	ldr	r0, [r2, #0]
 800a806:	6018      	str	r0, [r3, #0]
 800a808:	6011      	str	r1, [r2, #0]
 800a80a:	4a35      	ldr	r2, [pc, #212]	; (800a8e0 <xTaskIncrementTick+0x114>)
 800a80c:	6813      	ldr	r3, [r2, #0]
 800a80e:	3301      	adds	r3, #1
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	f7ff fe9b 	bl	800a54c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a816:	4e33      	ldr	r6, [pc, #204]	; (800a8e4 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800a818:	2400      	movs	r4, #0
 800a81a:	4f33      	ldr	r7, [pc, #204]	; (800a8e8 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a81c:	6833      	ldr	r3, [r6, #0]
 800a81e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a8f4 <xTaskIncrementTick+0x128>
 800a822:	42ab      	cmp	r3, r5
 800a824:	d911      	bls.n	800a84a <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a826:	f8d8 3000 	ldr.w	r3, [r8]
 800a82a:	2214      	movs	r2, #20
 800a82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82e:	4353      	muls	r3, r2
 800a830:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800a832:	2b02      	cmp	r3, #2
 800a834:	bf28      	it	cs
 800a836:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800a838:	4b2c      	ldr	r3, [pc, #176]	; (800a8ec <xTaskIncrementTick+0x120>)
 800a83a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800a83c:	2b00      	cmp	r3, #0
}
 800a83e:	bf0c      	ite	eq
 800a840:	4620      	moveq	r0, r4
 800a842:	2001      	movne	r0, #1
 800a844:	b003      	add	sp, #12
 800a846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a84a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a8d8 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800a84e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a8f8 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a852:	f8d9 3000 	ldr.w	r3, [r9]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	b91b      	cbnz	r3, 800a862 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	6033      	str	r3, [r6, #0]
					break;
 800a860:	e7e1      	b.n	800a826 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a862:	f8d9 3000 	ldr.w	r3, [r9]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a86c:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800a870:	4295      	cmp	r5, r2
 800a872:	d201      	bcs.n	800a878 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800a874:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a876:	e7d6      	b.n	800a826 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a878:	f10b 0104 	add.w	r1, fp, #4
 800a87c:	4608      	mov	r0, r1
 800a87e:	9101      	str	r1, [sp, #4]
 800a880:	f7fe fe47 	bl	8009512 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a884:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800a888:	9901      	ldr	r1, [sp, #4]
 800a88a:	b122      	cbz	r2, 800a896 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a88c:	f10b 0018 	add.w	r0, fp, #24
 800a890:	f7fe fe3f 	bl	8009512 <uxListRemove>
 800a894:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800a896:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800a89a:	f8da 2000 	ldr.w	r2, [sl]
 800a89e:	4290      	cmp	r0, r2
 800a8a0:	d901      	bls.n	800a8a6 <xTaskIncrementTick+0xda>
 800a8a2:	f8ca 0000 	str.w	r0, [sl]
 800a8a6:	2314      	movs	r3, #20
 800a8a8:	fb03 7000 	mla	r0, r3, r0, r7
 800a8ac:	f7fe fe0e 	bl	80094cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8b0:	f8d8 1000 	ldr.w	r1, [r8]
 800a8b4:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a8b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	bf28      	it	cs
 800a8be:	2401      	movcs	r4, #1
 800a8c0:	e7c7      	b.n	800a852 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800a8c2:	4a0b      	ldr	r2, [pc, #44]	; (800a8f0 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800a8c4:	2400      	movs	r4, #0
		++uxPendedTicks;
 800a8c6:	6813      	ldr	r3, [r2, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	e7b4      	b.n	800a838 <xTaskIncrementTick+0x6c>
 800a8ce:	bf00      	nop
 800a8d0:	20015e00 	.word	0x20015e00
 800a8d4:	20015e7c 	.word	0x20015e7c
 800a8d8:	2001598c 	.word	0x2001598c
 800a8dc:	20015990 	.word	0x20015990
 800a8e0:	20015e38 	.word	0x20015e38
 800a8e4:	20015e34 	.word	0x20015e34
 800a8e8:	20015994 	.word	0x20015994
 800a8ec:	20015e80 	.word	0x20015e80
 800a8f0:	20015dfc 	.word	0x20015dfc
 800a8f4:	20015988 	.word	0x20015988
 800a8f8:	20015e08 	.word	0x20015e08

0800a8fc <xTaskResumeAll>:
{
 800a8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800a8fe:	4c32      	ldr	r4, [pc, #200]	; (800a9c8 <xTaskResumeAll+0xcc>)
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	b953      	cbnz	r3, 800a91a <xTaskResumeAll+0x1e>
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	b672      	cpsid	i
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	b662      	cpsie	i
 800a918:	e7fe      	b.n	800a918 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800a91a:	f7fe fe73 	bl	8009604 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	3b01      	subs	r3, #1
 800a922:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a924:	6824      	ldr	r4, [r4, #0]
 800a926:	b12c      	cbz	r4, 800a934 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800a928:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a92a:	f7fe fe8f 	bl	800964c <vPortExitCritical>
}
 800a92e:	4620      	mov	r0, r4
 800a930:	b003      	add	sp, #12
 800a932:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a934:	4b25      	ldr	r3, [pc, #148]	; (800a9cc <xTaskResumeAll+0xd0>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d0f5      	beq.n	800a928 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a93c:	4d24      	ldr	r5, [pc, #144]	; (800a9d0 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800a93e:	4e25      	ldr	r6, [pc, #148]	; (800a9d4 <xTaskResumeAll+0xd8>)
 800a940:	4f25      	ldr	r7, [pc, #148]	; (800a9d8 <xTaskResumeAll+0xdc>)
 800a942:	e01e      	b.n	800a982 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a944:	68eb      	ldr	r3, [r5, #12]
 800a946:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a948:	f104 0018 	add.w	r0, r4, #24
 800a94c:	f7fe fde1 	bl	8009512 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a950:	1d21      	adds	r1, r4, #4
 800a952:	4608      	mov	r0, r1
 800a954:	9101      	str	r1, [sp, #4]
 800a956:	f7fe fddc 	bl	8009512 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a95a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a95c:	6832      	ldr	r2, [r6, #0]
 800a95e:	9901      	ldr	r1, [sp, #4]
 800a960:	4293      	cmp	r3, r2
 800a962:	d900      	bls.n	800a966 <xTaskResumeAll+0x6a>
 800a964:	6033      	str	r3, [r6, #0]
 800a966:	2014      	movs	r0, #20
 800a968:	fb00 7003 	mla	r0, r0, r3, r7
 800a96c:	f7fe fdae 	bl	80094cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a970:	4b1a      	ldr	r3, [pc, #104]	; (800a9dc <xTaskResumeAll+0xe0>)
 800a972:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	429a      	cmp	r2, r3
 800a97a:	d302      	bcc.n	800a982 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800a97c:	4b18      	ldr	r3, [pc, #96]	; (800a9e0 <xTaskResumeAll+0xe4>)
 800a97e:	2201      	movs	r2, #1
 800a980:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a982:	682b      	ldr	r3, [r5, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1dd      	bne.n	800a944 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800a988:	b10c      	cbz	r4, 800a98e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800a98a:	f7ff fddf 	bl	800a54c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a98e:	4d15      	ldr	r5, [pc, #84]	; (800a9e4 <xTaskResumeAll+0xe8>)
 800a990:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a992:	b144      	cbz	r4, 800a9a6 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800a994:	4e12      	ldr	r6, [pc, #72]	; (800a9e0 <xTaskResumeAll+0xe4>)
 800a996:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800a998:	f7ff ff18 	bl	800a7cc <xTaskIncrementTick>
 800a99c:	b100      	cbz	r0, 800a9a0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800a99e:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a9a0:	3c01      	subs	r4, #1
 800a9a2:	d1f9      	bne.n	800a998 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800a9a4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800a9a6:	4b0e      	ldr	r3, [pc, #56]	; (800a9e0 <xTaskResumeAll+0xe4>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0bc      	beq.n	800a928 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 800a9ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a9c2:	2401      	movs	r4, #1
 800a9c4:	e7b1      	b.n	800a92a <xTaskResumeAll+0x2e>
 800a9c6:	bf00      	nop
 800a9c8:	20015e00 	.word	0x20015e00
 800a9cc:	20015df4 	.word	0x20015df4
 800a9d0:	20015e3c 	.word	0x20015e3c
 800a9d4:	20015e08 	.word	0x20015e08
 800a9d8:	20015994 	.word	0x20015994
 800a9dc:	20015988 	.word	0x20015988
 800a9e0:	20015e80 	.word	0x20015e80
 800a9e4:	20015dfc 	.word	0x20015dfc

0800a9e8 <vTaskDelay>:
	{
 800a9e8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9ea:	b950      	cbnz	r0, 800aa02 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800a9ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
	}
 800aa00:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800aa02:	4b0b      	ldr	r3, [pc, #44]	; (800aa30 <vTaskDelay+0x48>)
 800aa04:	6819      	ldr	r1, [r3, #0]
 800aa06:	b151      	cbz	r1, 800aa1e <vTaskDelay+0x36>
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	b672      	cpsid	i
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	b662      	cpsie	i
 800aa1c:	e7fe      	b.n	800aa1c <vTaskDelay+0x34>
			vTaskSuspendAll();
 800aa1e:	f7ff fec7 	bl	800a7b0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa22:	f7ff fd5b 	bl	800a4dc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800aa26:	f7ff ff69 	bl	800a8fc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d0de      	beq.n	800a9ec <vTaskDelay+0x4>
 800aa2e:	e7e7      	b.n	800aa00 <vTaskDelay+0x18>
 800aa30:	20015e00 	.word	0x20015e00

0800aa34 <vTaskSetApplicationTaskTag>:
	{
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	460d      	mov	r5, r1
		if( xTask == NULL )
 800aa38:	4604      	mov	r4, r0
 800aa3a:	b908      	cbnz	r0, 800aa40 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800aa3c:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <vTaskSetApplicationTaskTag+0x1c>)
 800aa3e:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800aa40:	f7fe fde0 	bl	8009604 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800aa44:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800aa46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800aa4a:	f7fe bdff 	b.w	800964c <vPortExitCritical>
 800aa4e:	bf00      	nop
 800aa50:	20015988 	.word	0x20015988

0800aa54 <xTaskCallApplicationTaskHook>:
	{
 800aa54:	4603      	mov	r3, r0
 800aa56:	4608      	mov	r0, r1
		if( xTask == NULL )
 800aa58:	b90b      	cbnz	r3, 800aa5e <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800aa5a:	4b03      	ldr	r3, [pc, #12]	; (800aa68 <xTaskCallApplicationTaskHook+0x14>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800aa5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa60:	b103      	cbz	r3, 800aa64 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800aa62:	4718      	bx	r3
	}
 800aa64:	4618      	mov	r0, r3
 800aa66:	4770      	bx	lr
 800aa68:	20015988 	.word	0x20015988

0800aa6c <vTaskStartScheduler>:
{
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa70:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa72:	aa07      	add	r2, sp, #28
 800aa74:	a906      	add	r1, sp, #24
 800aa76:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa78:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa7c:	f7fe fc0a 	bl	8009294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa80:	9b05      	ldr	r3, [sp, #20]
 800aa82:	9a07      	ldr	r2, [sp, #28]
 800aa84:	9302      	str	r3, [sp, #8]
 800aa86:	9b06      	ldr	r3, [sp, #24]
 800aa88:	491d      	ldr	r1, [pc, #116]	; (800ab00 <vTaskStartScheduler+0x94>)
 800aa8a:	481e      	ldr	r0, [pc, #120]	; (800ab04 <vTaskStartScheduler+0x98>)
 800aa8c:	e9cd 4300 	strd	r4, r3, [sp]
 800aa90:	4623      	mov	r3, r4
 800aa92:	f7ff fe21 	bl	800a6d8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d030      	beq.n	800aafc <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 800aa9a:	f000 faaf 	bl	800affc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800aa9e:	2801      	cmp	r0, #1
 800aaa0:	d11f      	bne.n	800aae2 <vTaskStartScheduler+0x76>
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	b672      	cpsid	i
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aab6:	4a14      	ldr	r2, [pc, #80]	; (800ab08 <vTaskStartScheduler+0x9c>)
 800aab8:	4914      	ldr	r1, [pc, #80]	; (800ab0c <vTaskStartScheduler+0xa0>)
 800aaba:	6813      	ldr	r3, [r2, #0]
 800aabc:	3358      	adds	r3, #88	; 0x58
 800aabe:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800aac0:	f04f 31ff 	mov.w	r1, #4294967295
 800aac4:	4b12      	ldr	r3, [pc, #72]	; (800ab10 <vTaskStartScheduler+0xa4>)
 800aac6:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800aac8:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800aaca:	4b12      	ldr	r3, [pc, #72]	; (800ab14 <vTaskStartScheduler+0xa8>)
 800aacc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aace:	4b12      	ldr	r3, [pc, #72]	; (800ab18 <vTaskStartScheduler+0xac>)
 800aad0:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800aad2:	6810      	ldr	r0, [r2, #0]
 800aad4:	f7ff ffbe 	bl	800aa54 <xTaskCallApplicationTaskHook>
}
 800aad8:	b008      	add	sp, #32
 800aada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800aade:	f7fe be2b 	b.w	8009738 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aae2:	3001      	adds	r0, #1
 800aae4:	d10a      	bne.n	800aafc <vTaskStartScheduler+0x90>
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	b672      	cpsid	i
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	b662      	cpsie	i
 800aafa:	e7fe      	b.n	800aafa <vTaskStartScheduler+0x8e>
}
 800aafc:	b008      	add	sp, #32
 800aafe:	bd10      	pop	{r4, pc}
 800ab00:	0802e454 	.word	0x0802e454
 800ab04:	0800a5b1 	.word	0x0800a5b1
 800ab08:	20015988 	.word	0x20015988
 800ab0c:	200000bc 	.word	0x200000bc
 800ab10:	20015e34 	.word	0x20015e34
 800ab14:	20015e50 	.word	0x20015e50
 800ab18:	20015e7c 	.word	0x20015e7c

0800ab1c <vTaskSwitchContext>:
{
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab1e:	4b1e      	ldr	r3, [pc, #120]	; (800ab98 <vTaskSwitchContext+0x7c>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	4b1e      	ldr	r3, [pc, #120]	; (800ab9c <vTaskSwitchContext+0x80>)
 800ab24:	b112      	cbz	r2, 800ab2c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800ab26:	2201      	movs	r2, #1
 800ab28:	601a      	str	r2, [r3, #0]
}
 800ab2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800ab2c:	4c1c      	ldr	r4, [pc, #112]	; (800aba0 <vTaskSwitchContext+0x84>)
 800ab2e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab30:	4e1c      	ldr	r6, [pc, #112]	; (800aba4 <vTaskSwitchContext+0x88>)
 800ab32:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800ab34:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800ab36:	6820      	ldr	r0, [r4, #0]
 800ab38:	f7ff ff8c 	bl	800aa54 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab3c:	6832      	ldr	r2, [r6, #0]
 800ab3e:	491a      	ldr	r1, [pc, #104]	; (800aba8 <vTaskSwitchContext+0x8c>)
 800ab40:	fb07 f302 	mul.w	r3, r7, r2
 800ab44:	58cd      	ldr	r5, [r1, r3]
 800ab46:	18c8      	adds	r0, r1, r3
 800ab48:	b1c5      	cbz	r5, 800ab7c <vTaskSwitchContext+0x60>
 800ab4a:	6845      	ldr	r5, [r0, #4]
 800ab4c:	3308      	adds	r3, #8
 800ab4e:	686d      	ldr	r5, [r5, #4]
 800ab50:	440b      	add	r3, r1
 800ab52:	429d      	cmp	r5, r3
 800ab54:	6045      	str	r5, [r0, #4]
 800ab56:	bf04      	itt	eq
 800ab58:	686b      	ldreq	r3, [r5, #4]
 800ab5a:	6043      	streq	r3, [r0, #4]
 800ab5c:	2314      	movs	r3, #20
 800ab5e:	fb03 1102 	mla	r1, r3, r2, r1
 800ab62:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800ab64:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800ab6c:	6820      	ldr	r0, [r4, #0]
 800ab6e:	f7ff ff71 	bl	800aa54 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	4a0d      	ldr	r2, [pc, #52]	; (800abac <vTaskSwitchContext+0x90>)
 800ab76:	3358      	adds	r3, #88	; 0x58
 800ab78:	6013      	str	r3, [r2, #0]
}
 800ab7a:	e7d6      	b.n	800ab2a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab7c:	b952      	cbnz	r2, 800ab94 <vTaskSwitchContext+0x78>
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	b672      	cpsid	i
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	b662      	cpsie	i
 800ab92:	e7fe      	b.n	800ab92 <vTaskSwitchContext+0x76>
 800ab94:	3a01      	subs	r2, #1
 800ab96:	e7d3      	b.n	800ab40 <vTaskSwitchContext+0x24>
 800ab98:	20015e00 	.word	0x20015e00
 800ab9c:	20015e80 	.word	0x20015e80
 800aba0:	20015988 	.word	0x20015988
 800aba4:	20015e08 	.word	0x20015e08
 800aba8:	20015994 	.word	0x20015994
 800abac:	200000bc 	.word	0x200000bc

0800abb0 <vTaskPlaceOnEventList>:
{
 800abb0:	b510      	push	{r4, lr}
 800abb2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800abb4:	b950      	cbnz	r0, 800abcc <vTaskPlaceOnEventList+0x1c>
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	b672      	cpsid	i
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	b662      	cpsie	i
 800abca:	e7fe      	b.n	800abca <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <vTaskPlaceOnEventList+0x34>)
 800abce:	6819      	ldr	r1, [r3, #0]
 800abd0:	3118      	adds	r1, #24
 800abd2:	f7fe fc87 	bl	80094e4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abd6:	4620      	mov	r0, r4
 800abd8:	2101      	movs	r1, #1
}
 800abda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abde:	f7ff bc7d 	b.w	800a4dc <prvAddCurrentTaskToDelayedList>
 800abe2:	bf00      	nop
 800abe4:	20015988 	.word	0x20015988

0800abe8 <vTaskPlaceOnEventListRestricted>:
	{
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	460d      	mov	r5, r1
 800abec:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800abee:	b950      	cbnz	r0, 800ac06 <vTaskPlaceOnEventListRestricted+0x1e>
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	b672      	cpsid	i
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	b662      	cpsie	i
 800ac04:	e7fe      	b.n	800ac04 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac06:	4b07      	ldr	r3, [pc, #28]	; (800ac24 <vTaskPlaceOnEventListRestricted+0x3c>)
 800ac08:	6819      	ldr	r1, [r3, #0]
 800ac0a:	3118      	adds	r1, #24
 800ac0c:	f7fe fc5e 	bl	80094cc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800ac10:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac12:	4621      	mov	r1, r4
 800ac14:	bf0c      	ite	eq
 800ac16:	4628      	moveq	r0, r5
 800ac18:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800ac1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac20:	f7ff bc5c 	b.w	800a4dc <prvAddCurrentTaskToDelayedList>
 800ac24:	20015988 	.word	0x20015988

0800ac28 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac28:	68c3      	ldr	r3, [r0, #12]
{
 800ac2a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac2c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ac2e:	b954      	cbnz	r4, 800ac46 <xTaskRemoveFromEventList+0x1e>
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	b672      	cpsid	i
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	b662      	cpsie	i
 800ac44:	e7fe      	b.n	800ac44 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac46:	f104 0118 	add.w	r1, r4, #24
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	9101      	str	r1, [sp, #4]
 800ac4e:	f7fe fc60 	bl	8009512 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac52:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <xTaskRemoveFromEventList+0x74>)
 800ac54:	9901      	ldr	r1, [sp, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	b9e3      	cbnz	r3, 800ac94 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac5a:	1d21      	adds	r1, r4, #4
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	9101      	str	r1, [sp, #4]
 800ac60:	f7fe fc57 	bl	8009512 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac64:	4a0e      	ldr	r2, [pc, #56]	; (800aca0 <xTaskRemoveFromEventList+0x78>)
 800ac66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ac68:	6810      	ldr	r0, [r2, #0]
 800ac6a:	9901      	ldr	r1, [sp, #4]
 800ac6c:	4283      	cmp	r3, r0
 800ac6e:	d900      	bls.n	800ac72 <xTaskRemoveFromEventList+0x4a>
 800ac70:	6013      	str	r3, [r2, #0]
 800ac72:	4a0c      	ldr	r2, [pc, #48]	; (800aca4 <xTaskRemoveFromEventList+0x7c>)
 800ac74:	2014      	movs	r0, #20
 800ac76:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac7a:	f7fe fc27 	bl	80094cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac7e:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <xTaskRemoveFromEventList+0x80>)
 800ac80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d906      	bls.n	800ac98 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	4b07      	ldr	r3, [pc, #28]	; (800acac <xTaskRemoveFromEventList+0x84>)
 800ac8e:	6018      	str	r0, [r3, #0]
}
 800ac90:	b002      	add	sp, #8
 800ac92:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac94:	4806      	ldr	r0, [pc, #24]	; (800acb0 <xTaskRemoveFromEventList+0x88>)
 800ac96:	e7f0      	b.n	800ac7a <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800ac98:	2000      	movs	r0, #0
	return xReturn;
 800ac9a:	e7f9      	b.n	800ac90 <xTaskRemoveFromEventList+0x68>
 800ac9c:	20015e00 	.word	0x20015e00
 800aca0:	20015e08 	.word	0x20015e08
 800aca4:	20015994 	.word	0x20015994
 800aca8:	20015988 	.word	0x20015988
 800acac:	20015e80 	.word	0x20015e80
 800acb0:	20015e3c 	.word	0x20015e3c

0800acb4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acb4:	4b03      	ldr	r3, [pc, #12]	; (800acc4 <vTaskInternalSetTimeOutState+0x10>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acba:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <vTaskInternalSetTimeOutState+0x14>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	6043      	str	r3, [r0, #4]
}
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	20015e38 	.word	0x20015e38
 800acc8:	20015e7c 	.word	0x20015e7c

0800accc <xTaskCheckForTimeOut>:
{
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800acd0:	4605      	mov	r5, r0
 800acd2:	b950      	cbnz	r0, 800acea <xTaskCheckForTimeOut+0x1e>
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	b672      	cpsid	i
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	b662      	cpsie	i
 800ace8:	e7fe      	b.n	800ace8 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800acea:	b951      	cbnz	r1, 800ad02 <xTaskCheckForTimeOut+0x36>
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	b672      	cpsid	i
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	b662      	cpsie	i
 800ad00:	e7fe      	b.n	800ad00 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800ad02:	f7fe fc7f 	bl	8009604 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ad06:	4b0f      	ldr	r3, [pc, #60]	; (800ad44 <xTaskCheckForTimeOut+0x78>)
 800ad08:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	1c5a      	adds	r2, r3, #1
 800ad0e:	d010      	beq.n	800ad32 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad10:	480d      	ldr	r0, [pc, #52]	; (800ad48 <xTaskCheckForTimeOut+0x7c>)
 800ad12:	682e      	ldr	r6, [r5, #0]
 800ad14:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad16:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad18:	4286      	cmp	r6, r0
 800ad1a:	d001      	beq.n	800ad20 <xTaskCheckForTimeOut+0x54>
 800ad1c:	428a      	cmp	r2, r1
 800ad1e:	d90f      	bls.n	800ad40 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad20:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad22:	4283      	cmp	r3, r0
 800ad24:	d90a      	bls.n	800ad3c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800ad26:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad28:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ad2a:	4413      	add	r3, r2
 800ad2c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad2e:	f7ff ffc1 	bl	800acb4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ad32:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ad34:	f7fe fc8a 	bl	800964c <vPortExitCritical>
}
 800ad38:	4620      	mov	r0, r4
 800ad3a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ad40:	2401      	movs	r4, #1
 800ad42:	e7f7      	b.n	800ad34 <xTaskCheckForTimeOut+0x68>
 800ad44:	20015e7c 	.word	0x20015e7c
 800ad48:	20015e38 	.word	0x20015e38

0800ad4c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ad4c:	4b01      	ldr	r3, [pc, #4]	; (800ad54 <vTaskMissedYield+0x8>)
 800ad4e:	2201      	movs	r2, #1
 800ad50:	601a      	str	r2, [r3, #0]
}
 800ad52:	4770      	bx	lr
 800ad54:	20015e80 	.word	0x20015e80

0800ad58 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ad58:	4b01      	ldr	r3, [pc, #4]	; (800ad60 <xTaskGetCurrentTaskHandle+0x8>)
 800ad5a:	6818      	ldr	r0, [r3, #0]
	}
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	20015988 	.word	0x20015988

0800ad64 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ad64:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <xTaskGetSchedulerState+0x18>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	b133      	cbz	r3, 800ad78 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad6a:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <xTaskGetSchedulerState+0x1c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bf0c      	ite	eq
 800ad72:	2002      	moveq	r0, #2
 800ad74:	2000      	movne	r0, #0
 800ad76:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad78:	2001      	movs	r0, #1
	}
 800ad7a:	4770      	bx	lr
 800ad7c:	20015e50 	.word	0x20015e50
 800ad80:	20015e00 	.word	0x20015e00

0800ad84 <xTaskPriorityInherit>:
	{
 800ad84:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800ad86:	4604      	mov	r4, r0
 800ad88:	b340      	cbz	r0, 800addc <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ad8a:	4d1b      	ldr	r5, [pc, #108]	; (800adf8 <xTaskPriorityInherit+0x74>)
 800ad8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ad8e:	682a      	ldr	r2, [r5, #0]
 800ad90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d228      	bcs.n	800ade8 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad96:	6982      	ldr	r2, [r0, #24]
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	db04      	blt.n	800ada6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad9c:	682a      	ldr	r2, [r5, #0]
 800ad9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ada0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ada4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ada6:	2214      	movs	r2, #20
 800ada8:	4e14      	ldr	r6, [pc, #80]	; (800adfc <xTaskPriorityInherit+0x78>)
 800adaa:	fb02 6303 	mla	r3, r2, r3, r6
 800adae:	6962      	ldr	r2, [r4, #20]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d115      	bne.n	800ade0 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adb4:	1d21      	adds	r1, r4, #4
 800adb6:	4608      	mov	r0, r1
 800adb8:	9101      	str	r1, [sp, #4]
 800adba:	f7fe fbaa 	bl	8009512 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800adbe:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800adc0:	4a0f      	ldr	r2, [pc, #60]	; (800ae00 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800adc4:	6810      	ldr	r0, [r2, #0]
 800adc6:	9901      	ldr	r1, [sp, #4]
 800adc8:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800adca:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800adcc:	d900      	bls.n	800add0 <xTaskPriorityInherit+0x4c>
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	2014      	movs	r0, #20
 800add2:	fb00 6003 	mla	r0, r0, r3, r6
 800add6:	f7fe fb79 	bl	80094cc <vListInsertEnd>
				xReturn = pdTRUE;
 800adda:	2001      	movs	r0, #1
	}
 800addc:	b002      	add	sp, #8
 800adde:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ade6:	e7f8      	b.n	800adda <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800adec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800adee:	42a0      	cmp	r0, r4
 800adf0:	bf2c      	ite	cs
 800adf2:	2000      	movcs	r0, #0
 800adf4:	2001      	movcc	r0, #1
 800adf6:	e7f1      	b.n	800addc <xTaskPriorityInherit+0x58>
 800adf8:	20015988 	.word	0x20015988
 800adfc:	20015994 	.word	0x20015994
 800ae00:	20015e08 	.word	0x20015e08

0800ae04 <xTaskPriorityDisinherit>:
	{
 800ae04:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800ae06:	b910      	cbnz	r0, 800ae0e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800ae08:	2000      	movs	r0, #0
	}
 800ae0a:	b002      	add	sp, #8
 800ae0c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ae0e:	4b1e      	ldr	r3, [pc, #120]	; (800ae88 <xTaskPriorityDisinherit+0x84>)
 800ae10:	681c      	ldr	r4, [r3, #0]
 800ae12:	4284      	cmp	r4, r0
 800ae14:	d00a      	beq.n	800ae2c <xTaskPriorityDisinherit+0x28>
 800ae16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1a:	b672      	cpsid	i
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	b662      	cpsie	i
 800ae2a:	e7fe      	b.n	800ae2a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ae2e:	b953      	cbnz	r3, 800ae46 <xTaskPriorityDisinherit+0x42>
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	b672      	cpsid	i
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	b662      	cpsie	i
 800ae44:	e7fe      	b.n	800ae44 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ae48:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae4a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ae4c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae4e:	4291      	cmp	r1, r2
 800ae50:	d0da      	beq.n	800ae08 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1d8      	bne.n	800ae08 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae56:	1d21      	adds	r1, r4, #4
 800ae58:	4608      	mov	r0, r1
 800ae5a:	9101      	str	r1, [sp, #4]
 800ae5c:	f7fe fb59 	bl	8009512 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800ae62:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae68:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae6a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae6c:	4a07      	ldr	r2, [pc, #28]	; (800ae8c <xTaskPriorityDisinherit+0x88>)
 800ae6e:	6810      	ldr	r0, [r2, #0]
 800ae70:	4283      	cmp	r3, r0
 800ae72:	d900      	bls.n	800ae76 <xTaskPriorityDisinherit+0x72>
 800ae74:	6013      	str	r3, [r2, #0]
 800ae76:	4a06      	ldr	r2, [pc, #24]	; (800ae90 <xTaskPriorityDisinherit+0x8c>)
 800ae78:	2014      	movs	r0, #20
 800ae7a:	fb00 2003 	mla	r0, r0, r3, r2
 800ae7e:	f7fe fb25 	bl	80094cc <vListInsertEnd>
					xReturn = pdTRUE;
 800ae82:	2001      	movs	r0, #1
		return xReturn;
 800ae84:	e7c1      	b.n	800ae0a <xTaskPriorityDisinherit+0x6>
 800ae86:	bf00      	nop
 800ae88:	20015988 	.word	0x20015988
 800ae8c:	20015e08 	.word	0x20015e08
 800ae90:	20015994 	.word	0x20015994

0800ae94 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800ae94:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800ae96:	4604      	mov	r4, r0
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d048      	beq.n	800af2e <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae9c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ae9e:	b952      	cbnz	r2, 800aeb6 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800aea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea4:	b672      	cpsid	i
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	b662      	cpsie	i
 800aeb4:	e7fe      	b.n	800aeb4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aeb6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800aeb8:	4299      	cmp	r1, r3
 800aeba:	bf38      	it	cc
 800aebc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aebe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800aec0:	428b      	cmp	r3, r1
 800aec2:	d034      	beq.n	800af2e <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aec4:	2a01      	cmp	r2, #1
 800aec6:	d132      	bne.n	800af2e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800aec8:	4a1a      	ldr	r2, [pc, #104]	; (800af34 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800aeca:	6812      	ldr	r2, [r2, #0]
 800aecc:	4282      	cmp	r2, r0
 800aece:	d10a      	bne.n	800aee6 <vTaskPriorityDisinheritAfterTimeout+0x52>
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	b672      	cpsid	i
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	b662      	cpsie	i
 800aee4:	e7fe      	b.n	800aee4 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aee6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aee8:	4d13      	ldr	r5, [pc, #76]	; (800af38 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aeea:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aeec:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800aef0:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aef2:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aef6:	bfa8      	it	ge
 800aef8:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aefc:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aefe:	bfa8      	it	ge
 800af00:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800af02:	429a      	cmp	r2, r3
 800af04:	d113      	bne.n	800af2e <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af06:	1d01      	adds	r1, r0, #4
 800af08:	4608      	mov	r0, r1
 800af0a:	9101      	str	r1, [sp, #4]
 800af0c:	f7fe fb01 	bl	8009512 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800af10:	4a0a      	ldr	r2, [pc, #40]	; (800af3c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800af12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af14:	6810      	ldr	r0, [r2, #0]
 800af16:	9901      	ldr	r1, [sp, #4]
 800af18:	4283      	cmp	r3, r0
 800af1a:	d900      	bls.n	800af1e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	2014      	movs	r0, #20
 800af20:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800af24:	b003      	add	sp, #12
 800af26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800af2a:	f7fe bacf 	b.w	80094cc <vListInsertEnd>
	}
 800af2e:	b003      	add	sp, #12
 800af30:	bd30      	pop	{r4, r5, pc}
 800af32:	bf00      	nop
 800af34:	20015988 	.word	0x20015988
 800af38:	20015994 	.word	0x20015994
 800af3c:	20015e08 	.word	0x20015e08

0800af40 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800af40:	4b04      	ldr	r3, [pc, #16]	; (800af54 <pvTaskIncrementMutexHeldCount+0x14>)
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	b11a      	cbz	r2, 800af4e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800af46:	6819      	ldr	r1, [r3, #0]
 800af48:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800af4a:	3201      	adds	r2, #1
 800af4c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800af4e:	6818      	ldr	r0, [r3, #0]
	}
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20015988 	.word	0x20015988

0800af58 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800af5a:	4c11      	ldr	r4, [pc, #68]	; (800afa0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800af5c:	f7fe fb52 	bl	8009604 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800af60:	6825      	ldr	r5, [r4, #0]
 800af62:	b9bd      	cbnz	r5, 800af94 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800af64:	4f0f      	ldr	r7, [pc, #60]	; (800afa4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800af66:	4e10      	ldr	r6, [pc, #64]	; (800afa8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800af68:	4638      	mov	r0, r7
 800af6a:	f7fe faa1 	bl	80094b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af6e:	4630      	mov	r0, r6
 800af70:	f7fe fa9e 	bl	80094b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af74:	4b0d      	ldr	r3, [pc, #52]	; (800afac <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af76:	4a0e      	ldr	r2, [pc, #56]	; (800afb0 <prvCheckForValidListAndQueue+0x58>)
 800af78:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800af7a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af7c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800af7e:	4b0d      	ldr	r3, [pc, #52]	; (800afb4 <prvCheckForValidListAndQueue+0x5c>)
 800af80:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af82:	4b0d      	ldr	r3, [pc, #52]	; (800afb8 <prvCheckForValidListAndQueue+0x60>)
 800af84:	9500      	str	r5, [sp, #0]
 800af86:	f7fe fd89 	bl	8009a9c <xQueueGenericCreateStatic>
 800af8a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af8c:	b110      	cbz	r0, 800af94 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af8e:	490b      	ldr	r1, [pc, #44]	; (800afbc <prvCheckForValidListAndQueue+0x64>)
 800af90:	f7ff f9c4 	bl	800a31c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800af94:	b003      	add	sp, #12
 800af96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800af9a:	f7fe bb57 	b.w	800964c <vPortExitCritical>
 800af9e:	bf00      	nop
 800afa0:	20015fa8 	.word	0x20015fa8
 800afa4:	20015f2c 	.word	0x20015f2c
 800afa8:	20015f40 	.word	0x20015f40
 800afac:	20015e84 	.word	0x20015e84
 800afb0:	20015e8c 	.word	0x20015e8c
 800afb4:	20015e88 	.word	0x20015e88
 800afb8:	20015f58 	.word	0x20015f58
 800afbc:	0802e459 	.word	0x0802e459

0800afc0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800afc0:	4291      	cmp	r1, r2
{
 800afc2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afc4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afc6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800afc8:	d80a      	bhi.n	800afe0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afca:	1ad2      	subs	r2, r2, r3
 800afcc:	6983      	ldr	r3, [r0, #24]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d20d      	bcs.n	800afee <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800afd2:	1d01      	adds	r1, r0, #4
 800afd4:	4b07      	ldr	r3, [pc, #28]	; (800aff4 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	f7fe fa84 	bl	80094e4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800afdc:	2000      	movs	r0, #0
}
 800afde:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d201      	bcs.n	800afe8 <prvInsertTimerInActiveList+0x28>
 800afe4:	4299      	cmp	r1, r3
 800afe6:	d202      	bcs.n	800afee <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afe8:	1d01      	adds	r1, r0, #4
 800afea:	4b03      	ldr	r3, [pc, #12]	; (800aff8 <prvInsertTimerInActiveList+0x38>)
 800afec:	e7f3      	b.n	800afd6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800afee:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800aff0:	e7f5      	b.n	800afde <prvInsertTimerInActiveList+0x1e>
 800aff2:	bf00      	nop
 800aff4:	20015e88 	.word	0x20015e88
 800aff8:	20015e84 	.word	0x20015e84

0800affc <xTimerCreateTimerTask>:
{
 800affc:	b510      	push	{r4, lr}
 800affe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800b000:	f7ff ffaa 	bl	800af58 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800b004:	4b13      	ldr	r3, [pc, #76]	; (800b054 <xTimerCreateTimerTask+0x58>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	b1b3      	cbz	r3, 800b038 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b00a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b00c:	aa07      	add	r2, sp, #28
 800b00e:	a906      	add	r1, sp, #24
 800b010:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b012:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b016:	f7fe f949 	bl	80092ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b01a:	9b05      	ldr	r3, [sp, #20]
 800b01c:	9a07      	ldr	r2, [sp, #28]
 800b01e:	9302      	str	r3, [sp, #8]
 800b020:	9b06      	ldr	r3, [sp, #24]
 800b022:	490d      	ldr	r1, [pc, #52]	; (800b058 <xTimerCreateTimerTask+0x5c>)
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	2302      	movs	r3, #2
 800b028:	480c      	ldr	r0, [pc, #48]	; (800b05c <xTimerCreateTimerTask+0x60>)
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	4623      	mov	r3, r4
 800b02e:	f7ff fb53 	bl	800a6d8 <xTaskCreateStatic>
 800b032:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <xTimerCreateTimerTask+0x64>)
 800b034:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b036:	b950      	cbnz	r0, 800b04e <xTimerCreateTimerTask+0x52>
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	b672      	cpsid	i
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	b662      	cpsie	i
	configASSERT( xReturn );
 800b04c:	e7fe      	b.n	800b04c <xTimerCreateTimerTask+0x50>
}
 800b04e:	2001      	movs	r0, #1
 800b050:	b008      	add	sp, #32
 800b052:	bd10      	pop	{r4, pc}
 800b054:	20015fa8 	.word	0x20015fa8
 800b058:	0802e45e 	.word	0x0802e45e
 800b05c:	0800b16d 	.word	0x0800b16d
 800b060:	20015fac 	.word	0x20015fac

0800b064 <xTimerGenericCommand>:
{
 800b064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b066:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800b068:	4604      	mov	r4, r0
{
 800b06a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800b06c:	b950      	cbnz	r0, 800b084 <xTimerGenericCommand+0x20>
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	b672      	cpsid	i
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	b662      	cpsie	i
 800b082:	e7fe      	b.n	800b082 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800b084:	4d0c      	ldr	r5, [pc, #48]	; (800b0b8 <xTimerGenericCommand+0x54>)
 800b086:	6828      	ldr	r0, [r5, #0]
 800b088:	b178      	cbz	r0, 800b0aa <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b08a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b08c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b08e:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b092:	dc0c      	bgt.n	800b0ae <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b094:	f7ff fe66 	bl	800ad64 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b098:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b09a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b09c:	4669      	mov	r1, sp
 800b09e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0a0:	bf0c      	ite	eq
 800b0a2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b0a4:	461a      	movne	r2, r3
 800b0a6:	f7fe fd7e 	bl	8009ba6 <xQueueGenericSend>
}
 800b0aa:	b004      	add	sp, #16
 800b0ac:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	4669      	mov	r1, sp
 800b0b2:	f7fe fe85 	bl	8009dc0 <xQueueGenericSendFromISR>
 800b0b6:	e7f8      	b.n	800b0aa <xTimerGenericCommand+0x46>
 800b0b8:	20015fa8 	.word	0x20015fa8

0800b0bc <prvSampleTimeNow>:
{
 800b0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800b0c0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800b168 <prvSampleTimeNow+0xac>
{
 800b0c4:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800b0c6:	f7ff fb7b 	bl	800a7c0 <xTaskGetTickCount>
 800b0ca:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800b0cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b0d0:	4283      	cmp	r3, r0
 800b0d2:	d942      	bls.n	800b15a <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0d4:	4f22      	ldr	r7, [pc, #136]	; (800b160 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0d6:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	b95a      	cbnz	r2, 800b0f8 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800b0e0:	4a20      	ldr	r2, [pc, #128]	; (800b164 <prvSampleTimeNow+0xa8>)
 800b0e2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0e4:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800b0e6:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800b0e8:	6039      	str	r1, [r7, #0]
}
 800b0ea:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800b0ec:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800b0ee:	f8c8 5000 	str.w	r5, [r8]
}
 800b0f2:	b004      	add	sp, #16
 800b0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0f8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0fa:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0fc:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b100:	1d21      	adds	r1, r4, #4
 800b102:	4608      	mov	r0, r1
 800b104:	9103      	str	r1, [sp, #12]
 800b106:	f7fe fa04 	bl	8009512 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b10a:	6a23      	ldr	r3, [r4, #32]
 800b10c:	4620      	mov	r0, r4
 800b10e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b110:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b114:	9903      	ldr	r1, [sp, #12]
 800b116:	f013 0f04 	tst.w	r3, #4
 800b11a:	d0de      	beq.n	800b0da <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b11c:	69a3      	ldr	r3, [r4, #24]
 800b11e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800b120:	459a      	cmp	sl, r3
 800b122:	d205      	bcs.n	800b130 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b124:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b126:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b128:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b12a:	f7fe f9db 	bl	80094e4 <vListInsert>
 800b12e:	e7d4      	b.n	800b0da <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b130:	2300      	movs	r3, #0
 800b132:	4652      	mov	r2, sl
 800b134:	4620      	mov	r0, r4
 800b136:	f8cd 9000 	str.w	r9, [sp]
 800b13a:	4619      	mov	r1, r3
 800b13c:	f7ff ff92 	bl	800b064 <xTimerGenericCommand>
				configASSERT( xResult );
 800b140:	2800      	cmp	r0, #0
 800b142:	d1ca      	bne.n	800b0da <prvSampleTimeNow+0x1e>
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	b672      	cpsid	i
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	b662      	cpsie	i
 800b158:	e7fe      	b.n	800b158 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	e7c5      	b.n	800b0ea <prvSampleTimeNow+0x2e>
 800b15e:	bf00      	nop
 800b160:	20015e84 	.word	0x20015e84
 800b164:	20015e88 	.word	0x20015e88
 800b168:	20015f54 	.word	0x20015f54

0800b16c <prvTimerTask>:
{
 800b16c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b170:	4d71      	ldr	r5, [pc, #452]	; (800b338 <prvTimerTask+0x1cc>)
{
 800b172:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b174:	4e71      	ldr	r6, [pc, #452]	; (800b33c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b176:	682b      	ldr	r3, [r5, #0]
 800b178:	f8d3 8000 	ldr.w	r8, [r3]
 800b17c:	f1b8 0f00 	cmp.w	r8, #0
 800b180:	d037      	beq.n	800b1f2 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b182:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b184:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b186:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800b18a:	f7ff fb11 	bl	800a7b0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b18e:	a804      	add	r0, sp, #16
 800b190:	f7ff ff94 	bl	800b0bc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800b194:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b196:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d16b      	bne.n	800b274 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b19c:	2c00      	cmp	r4, #0
 800b19e:	d14e      	bne.n	800b23e <prvTimerTask+0xd2>
 800b1a0:	4540      	cmp	r0, r8
 800b1a2:	d352      	bcc.n	800b24a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800b1a4:	f7ff fbaa 	bl	800a8fc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1ae:	1d38      	adds	r0, r7, #4
 800b1b0:	f7fe f9af 	bl	8009512 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1b8:	0758      	lsls	r0, r3, #29
 800b1ba:	d51c      	bpl.n	800b1f6 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b1bc:	69b9      	ldr	r1, [r7, #24]
 800b1be:	4643      	mov	r3, r8
 800b1c0:	464a      	mov	r2, r9
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	4441      	add	r1, r8
 800b1c6:	f7ff fefb 	bl	800afc0 <prvInsertTimerInActiveList>
 800b1ca:	b1c0      	cbz	r0, 800b1fe <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	4642      	mov	r2, r8
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	9400      	str	r4, [sp, #0]
 800b1d6:	f7ff ff45 	bl	800b064 <xTimerGenericCommand>
			configASSERT( xResult );
 800b1da:	b980      	cbnz	r0, 800b1fe <prvTimerTask+0x92>
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	b672      	cpsid	i
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	b662      	cpsie	i
 800b1f0:	e7fe      	b.n	800b1f0 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b1f2:	2401      	movs	r4, #1
 800b1f4:	e7c9      	b.n	800b18a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1f6:	f023 0301 	bic.w	r3, r3, #1
 800b1fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1fe:	6a3b      	ldr	r3, [r7, #32]
 800b200:	4638      	mov	r0, r7
 800b202:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b204:	2200      	movs	r2, #0
 800b206:	a904      	add	r1, sp, #16
 800b208:	6830      	ldr	r0, [r6, #0]
 800b20a:	f7fe fe9e 	bl	8009f4a <xQueueReceive>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d0b1      	beq.n	800b176 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b212:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b214:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b216:	2b00      	cmp	r3, #0
 800b218:	db2f      	blt.n	800b27a <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b21a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b21c:	6963      	ldr	r3, [r4, #20]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d132      	bne.n	800b288 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b222:	a803      	add	r0, sp, #12
 800b224:	f7ff ff4a 	bl	800b0bc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b228:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b22a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800b22c:	2b09      	cmp	r3, #9
 800b22e:	d8e9      	bhi.n	800b204 <prvTimerTask+0x98>
 800b230:	e8df f003 	tbb	[pc, r3]
 800b234:	592e2e2e 	.word	0x592e2e2e
 800b238:	2e2e7a60 	.word	0x2e2e7a60
 800b23c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b23e:	4b40      	ldr	r3, [pc, #256]	; (800b340 <prvTimerTask+0x1d4>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681c      	ldr	r4, [r3, #0]
 800b244:	fab4 f484 	clz	r4, r4
 800b248:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b24a:	4622      	mov	r2, r4
 800b24c:	eba8 0109 	sub.w	r1, r8, r9
 800b250:	6830      	ldr	r0, [r6, #0]
 800b252:	f7ff f8a2 	bl	800a39a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b256:	f7ff fb51 	bl	800a8fc <xTaskResumeAll>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d1d2      	bne.n	800b204 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800b25e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b266:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	e7c7      	b.n	800b204 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800b274:	f7ff fb42 	bl	800a8fc <xTaskResumeAll>
}
 800b278:	e7c4      	b.n	800b204 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b27a:	9b05      	ldr	r3, [sp, #20]
 800b27c:	9907      	ldr	r1, [sp, #28]
 800b27e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b280:	9b04      	ldr	r3, [sp, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	dbbe      	blt.n	800b204 <prvTimerTask+0x98>
 800b286:	e7c8      	b.n	800b21a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b288:	1d20      	adds	r0, r4, #4
 800b28a:	f7fe f942 	bl	8009512 <uxListRemove>
 800b28e:	e7c8      	b.n	800b222 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b290:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b294:	4620      	mov	r0, r4
 800b296:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b298:	f043 0301 	orr.w	r3, r3, #1
 800b29c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b2a0:	9b05      	ldr	r3, [sp, #20]
 800b2a2:	4419      	add	r1, r3
 800b2a4:	f7ff fe8c 	bl	800afc0 <prvInsertTimerInActiveList>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d0ab      	beq.n	800b204 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2ac:	6a23      	ldr	r3, [r4, #32]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b2b6:	0759      	lsls	r1, r3, #29
 800b2b8:	d5a4      	bpl.n	800b204 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b2ba:	69a2      	ldr	r2, [r4, #24]
 800b2bc:	2300      	movs	r3, #0
 800b2be:	9905      	ldr	r1, [sp, #20]
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	440a      	add	r2, r1
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	f7ff fecc 	bl	800b064 <xTimerGenericCommand>
							configASSERT( xResult );
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d199      	bne.n	800b204 <prvTimerTask+0x98>
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	b672      	cpsid	i
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	b662      	cpsie	i
 800b2e4:	e7fe      	b.n	800b2e4 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2ea:	f023 0301 	bic.w	r3, r3, #1
 800b2ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b2f2:	e787      	b.n	800b204 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b2f8:	f043 0301 	orr.w	r3, r3, #1
 800b2fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b300:	9905      	ldr	r1, [sp, #20]
 800b302:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b304:	b951      	cbnz	r1, 800b31c <prvTimerTask+0x1b0>
 800b306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30a:	b672      	cpsid	i
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	b662      	cpsie	i
 800b31a:	e7fe      	b.n	800b31a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b31c:	4603      	mov	r3, r0
 800b31e:	4401      	add	r1, r0
 800b320:	4620      	mov	r0, r4
 800b322:	f7ff fe4d 	bl	800afc0 <prvInsertTimerInActiveList>
					break;
 800b326:	e76d      	b.n	800b204 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b328:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b32c:	079a      	lsls	r2, r3, #30
 800b32e:	d4dc      	bmi.n	800b2ea <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800b330:	4620      	mov	r0, r4
 800b332:	f7fe f881 	bl	8009438 <vPortFree>
 800b336:	e765      	b.n	800b204 <prvTimerTask+0x98>
 800b338:	20015e84 	.word	0x20015e84
 800b33c:	20015fa8 	.word	0x20015fa8
 800b340:	20015e88 	.word	0x20015e88

0800b344 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 800b344:	6843      	ldr	r3, [r0, #4]
{
 800b346:	b510      	push	{r4, lr}
 800b348:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 800b34a:	b14b      	cbz	r3, 800b360 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 800b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34e:	2101      	movs	r1, #1
 800b350:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	b12b      	cbz	r3, 800b362 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 800b356:	23c8      	movs	r3, #200	; 0xc8
 800b358:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 800b360:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 800b362:	2364      	movs	r3, #100	; 0x64
 800b364:	6163      	str	r3, [r4, #20]
 800b366:	e7fb      	b.n	800b360 <jpeg_abort+0x1c>

0800b368 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 800b368:	6843      	ldr	r3, [r0, #4]
{
 800b36a:	b510      	push	{r4, lr}
 800b36c:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 800b36e:	b10b      	cbz	r3, 800b374 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 800b370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b372:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 800b374:	2300      	movs	r3, #0
 800b376:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 800b378:	6163      	str	r3, [r4, #20]
}
 800b37a:	bd10      	pop	{r4, pc}

0800b37c <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 800b37c:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 800b37e:	6843      	ldr	r3, [r0, #4]
 800b380:	2284      	movs	r2, #132	; 0x84
 800b382:	2100      	movs	r1, #0
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800b388:	2200      	movs	r2, #0
 800b38a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 800b38e:	bd08      	pop	{r3, pc}

0800b390 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 800b390:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 800b392:	6843      	ldr	r3, [r0, #4]
 800b394:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b398:	2100      	movs	r1, #0
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 800b3a4:	bd08      	pop	{r3, pc}

0800b3a6 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800b3a6:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 800b3a8:	2950      	cmp	r1, #80	; 0x50
{
 800b3aa:	b570      	push	{r4, r5, r6, lr}
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800b3b0:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 800b3b2:	d007      	beq.n	800b3c4 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 800b3b4:	6803      	ldr	r3, [r0, #0]
 800b3b6:	260d      	movs	r6, #13
 800b3b8:	2250      	movs	r2, #80	; 0x50
 800b3ba:	61d9      	str	r1, [r3, #28]
 800b3bc:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 800b3c4:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 800b3c8:	d009      	beq.n	800b3de <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	2116      	movs	r1, #22
 800b3ce:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	61dd      	str	r5, [r3, #28]
 800b3d6:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800b3de:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 800b3e6:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 800b3e8:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800b3ea:	f01f fc81 	bl	802acf0 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 800b3ee:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 800b3f0:	4620      	mov	r0, r4
    cinfo->err = err;
 800b3f2:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 800b3f4:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 800b3f6:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 800b3f8:	f00b feac 	bl	8017154 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 800b3fc:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 800b3fe:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 800b400:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 800b402:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800b404:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800b408:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800b40c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800b410:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800b414:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800b418:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800b41c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800b420:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 800b424:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 800b428:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 800b42c:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 800b430:	f005 f8ba 	bl	80105a8 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 800b434:	4620      	mov	r0, r4
 800b436:	f003 fdbd 	bl	800efb4 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 800b43a:	23c8      	movs	r3, #200	; 0xc8
 800b43c:	6163      	str	r3, [r4, #20]
}
 800b43e:	bd70      	pop	{r4, r5, r6, pc}

0800b440 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 800b440:	f7ff bf92 	b.w	800b368 <jpeg_destroy>

0800b444 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 800b444:	6942      	ldr	r2, [r0, #20]
 800b446:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 800b44a:	b570      	push	{r4, r5, r6, lr}
 800b44c:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 800b44e:	2b0a      	cmp	r3, #10
 800b450:	f200 80a5 	bhi.w	800b59e <jpeg_consume_input+0x15a>
 800b454:	e8df f003 	tbb	[pc, r3]
 800b458:	9dab1006 	.word	0x9dab1006
 800b45c:	9d9d9d9d 	.word	0x9d9d9d9d
 800b460:	a39d      	.short	0xa39d
 800b462:	9d          	.byte	0x9d
 800b463:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 800b464:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 800b46c:	69a3      	ldr	r3, [r4, #24]
 800b46e:	4620      	mov	r0, r4
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 800b474:	23c9      	movs	r3, #201	; 0xc9
 800b476:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800b478:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800b47c:	4620      	mov	r0, r4
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 800b482:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800b484:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 800b486:	d146      	bne.n	800b516 <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 800b488:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b48a:	2d03      	cmp	r5, #3
 800b48c:	d007      	beq.n	800b49e <jpeg_consume_input+0x5a>
 800b48e:	2d04      	cmp	r5, #4
 800b490:	d064      	beq.n	800b55c <jpeg_consume_input+0x118>
 800b492:	2d01      	cmp	r5, #1
 800b494:	d17b      	bne.n	800b58e <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 800b496:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800b49a:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 800b49c:	e01c      	b.n	800b4d8 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 800b49e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800b4a2:	b10b      	cbz	r3, 800b4a8 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e056      	b.n	800b556 <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 800b4a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d034      	beq.n	800b51a <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 800b4b0:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 800b4b4:	2a00      	cmp	r2, #0
 800b4b6:	d04d      	beq.n	800b554 <jpeg_consume_input+0x110>
 800b4b8:	2a01      	cmp	r2, #1
 800b4ba:	d008      	beq.n	800b4ce <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	2174      	movs	r1, #116	; 0x74
 800b4c0:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800b4c2:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f04f 31ff 	mov.w	r1, #4294967295
 800b4cc:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800b4ce:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 800b4d2:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 800b4d4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 800b4d8:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 800b4dc:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 800b4de:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 800b4e0:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 800b4e4:	4b33      	ldr	r3, [pc, #204]	; (800b5b4 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 800b4e6:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 800b4ea:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 800b4ee:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 800b4f0:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 800b4f2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 800b4f6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 800b4fa:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 800b4fc:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 800b4fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 800b502:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 800b504:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 800b508:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 800b50c:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 800b510:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 800b512:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 800b514:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 800b516:	4630      	mov	r0, r6
 800b518:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 800b51a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800b51e:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 800b520:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800b522:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 800b524:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800b528:	d10e      	bne.n	800b548 <jpeg_consume_input+0x104>
 800b52a:	2902      	cmp	r1, #2
 800b52c:	d101      	bne.n	800b532 <jpeg_consume_input+0xee>
 800b52e:	2a03      	cmp	r2, #3
 800b530:	d0b8      	beq.n	800b4a4 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	621a      	str	r2, [r3, #32]
 800b536:	2271      	movs	r2, #113	; 0x71
 800b538:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800b53c:	615a      	str	r2, [r3, #20]
 800b53e:	2101      	movs	r1, #1
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	4620      	mov	r0, r4
 800b544:	4798      	blx	r3
 800b546:	e7ad      	b.n	800b4a4 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 800b548:	2852      	cmp	r0, #82	; 0x52
 800b54a:	d1f2      	bne.n	800b532 <jpeg_consume_input+0xee>
 800b54c:	2947      	cmp	r1, #71	; 0x47
 800b54e:	d1f0      	bne.n	800b532 <jpeg_consume_input+0xee>
 800b550:	2a42      	cmp	r2, #66	; 0x42
 800b552:	d1ee      	bne.n	800b532 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 800b554:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800b556:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b55a:	e7ba      	b.n	800b4d2 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 800b55c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800b560:	b193      	cbz	r3, 800b588 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 800b562:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 800b566:	b17a      	cbz	r2, 800b588 <jpeg_consume_input+0x144>
 800b568:	2a02      	cmp	r2, #2
 800b56a:	d008      	beq.n	800b57e <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	2174      	movs	r1, #116	; 0x74
 800b570:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800b572:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	f04f 31ff 	mov.w	r1, #4294967295
 800b57c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 800b57e:	2305      	movs	r3, #5
 800b580:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 800b584:	2304      	movs	r3, #4
 800b586:	e7a5      	b.n	800b4d4 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 800b588:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800b58c:	e7fa      	b.n	800b584 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800b58e:	2300      	movs	r3, #0
 800b590:	e783      	b.n	800b49a <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800b592:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 800b596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800b59e:	6803      	ldr	r3, [r0, #0]
 800b5a0:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 800b5a2:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800b5a4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4798      	blx	r3
 800b5ac:	e7b3      	b.n	800b516 <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 800b5ae:	2601      	movs	r6, #1
  return retcode;
 800b5b0:	e7b1      	b.n	800b516 <jpeg_consume_input+0xd2>
 800b5b2:	bf00      	nop
 800b5b4:	3ff00000 	.word	0x3ff00000

0800b5b8 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 800b5b8:	6942      	ldr	r2, [r0, #20]
 800b5ba:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 800b5be:	2b01      	cmp	r3, #1
{
 800b5c0:	b570      	push	{r4, r5, r6, lr}
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 800b5c6:	d905      	bls.n	800b5d4 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800b5c8:	6803      	ldr	r3, [r0, #0]
 800b5ca:	2115      	movs	r1, #21
 800b5cc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f7ff ff35 	bl	800b444 <jpeg_consume_input>
  switch (retcode) {
 800b5da:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 800b5dc:	4605      	mov	r5, r0
  switch (retcode) {
 800b5de:	d00b      	beq.n	800b5f8 <jpeg_read_header+0x40>
 800b5e0:	2802      	cmp	r0, #2
 800b5e2:	d109      	bne.n	800b5f8 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 800b5e4:	b12e      	cbz	r6, 800b5f2 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	2235      	movs	r2, #53	; 0x35
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	615a      	str	r2, [r3, #20]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7ff fea6 	bl	800b344 <jpeg_abort>
}
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}

0800b5fc <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800b5fc:	6943      	ldr	r3, [r0, #20]
 800b5fe:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 800b602:	2a01      	cmp	r2, #1
{
 800b604:	b510      	push	{r4, lr}
 800b606:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800b608:	d81f      	bhi.n	800b64a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800b60a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b60c:	bb0a      	cbnz	r2, 800b652 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 800b60e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800b612:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800b614:	429a      	cmp	r2, r3
 800b616:	d204      	bcs.n	800b622 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 800b618:	6803      	ldr	r3, [r0, #0]
 800b61a:	2245      	movs	r2, #69	; 0x45
 800b61c:	615a      	str	r2, [r3, #20]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 800b622:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800b626:	4620      	mov	r0, r4
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 800b62c:	23d2      	movs	r3, #210	; 0xd2
 800b62e:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 800b630:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800b634:	695a      	ldr	r2, [r3, #20]
 800b636:	b1a2      	cbz	r2, 800b662 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 800b638:	69a3      	ldr	r3, [r4, #24]
 800b63a:	4620      	mov	r0, r4
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 800b640:	4620      	mov	r0, r4
 800b642:	f7ff fe7f 	bl	800b344 <jpeg_abort>
  return TRUE;
 800b646:	2001      	movs	r0, #1
 800b648:	e010      	b.n	800b66c <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 800b64a:	2bcf      	cmp	r3, #207	; 0xcf
 800b64c:	d0ee      	beq.n	800b62c <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 800b64e:	2bd2      	cmp	r3, #210	; 0xd2
 800b650:	d0ee      	beq.n	800b630 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800b652:	6822      	ldr	r2, [r4, #0]
 800b654:	2115      	movs	r1, #21
 800b656:	4620      	mov	r0, r4
 800b658:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800b65c:	6813      	ldr	r3, [r2, #0]
 800b65e:	4798      	blx	r3
 800b660:	e7e6      	b.n	800b630 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4620      	mov	r0, r4
 800b666:	4798      	blx	r3
 800b668:	2800      	cmp	r0, #0
 800b66a:	d1e1      	bne.n	800b630 <jpeg_finish_decompress+0x34>
}
 800b66c:	bd10      	pop	{r4, pc}

0800b66e <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800b66e:	6943      	ldr	r3, [r0, #20]
 800b670:	2bcc      	cmp	r3, #204	; 0xcc
{
 800b672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b676:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800b678:	d008      	beq.n	800b68c <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800b67a:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 800b688:	23cc      	movs	r3, #204	; 0xcc
 800b68a:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800b68c:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 800b690:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 800b692:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	b9f3      	cbnz	r3, 800b6d8 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800b69a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 800b69c:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bf14      	ite	ne
 800b6a2:	23ce      	movne	r3, #206	; 0xce
 800b6a4:	23cd      	moveq	r3, #205	; 0xcd
 800b6a6:	6163      	str	r3, [r4, #20]
}
 800b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 800b6ac:	68a3      	ldr	r3, [r4, #8]
 800b6ae:	b123      	cbz	r3, 800b6ba <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800b6b0:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 800b6b2:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800b6ba:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 800b6c2:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800b6c6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 800b6d0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b6d4:	42bb      	cmp	r3, r7
 800b6d6:	d011      	beq.n	800b6fc <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 800b6d8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800b6dc:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b6de:	4291      	cmp	r1, r2
 800b6e0:	d3e4      	bcc.n	800b6ac <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 800b6e2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800b6ec:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800b6f6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800b6fa:	e7ca      	b.n	800b692 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	e7d3      	b.n	800b6a8 <output_pass_setup+0x3a>

0800b700 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 800b700:	6943      	ldr	r3, [r0, #20]
 800b702:	2bca      	cmp	r3, #202	; 0xca
{
 800b704:	b510      	push	{r4, lr}
 800b706:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 800b708:	d109      	bne.n	800b71e <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 800b70a:	f005 f8f7 	bl	80108fc <jinit_master_decompress>
    if (cinfo->buffered_image) {
 800b70e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b710:	b11b      	cbz	r3, 800b71a <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 800b712:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 800b714:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 800b716:	6163      	str	r3, [r4, #20]
}
 800b718:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 800b71a:	23cb      	movs	r3, #203	; 0xcb
 800b71c:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 800b71e:	6962      	ldr	r2, [r4, #20]
 800b720:	2acb      	cmp	r2, #203	; 0xcb
 800b722:	d12c      	bne.n	800b77e <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 800b724:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	b1fb      	cbz	r3, 800b76c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 800b72c:	68a3      	ldr	r3, [r4, #8]
 800b72e:	b113      	cbz	r3, 800b736 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4620      	mov	r0, r4
 800b734:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800b736:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800b73a:	4620      	mov	r0, r4
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 800b740:	2800      	cmp	r0, #0
 800b742:	d0e9      	beq.n	800b718 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 800b744:	2802      	cmp	r0, #2
 800b746:	d011      	beq.n	800b76c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 800b748:	68a3      	ldr	r3, [r4, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0ee      	beq.n	800b72c <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 800b74e:	f020 0002 	bic.w	r0, r0, #2
 800b752:	2801      	cmp	r0, #1
 800b754:	d1ea      	bne.n	800b72c <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	6899      	ldr	r1, [r3, #8]
 800b75a:	3201      	adds	r2, #1
 800b75c:	428a      	cmp	r2, r1
 800b75e:	605a      	str	r2, [r3, #4]
 800b760:	dbe4      	blt.n	800b72c <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 800b762:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800b766:	440a      	add	r2, r1
 800b768:	609a      	str	r2, [r3, #8]
 800b76a:	e7df      	b.n	800b72c <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 800b76c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b770:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 800b774:	4620      	mov	r0, r4
}
 800b776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 800b77a:	f7ff bf78 	b.w	800b66e <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800b77e:	2acc      	cmp	r2, #204	; 0xcc
 800b780:	d0f8      	beq.n	800b774 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	2115      	movs	r1, #21
 800b786:	4620      	mov	r0, r4
 800b788:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4798      	blx	r3
 800b790:	e7f0      	b.n	800b774 <jpeg_start_decompress+0x74>

0800b792 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 800b792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b794:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 800b796:	6942      	ldr	r2, [r0, #20]
{
 800b798:	4604      	mov	r4, r0
 800b79a:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 800b79c:	2acd      	cmp	r2, #205	; 0xcd
 800b79e:	d005      	beq.n	800b7ac <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800b7a0:	6803      	ldr	r3, [r0, #0]
 800b7a2:	2115      	movs	r1, #21
 800b7a4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 800b7ac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b7b0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d30a      	bcc.n	800b7cc <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	227e      	movs	r2, #126	; 0x7e
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f04f 31ff 	mov.w	r1, #4294967295
 800b7c0:	615a      	str	r2, [r3, #20]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	4798      	blx	r3
    return 0;
 800b7c6:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 800b7c8:	b003      	add	sp, #12
 800b7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 800b7cc:	68a0      	ldr	r0, [r4, #8]
 800b7ce:	b120      	cbz	r0, 800b7da <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 800b7d0:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800b7d4:	6803      	ldr	r3, [r0, #0]
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	4798      	blx	r3
  row_ctr = 0;
 800b7da:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800b7dc:	4620      	mov	r0, r4
 800b7de:	aa01      	add	r2, sp, #4
 800b7e0:	4629      	mov	r1, r5
  row_ctr = 0;
 800b7e2:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800b7e4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800b7e8:	685f      	ldr	r7, [r3, #4]
 800b7ea:	4633      	mov	r3, r6
 800b7ec:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 800b7ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b7f2:	9801      	ldr	r0, [sp, #4]
 800b7f4:	4403      	add	r3, r0
 800b7f6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 800b7fa:	e7e5      	b.n	800b7c8 <jpeg_read_scanlines+0x36>

0800b7fc <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 800b7fc:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 800b7fe:	6984      	ldr	r4, [r0, #24]
{
 800b800:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 800b802:	6863      	ldr	r3, [r4, #4]
 800b804:	b943      	cbnz	r3, 800b818 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 800b806:	68e3      	ldr	r3, [r4, #12]
 800b808:	4798      	blx	r3
 800b80a:	b928      	cbnz	r0, 800b818 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	2219      	movs	r2, #25
 800b810:	4628      	mov	r0, r5
 800b812:	615a      	str	r2, [r3, #20]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4798      	blx	r3
  src->bytes_in_buffer--;
 800b818:	6863      	ldr	r3, [r4, #4]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	1c5a      	adds	r2, r3, #1
 800b822:	6022      	str	r2, [r4, #0]
}
 800b824:	7818      	ldrb	r0, [r3, #0]
 800b826:	bd38      	pop	{r3, r4, r5, pc}

0800b828 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 800b828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82c:	4680      	mov	r8, r0
 800b82e:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 800b830:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800b834:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 800b838:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 800b83c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b840:	db20      	blt.n	800b884 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 800b842:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 800b844:	4b2e      	ldr	r3, [pc, #184]	; (800b900 <arith_decode+0xd8>)
 800b846:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800b84a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 800b84e:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 800b850:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 800b854:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 800b858:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800b85c:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 800b860:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 800b862:	428d      	cmp	r5, r1
 800b864:	db3c      	blt.n	800b8e0 <arith_decode+0xb8>
    e->c -= temp;
 800b866:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 800b868:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800b86a:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 800b86e:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 800b872:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800b874:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 800b876:	dd2e      	ble.n	800b8d6 <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800b878:	ea85 050e 	eor.w	r5, r5, lr
 800b87c:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 800b87e:	09c0      	lsrs	r0, r0, #7
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 800b884:	3901      	subs	r1, #1
 800b886:	2900      	cmp	r1, #0
 800b888:	6121      	str	r1, [r4, #16]
 800b88a:	da1a      	bge.n	800b8c2 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 800b88c:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 800b890:	b96b      	cbnz	r3, 800b8ae <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 800b892:	4640      	mov	r0, r8
 800b894:	f7ff ffb2 	bl	800b7fc <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 800b898:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 800b89a:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 800b89c:	d108      	bne.n	800b8b0 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 800b89e:	4640      	mov	r0, r8
 800b8a0:	f7ff ffac 	bl	800b7fc <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 800b8a4:	28ff      	cmp	r0, #255	; 0xff
 800b8a6:	d0fa      	beq.n	800b89e <arith_decode+0x76>
	  if (data == 0)
 800b8a8:	b110      	cbz	r0, 800b8b0 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 800b8aa:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 800b8ae:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 800b8b0:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800b8b2:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 800b8b4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800b8b8:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 800b8bc:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800b8be:	d404      	bmi.n	800b8ca <arith_decode+0xa2>
 800b8c0:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 800b8c2:	68e3      	ldr	r3, [r4, #12]
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	60e3      	str	r3, [r4, #12]
 800b8c8:	e7b6      	b.n	800b838 <arith_decode+0x10>
	if (++e->ct == 0)
 800b8ca:	3309      	adds	r3, #9
 800b8cc:	6123      	str	r3, [r4, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1f7      	bne.n	800b8c2 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800b8d2:	60e7      	str	r7, [r4, #12]
 800b8d4:	e7f5      	b.n	800b8c2 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800b8d6:	407d      	eors	r5, r7
 800b8d8:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 800b8da:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 800b8de:	e7ce      	b.n	800b87e <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 800b8e0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b8e4:	dacb      	bge.n	800b87e <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800b8e6:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 800b8ea:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800b8ec:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 800b8ee:	dd02      	ble.n	800b8f6 <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800b8f0:	407b      	eors	r3, r7
 800b8f2:	7033      	strb	r3, [r6, #0]
 800b8f4:	e7f1      	b.n	800b8da <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800b8f6:	ea83 030e 	eor.w	r3, r3, lr
 800b8fa:	7033      	strb	r3, [r6, #0]
 800b8fc:	e7bf      	b.n	800b87e <arith_decode+0x56>
 800b8fe:	bf00      	nop
 800b900:	0802e468 	.word	0x0802e468

0800b904 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800b904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800b908:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800b90c:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 800b910:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800b912:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800b916:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800b91a:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 808a 	beq.w	800ba36 <start_pass+0x132>
    if (cinfo->Ss == 0) {
 800b922:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 800b926:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 800b92a:	b95a      	cbnz	r2, 800b944 <start_pass+0x40>
      if (cinfo->Se != 0)
 800b92c:	b1a1      	cbz	r1, 800b958 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	2611      	movs	r6, #17
 800b932:	e9c3 1707 	strd	r1, r7, [r3, #28]
 800b936:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800b93a:	6258      	str	r0, [r3, #36]	; 0x24
 800b93c:	4620      	mov	r0, r4
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4798      	blx	r3
 800b942:	e00f      	b.n	800b964 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800b944:	428a      	cmp	r2, r1
 800b946:	dcf2      	bgt.n	800b92e <start_pass+0x2a>
 800b948:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800b94c:	428b      	cmp	r3, r1
 800b94e:	dbee      	blt.n	800b92e <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 800b950:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b954:	2b01      	cmp	r3, #1
 800b956:	d1ea      	bne.n	800b92e <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 800b958:	b117      	cbz	r7, 800b960 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800b95a:	1e7b      	subs	r3, r7, #1
 800b95c:	4283      	cmp	r3, r0
 800b95e:	d1e6      	bne.n	800b92e <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800b960:	280d      	cmp	r0, #13
 800b962:	dce4      	bgt.n	800b92e <start_pass+0x2a>
 800b964:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 800b968:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800b96c:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b970:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b974:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b978:	454b      	cmp	r3, r9
 800b97a:	dc1d      	bgt.n	800b9b8 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800b97c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d153      	bne.n	800ba2c <start_pass+0x128>
      if (cinfo->Ss == 0)
 800b984:	2a00      	cmp	r2, #0
 800b986:	d14f      	bne.n	800ba28 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800b988:	4b63      	ldr	r3, [pc, #396]	; (800bb18 <start_pass+0x214>)
{
 800b98a:	f04f 0800 	mov.w	r8, #0
 800b98e:	f105 0914 	add.w	r9, r5, #20
 800b992:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800b994:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 800b996:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b998:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b99c:	4543      	cmp	r3, r8
 800b99e:	dc63      	bgt.n	800ba68 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 800b9a0:	2300      	movs	r3, #0
  entropy->a = 0;
 800b9a2:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800b9a6:	f06f 030f 	mvn.w	r3, #15
 800b9aa:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b9ac:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800b9b0:	636b      	str	r3, [r5, #52]	; 0x34
}
 800b9b2:	b003      	add	sp, #12
 800b9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800b9b8:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800b9bc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800b9c0:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800b9c2:	0230      	lsls	r0, r6, #8
 800b9c4:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b9c8:	b162      	cbz	r2, 800b9e4 <start_pass+0xe0>
 800b9ca:	580a      	ldr	r2, [r1, r0]
 800b9cc:	2a00      	cmp	r2, #0
 800b9ce:	da09      	bge.n	800b9e4 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800b9d0:	6822      	ldr	r2, [r4, #0]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f04f 31ff 	mov.w	r1, #4294967295
 800b9d8:	4620      	mov	r0, r4
 800b9da:	61d3      	str	r3, [r2, #28]
 800b9dc:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800b9e0:	6852      	ldr	r2, [r2, #4]
 800b9e2:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b9e4:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 800b9e8:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800b9ec:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800b9f0:	42ba      	cmp	r2, r7
 800b9f2:	da02      	bge.n	800b9fa <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b9f4:	f109 0901 	add.w	r9, r9, #1
 800b9f8:	e7ba      	b.n	800b970 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b9fa:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 800b9fe:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800ba02:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 800ba06:	4291      	cmp	r1, r2
 800ba08:	d008      	beq.n	800ba1c <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800ba0a:	6822      	ldr	r2, [r4, #0]
 800ba0c:	f04f 31ff 	mov.w	r1, #4294967295
 800ba10:	4620      	mov	r0, r4
 800ba12:	61d7      	str	r7, [r2, #28]
 800ba14:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800ba18:	6852      	ldr	r2, [r2, #4]
 800ba1a:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 800ba1c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800ba20:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800ba22:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800ba26:	e7e1      	b.n	800b9ec <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800ba28:	4b3c      	ldr	r3, [pc, #240]	; (800bb1c <start_pass+0x218>)
 800ba2a:	e7ae      	b.n	800b98a <start_pass+0x86>
      if (cinfo->Ss == 0)
 800ba2c:	b90a      	cbnz	r2, 800ba32 <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800ba2e:	4b3c      	ldr	r3, [pc, #240]	; (800bb20 <start_pass+0x21c>)
 800ba30:	e7ab      	b.n	800b98a <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800ba32:	4b3c      	ldr	r3, [pc, #240]	; (800bb24 <start_pass+0x220>)
 800ba34:	e7a9      	b.n	800b98a <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800ba36:	b96a      	cbnz	r2, 800ba54 <start_pass+0x150>
 800ba38:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800ba3c:	b953      	cbnz	r3, 800ba54 <start_pass+0x150>
 800ba3e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800ba42:	b93b      	cbnz	r3, 800ba54 <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800ba44:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800ba48:	2b3f      	cmp	r3, #63	; 0x3f
 800ba4a:	dc0b      	bgt.n	800ba64 <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800ba4c:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d007      	beq.n	800ba64 <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	227d      	movs	r2, #125	; 0x7d
 800ba58:	f04f 31ff 	mov.w	r1, #4294967295
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	615a      	str	r2, [r3, #20]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 800ba64:	4b30      	ldr	r3, [pc, #192]	; (800bb28 <start_pass+0x224>)
 800ba66:	e790      	b.n	800b98a <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800ba68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800ba6c:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800ba70:	b133      	cbz	r3, 800ba80 <start_pass+0x17c>
 800ba72:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800ba76:	bb43      	cbnz	r3, 800baca <start_pass+0x1c6>
 800ba78:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d13a      	bne.n	800baf6 <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 800ba80:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800ba84:	2f0f      	cmp	r7, #15
 800ba86:	d906      	bls.n	800ba96 <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	2232      	movs	r2, #50	; 0x32
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 800ba96:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	b933      	cbnz	r3, 800baac <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800ba9e:	6863      	ldr	r3, [r4, #4]
 800baa0:	2240      	movs	r2, #64	; 0x40
 800baa2:	2101      	movs	r1, #1
 800baa4:	4620      	mov	r0, r4
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4798      	blx	r3
 800baaa:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 800baac:	2240      	movs	r2, #64	; 0x40
 800baae:	2100      	movs	r1, #0
 800bab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bab2:	f01f f91d 	bl	802acf0 <memset>
      entropy->last_dc_val[ci] = 0;
 800bab6:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 800baba:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800babe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800bac2:	b9eb      	cbnz	r3, 800bb00 <start_pass+0x1fc>
 800bac4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800bac8:	b1ab      	cbz	r3, 800baf6 <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 800baca:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800bace:	2f0f      	cmp	r7, #15
 800bad0:	d819      	bhi.n	800bb06 <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 800bad2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800bad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bad8:	b93b      	cbnz	r3, 800baea <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800bada:	6863      	ldr	r3, [r4, #4]
 800badc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bae0:	2101      	movs	r1, #1
 800bae2:	4620      	mov	r0, r4
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4798      	blx	r3
 800bae8:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800baea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baee:	2100      	movs	r1, #0
 800baf0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800baf2:	f01f f8fd 	bl	802acf0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800baf6:	f108 0801 	add.w	r8, r8, #1
 800bafa:	f109 0904 	add.w	r9, r9, #4
 800bafe:	e74b      	b.n	800b998 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800bb00:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800bb04:	e7e0      	b.n	800bac8 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	2232      	movs	r2, #50	; 0x32
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4798      	blx	r3
 800bb14:	e7dd      	b.n	800bad2 <start_pass+0x1ce>
 800bb16:	bf00      	nop
 800bb18:	0800c0cf 	.word	0x0800c0cf
 800bb1c:	0800bf9b 	.word	0x0800bf9b
 800bb20:	0800bf49 	.word	0x0800bf49
 800bb24:	0800be23 	.word	0x0800be23
 800bb28:	0800bbcf 	.word	0x0800bbcf

0800bb2c <process_restart>:
{
 800bb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800bb30:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 800bb34:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	4798      	blx	r3
 800bb3a:	b928      	cbnz	r0, 800bb48 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	2219      	movs	r2, #25
 800bb40:	4620      	mov	r0, r4
 800bb42:	615a      	str	r2, [r3, #20]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4798      	blx	r3
{
 800bb48:	2600      	movs	r6, #0
 800bb4a:	f105 0714 	add.w	r7, r5, #20
 800bb4e:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800bb52:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bb54:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800bb58:	42b3      	cmp	r3, r6
 800bb5a:	dc0a      	bgt.n	800bb72 <process_restart+0x46>
  entropy->c = 0;
 800bb5c:	2300      	movs	r3, #0
  entropy->a = 0;
 800bb5e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800bb62:	f06f 030f 	mvn.w	r3, #15
 800bb66:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800bb68:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800bb6c:	636b      	str	r3, [r5, #52]	; 0x34
}
 800bb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800bb72:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800bb76:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800bb7a:	b12b      	cbz	r3, 800bb88 <process_restart+0x5c>
 800bb7c:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800bb80:	b9ab      	cbnz	r3, 800bbae <process_restart+0x82>
 800bb82:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800bb86:	b9e3      	cbnz	r3, 800bbc2 <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800bb88:	f8da 3014 	ldr.w	r3, [sl, #20]
 800bb8c:	2240      	movs	r2, #64	; 0x40
 800bb8e:	2100      	movs	r1, #0
 800bb90:	330e      	adds	r3, #14
 800bb92:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800bb96:	f01f f8ab 	bl	802acf0 <memset>
      entropy->last_dc_val[ci] = 0;
 800bb9a:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800bb9e:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800bba2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800bba6:	b97b      	cbnz	r3, 800bbc8 <process_restart+0x9c>
 800bba8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800bbac:	b14b      	cbz	r3, 800bbc2 <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800bbae:	f8da 3018 	ldr.w	r3, [sl, #24]
 800bbb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	331e      	adds	r3, #30
 800bbba:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800bbbe:	f01f f897 	bl	802acf0 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800bbc2:	3601      	adds	r6, #1
 800bbc4:	3704      	adds	r7, #4
 800bbc6:	e7c5      	b.n	800bb54 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800bbc8:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800bbcc:	e7ee      	b.n	800bbac <process_restart+0x80>

0800bbce <decode_mcu>:
{
 800bbce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800bbd2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800bbd6:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800bbd8:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800bbdc:	ed2d 8b02 	vpush	{d8}
 800bbe0:	b087      	sub	sp, #28
 800bbe2:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800bbe4:	b133      	cbz	r3, 800bbf4 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 800bbe6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bbe8:	b90b      	cbnz	r3, 800bbee <decode_mcu+0x20>
      process_restart(cinfo);
 800bbea:	f7ff ff9f 	bl	800bb2c <process_restart>
    entropy->restarts_to_go--;
 800bbee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800bbf4:	692b      	ldr	r3, [r5, #16]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	f000 809f 	beq.w	800bd3a <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 800bbfc:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bc00:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800bc02:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bc04:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 800bc08:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800bc0a:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 800bc0e:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bc12:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800bc16:	42bb      	cmp	r3, r7
 800bc18:	f340 808f 	ble.w	800bd3a <decode_mcu+0x16c>
    block = MCU_data[blkn];
 800bc1c:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 800bc1e:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800bc20:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 800bc22:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800bc26:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 800bc28:	f852 3b04 	ldr.w	r3, [r2], #4
 800bc2c:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800bc2e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bc32:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 800bc36:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800bc3a:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800bc3e:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800bc40:	6952      	ldr	r2, [r2, #20]
 800bc42:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 800bc46:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800bc48:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 800bc4c:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 800bc4e:	4631      	mov	r1, r6
 800bc50:	f7ff fdea 	bl	800b828 <arith_decode>
 800bc54:	bb68      	cbnz	r0, 800bcb2 <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 800bc56:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800bc5a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800bc5e:	9a00      	ldr	r2, [sp, #0]
 800bc60:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 800bc62:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 80c4 	beq.w	800bdf4 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 800bc6c:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800bc6e:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800bc70:	699b      	ldr	r3, [r3, #24]
    k = 0;
 800bc72:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800bc76:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 800bc7a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800bc7e:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800bc82:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 800bc84:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800bc88:	4649      	mov	r1, r9
 800bc8a:	f7ff fdcd 	bl	800b828 <arith_decode>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	f040 80b0 	bne.w	800bdf4 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 800bc94:	f109 0101 	add.w	r1, r9, #1
 800bc98:	4620      	mov	r0, r4
	k++;
 800bc9a:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800bc9c:	f7ff fdc4 	bl	800b828 <arith_decode>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d16e      	bne.n	800bd82 <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 800bca4:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 800bca8:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 800bcac:	42b2      	cmp	r2, r6
 800bcae:	dcf1      	bgt.n	800bc94 <decode_mcu+0xc6>
 800bcb0:	e038      	b.n	800bd24 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 800bcb2:	1c71      	adds	r1, r6, #1
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f7ff fdb7 	bl	800b828 <arith_decode>
      st += 2; st += sign;
 800bcba:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800bcbc:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800bcbe:	4620      	mov	r0, r4
      st += 2; st += sign;
 800bcc0:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800bcc4:	4651      	mov	r1, sl
 800bcc6:	f7ff fdaf 	bl	800b828 <arith_decode>
 800bcca:	4606      	mov	r6, r0
 800bccc:	b140      	cbz	r0, 800bce0 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800bcce:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800bcd2:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800bcd6:	4651      	mov	r1, sl
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f7ff fda5 	bl	800b828 <arith_decode>
 800bcde:	b9e8      	cbnz	r0, 800bd1c <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800bce0:	9b02      	ldr	r3, [sp, #8]
 800bce2:	4423      	add	r3, r4
 800bce4:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800bce8:	4699      	mov	r9, r3
 800bcea:	2301      	movs	r3, #1
 800bcec:	fa03 f202 	lsl.w	r2, r3, r2
 800bcf0:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 800bcf4:	da2a      	bge.n	800bd4c <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800bcf6:	2200      	movs	r2, #0
      st += 14;
 800bcf8:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800bcfc:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800bcfe:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 800bd02:	1076      	asrs	r6, r6, #1
 800bd04:	d130      	bne.n	800bd68 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 800bd06:	f1b8 0f00 	cmp.w	r8, #0
 800bd0a:	d137      	bne.n	800bd7c <decode_mcu+0x1ae>
 800bd0c:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800bd10:	f8db 2014 	ldr.w	r2, [fp, #20]
 800bd14:	444a      	add	r2, r9
 800bd16:	f8cb 2014 	str.w	r2, [fp, #20]
 800bd1a:	e79e      	b.n	800bc5a <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 800bd1c:	0076      	lsls	r6, r6, #1
 800bd1e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800bd22:	d110      	bne.n	800bd46 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	2275      	movs	r2, #117	; 0x75
 800bd28:	f04f 31ff 	mov.w	r1, #4294967295
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	615a      	str	r2, [r3, #20]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 800bd34:	f04f 33ff 	mov.w	r3, #4294967295
 800bd38:	612b      	str	r3, [r5, #16]
}
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	b007      	add	sp, #28
 800bd3e:	ecbd 8b02 	vpop	{d8}
 800bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800bd46:	f10a 0a01 	add.w	sl, sl, #1
 800bd4a:	e7c4      	b.n	800bcd6 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800bd4c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800bd50:	2301      	movs	r3, #1
 800bd52:	fa03 f202 	lsl.w	r2, r3, r2
 800bd56:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800bd5a:	bfcc      	ite	gt
 800bd5c:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800bd60:	f108 0201 	addle.w	r2, r8, #1
 800bd64:	0092      	lsls	r2, r2, #2
 800bd66:	e7c7      	b.n	800bcf8 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 800bd68:	4620      	mov	r0, r4
 800bd6a:	9102      	str	r1, [sp, #8]
 800bd6c:	f7ff fd5c 	bl	800b828 <arith_decode>
 800bd70:	9902      	ldr	r1, [sp, #8]
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d0c5      	beq.n	800bd02 <decode_mcu+0x134>
 800bd76:	ea49 0906 	orr.w	r9, r9, r6
 800bd7a:	e7c2      	b.n	800bd02 <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 800bd7c:	ea6f 0909 	mvn.w	r9, r9
 800bd80:	e7c6      	b.n	800bd10 <decode_mcu+0x142>
      st += 2;
 800bd82:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800bd86:	ee18 1a10 	vmov	r1, s16
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f7ff fd4c 	bl	800b828 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800bd90:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800bd92:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800bd94:	4620      	mov	r0, r4
 800bd96:	f7ff fd47 	bl	800b828 <arith_decode>
 800bd9a:	4680      	mov	r8, r0
 800bd9c:	b1a8      	cbz	r0, 800bdca <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 800bd9e:	4649      	mov	r1, r9
 800bda0:	4620      	mov	r0, r4
 800bda2:	f7ff fd41 	bl	800b828 <arith_decode>
 800bda6:	b180      	cbz	r0, 800bdca <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800bda8:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 800bdac:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 800bdb0:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800bdb4:	42b1      	cmp	r1, r6
 800bdb6:	bfac      	ite	ge
 800bdb8:	21bd      	movge	r1, #189	; 0xbd
 800bdba:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 800bdbc:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 800bdc0:	4649      	mov	r1, r9
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f7ff fd30 	bl	800b828 <arith_decode>
 800bdc8:	b9b0      	cbnz	r0, 800bdf8 <decode_mcu+0x22a>
      st += 14;
 800bdca:	f109 010e 	add.w	r1, r9, #14
      v = m;
 800bdce:	46c1      	mov	r9, r8
      while (m >>= 1)
 800bdd0:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bdd4:	d118      	bne.n	800be08 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 800bdd6:	9b01      	ldr	r3, [sp, #4]
 800bdd8:	bb03      	cbnz	r3, 800be1c <decode_mcu+0x24e>
 800bdda:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800bdde:	9b04      	ldr	r3, [sp, #16]
 800bde0:	9900      	ldr	r1, [sp, #0]
 800bde2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800bde6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 800bdea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800bdee:	42b3      	cmp	r3, r6
 800bdf0:	f73f af43 	bgt.w	800bc7a <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bdf4:	3701      	adds	r7, #1
 800bdf6:	e70c      	b.n	800bc12 <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 800bdf8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800bdfc:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800be00:	d090      	beq.n	800bd24 <decode_mcu+0x156>
	    st += 1;
 800be02:	f109 0901 	add.w	r9, r9, #1
 800be06:	e7db      	b.n	800bdc0 <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 800be08:	4620      	mov	r0, r4
 800be0a:	9102      	str	r1, [sp, #8]
 800be0c:	f7ff fd0c 	bl	800b828 <arith_decode>
 800be10:	9902      	ldr	r1, [sp, #8]
 800be12:	2800      	cmp	r0, #0
 800be14:	d0dc      	beq.n	800bdd0 <decode_mcu+0x202>
 800be16:	ea49 0908 	orr.w	r9, r9, r8
 800be1a:	e7d9      	b.n	800bdd0 <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 800be1c:	ea6f 0209 	mvn.w	r2, r9
 800be20:	e7dd      	b.n	800bdde <decode_mcu+0x210>

0800be22 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800be22:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800be26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800be2e:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800be32:	ed2d 8b02 	vpush	{d8}
 800be36:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 800be38:	b133      	cbz	r3, 800be48 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 800be3a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800be3c:	b90b      	cbnz	r3, 800be42 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800be3e:	f7ff fe75 	bl	800bb2c <process_restart>
    entropy->restarts_to_go--;
 800be42:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800be44:	3b01      	subs	r3, #1
 800be46:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800be48:	6933      	ldr	r3, [r6, #16]
 800be4a:	3301      	adds	r3, #1
 800be4c:	d076      	beq.n	800bf3c <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800be4e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800be52:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800be54:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 800be58:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800be5c:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800be5e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800be62:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800be66:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800be68:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800be6c:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800be70:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800be72:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800be74:	2f00      	cmp	r7, #0
 800be76:	dc37      	bgt.n	800bee8 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800be78:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800be7c:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800be80:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800be82:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800be86:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800be8a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800be8e:	42ab      	cmp	r3, r5
 800be90:	db54      	blt.n	800bf3c <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800be92:	1e6b      	subs	r3, r5, #1
 800be94:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800be96:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800be98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800be9c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800bea0:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800bea4:	dd05      	ble.n	800beb2 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800bea6:	4651      	mov	r1, sl
 800bea8:	4620      	mov	r0, r4
 800beaa:	f7ff fcbd 	bl	800b828 <arith_decode>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d144      	bne.n	800bf3c <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 800beb2:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 800beb6:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 800beb8:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 800bebc:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800bec0:	b1d1      	cbz	r1, 800bef8 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800bec2:	f10a 0102 	add.w	r1, sl, #2
 800bec6:	4620      	mov	r0, r4
 800bec8:	f7ff fcae 	bl	800b828 <arith_decode>
 800becc:	2800      	cmp	r0, #0
 800bece:	d0dc      	beq.n	800be8a <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 800bed0:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 800bed4:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 800bed8:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800beda:	bfb4      	ite	lt
 800bedc:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800bede:	9a01      	ldrge	r2, [sp, #4]
 800bee0:	4413      	add	r3, r2
 800bee2:	f8a8 3000 	strh.w	r3, [r8]
 800bee6:	e7d0      	b.n	800be8a <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800bee8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800beec:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1c1      	bne.n	800be78 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800bef4:	3f01      	subs	r7, #1
 800bef6:	e7bd      	b.n	800be74 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800bef8:	f10a 0101 	add.w	r1, sl, #1
 800befc:	4620      	mov	r0, r4
 800befe:	f7ff fc93 	bl	800b828 <arith_decode>
 800bf02:	b150      	cbz	r0, 800bf1a <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800bf04:	ee18 1a10 	vmov	r1, s16
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f7ff fc8d 	bl	800b828 <arith_decode>
	  *thiscoef = m1;
 800bf0e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800bf12:	2800      	cmp	r0, #0
 800bf14:	bf18      	it	ne
 800bf16:	4613      	movne	r3, r2
 800bf18:	e7e3      	b.n	800bee2 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 800bf1a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800bf1e:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800bf22:	42aa      	cmp	r2, r5
 800bf24:	dac5      	bge.n	800beb2 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	2275      	movs	r2, #117	; 0x75
 800bf2a:	f04f 31ff 	mov.w	r1, #4294967295
 800bf2e:	4620      	mov	r0, r4
 800bf30:	615a      	str	r2, [r3, #20]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800bf36:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3a:	6133      	str	r3, [r6, #16]
}
 800bf3c:	2001      	movs	r0, #1
 800bf3e:	b005      	add	sp, #20
 800bf40:	ecbd 8b02 	vpop	{d8}
 800bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf48 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800bf48:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800bf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf50:	4604      	mov	r4, r0
 800bf52:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800bf54:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bf58:	b133      	cbz	r3, 800bf68 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800bf5a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800bf5c:	b90b      	cbnz	r3, 800bf62 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800bf5e:	f7ff fde5 	bl	800bb2c <process_restart>
    entropy->restarts_to_go--;
 800bf62:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800bf64:	3b01      	subs	r3, #1
 800bf66:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800bf68:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800bf6c:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800bf6e:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bf70:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800bf72:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bf74:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800bf78:	42ab      	cmp	r3, r5
 800bf7a:	dc02      	bgt.n	800bf82 <decode_mcu_DC_refine+0x3a>
}
 800bf7c:	2001      	movs	r0, #1
 800bf7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800bf82:	4631      	mov	r1, r6
 800bf84:	4620      	mov	r0, r4
 800bf86:	f7ff fc4f 	bl	800b828 <arith_decode>
 800bf8a:	b120      	cbz	r0, 800bf96 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800bf8c:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800bf90:	8813      	ldrh	r3, [r2, #0]
 800bf92:	433b      	orrs	r3, r7
 800bf94:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bf96:	3501      	adds	r5, #1
 800bf98:	e7ec      	b.n	800bf74 <decode_mcu_DC_refine+0x2c>

0800bf9a <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800bf9a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800bf9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	b087      	sub	sp, #28
 800bfa6:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800bfa8:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bfac:	b133      	cbz	r3, 800bfbc <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800bfae:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800bfb0:	b90b      	cbnz	r3, 800bfb6 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800bfb2:	f7ff fdbb 	bl	800bb2c <process_restart>
    entropy->restarts_to_go--;
 800bfb6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800bfbc:	6933      	ldr	r3, [r6, #16]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	d01d      	beq.n	800bffe <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800bfc2:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800bfc4:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800bfc8:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 800bfcc:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800bfce:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800bfd2:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800bfdc:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800bfde:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800bfe2:	42ab      	cmp	r3, r5
 800bfe4:	db0b      	blt.n	800bffe <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800bfe6:	1e69      	subs	r1, r5, #1
 800bfe8:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800bfec:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800bfee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800bff2:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800bff6:	4641      	mov	r1, r8
 800bff8:	f7ff fc16 	bl	800b828 <arith_decode>
 800bffc:	b1b0      	cbz	r0, 800c02c <decode_mcu_AC_first+0x92>
}
 800bffe:	2001      	movs	r0, #1
 800c000:	b007      	add	sp, #28
 800c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800c006:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800c008:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800c00c:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800c010:	42aa      	cmp	r2, r5
 800c012:	da0b      	bge.n	800c02c <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	2275      	movs	r2, #117	; 0x75
 800c018:	f04f 31ff 	mov.w	r1, #4294967295
 800c01c:	4620      	mov	r0, r4
 800c01e:	615a      	str	r2, [r3, #20]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800c024:	f04f 33ff 	mov.w	r3, #4294967295
 800c028:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800c02a:	e7e8      	b.n	800bffe <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800c02c:	f108 0101 	add.w	r1, r8, #1
 800c030:	4620      	mov	r0, r4
 800c032:	f7ff fbf9 	bl	800b828 <arith_decode>
 800c036:	2800      	cmp	r0, #0
 800c038:	d0e5      	beq.n	800c006 <decode_mcu_AC_first+0x6c>
    st += 2;
 800c03a:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800c03e:	4659      	mov	r1, fp
 800c040:	4620      	mov	r0, r4
 800c042:	f7ff fbf1 	bl	800b828 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800c046:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800c048:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800c04a:	4620      	mov	r0, r4
 800c04c:	f7ff fbec 	bl	800b828 <arith_decode>
 800c050:	4607      	mov	r7, r0
 800c052:	b1b0      	cbz	r0, 800c082 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800c054:	4641      	mov	r1, r8
 800c056:	4620      	mov	r0, r4
 800c058:	f7ff fbe6 	bl	800b828 <arith_decode>
 800c05c:	b188      	cbz	r0, 800c082 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800c05e:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800c060:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800c062:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800c066:	18e1      	adds	r1, r4, r3
 800c068:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800c06c:	42a9      	cmp	r1, r5
 800c06e:	bfac      	ite	ge
 800c070:	21bd      	movge	r1, #189	; 0xbd
 800c072:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800c074:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800c078:	4641      	mov	r1, r8
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7ff fbd4 	bl	800b828 <arith_decode>
 800c080:	b988      	cbnz	r0, 800c0a6 <decode_mcu_AC_first+0x10c>
    st += 14;
 800c082:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800c086:	463a      	mov	r2, r7
    while (m >>= 1)
 800c088:	107f      	asrs	r7, r7, #1
 800c08a:	d113      	bne.n	800c0b4 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	b9e3      	cbnz	r3, 800c0ca <decode_mcu_AC_first+0x130>
 800c090:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800c092:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800c096:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800c09a:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800c09c:	408a      	lsls	r2, r1
 800c09e:	9902      	ldr	r1, [sp, #8]
 800c0a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800c0a4:	e79b      	b.n	800bfde <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800c0a6:	007f      	lsls	r7, r7, #1
 800c0a8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800c0ac:	d0b2      	beq.n	800c014 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800c0ae:	f108 0801 	add.w	r8, r8, #1
 800c0b2:	e7e1      	b.n	800c078 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c0ba:	f7ff fbb5 	bl	800b828 <arith_decode>
 800c0be:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d0e0      	beq.n	800c088 <decode_mcu_AC_first+0xee>
 800c0c6:	433a      	orrs	r2, r7
 800c0c8:	e7de      	b.n	800c088 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800c0ca:	43d2      	mvns	r2, r2
 800c0cc:	e7e1      	b.n	800c092 <decode_mcu_AC_first+0xf8>

0800c0ce <decode_mcu_DC_first>:
{
 800c0ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800c0d2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800c0da:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800c0de:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800c0e0:	b133      	cbz	r3, 800c0f0 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800c0e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800c0e4:	b90b      	cbnz	r3, 800c0ea <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800c0e6:	f7ff fd21 	bl	800bb2c <process_restart>
    entropy->restarts_to_go--;
 800c0ea:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800c0f0:	6933      	ldr	r3, [r6, #16]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	d073      	beq.n	800c1de <decode_mcu_DC_first+0x110>
 800c0f6:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c0fa:	f04f 0800 	mov.w	r8, #0
 800c0fe:	9301      	str	r3, [sp, #4]
 800c100:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c104:	4543      	cmp	r3, r8
 800c106:	dd6a      	ble.n	800c1de <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 800c108:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800c10a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800c10c:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800c10e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c112:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800c114:	f852 3b04 	ldr.w	r3, [r2], #4
 800c118:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800c11a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c11e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800c122:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800c126:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800c12a:	6952      	ldr	r2, [r2, #20]
 800c12c:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 800c130:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800c132:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 800c136:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800c138:	4629      	mov	r1, r5
 800c13a:	f7ff fb75 	bl	800b828 <arith_decode>
 800c13e:	b958      	cbnz	r0, 800c158 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800c140:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800c144:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c148:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800c14c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800c150:	4093      	lsls	r3, r2
 800c152:	9a02      	ldr	r2, [sp, #8]
 800c154:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c156:	e7d3      	b.n	800c100 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800c158:	1c69      	adds	r1, r5, #1
 800c15a:	4620      	mov	r0, r4
 800c15c:	f7ff fb64 	bl	800b828 <arith_decode>
      st += 2; st += sign;
 800c160:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800c162:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800c164:	4620      	mov	r0, r4
      st += 2; st += sign;
 800c166:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800c16a:	4659      	mov	r1, fp
 800c16c:	f7ff fb5c 	bl	800b828 <arith_decode>
 800c170:	4605      	mov	r5, r0
 800c172:	b140      	cbz	r0, 800c186 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800c174:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800c178:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800c17c:	4659      	mov	r1, fp
 800c17e:	4620      	mov	r0, r4
 800c180:	f7ff fb52 	bl	800b828 <arith_decode>
 800c184:	b9e0      	cbnz	r0, 800c1c0 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800c186:	9b00      	ldr	r3, [sp, #0]
 800c188:	4423      	add	r3, r4
 800c18a:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800c18e:	4699      	mov	r9, r3
 800c190:	2301      	movs	r3, #1
 800c192:	fa03 f202 	lsl.w	r2, r3, r2
 800c196:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800c19a:	da27      	bge.n	800c1ec <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800c19c:	2300      	movs	r3, #0
 800c19e:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800c1a2:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800c1a6:	46a9      	mov	r9, r5
 800c1a8:	106d      	asrs	r5, r5, #1
 800c1aa:	d12d      	bne.n	800c208 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 800c1ac:	2f00      	cmp	r7, #0
 800c1ae:	d135      	bne.n	800c21c <decode_mcu_DC_first+0x14e>
 800c1b0:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800c1b4:	f8da 2014 	ldr.w	r2, [sl, #20]
 800c1b8:	444a      	add	r2, r9
 800c1ba:	f8ca 2014 	str.w	r2, [sl, #20]
 800c1be:	e7c1      	b.n	800c144 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800c1c0:	006d      	lsls	r5, r5, #1
 800c1c2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800c1c6:	d10e      	bne.n	800c1e6 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800c1c8:	6823      	ldr	r3, [r4, #0]
 800c1ca:	2275      	movs	r2, #117	; 0x75
 800c1cc:	f04f 31ff 	mov.w	r1, #4294967295
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	615a      	str	r2, [r3, #20]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800c1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1dc:	6133      	str	r3, [r6, #16]
}
 800c1de:	2001      	movs	r0, #1
 800c1e0:	b005      	add	sp, #20
 800c1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800c1e6:	f10b 0b01 	add.w	fp, fp, #1
 800c1ea:	e7c7      	b.n	800c17c <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800c1ec:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	fa03 f202 	lsl.w	r2, r3, r2
 800c1f6:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800c1fa:	bfcc      	ite	gt
 800c1fc:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800c1fe:	1c7a      	addle	r2, r7, #1
 800c200:	0092      	lsls	r2, r2, #2
 800c202:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800c206:	e7cc      	b.n	800c1a2 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 800c208:	4620      	mov	r0, r4
 800c20a:	9100      	str	r1, [sp, #0]
 800c20c:	f7ff fb0c 	bl	800b828 <arith_decode>
 800c210:	9900      	ldr	r1, [sp, #0]
 800c212:	2800      	cmp	r0, #0
 800c214:	d0c8      	beq.n	800c1a8 <decode_mcu_DC_first+0xda>
 800c216:	ea49 0905 	orr.w	r9, r9, r5
 800c21a:	e7c5      	b.n	800c1a8 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 800c21c:	ea6f 0909 	mvn.w	r9, r9
 800c220:	e7c8      	b.n	800c1b4 <decode_mcu_DC_first+0xe6>
	...

0800c224 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c224:	6843      	ldr	r3, [r0, #4]
 800c226:	22bc      	movs	r2, #188	; 0xbc
 800c228:	2101      	movs	r1, #1
 800c22a:	681b      	ldr	r3, [r3, #0]
{
 800c22c:	b570      	push	{r4, r5, r6, lr}
 800c22e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c230:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800c232:	4b14      	ldr	r3, [pc, #80]	; (800c284 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c234:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800c236:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800c23a:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 800c23c:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800c240:	2100      	movs	r1, #0
 800c242:	f01e fd55 	bl	802acf0 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800c246:	2371      	movs	r3, #113	; 0x71
 800c248:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800c24c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c250:	b17b      	cbz	r3, 800c272 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c252:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c254:	2101      	movs	r1, #1
 800c256:	6863      	ldr	r3, [r4, #4]
 800c258:	4620      	mov	r0, r4
 800c25a:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800c25c:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4798      	blx	r3
 800c262:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800c264:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800c268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c26a:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800c26e:	42ab      	cmp	r3, r5
 800c270:	dc00      	bgt.n	800c274 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800c272:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800c274:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c278:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800c27a:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800c27c:	f01e fd38 	bl	802acf0 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800c280:	e7f2      	b.n	800c268 <jinit_arith_decoder+0x44>
 800c282:	bf00      	nop
 800c284:	0800b905 	.word	0x0800b905

0800c288 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800c288:	4770      	bx	lr
	...

0800c28c <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800c28c:	6803      	ldr	r3, [r0, #0]
 800c28e:	227b      	movs	r2, #123	; 0x7b
 800c290:	f04f 31ff 	mov.w	r1, #4294967295
{
 800c294:	b510      	push	{r4, lr}
 800c296:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800c298:	615a      	str	r2, [r3, #20]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800c29e:	69a3      	ldr	r3, [r4, #24]
 800c2a0:	4a02      	ldr	r2, [pc, #8]	; (800c2ac <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800c2a2:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800c2a4:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	605a      	str	r2, [r3, #4]
}
 800c2aa:	bd10      	pop	{r4, pc}
 800c2ac:	0802e630 	.word	0x0802e630

0800c2b0 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800c2b0:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800c2b2:	1e0c      	subs	r4, r1, #0
{
 800c2b4:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800c2b6:	dd08      	ble.n	800c2ca <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800c2b8:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800c2ba:	6869      	ldr	r1, [r5, #4]
 800c2bc:	42a1      	cmp	r1, r4
 800c2be:	db05      	blt.n	800c2cc <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800c2c0:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800c2c2:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800c2c4:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800c2c6:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800c2c8:	602b      	str	r3, [r5, #0]
  }
}
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 800c2cc:	68eb      	ldr	r3, [r5, #12]
 800c2ce:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 800c2d0:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800c2d2:	4798      	blx	r3
 800c2d4:	e7f1      	b.n	800c2ba <skip_input_data+0xa>

0800c2d6 <term_source>:
 800c2d6:	4770      	bx	lr

0800c2d8 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	4604      	mov	r4, r0
 800c2dc:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800c2de:	460d      	mov	r5, r1
 800c2e0:	b101      	cbz	r1, 800c2e4 <jpeg_mem_src+0xc>
 800c2e2:	b92a      	cbnz	r2, 800c2f0 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	222b      	movs	r2, #43	; 0x2b
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	615a      	str	r2, [r3, #20]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800c2f0:	69a1      	ldr	r1, [r4, #24]
 800c2f2:	b929      	cbnz	r1, 800c300 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800c2f4:	6863      	ldr	r3, [r4, #4]
 800c2f6:	221c      	movs	r2, #28
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800c2fe:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800c300:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800c302:	4a06      	ldr	r2, [pc, #24]	; (800c31c <jpeg_mem_src+0x44>)
 800c304:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800c306:	4a06      	ldr	r2, [pc, #24]	; (800c320 <jpeg_mem_src+0x48>)
 800c308:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800c30a:	4a06      	ldr	r2, [pc, #24]	; (800c324 <jpeg_mem_src+0x4c>)
 800c30c:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800c30e:	4a06      	ldr	r2, [pc, #24]	; (800c328 <jpeg_mem_src+0x50>)
 800c310:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800c312:	4a06      	ldr	r2, [pc, #24]	; (800c32c <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800c314:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800c318:	619a      	str	r2, [r3, #24]
}
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	0800c289 	.word	0x0800c289
 800c320:	0800c28d 	.word	0x0800c28d
 800c324:	0800c2b1 	.word	0x0800c2b1
 800c328:	08010509 	.word	0x08010509
 800c32c:	0800c2d7 	.word	0x0800c2d7

0800c330 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800c330:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800c334:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800c338:	2a01      	cmp	r2, #1
 800c33a:	dd05      	ble.n	800c348 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 800c33c:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800c33e:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800c340:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800c342:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800c346:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800c348:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800c34c:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800c350:	3a01      	subs	r2, #1
 800c352:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800c356:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800c358:	bf34      	ite	cc
 800c35a:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800c35c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800c35e:	e7ee      	b.n	800c33e <start_iMCU_row+0xe>

0800c360 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800c360:	2200      	movs	r2, #0
 800c362:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800c366:	f7ff bfe3 	b.w	800c330 <start_iMCU_row>

0800c36a <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800c36a:	2000      	movs	r0, #0
 800c36c:	4770      	bx	lr

0800c36e <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800c36e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c372:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 800c376:	b08f      	sub	sp, #60	; 0x3c
 800c378:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800c37a:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c37e:	465f      	mov	r7, fp
 800c380:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800c382:	f04f 0801 	mov.w	r8, #1
 800c386:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c38a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c38e:	42b3      	cmp	r3, r6
 800c390:	dc13      	bgt.n	800c3ba <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800c392:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800c394:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800c398:	69eb      	ldr	r3, [r5, #28]
 800c39a:	42b3      	cmp	r3, r6
 800c39c:	dc22      	bgt.n	800c3e4 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800c39e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c3a2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800c3ae:	d270      	bcs.n	800c492 <consume_data+0x124>
    start_iMCU_row(cinfo);
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f7ff ffbd 	bl	800c330 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800c3b6:	2003      	movs	r0, #3
 800c3b8:	e044      	b.n	800c444 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800c3ba:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800c3be:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800c3c0:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800c3c2:	6849      	ldr	r1, [r1, #4]
 800c3c4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800c3c8:	3112      	adds	r1, #18
 800c3ca:	f8cd 8000 	str.w	r8, [sp]
 800c3ce:	435a      	muls	r2, r3
 800c3d0:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800c3d4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800c3d8:	4620      	mov	r0, r4
 800c3da:	47d0      	blx	sl
 800c3dc:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c3e0:	3601      	adds	r6, #1
 800c3e2:	e7d2      	b.n	800c38a <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800c3e4:	00b3      	lsls	r3, r6, #2
 800c3e6:	696f      	ldr	r7, [r5, #20]
 800c3e8:	9308      	str	r3, [sp, #32]
 800c3ea:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800c3ee:	42bb      	cmp	r3, r7
 800c3f0:	f04f 0300 	mov.w	r3, #0
 800c3f4:	d94a      	bls.n	800c48c <consume_data+0x11e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c3f6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800c3fa:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800c3fc:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c3fe:	9206      	str	r2, [sp, #24]
 800c400:	e013      	b.n	800c42a <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800c402:	f85a 2b04 	ldr.w	r2, [sl], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c406:	f04f 0c00 	mov.w	ip, #0
 800c40a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c40e:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800c412:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800c414:	fb07 f20e 	mul.w	r2, r7, lr
 800c418:	01d2      	lsls	r2, r2, #7
 800c41a:	9204      	str	r2, [sp, #16]
 800c41c:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800c420:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c422:	9a05      	ldr	r2, [sp, #20]
 800c424:	4562      	cmp	r2, ip
 800c426:	dc10      	bgt.n	800c44a <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c428:	3301      	adds	r3, #1
 800c42a:	9a06      	ldr	r2, [sp, #24]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	dce8      	bgt.n	800c402 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800c430:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800c434:	f105 0120 	add.w	r1, r5, #32
 800c438:	4620      	mov	r0, r4
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	4798      	blx	r3
 800c43e:	bb18      	cbnz	r0, 800c488 <consume_data+0x11a>
	coef->MCU_ctr = MCU_col_num;
 800c440:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800c444:	b00f      	add	sp, #60	; 0x3c
 800c446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800c44a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800c44e:	9904      	ldr	r1, [sp, #16]
 800c450:	f852 2008 	ldr.w	r2, [r2, r8]
 800c454:	440a      	add	r2, r1
 800c456:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800c458:	9a03      	ldr	r2, [sp, #12]
 800c45a:	f102 0108 	add.w	r1, r2, #8
 800c45e:	2200      	movs	r2, #0
 800c460:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800c464:	9807      	ldr	r0, [sp, #28]
 800c466:	4596      	cmp	lr, r2
 800c468:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800c46c:	dc08      	bgt.n	800c480 <consume_data+0x112>
 800c46e:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c470:	f10c 0c01 	add.w	ip, ip, #1
 800c474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c476:	f108 0804 	add.w	r8, r8, #4
 800c47a:	4411      	add	r1, r2
 800c47c:	9103      	str	r1, [sp, #12]
 800c47e:	e7d0      	b.n	800c422 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800c480:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800c482:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800c486:	e7ed      	b.n	800c464 <consume_data+0xf6>
	 MCU_col_num++) {
 800c488:	3701      	adds	r7, #1
 800c48a:	e7ae      	b.n	800c3ea <consume_data+0x7c>
       yoffset++) {
 800c48c:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800c48e:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800c490:	e782      	b.n	800c398 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800c492:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800c496:	4620      	mov	r0, r4
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800c49c:	2004      	movs	r0, #4
 800c49e:	e7d1      	b.n	800c444 <consume_data+0xd6>

0800c4a0 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	b089      	sub	sp, #36	; 0x24
 800c4a8:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800c4aa:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c4ae:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800c4b2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800c4b6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	db1d      	blt.n	800c4fa <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800c4be:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800c4c2:	d103      	bne.n	800c4cc <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800c4c4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d916      	bls.n	800c4fa <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c4cc:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c4ce:	2600      	movs	r6, #0
 800c4d0:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c4d4:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800c4d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c4da:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c4dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800c4de:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c4e2:	42b3      	cmp	r3, r6
 800c4e4:	dc13      	bgt.n	800c50e <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800c4e6:	1c50      	adds	r0, r2, #1
 800c4e8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800c4ec:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800c4f0:	4290      	cmp	r0, r2
 800c4f2:	bf2c      	ite	cs
 800c4f4:	2004      	movcs	r0, #4
 800c4f6:	2003      	movcc	r0, #3
 800c4f8:	e006      	b.n	800c508 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800c4fa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800c4fe:	4620      	mov	r0, r4
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4798      	blx	r3
 800c504:	2800      	cmp	r0, #0
 800c506:	d1d4      	bne.n	800c4b2 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800c508:	b009      	add	sp, #36	; 0x24
 800c50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800c50e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c510:	b913      	cbnz	r3, 800c518 <decompress_data+0x78>
       ci++, compptr++) {
 800c512:	3601      	adds	r6, #1
 800c514:	3558      	adds	r5, #88	; 0x58
 800c516:	e7e1      	b.n	800c4dc <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800c518:	6861      	ldr	r1, [r4, #4]
 800c51a:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800c51c:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800c51e:	9000      	str	r0, [sp, #0]
 800c520:	4620      	mov	r0, r4
 800c522:	6a0f      	ldr	r7, [r1, #32]
 800c524:	435a      	muls	r2, r3
 800c526:	9906      	ldr	r1, [sp, #24]
 800c528:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800c52c:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800c52e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800c532:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800c534:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800c536:	4293      	cmp	r3, r2
 800c538:	68eb      	ldr	r3, [r5, #12]
 800c53a:	d221      	bcs.n	800c580 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800c53c:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800c53e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c542:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800c544:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800c54c:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c550:	9202      	str	r2, [sp, #8]
 800c552:	9a02      	ldr	r2, [sp, #8]
 800c554:	4552      	cmp	r2, sl
 800c556:	dadc      	bge.n	800c512 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800c558:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800c55a:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800c55e:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800c560:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800c562:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c566:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800c568:	69e9      	ldr	r1, [r5, #28]
 800c56a:	9a05      	ldr	r2, [sp, #20]
 800c56c:	4541      	cmp	r1, r8
 800c56e:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800c572:	d80f      	bhi.n	800c594 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800c574:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c576:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c57a:	9a02      	ldr	r2, [sp, #8]
 800c57c:	3201      	adds	r2, #1
 800c57e:	e7e7      	b.n	800c550 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c580:	6a2a      	ldr	r2, [r5, #32]
 800c582:	fbb2 f1f3 	udiv	r1, r2, r3
 800c586:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800c58a:	f1ba 0f00 	cmp.w	sl, #0
 800c58e:	bf08      	it	eq
 800c590:	469a      	moveq	sl, r3
 800c592:	e7d4      	b.n	800c53e <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800c594:	f8cd 9000 	str.w	r9, [sp]
 800c598:	4629      	mov	r1, r5
 800c59a:	9307      	str	r3, [sp, #28]
 800c59c:	4620      	mov	r0, r4
 800c59e:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800c5a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800c5a2:	f108 0801 	add.w	r8, r8, #1
 800c5a6:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800c5a8:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800c5aa:	e7dd      	b.n	800c568 <decompress_data+0xc8>

0800c5ac <start_output_pass>:
{
 800c5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800c5b0:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800c5b4:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800c5b6:	692b      	ldr	r3, [r5, #16]
 800c5b8:	b323      	cbz	r3, 800c604 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800c5ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d04b      	beq.n	800c658 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800c5c0:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d047      	beq.n	800c658 <start_output_pass+0xac>
 800c5c8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d043      	beq.n	800c658 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800c5d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c5d2:	b93b      	cbnz	r3, 800c5e4 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c5d4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800c5d6:	2118      	movs	r1, #24
 800c5d8:	6843      	ldr	r3, [r0, #4]
 800c5da:	434a      	muls	r2, r1
 800c5dc:	2101      	movs	r1, #1
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800c5e2:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c5e4:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800c5e6:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c5ea:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800c5ee:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800c5f2:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c5f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c5f6:	fb0e c703 	mla	r7, lr, r3, ip
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	db07      	blt.n	800c60e <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800c5fe:	b359      	cbz	r1, 800c658 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800c600:	4b16      	ldr	r3, [pc, #88]	; (800c65c <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800c602:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800c60e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c610:	b312      	cbz	r2, 800c658 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800c612:	8816      	ldrh	r6, [r2, #0]
 800c614:	b306      	cbz	r6, 800c658 <start_output_pass+0xac>
 800c616:	8856      	ldrh	r6, [r2, #2]
 800c618:	b1f6      	cbz	r6, 800c658 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800c61a:	8a16      	ldrh	r6, [r2, #16]
 800c61c:	b1e6      	cbz	r6, 800c658 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800c61e:	8c16      	ldrh	r6, [r2, #32]
 800c620:	b1d6      	cbz	r6, 800c658 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800c622:	8a56      	ldrh	r6, [r2, #18]
 800c624:	b1c6      	cbz	r6, 800c658 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800c626:	8892      	ldrh	r2, [r2, #4]
 800c628:	b1b2      	cbz	r2, 800c658 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800c62a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800c62e:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800c630:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800c632:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800c636:	2a00      	cmp	r2, #0
 800c638:	db0e      	blt.n	800c658 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800c63a:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800c63c:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800c640:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800c642:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800c646:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800c64a:	bf18      	it	ne
 800c64c:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800c64e:	2a06      	cmp	r2, #6
 800c650:	d1f4      	bne.n	800c63c <start_output_pass+0x90>
       ci++, compptr++) {
 800c652:	3301      	adds	r3, #1
 800c654:	3058      	adds	r0, #88	; 0x58
 800c656:	e7cd      	b.n	800c5f4 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800c658:	4b01      	ldr	r3, [pc, #4]	; (800c660 <start_output_pass+0xb4>)
 800c65a:	e7d2      	b.n	800c602 <start_output_pass+0x56>
 800c65c:	0800c7e3 	.word	0x0800c7e3
 800c660:	0800c4a1 	.word	0x0800c4a1

0800c664 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800c664:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800c66c:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800c66e:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800c672:	4604      	mov	r4, r0
 800c674:	ed2d 8b02 	vpush	{d8}
 800c678:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800c67a:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c67c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800c680:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c682:	3b01      	subs	r3, #1
 800c684:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800c686:	69ab      	ldr	r3, [r5, #24]
 800c688:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800c68a:	f105 0320 	add.w	r3, r5, #32
 800c68e:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800c692:	69eb      	ldr	r3, [r5, #28]
 800c694:	9a03      	ldr	r2, [sp, #12]
 800c696:	4293      	cmp	r3, r2
 800c698:	dc13      	bgt.n	800c6c2 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800c69a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800c69e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800c6a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800c6b4:	f080 808e 	bcs.w	800c7d4 <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f7ff fe39 	bl	800c330 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800c6be:	2003      	movs	r0, #3
 800c6c0:	e02a      	b.n	800c718 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800c6c2:	696f      	ldr	r7, [r5, #20]
 800c6c4:	9b08      	ldr	r3, [sp, #32]
 800c6c6:	429f      	cmp	r7, r3
 800c6c8:	d905      	bls.n	800c6d6 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800c6ce:	9b03      	ldr	r3, [sp, #12]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	9303      	str	r3, [sp, #12]
 800c6d4:	e7dd      	b.n	800c692 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800c6d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800c6da:	b133      	cbz	r3, 800c6ea <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800c6dc:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	6a28      	ldr	r0, [r5, #32]
 800c6e4:	01d2      	lsls	r2, r2, #7
 800c6e6:	f01e fb03 	bl	802acf0 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800c6ea:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800c6ee:	ee18 1a10 	vmov	r1, s16
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	4798      	blx	r3
 800c6f8:	b158      	cbz	r0, 800c712 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c6fa:	f04f 0b00 	mov.w	fp, #0
 800c6fe:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800c702:	46da      	mov	sl, fp
 800c704:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c706:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c70a:	455b      	cmp	r3, fp
 800c70c:	dc09      	bgt.n	800c722 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800c70e:	3701      	adds	r7, #1
 800c710:	e7d8      	b.n	800c6c4 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800c712:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800c714:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800c718:	b00f      	add	sp, #60	; 0x3c
 800c71a:	ecbd 8b02 	vpop	{d8}
 800c71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800c722:	9b05      	ldr	r3, [sp, #20]
 800c724:	f853 1b04 	ldr.w	r1, [r3], #4
 800c728:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800c72a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c72c:	b923      	cbnz	r3, 800c738 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800c72e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c730:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c732:	f10b 0b01 	add.w	fp, fp, #1
 800c736:	e7e6      	b.n	800c706 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800c738:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c73a:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800c73e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800c742:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800c744:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800c74c:	9b08      	ldr	r3, [sp, #32]
 800c74e:	429f      	cmp	r7, r3
 800c750:	bf34      	ite	cc
 800c752:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800c754:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800c756:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800c758:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800c75a:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800c75c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c75e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c762:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800c766:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800c768:	437a      	muls	r2, r7
 800c76a:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c76c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800c76e:	4542      	cmp	r2, r8
 800c770:	dddf      	ble.n	800c732 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800c772:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800c776:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c778:	4282      	cmp	r2, r0
 800c77a:	d304      	bcc.n	800c786 <decompress_onepass+0x122>
 800c77c:	9a03      	ldr	r2, [sp, #12]
 800c77e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800c780:	4442      	add	r2, r8
 800c782:	4290      	cmp	r0, r2
 800c784:	dd0b      	ble.n	800c79e <decompress_onepass+0x13a>
 800c786:	f10a 0908 	add.w	r9, sl, #8
 800c78a:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800c78e:	f04f 0900 	mov.w	r9, #0
 800c792:	9207      	str	r2, [sp, #28]
 800c794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c796:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800c798:	9a06      	ldr	r2, [sp, #24]
 800c79a:	4591      	cmp	r9, r2
 800c79c:	db07      	blt.n	800c7ae <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800c79e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c7a0:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800c7a4:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800c7a6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800c7a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800c7ac:	e7de      	b.n	800c76c <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800c7ae:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800c7b0:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800c7b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c7b8:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 800c7ba:	9804      	ldr	r0, [sp, #16]
 800c7bc:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800c7c0:	9000      	str	r0, [sp, #0]
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800c7c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c7c8:	9b04      	ldr	r3, [sp, #16]
 800c7ca:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800c7cc:	4413      	add	r3, r2
 800c7ce:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800c7d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7d2:	e7e1      	b.n	800c798 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800c7d4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800c7d8:	4620      	mov	r0, r4
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800c7de:	2004      	movs	r0, #4
 800c7e0:	e79a      	b.n	800c718 <decompress_onepass+0xb4>

0800c7e2 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800c7e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800c7e6:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800c7ea:	b0c5      	sub	sp, #276	; 0x114
 800c7ec:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c7ee:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800c7f2:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800c7f4:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800c7f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c7fa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800c7fe:	428b      	cmp	r3, r1
 800c800:	dc03      	bgt.n	800c80a <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800c802:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800c806:	6950      	ldr	r0, [r2, #20]
 800c808:	b1a8      	cbz	r0, 800c836 <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c80a:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c80c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800c810:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c812:	2300      	movs	r3, #0
 800c814:	9303      	str	r3, [sp, #12]
 800c816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c818:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800c81a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c81e:	428b      	cmp	r3, r1
 800c820:	dc1e      	bgt.n	800c860 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800c822:	3201      	adds	r2, #1
 800c824:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800c828:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800c82c:	4282      	cmp	r2, r0
 800c82e:	bf2c      	ite	cs
 800c830:	2004      	movcs	r0, #4
 800c832:	2003      	movcc	r0, #3
 800c834:	e011      	b.n	800c85a <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800c836:	428b      	cmp	r3, r1
 800c838:	d10a      	bne.n	800c850 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800c83a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800c83e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800c842:	2900      	cmp	r1, #0
 800c844:	bf08      	it	eq
 800c846:	3301      	addeq	r3, #1
 800c848:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c84c:	4299      	cmp	r1, r3
 800c84e:	d8dc      	bhi.n	800c80a <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800c850:	6813      	ldr	r3, [r2, #0]
 800c852:	4620      	mov	r0, r4
 800c854:	4798      	blx	r3
 800c856:	2800      	cmp	r0, #0
 800c858:	d1cd      	bne.n	800c7f6 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800c85a:	b045      	add	sp, #276	; 0x114
 800c85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800c860:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c862:	b923      	cbnz	r3, 800c86e <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800c864:	9b03      	ldr	r3, [sp, #12]
 800c866:	3558      	adds	r5, #88	; 0x58
 800c868:	3301      	adds	r3, #1
 800c86a:	9303      	str	r3, [sp, #12]
 800c86c:	e7d3      	b.n	800c816 <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800c86e:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800c870:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800c872:	4293      	cmp	r3, r2
 800c874:	f240 815a 	bls.w	800cb2c <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800c878:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800c87a:	4681      	mov	r9, r0
      last_row = FALSE;
 800c87c:	2100      	movs	r1, #0
      last_row = TRUE;
 800c87e:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800c880:	6861      	ldr	r1, [r4, #4]
 800c882:	9e03      	ldr	r6, [sp, #12]
 800c884:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800c888:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c88a:	3148      	adds	r1, #72	; 0x48
 800c88c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800c890:	2a00      	cmp	r2, #0
 800c892:	f000 8159 	beq.w	800cb48 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800c896:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800c898:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800c89a:	4403      	add	r3, r0
 800c89c:	4342      	muls	r2, r0
 800c89e:	4620      	mov	r0, r4
 800c8a0:	9600      	str	r6, [sp, #0]
 800c8a2:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800c8a4:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800c8a6:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800c8a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800c8ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c8ae:	2218      	movs	r2, #24
 800c8b0:	9903      	ldr	r1, [sp, #12]
 800c8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800c8b4:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800c8b6:	fb02 3301 	mla	r3, r2, r1, r3
 800c8ba:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800c8bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800c8be:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800c8c0:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800c8c4:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800c8c8:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800c8ca:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800c8cc:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800c8ce:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800c8d0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800c8d4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800c8dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c8de:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800c8e2:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800c8e4:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800c8e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c8ea:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800c8ee:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800c8f0:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800c8f4:	9315      	str	r3, [sp, #84]	; 0x54
 800c8f6:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800c8fa:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800c8fc:	01f3      	lsls	r3, r6, #7
 800c8fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800c900:	0233      	lsls	r3, r6, #8
 800c902:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800c904:	01cb      	lsls	r3, r1, #7
 800c906:	9319      	str	r3, [sp, #100]	; 0x64
 800c908:	020b      	lsls	r3, r1, #8
 800c90a:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800c90c:	01d3      	lsls	r3, r2, #7
 800c90e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c910:	0213      	lsls	r3, r2, #8
 800c912:	931c      	str	r3, [sp, #112]	; 0x70
 800c914:	1f03      	subs	r3, r0, #4
 800c916:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c918:	2300      	movs	r3, #0
 800c91a:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800c91c:	f109 33ff 	add.w	r3, r9, #4294967295
 800c920:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800c922:	9b04      	ldr	r3, [sp, #16]
 800c924:	454b      	cmp	r3, r9
 800c926:	da9d      	bge.n	800c864 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800c928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c92a:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800c92e:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800c930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c932:	b11b      	cbz	r3, 800c93c <decompress_smooth_data+0x15a>
 800c934:	9b04      	ldr	r3, [sp, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	f000 810c 	beq.w	800cb54 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800c93c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c93e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c942:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800c944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c946:	b123      	cbz	r3, 800c952 <decompress_smooth_data+0x170>
 800c948:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c94a:	9a04      	ldr	r2, [sp, #16]
 800c94c:	4293      	cmp	r3, r2
 800c94e:	f000 8104 	beq.w	800cb5a <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800c952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c958:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800c95a:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800c95c:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c95e:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800c962:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c964:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800c966:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800c96a:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800c96c:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800c96e:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800c970:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800c972:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800c976:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800c97a:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800c97c:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800c97e:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800c982:	2201      	movs	r2, #1
 800c984:	a924      	add	r1, sp, #144	; 0x90
 800c986:	4640      	mov	r0, r8
 800c988:	930a      	str	r3, [sp, #40]	; 0x28
 800c98a:	f00b fe0e 	bl	80185aa <jcopy_block_row>
	if (block_num < last_block_column) {
 800c98e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c992:	4293      	cmp	r3, r2
 800c994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c996:	f240 80ea 	bls.w	800cb6e <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800c99a:	9a07      	ldr	r2, [sp, #28]
 800c99c:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800c9a0:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800c9a2:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800c9a6:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800c9a8:	9a08      	ldr	r2, [sp, #32]
 800c9aa:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800c9ae:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800c9b0:	9a05      	ldr	r2, [sp, #20]
 800c9b2:	6851      	ldr	r1, [r2, #4]
 800c9b4:	b1c1      	cbz	r1, 800c9e8 <decompress_smooth_data+0x206>
 800c9b6:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800c9ba:	b9aa      	cbnz	r2, 800c9e8 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800c9bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9be:	1a3a      	subs	r2, r7, r0
 800c9c0:	9806      	ldr	r0, [sp, #24]
 800c9c2:	4342      	muls	r2, r0
	  if (num >= 0) {
 800c9c4:	2024      	movs	r0, #36	; 0x24
 800c9c6:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c9c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800c9ca:	f100 80d7 	bmi.w	800cb7c <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c9ce:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c9d0:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800c9d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c9d4:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800c9d8:	dd04      	ble.n	800c9e4 <decompress_smooth_data+0x202>
 800c9da:	fa06 f101 	lsl.w	r1, r6, r1
 800c9de:	4291      	cmp	r1, r2
 800c9e0:	dc00      	bgt.n	800c9e4 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800c9e2:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800c9e4:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800c9e8:	9a05      	ldr	r2, [sp, #20]
 800c9ea:	6891      	ldr	r1, [r2, #8]
 800c9ec:	b1c9      	cbz	r1, 800ca22 <decompress_smooth_data+0x240>
 800c9ee:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800c9f2:	b9b2      	cbnz	r2, 800ca22 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800c9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9f6:	9806      	ldr	r0, [sp, #24]
 800c9f8:	ebab 0202 	sub.w	r2, fp, r2
 800c9fc:	4342      	muls	r2, r0
	  if (num >= 0) {
 800c9fe:	2024      	movs	r0, #36	; 0x24
 800ca00:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800ca02:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800ca04:	f100 80c8 	bmi.w	800cb98 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800ca08:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ca0a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800ca0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ca0e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ca12:	dd04      	ble.n	800ca1e <decompress_smooth_data+0x23c>
 800ca14:	fa06 f101 	lsl.w	r1, r6, r1
 800ca18:	4291      	cmp	r1, r2
 800ca1a:	dc00      	bgt.n	800ca1e <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800ca1c:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800ca1e:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800ca22:	9a05      	ldr	r2, [sp, #20]
 800ca24:	68d1      	ldr	r1, [r2, #12]
 800ca26:	b1d1      	cbz	r1, 800ca5e <decompress_smooth_data+0x27c>
 800ca28:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800ca2c:	b9ba      	cbnz	r2, 800ca5e <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800ca2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca30:	9806      	ldr	r0, [sp, #24]
 800ca32:	445a      	add	r2, fp
 800ca34:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800ca38:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800ca3a:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800ca3c:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800ca40:	f100 80b8 	bmi.w	800cbb4 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800ca44:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ca46:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800ca48:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ca4a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ca4e:	dd04      	ble.n	800ca5a <decompress_smooth_data+0x278>
 800ca50:	fa06 f101 	lsl.w	r1, r6, r1
 800ca54:	4291      	cmp	r1, r2
 800ca56:	dc00      	bgt.n	800ca5a <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800ca58:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800ca5a:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800ca5e:	9a05      	ldr	r2, [sp, #20]
 800ca60:	6912      	ldr	r2, [r2, #16]
 800ca62:	b1e2      	cbz	r2, 800ca9e <decompress_smooth_data+0x2bc>
 800ca64:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800ca68:	b9c9      	cbnz	r1, 800ca9e <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800ca6a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ca6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ca6e:	1a09      	subs	r1, r1, r0
 800ca70:	1acb      	subs	r3, r1, r3
 800ca72:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ca74:	440b      	add	r3, r1
 800ca76:	9906      	ldr	r1, [sp, #24]
 800ca78:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800ca7a:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800ca7c:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800ca80:	f100 80a6 	bmi.w	800cbd0 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800ca84:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ca86:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800ca88:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ca8a:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ca8e:	dd04      	ble.n	800ca9a <decompress_smooth_data+0x2b8>
 800ca90:	fa06 f202 	lsl.w	r2, r6, r2
 800ca94:	429a      	cmp	r2, r3
 800ca96:	dc00      	bgt.n	800ca9a <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800ca98:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800ca9a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800ca9e:	9b05      	ldr	r3, [sp, #20]
 800caa0:	695a      	ldr	r2, [r3, #20]
 800caa2:	b1da      	cbz	r2, 800cadc <decompress_smooth_data+0x2fa>
 800caa4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800caa8:	b9c3      	cbnz	r3, 800cadc <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800caaa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800caac:	463b      	mov	r3, r7
 800caae:	440b      	add	r3, r1
 800cab0:	9906      	ldr	r1, [sp, #24]
 800cab2:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800cab6:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800cab8:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800caba:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800cabe:	f100 8095 	bmi.w	800cbec <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800cac2:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800cac4:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800cac6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cac8:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800cacc:	dd04      	ble.n	800cad8 <decompress_smooth_data+0x2f6>
 800cace:	fa06 f202 	lsl.w	r2, r6, r2
 800cad2:	429a      	cmp	r2, r3
 800cad4:	dc00      	bgt.n	800cad8 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800cad6:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800cad8:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800cadc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cade:	aa24      	add	r2, sp, #144	; 0x90
 800cae0:	4629      	mov	r1, r5
 800cae2:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	4620      	mov	r0, r4
 800cae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800caea:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800caee:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800caf0:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800caf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800caf4:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800caf6:	3380      	adds	r3, #128	; 0x80
 800caf8:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800cafc:	9307      	str	r3, [sp, #28]
 800cafe:	9b08      	ldr	r3, [sp, #32]
 800cb00:	3380      	adds	r3, #128	; 0x80
 800cb02:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800cb04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb06:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800cb08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800cb0a:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800cb0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb0e:	3301      	adds	r3, #1
 800cb10:	930c      	str	r3, [sp, #48]	; 0x30
 800cb12:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb16:	428a      	cmp	r2, r1
 800cb18:	d222      	bcs.n	800cb60 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800cb1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800cb1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb22:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800cb24:	9b04      	ldr	r3, [sp, #16]
 800cb26:	3301      	adds	r3, #1
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	e6fa      	b.n	800c922 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800cb2c:	6a2b      	ldr	r3, [r5, #32]
 800cb2e:	fbb3 f1f0 	udiv	r1, r3, r0
 800cb32:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800cb36:	f1b9 0f00 	cmp.w	r9, #0
 800cb3a:	d103      	bne.n	800cb44 <decompress_smooth_data+0x362>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	4681      	mov	r9, r0
      last_row = TRUE;
 800cb40:	2101      	movs	r1, #1
 800cb42:	e69c      	b.n	800c87e <decompress_smooth_data+0x9c>
 800cb44:	464b      	mov	r3, r9
 800cb46:	e7fb      	b.n	800cb40 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800cb48:	4620      	mov	r0, r4
 800cb4a:	9200      	str	r2, [sp, #0]
 800cb4c:	47c0      	blx	r8
      first_row = TRUE;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	931d      	str	r3, [sp, #116]	; 0x74
 800cb52:	e6ab      	b.n	800c8ac <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800cb54:	f8cd 801c 	str.w	r8, [sp, #28]
 800cb58:	e6f4      	b.n	800c944 <decompress_smooth_data+0x162>
 800cb5a:	f8cd 8020 	str.w	r8, [sp, #32]
 800cb5e:	e6fb      	b.n	800c958 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800cb60:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800cb62:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800cb66:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800cb6a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb6c:	e709      	b.n	800c982 <decompress_smooth_data+0x1a0>
 800cb6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb70:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800cb74:	9211      	str	r2, [sp, #68]	; 0x44
 800cb76:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800cb7a:	e719      	b.n	800c9b0 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800cb7c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800cb7e:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800cb80:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cb82:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800cb86:	dd05      	ble.n	800cb94 <decompress_smooth_data+0x3b2>
 800cb88:	fa06 f101 	lsl.w	r1, r6, r1
 800cb8c:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800cb8e:	bfd8      	it	le
 800cb90:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800cb94:	4252      	negs	r2, r2
 800cb96:	e725      	b.n	800c9e4 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800cb98:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800cb9a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800cb9c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cb9e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800cba2:	dd05      	ble.n	800cbb0 <decompress_smooth_data+0x3ce>
 800cba4:	fa06 f101 	lsl.w	r1, r6, r1
 800cba8:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800cbaa:	bfd8      	it	le
 800cbac:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800cbb0:	4252      	negs	r2, r2
 800cbb2:	e734      	b.n	800ca1e <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800cbb4:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800cbb6:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800cbb8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800cbba:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800cbbe:	dd05      	ble.n	800cbcc <decompress_smooth_data+0x3ea>
 800cbc0:	fa06 f101 	lsl.w	r1, r6, r1
 800cbc4:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800cbc6:	bfd8      	it	le
 800cbc8:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800cbcc:	4252      	negs	r2, r2
 800cbce:	e744      	b.n	800ca5a <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800cbd0:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800cbd2:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800cbd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cbd6:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800cbda:	dd05      	ble.n	800cbe8 <decompress_smooth_data+0x406>
 800cbdc:	fa06 f202 	lsl.w	r2, r6, r2
 800cbe0:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800cbe2:	bfd8      	it	le
 800cbe4:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800cbe8:	425b      	negs	r3, r3
 800cbea:	e756      	b.n	800ca9a <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800cbec:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800cbee:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800cbf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cbf2:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800cbf6:	dd05      	ble.n	800cc04 <decompress_smooth_data+0x422>
 800cbf8:	fa06 f202 	lsl.w	r2, r6, r2
 800cbfc:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800cbfe:	bfd8      	it	le
 800cc00:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800cc04:	425b      	negs	r3, r3
 800cc06:	e767      	b.n	800cad8 <decompress_smooth_data+0x2f6>

0800cc08 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc08:	6843      	ldr	r3, [r0, #4]
 800cc0a:	2274      	movs	r2, #116	; 0x74
{
 800cc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc10:	681b      	ldr	r3, [r3, #0]
{
 800cc12:	b085      	sub	sp, #20
 800cc14:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc16:	2101      	movs	r1, #1
{
 800cc18:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc1a:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800cc1c:	4b2c      	ldr	r3, [pc, #176]	; (800ccd0 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800cc1e:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800cc20:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc24:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800cc26:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800cc28:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800cc2c:	4b29      	ldr	r3, [pc, #164]	; (800ccd4 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800cc2e:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800cc30:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800cc32:	b37e      	cbz	r6, 800cc94 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cc34:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800cc38:	46ca      	mov	sl, r9
 800cc3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc3c:	42bb      	cmp	r3, r7
 800cc3e:	dc07      	bgt.n	800cc50 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800cc40:	4b25      	ldr	r3, [pc, #148]	; (800ccd8 <jinit_d_coef_controller+0xd0>)
 800cc42:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800cc44:	4b25      	ldr	r3, [pc, #148]	; (800ccdc <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800cc46:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800cc4a:	b005      	add	sp, #20
 800cc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800cc50:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800cc54:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800cc58:	b10b      	cbz	r3, 800cc5e <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800cc5a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800cc5e:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800cc60:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800cc62:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800cc64:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800cc66:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800cc6a:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800cc6e:	f00b fc82 	bl	8018576 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800cc72:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800cc76:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800cc78:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800cc7c:	f00b fc7b 	bl	8018576 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800cc80:	2201      	movs	r2, #1
 800cc82:	9b03      	ldr	r3, [sp, #12]
 800cc84:	4611      	mov	r1, r2
 800cc86:	e9cd 0800 	strd	r0, r8, [sp]
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	47d8      	blx	fp
 800cc8e:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800cc92:	e7d2      	b.n	800cc3a <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc94:	686b      	ldr	r3, [r5, #4]
 800cc96:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800cc9a:	2101      	movs	r1, #1
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800cca2:	f104 0320 	add.w	r3, r4, #32
 800cca6:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800cca8:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800ccac:	454b      	cmp	r3, r9
 800ccae:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800ccb2:	d1f9      	bne.n	800cca8 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800ccb4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800ccb8:	b919      	cbnz	r1, 800ccc2 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800ccba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800ccbe:	f01e f817 	bl	802acf0 <memset>
    coef->pub.consume_data = dummy_consume_data;
 800ccc2:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <jinit_d_coef_controller+0xd8>)
 800ccc4:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800ccc6:	4b07      	ldr	r3, [pc, #28]	; (800cce4 <jinit_d_coef_controller+0xdc>)
 800ccc8:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800ccca:	2300      	movs	r3, #0
 800cccc:	6123      	str	r3, [r4, #16]
}
 800ccce:	e7bc      	b.n	800cc4a <jinit_d_coef_controller+0x42>
 800ccd0:	0800c361 	.word	0x0800c361
 800ccd4:	0800c5ad 	.word	0x0800c5ad
 800ccd8:	0800c36f 	.word	0x0800c36f
 800ccdc:	0800c4a1 	.word	0x0800c4a1
 800cce0:	0800c36b 	.word	0x0800c36b
 800cce4:	0800c665 	.word	0x0800c665

0800cce8 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cce8:	6843      	ldr	r3, [r0, #4]
 800ccea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ccee:	2101      	movs	r1, #1
 800ccf0:	681b      	ldr	r3, [r3, #0]
{
 800ccf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf6:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800ccf8:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ccfc:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ccfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd02:	6863      	ldr	r3, [r4, #4]
 800cd04:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800cd06:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cd08:	4620      	mov	r0, r4
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cd0e:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800cd10:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cd12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2101      	movs	r1, #1
 800cd1a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800cd1c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800cd9c <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cd20:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cd22:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800cd24:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cd26:	2101      	movs	r1, #1
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800cd30:	4f17      	ldr	r7, [pc, #92]	; (800cd90 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cd32:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800cd34:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800cd36:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800cd38:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800cd3a:	f8df e064 	ldr.w	lr, [pc, #100]	; 800cda0 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800cd3e:	4915      	ldr	r1, [pc, #84]	; (800cd94 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800cd40:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800cd44:	4d14      	ldr	r5, [pc, #80]	; (800cd98 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800cd46:	fb08 e203 	mla	r2, r8, r3, lr
 800cd4a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800cd4c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800cd50:	fb07 f203 	mul.w	r2, r7, r3
 800cd54:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800cd58:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800cd5c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800cd5e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800cd62:	fb05 f203 	mul.w	r2, r5, r3
 800cd66:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800cd6a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800cd6e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800cd72:	fb01 f203 	mul.w	r2, r1, r3
 800cd76:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800cd7a:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800cd7e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800cd82:	3301      	adds	r3, #1
 800cd84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd88:	d1dd      	bne.n	800cd46 <build_ycc_rgb_table+0x5e>
  }
}
 800cd8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd8e:	bf00      	nop
 800cd90:	0001c5a2 	.word	0x0001c5a2
 800cd94:	ffffa7e6 	.word	0xffffa7e6
 800cd98:	ffff492e 	.word	0xffff492e
 800cd9c:	000166e9 	.word	0x000166e9
 800cda0:	ff4d0b80 	.word	0xff4d0b80

0800cda4 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800cda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800cda8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800cdac:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800cdae:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800cdb0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800cdb4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800cdb8:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800cdbc:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800cdbe:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800cdc0:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800cdc2:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800cdc6:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800cdc8:	6920      	ldr	r0, [r4, #16]
 800cdca:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800cdcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cdce:	3a01      	subs	r2, #1
 800cdd0:	9210      	str	r2, [sp, #64]	; 0x40
 800cdd2:	d502      	bpl.n	800cdda <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800cdd4:	b007      	add	sp, #28
 800cdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800cdda:	9a05      	ldr	r2, [sp, #20]
 800cddc:	680c      	ldr	r4, [r1, #0]
 800cdde:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800cde0:	f853 0b04 	ldr.w	r0, [r3], #4
 800cde4:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800cde8:	684c      	ldr	r4, [r1, #4]
 800cdea:	5964      	ldr	r4, [r4, r5]
 800cdec:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800cdf0:	688c      	ldr	r4, [r1, #8]
 800cdf2:	5967      	ldr	r7, [r4, r5]
 800cdf4:	9c01      	ldr	r4, [sp, #4]
 800cdf6:	3f01      	subs	r7, #1
 800cdf8:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800cdfc:	45d0      	cmp	r8, sl
 800cdfe:	f100 0003 	add.w	r0, r0, #3
 800ce02:	d0e3      	beq.n	800cdcc <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ce04:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800ce08:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ce0c:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800ce0e:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ce12:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800ce16:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ce18:	fa0f fb8b 	sxth.w	fp, fp
 800ce1c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ce1e:	5d65      	ldrb	r5, [r4, r5]
 800ce20:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ce24:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800ce28:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800ce2c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800ce2e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ce30:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800ce32:	5d65      	ldrb	r5, [r4, r5]
 800ce34:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800ce38:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800ce3c:	5d64      	ldrb	r4, [r4, r5]
 800ce3e:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800ce42:	e7db      	b.n	800cdfc <ycc_rgb_convert+0x58>

0800ce44 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800ce48:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800ce4c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800ce50:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800ce52:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800ce54:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800ce56:	3d01      	subs	r5, #1
 800ce58:	d501      	bpl.n	800ce5e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800ce5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800ce5e:	189c      	adds	r4, r3, r2
 800ce60:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800ce62:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800ce66:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800ce6a:	6848      	ldr	r0, [r1, #4]
 800ce6c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800ce70:	6888      	ldr	r0, [r1, #8]
 800ce72:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800ce76:	2000      	movs	r0, #0
 800ce78:	42b8      	cmp	r0, r7
 800ce7a:	d0ec      	beq.n	800ce56 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800ce7c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800ce80:	f81c b000 	ldrb.w	fp, [ip, r0]
 800ce84:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800ce88:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800ce8c:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800ce90:	4454      	add	r4, sl
 800ce92:	f818 a000 	ldrb.w	sl, [r8, r0]
 800ce96:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800ce9a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800ce9e:	4454      	add	r4, sl
		 >> SCALEBITS);
 800cea0:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800cea2:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800cea6:	3001      	adds	r0, #1
 800cea8:	e7e6      	b.n	800ce78 <rgb_gray_convert+0x34>

0800ceaa <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800ceaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceae:	9d06      	ldr	r5, [sp, #24]
 800ceb0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800ceb4:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800ceb6:	3d01      	subs	r5, #1
 800ceb8:	d501      	bpl.n	800cebe <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800ceba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800cebe:	1898      	adds	r0, r3, r2
 800cec0:	680c      	ldr	r4, [r1, #0]
 800cec2:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800cec4:	684c      	ldr	r4, [r1, #4]
 800cec6:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800ceca:	688c      	ldr	r4, [r1, #8]
 800cecc:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800ced0:	2000      	movs	r0, #0
 800ced2:	f853 4b04 	ldr.w	r4, [r3], #4
 800ced6:	42b0      	cmp	r0, r6
 800ced8:	f104 0403 	add.w	r4, r4, #3
 800cedc:	d0eb      	beq.n	800ceb6 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800cede:	f817 8000 	ldrb.w	r8, [r7, r0]
 800cee2:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800cee6:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800ceea:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800ceee:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800cef2:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800cef4:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800cef8:	e7ed      	b.n	800ced6 <rgb_convert+0x2c>

0800cefa <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800cefa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cefe:	9e07      	ldr	r6, [sp, #28]
 800cf00:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800cf04:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800cf06:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800cf0a:	3e01      	subs	r6, #1
 800cf0c:	d418      	bmi.n	800cf40 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800cf0e:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800cf12:	2000      	movs	r0, #0
 800cf14:	e00a      	b.n	800cf2c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800cf16:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800cf1a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800cf1e:	681c      	ldr	r4, [r3, #0]
 800cf20:	eb05 080e 	add.w	r8, r5, lr
 800cf24:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800cf26:	4545      	cmp	r5, r8
 800cf28:	d104      	bne.n	800cf34 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	42b8      	cmp	r0, r7
 800cf2e:	dbf2      	blt.n	800cf16 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800cf30:	3304      	adds	r3, #4
 800cf32:	e7ea      	b.n	800cf0a <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800cf34:	f815 9b01 	ldrb.w	r9, [r5], #1
 800cf38:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800cf3c:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800cf3e:	e7f2      	b.n	800cf26 <null_convert+0x2c>
  }
}
 800cf40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cf44 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800cf44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf46:	9d05      	ldr	r5, [sp, #20]
 800cf48:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800cf4c:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800cf4e:	3d01      	subs	r5, #1
 800cf50:	d500      	bpl.n	800cf54 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800cf52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800cf54:	6808      	ldr	r0, [r1, #0]
 800cf56:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800cf58:	f853 0b04 	ldr.w	r0, [r3], #4
 800cf5c:	58a4      	ldr	r4, [r4, r2]
 800cf5e:	eb04 0c07 	add.w	ip, r4, r7
 800cf62:	4564      	cmp	r4, ip
 800cf64:	f100 0003 	add.w	r0, r0, #3
 800cf68:	d0f1      	beq.n	800cf4e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800cf6a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800cf6e:	f800 6c03 	strb.w	r6, [r0, #-3]
 800cf72:	f800 6c02 	strb.w	r6, [r0, #-2]
 800cf76:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800cf7a:	e7f2      	b.n	800cf62 <gray_rgb_convert+0x1e>

0800cf7c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800cf80:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800cf84:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800cf86:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800cf88:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800cf8c:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800cf90:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800cf94:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800cf96:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800cf9a:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800cf9c:	6920      	ldr	r0, [r4, #16]
 800cf9e:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800cfa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cfa2:	3a01      	subs	r2, #1
 800cfa4:	9210      	str	r2, [sp, #64]	; 0x40
 800cfa6:	d502      	bpl.n	800cfae <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800cfa8:	b007      	add	sp, #28
 800cfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800cfae:	eb03 0008 	add.w	r0, r3, r8
 800cfb2:	680a      	ldr	r2, [r1, #0]
 800cfb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cfb8:	5812      	ldr	r2, [r2, r0]
 800cfba:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800cfbc:	684a      	ldr	r2, [r1, #4]
 800cfbe:	5812      	ldr	r2, [r2, r0]
 800cfc0:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800cfc2:	688a      	ldr	r2, [r1, #8]
 800cfc4:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800cfc8:	68ca      	ldr	r2, [r1, #12]
 800cfca:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800cfce:	2200      	movs	r2, #0
 800cfd0:	9800      	ldr	r0, [sp, #0]
 800cfd2:	3504      	adds	r5, #4
 800cfd4:	4282      	cmp	r2, r0
 800cfd6:	d0e3      	beq.n	800cfa0 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800cfd8:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800cfdc:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800cfde:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800cfe0:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800cfe4:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800cfe6:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800cfea:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800cfee:	4404      	add	r4, r0
 800cff0:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800cff4:	5d34      	ldrb	r4, [r6, r4]
 800cff6:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800cffa:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800cffe:	9405      	str	r4, [sp, #20]
 800d000:	9c02      	ldr	r4, [sp, #8]
 800d002:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800d006:	9c05      	ldr	r4, [sp, #20]
 800d008:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800d00a:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800d00e:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800d012:	5d34      	ldrb	r4, [r6, r4]
 800d014:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800d018:	9c01      	ldr	r4, [sp, #4]
 800d01a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800d01e:	4420      	add	r0, r4
 800d020:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800d024:	5c30      	ldrb	r0, [r6, r0]
 800d026:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800d02a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800d02e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800d030:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800d034:	e7cc      	b.n	800cfd0 <ycck_cmyk_convert+0x54>

0800d036 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800d036:	4770      	bx	lr

0800d038 <grayscale_convert>:
{
 800d038:	b513      	push	{r0, r1, r4, lr}
 800d03a:	460c      	mov	r4, r1
 800d03c:	4611      	mov	r1, r2
 800d03e:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800d040:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800d042:	6820      	ldr	r0, [r4, #0]
 800d044:	9301      	str	r3, [sp, #4]
 800d046:	9b04      	ldr	r3, [sp, #16]
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	2300      	movs	r3, #0
 800d04c:	f00b fa9b 	bl	8018586 <jcopy_sample_rows>
}
 800d050:	b002      	add	sp, #8
 800d052:	bd10      	pop	{r4, pc}

0800d054 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d054:	6843      	ldr	r3, [r0, #4]
 800d056:	221c      	movs	r2, #28
 800d058:	2101      	movs	r1, #1
 800d05a:	681b      	ldr	r3, [r3, #0]
{
 800d05c:	b570      	push	{r4, r5, r6, lr}
 800d05e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d060:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800d062:	4b4a      	ldr	r3, [pc, #296]	; (800d18c <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d064:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800d066:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800d06a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800d06c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d070:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d072:	2b03      	cmp	r3, #3
 800d074:	d821      	bhi.n	800d0ba <jinit_color_deconverter+0x66>
 800d076:	2b01      	cmp	r3, #1
 800d078:	d82d      	bhi.n	800d0d6 <jinit_color_deconverter+0x82>
 800d07a:	d023      	beq.n	800d0c4 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800d07c:	2a00      	cmp	r2, #0
 800d07e:	dd23      	ble.n	800d0c8 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800d080:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800d084:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800d088:	2902      	cmp	r1, #2
 800d08a:	d055      	beq.n	800d138 <jinit_color_deconverter+0xe4>
 800d08c:	2904      	cmp	r1, #4
 800d08e:	d066      	beq.n	800d15e <jinit_color_deconverter+0x10a>
 800d090:	2901      	cmp	r1, #1
 800d092:	d16d      	bne.n	800d170 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800d094:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800d098:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800d09a:	2a01      	cmp	r2, #1
 800d09c:	d124      	bne.n	800d0e8 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800d09e:	4b3c      	ldr	r3, [pc, #240]	; (800d190 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800d0a0:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800d0a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800d0a4:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800d0a6:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800d0a8:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800d0aa:	4299      	cmp	r1, r3
 800d0ac:	dc15      	bgt.n	800d0da <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800d0ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d169      	bne.n	800d188 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800d0b4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d0b6:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800d0b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800d0ba:	3b04      	subs	r3, #4
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d8dd      	bhi.n	800d07c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800d0c0:	2a04      	cmp	r2, #4
 800d0c2:	e000      	b.n	800d0c6 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800d0c4:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800d0c6:	d0db      	beq.n	800d080 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	220b      	movs	r2, #11
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	615a      	str	r2, [r3, #20]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4798      	blx	r3
 800d0d4:	e7d4      	b.n	800d080 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800d0d6:	2a03      	cmp	r2, #3
 800d0d8:	e7f5      	b.n	800d0c6 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800d0da:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800d0de:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800d0e2:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800d0e4:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800d0e6:	e7e0      	b.n	800d0aa <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d146      	bne.n	800d17a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800d0ec:	4b29      	ldr	r3, [pc, #164]	; (800d194 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d0ee:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800d0f2:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800d0f4:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800d0f8:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d0fa:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800d0fc:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800d104:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800d106:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800d108:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800d10c:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800d10e:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800d112:	fb06 f203 	mul.w	r2, r6, r3
 800d116:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800d11a:	fb05 f203 	mul.w	r2, r5, r3
 800d11e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800d122:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800d126:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800d128:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800d12c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800d130:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800d134:	d1ed      	bne.n	800d112 <jinit_color_deconverter+0xbe>
 800d136:	e7ba      	b.n	800d0ae <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800d138:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800d13a:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800d13c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800d13e:	d105      	bne.n	800d14c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800d140:	4b15      	ldr	r3, [pc, #84]	; (800d198 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800d142:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800d144:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800d146:	f7ff fdcf 	bl	800cce8 <build_ycc_rgb_table>
 800d14a:	e7b0      	b.n	800d0ae <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d102      	bne.n	800d156 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800d150:	4b12      	ldr	r3, [pc, #72]	; (800d19c <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800d152:	606b      	str	r3, [r5, #4]
 800d154:	e7ab      	b.n	800d0ae <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800d156:	2b02      	cmp	r3, #2
 800d158:	d10f      	bne.n	800d17a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800d15a:	4b11      	ldr	r3, [pc, #68]	; (800d1a0 <jinit_color_deconverter+0x14c>)
 800d15c:	e7f9      	b.n	800d152 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800d15e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800d160:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800d162:	d101      	bne.n	800d168 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800d164:	4b0f      	ldr	r3, [pc, #60]	; (800d1a4 <jinit_color_deconverter+0x150>)
 800d166:	e7ec      	b.n	800d142 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800d168:	2b04      	cmp	r3, #4
 800d16a:	d106      	bne.n	800d17a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800d16c:	4b0e      	ldr	r3, [pc, #56]	; (800d1a8 <jinit_color_deconverter+0x154>)
 800d16e:	e7f0      	b.n	800d152 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800d170:	4299      	cmp	r1, r3
 800d172:	d102      	bne.n	800d17a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800d174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d176:	67a3      	str	r3, [r4, #120]	; 0x78
 800d178:	e7f8      	b.n	800d16c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800d17a:	6823      	ldr	r3, [r4, #0]
 800d17c:	221c      	movs	r2, #28
 800d17e:	4620      	mov	r0, r4
 800d180:	615a      	str	r2, [r3, #20]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4798      	blx	r3
 800d186:	e792      	b.n	800d0ae <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800d188:	2301      	movs	r3, #1
 800d18a:	e794      	b.n	800d0b6 <jinit_color_deconverter+0x62>
 800d18c:	0800d037 	.word	0x0800d037
 800d190:	0800d039 	.word	0x0800d039
 800d194:	0800ce45 	.word	0x0800ce45
 800d198:	0800cda5 	.word	0x0800cda5
 800d19c:	0800cf45 	.word	0x0800cf45
 800d1a0:	0800ceab 	.word	0x0800ceab
 800d1a4:	0800cf7d 	.word	0x0800cf7d
 800d1a8:	0800cefb 	.word	0x0800cefb

0800d1ac <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800d1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b0:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800d1b4:	2500      	movs	r5, #0
{
 800d1b6:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1b8:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800d1bc:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800d1c0:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1c2:	46ab      	mov	fp, r5
{
 800d1c4:	ed2d 8b04 	vpush	{d8-d9}
 800d1c8:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1cc:	455b      	cmp	r3, fp
 800d1ce:	dc04      	bgt.n	800d1da <start_pass+0x2e>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800d1d0:	b007      	add	sp, #28
 800d1d2:	ecbd 8b04 	vpop	{d8-d9}
 800d1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800d1da:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800d1de:	f240 700e 	movw	r0, #1806	; 0x70e
 800d1e2:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800d1e6:	4283      	cmp	r3, r0
 800d1e8:	f000 80d9 	beq.w	800d39e <start_pass+0x1f2>
 800d1ec:	dc5a      	bgt.n	800d2a4 <start_pass+0xf8>
 800d1ee:	f240 4004 	movw	r0, #1028	; 0x404
 800d1f2:	4283      	cmp	r3, r0
 800d1f4:	f000 80d6 	beq.w	800d3a4 <start_pass+0x1f8>
 800d1f8:	dc2f      	bgt.n	800d25a <start_pass+0xae>
 800d1fa:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800d1fe:	f000 80d3 	beq.w	800d3a8 <start_pass+0x1fc>
 800d202:	dc1a      	bgt.n	800d23a <start_pass+0x8e>
 800d204:	f240 2001 	movw	r0, #513	; 0x201
 800d208:	4283      	cmp	r3, r0
 800d20a:	f000 80cf 	beq.w	800d3ac <start_pass+0x200>
 800d20e:	dc0e      	bgt.n	800d22e <start_pass+0x82>
 800d210:	f240 1001 	movw	r0, #257	; 0x101
 800d214:	4283      	cmp	r3, r0
 800d216:	f000 80cb 	beq.w	800d3b0 <start_pass+0x204>
 800d21a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800d21e:	f000 80c9 	beq.w	800d3b4 <start_pass+0x208>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	2007      	movs	r0, #7
 800d226:	61da      	str	r2, [r3, #28]
 800d228:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800d22c:	e0b3      	b.n	800d396 <start_pass+0x1ea>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800d22e:	f240 2002 	movw	r0, #514	; 0x202
 800d232:	4283      	cmp	r3, r0
 800d234:	d1f5      	bne.n	800d222 <start_pass+0x76>
 800d236:	4d9e      	ldr	r5, [pc, #632]	; (800d4b0 <start_pass+0x304>)
 800d238:	e0b2      	b.n	800d3a0 <start_pass+0x1f4>
 800d23a:	f240 3006 	movw	r0, #774	; 0x306
 800d23e:	4283      	cmp	r3, r0
 800d240:	f000 80ba 	beq.w	800d3b8 <start_pass+0x20c>
 800d244:	f240 4002 	movw	r0, #1026	; 0x402
 800d248:	4283      	cmp	r3, r0
 800d24a:	f000 80b7 	beq.w	800d3bc <start_pass+0x210>
 800d24e:	f240 3003 	movw	r0, #771	; 0x303
 800d252:	4283      	cmp	r3, r0
 800d254:	d1e5      	bne.n	800d222 <start_pass+0x76>
      method_ptr = jpeg_idct_3x3;
 800d256:	4d97      	ldr	r5, [pc, #604]	; (800d4b4 <start_pass+0x308>)
 800d258:	e0a2      	b.n	800d3a0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800d25a:	f240 6003 	movw	r0, #1539	; 0x603
 800d25e:	4283      	cmp	r3, r0
 800d260:	f000 80ae 	beq.w	800d3c0 <start_pass+0x214>
 800d264:	dc0e      	bgt.n	800d284 <start_pass+0xd8>
 800d266:	f240 5005 	movw	r0, #1285	; 0x505
 800d26a:	4283      	cmp	r3, r0
 800d26c:	f000 80aa 	beq.w	800d3c4 <start_pass+0x218>
 800d270:	f240 500a 	movw	r0, #1290	; 0x50a
 800d274:	4283      	cmp	r3, r0
 800d276:	f000 80a7 	beq.w	800d3c8 <start_pass+0x21c>
 800d27a:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800d27e:	d1d0      	bne.n	800d222 <start_pass+0x76>
      method_ptr = jpeg_idct_4x8;
 800d280:	4d8d      	ldr	r5, [pc, #564]	; (800d4b8 <start_pass+0x30c>)
 800d282:	e08d      	b.n	800d3a0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800d284:	f240 600c 	movw	r0, #1548	; 0x60c
 800d288:	4283      	cmp	r3, r0
 800d28a:	f000 809f 	beq.w	800d3cc <start_pass+0x220>
 800d28e:	f240 7007 	movw	r0, #1799	; 0x707
 800d292:	4283      	cmp	r3, r0
 800d294:	f000 809c 	beq.w	800d3d0 <start_pass+0x224>
 800d298:	f240 6006 	movw	r0, #1542	; 0x606
 800d29c:	4283      	cmp	r3, r0
 800d29e:	d1c0      	bne.n	800d222 <start_pass+0x76>
      method_ptr = jpeg_idct_6x6;
 800d2a0:	4d86      	ldr	r5, [pc, #536]	; (800d4bc <start_pass+0x310>)
 800d2a2:	e07d      	b.n	800d3a0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800d2a4:	f640 4006 	movw	r0, #3078	; 0xc06
 800d2a8:	4283      	cmp	r3, r0
 800d2aa:	f000 8093 	beq.w	800d3d4 <start_pass+0x228>
 800d2ae:	dc21      	bgt.n	800d2f4 <start_pass+0x148>
 800d2b0:	f640 1009 	movw	r0, #2313	; 0x909
 800d2b4:	4283      	cmp	r3, r0
 800d2b6:	f000 808f 	beq.w	800d3d8 <start_pass+0x22c>
 800d2ba:	dc0d      	bgt.n	800d2d8 <start_pass+0x12c>
 800d2bc:	f640 0008 	movw	r0, #2056	; 0x808
 800d2c0:	4283      	cmp	r3, r0
 800d2c2:	d039      	beq.n	800d338 <start_pass+0x18c>
 800d2c4:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800d2c8:	f000 8088 	beq.w	800d3dc <start_pass+0x230>
 800d2cc:	f640 0004 	movw	r0, #2052	; 0x804
 800d2d0:	4283      	cmp	r3, r0
 800d2d2:	d1a6      	bne.n	800d222 <start_pass+0x76>
      method_ptr = jpeg_idct_8x4;
 800d2d4:	4d7a      	ldr	r5, [pc, #488]	; (800d4c0 <start_pass+0x314>)
 800d2d6:	e063      	b.n	800d3a0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800d2d8:	f640 200a 	movw	r0, #2570	; 0xa0a
 800d2dc:	4283      	cmp	r3, r0
 800d2de:	d07f      	beq.n	800d3e0 <start_pass+0x234>
 800d2e0:	f640 300b 	movw	r0, #2827	; 0xb0b
 800d2e4:	4283      	cmp	r3, r0
 800d2e6:	d07d      	beq.n	800d3e4 <start_pass+0x238>
 800d2e8:	f640 2005 	movw	r0, #2565	; 0xa05
 800d2ec:	4283      	cmp	r3, r0
 800d2ee:	d198      	bne.n	800d222 <start_pass+0x76>
      method_ptr = jpeg_idct_10x5;
 800d2f0:	4d74      	ldr	r5, [pc, #464]	; (800d4c4 <start_pass+0x318>)
 800d2f2:	e055      	b.n	800d3a0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800d2f4:	f640 600e 	movw	r0, #3598	; 0xe0e
 800d2f8:	4283      	cmp	r3, r0
 800d2fa:	d075      	beq.n	800d3e8 <start_pass+0x23c>
 800d2fc:	dc0d      	bgt.n	800d31a <start_pass+0x16e>
 800d2fe:	f640 500d 	movw	r0, #3341	; 0xd0d
 800d302:	4283      	cmp	r3, r0
 800d304:	d072      	beq.n	800d3ec <start_pass+0x240>
 800d306:	f640 6007 	movw	r0, #3591	; 0xe07
 800d30a:	4283      	cmp	r3, r0
 800d30c:	d070      	beq.n	800d3f0 <start_pass+0x244>
 800d30e:	f640 400c 	movw	r0, #3084	; 0xc0c
 800d312:	4283      	cmp	r3, r0
 800d314:	d185      	bne.n	800d222 <start_pass+0x76>
      method_ptr = jpeg_idct_12x12;
 800d316:	4d6c      	ldr	r5, [pc, #432]	; (800d4c8 <start_pass+0x31c>)
 800d318:	e042      	b.n	800d3a0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800d31a:	f241 0008 	movw	r0, #4104	; 0x1008
 800d31e:	4283      	cmp	r3, r0
 800d320:	d068      	beq.n	800d3f4 <start_pass+0x248>
 800d322:	f241 0010 	movw	r0, #4112	; 0x1010
 800d326:	4283      	cmp	r3, r0
 800d328:	d066      	beq.n	800d3f8 <start_pass+0x24c>
 800d32a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800d32e:	4283      	cmp	r3, r0
 800d330:	f47f af77 	bne.w	800d222 <start_pass+0x76>
      method_ptr = jpeg_idct_15x15;
 800d334:	4d65      	ldr	r5, [pc, #404]	; (800d4cc <start_pass+0x320>)
 800d336:	e033      	b.n	800d3a0 <start_pass+0x1f4>
      switch (cinfo->dct_method) {
 800d338:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d827      	bhi.n	800d390 <start_pass+0x1e4>
 800d340:	461c      	mov	r4, r3
 800d342:	4b63      	ldr	r3, [pc, #396]	; (800d4d0 <start_pass+0x324>)
 800d344:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800d348:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800d34c:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800d350:	b1cb      	cbz	r3, 800d386 <start_pass+0x1da>
 800d352:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800d356:	42a3      	cmp	r3, r4
 800d358:	d015      	beq.n	800d386 <start_pass+0x1da>
    qtbl = compptr->quant_table;
 800d35a:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800d35e:	b196      	cbz	r6, 800d386 <start_pass+0x1da>
    switch (method) {
 800d360:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800d362:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800d366:	d049      	beq.n	800d3fc <start_pass+0x250>
 800d368:	2c02      	cmp	r4, #2
 800d36a:	d05a      	beq.n	800d422 <start_pass+0x276>
 800d36c:	2c00      	cmp	r4, #0
 800d36e:	f040 8098 	bne.w	800d4a2 <start_pass+0x2f6>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800d372:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800d376:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800d378:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800d37c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800d380:	3301      	adds	r3, #1
 800d382:	2b40      	cmp	r3, #64	; 0x40
 800d384:	d1f8      	bne.n	800d378 <start_pass+0x1cc>
       ci++, compptr++) {
 800d386:	f10b 0b01 	add.w	fp, fp, #1
 800d38a:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800d38e:	e71c      	b.n	800d1ca <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	2231      	movs	r2, #49	; 0x31
 800d394:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4638      	mov	r0, r7
 800d39a:	4798      	blx	r3
      break;
 800d39c:	e7d4      	b.n	800d348 <start_pass+0x19c>
      method_ptr = jpeg_idct_7x14;
 800d39e:	4d4d      	ldr	r5, [pc, #308]	; (800d4d4 <start_pass+0x328>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800d3a0:	2400      	movs	r4, #0
 800d3a2:	e7d1      	b.n	800d348 <start_pass+0x19c>
      method_ptr = jpeg_idct_4x4;
 800d3a4:	4d4c      	ldr	r5, [pc, #304]	; (800d4d8 <start_pass+0x32c>)
 800d3a6:	e7fb      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x4;
 800d3a8:	4d4c      	ldr	r5, [pc, #304]	; (800d4dc <start_pass+0x330>)
 800d3aa:	e7f9      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x1;
 800d3ac:	4d4c      	ldr	r5, [pc, #304]	; (800d4e0 <start_pass+0x334>)
 800d3ae:	e7f7      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x1;
 800d3b0:	4d4c      	ldr	r5, [pc, #304]	; (800d4e4 <start_pass+0x338>)
 800d3b2:	e7f5      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x2;
 800d3b4:	4d4c      	ldr	r5, [pc, #304]	; (800d4e8 <start_pass+0x33c>)
 800d3b6:	e7f3      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_3x6;
 800d3b8:	4d4c      	ldr	r5, [pc, #304]	; (800d4ec <start_pass+0x340>)
 800d3ba:	e7f1      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_4x2;
 800d3bc:	4d4c      	ldr	r5, [pc, #304]	; (800d4f0 <start_pass+0x344>)
 800d3be:	e7ef      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x3;
 800d3c0:	4d4c      	ldr	r5, [pc, #304]	; (800d4f4 <start_pass+0x348>)
 800d3c2:	e7ed      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x5;
 800d3c4:	4d4c      	ldr	r5, [pc, #304]	; (800d4f8 <start_pass+0x34c>)
 800d3c6:	e7eb      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x10;
 800d3c8:	4d4c      	ldr	r5, [pc, #304]	; (800d4fc <start_pass+0x350>)
 800d3ca:	e7e9      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x12;
 800d3cc:	4d4c      	ldr	r5, [pc, #304]	; (800d500 <start_pass+0x354>)
 800d3ce:	e7e7      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_7x7;
 800d3d0:	4d4c      	ldr	r5, [pc, #304]	; (800d504 <start_pass+0x358>)
 800d3d2:	e7e5      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_12x6;
 800d3d4:	4d4c      	ldr	r5, [pc, #304]	; (800d508 <start_pass+0x35c>)
 800d3d6:	e7e3      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_9x9;
 800d3d8:	4d4c      	ldr	r5, [pc, #304]	; (800d50c <start_pass+0x360>)
 800d3da:	e7e1      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_8x16;
 800d3dc:	4d4c      	ldr	r5, [pc, #304]	; (800d510 <start_pass+0x364>)
 800d3de:	e7df      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_10x10;
 800d3e0:	4d4c      	ldr	r5, [pc, #304]	; (800d514 <start_pass+0x368>)
 800d3e2:	e7dd      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_11x11;
 800d3e4:	4d4c      	ldr	r5, [pc, #304]	; (800d518 <start_pass+0x36c>)
 800d3e6:	e7db      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x14;
 800d3e8:	4d4c      	ldr	r5, [pc, #304]	; (800d51c <start_pass+0x370>)
 800d3ea:	e7d9      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_13x13;
 800d3ec:	4d4c      	ldr	r5, [pc, #304]	; (800d520 <start_pass+0x374>)
 800d3ee:	e7d7      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x7;
 800d3f0:	4d4c      	ldr	r5, [pc, #304]	; (800d524 <start_pass+0x378>)
 800d3f2:	e7d5      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x8;
 800d3f4:	4d4c      	ldr	r5, [pc, #304]	; (800d528 <start_pass+0x37c>)
 800d3f6:	e7d3      	b.n	800d3a0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x16;
 800d3f8:	4d4c      	ldr	r5, [pc, #304]	; (800d52c <start_pass+0x380>)
 800d3fa:	e7d1      	b.n	800d3a0 <start_pass+0x1f4>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800d3fc:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800d400:	2200      	movs	r2, #0
 800d402:	494b      	ldr	r1, [pc, #300]	; (800d530 <start_pass+0x384>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800d404:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800d408:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800d40c:	fb0c f303 	mul.w	r3, ip, r3
 800d410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d414:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800d416:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800d41a:	3201      	adds	r2, #1
 800d41c:	2a40      	cmp	r2, #64	; 0x40
 800d41e:	d1f1      	bne.n	800d404 <start_pass+0x258>
 800d420:	e7b1      	b.n	800d386 <start_pass+0x1da>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800d422:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800d426:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800d42a:	9304      	str	r3, [sp, #16]
 800d42c:	4b41      	ldr	r3, [pc, #260]	; (800d534 <start_pass+0x388>)
 800d42e:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800d430:	9b03      	ldr	r3, [sp, #12]
 800d432:	ecb3 7b02 	vldmia	r3!, {d7}
 800d436:	9303      	str	r3, [sp, #12]
 800d438:	eeb0 8a47 	vmov.f32	s16, s14
 800d43c:	eef0 8a67 	vmov.f32	s17, s15
 800d440:	9b04      	ldr	r3, [sp, #16]
 800d442:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	4b3a      	ldr	r3, [pc, #232]	; (800d534 <start_pass+0x388>)
 800d44a:	9302      	str	r3, [sp, #8]
 800d44c:	f106 0310 	add.w	r3, r6, #16
 800d450:	9305      	str	r3, [sp, #20]
 800d452:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800d454:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800d458:	ecb3 7b02 	vldmia	r3!, {d7}
 800d45c:	eeb0 9a47 	vmov.f32	s18, s14
 800d460:	eef0 9a67 	vmov.f32	s19, s15
 800d464:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800d466:	f7f3 f865 	bl	8000534 <__aeabi_ui2d>
 800d46a:	ec53 2b18 	vmov	r2, r3, d8
 800d46e:	f7f3 f8db 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800d472:	ec53 2b19 	vmov	r2, r3, d9
 800d476:	f7f3 f8d7 	bl	8000628 <__aeabi_dmul>
 800d47a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d47e:	2200      	movs	r2, #0
 800d480:	f7f3 f8d2 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800d484:	f7f3 fae2 	bl	8000a4c <__aeabi_d2f>
 800d488:	9b01      	ldr	r3, [sp, #4]
 800d48a:	f843 0b04 	str.w	r0, [r3], #4
 800d48e:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800d490:	9b05      	ldr	r3, [sp, #20]
 800d492:	429e      	cmp	r6, r3
 800d494:	d1dd      	bne.n	800d452 <start_pass+0x2a6>
	    i++;
 800d496:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800d49a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800d49e:	d1c7      	bne.n	800d430 <start_pass+0x284>
 800d4a0:	e771      	b.n	800d386 <start_pass+0x1da>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2231      	movs	r2, #49	; 0x31
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	615a      	str	r2, [r3, #20]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4798      	blx	r3
      break;
 800d4ae:	e76a      	b.n	800d386 <start_pass+0x1da>
 800d4b0:	08012669 	.word	0x08012669
 800d4b4:	08012575 	.word	0x08012575
 800d4b8:	080164e5 	.word	0x080164e5
 800d4bc:	08012115 	.word	0x08012115
 800d4c0:	0801543d 	.word	0x0801543d
 800d4c4:	080151f5 	.word	0x080151f5
 800d4c8:	080130c1 	.word	0x080130c1
 800d4cc:	08013d95 	.word	0x08013d95
 800d4d0:	0802e634 	.word	0x0802e634
 800d4d4:	08015c79 	.word	0x08015c79
 800d4d8:	08012449 	.word	0x08012449
 800d4dc:	0801684d 	.word	0x0801684d
 800d4e0:	0801585d 	.word	0x0801585d
 800d4e4:	080126e1 	.word	0x080126e1
 800d4e8:	08016925 	.word	0x08016925
 800d4ec:	08016701 	.word	0x08016701
 800d4f0:	0801578d 	.word	0x0801578d
 800d4f4:	08015631 	.word	0x08015631
 800d4f8:	080122c5 	.word	0x080122c5
 800d4fc:	080162b1 	.word	0x080162b1
 800d500:	08015ff1 	.word	0x08015ff1
 800d504:	08011e6d 	.word	0x08011e6d
 800d508:	08014f29 	.word	0x08014f29
 800d50c:	08012705 	.word	0x08012705
 800d510:	08015895 	.word	0x08015895
 800d514:	080129d1 	.word	0x080129d1
 800d518:	08012cc9 	.word	0x08012cc9
 800d51c:	08013941 	.word	0x08013941
 800d520:	0801347d 	.word	0x0801347d
 800d524:	08014ba9 	.word	0x08014ba9
 800d528:	08014761 	.word	0x08014761
 800d52c:	08014229 	.word	0x08014229
 800d530:	0802e680 	.word	0x0802e680
 800d534:	0802e640 	.word	0x0802e640

0800d538 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d53a:	6843      	ldr	r3, [r0, #4]
{
 800d53c:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d53e:	2254      	movs	r2, #84	; 0x54
 800d540:	2101      	movs	r1, #1
 800d542:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d544:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d546:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800d548:	4b0f      	ldr	r3, [pc, #60]	; (800d588 <jinit_inverse_dct+0x50>)
 800d54a:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d54c:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800d550:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800d554:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d558:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d55a:	42b3      	cmp	r3, r6
 800d55c:	dc00      	bgt.n	800d560 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800d55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d560:	686b      	ldr	r3, [r5, #4]
 800d562:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d566:	2101      	movs	r1, #1
 800d568:	4628      	mov	r0, r5
 800d56a:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800d56c:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d56e:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800d570:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800d574:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800d576:	2100      	movs	r1, #0
 800d578:	f01d fbba 	bl	802acf0 <memset>
    idct->cur_method[ci] = -1;
 800d57c:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800d580:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800d582:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800d586:	e7e7      	b.n	800d558 <jinit_inverse_dct+0x20>
 800d588:	0800d1ad 	.word	0x0800d1ad

0800d58c <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800d58c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800d590:	6905      	ldr	r5, [r0, #16]
{
 800d592:	4607      	mov	r7, r0
 800d594:	4688      	mov	r8, r1
 800d596:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800d598:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800d59c:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800d59e:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800d5a2:	f1bb 0f00 	cmp.w	fp, #0
 800d5a6:	d042      	beq.n	800d62e <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800d5a8:	454e      	cmp	r6, r9
 800d5aa:	da42      	bge.n	800d632 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800d5ac:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b2:	b95b      	cbnz	r3, 800d5cc <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800d5b4:	682b      	ldr	r3, [r5, #0]
 800d5b6:	2278      	movs	r2, #120	; 0x78
 800d5b8:	f04f 31ff 	mov.w	r1, #4294967295
 800d5bc:	4628      	mov	r0, r5
 800d5be:	615a      	str	r2, [r3, #20]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800d5c4:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800d5cc:	f1c6 0619 	rsb	r6, r6, #25
 800d5d0:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800d5d4:	2619      	movs	r6, #25
 800d5d6:	e02c      	b.n	800d632 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800d5d8:	f1ba 0f00 	cmp.w	sl, #0
 800d5dc:	d107      	bne.n	800d5ee <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800d5de:	69ab      	ldr	r3, [r5, #24]
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	4798      	blx	r3
 800d5e6:	b350      	cbz	r0, 800d63e <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800d5e8:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800d5ea:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800d5ee:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800d5f2:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800d5f6:	2aff      	cmp	r2, #255	; 0xff
 800d5f8:	d116      	bne.n	800d628 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800d5fa:	f1ba 0f00 	cmp.w	sl, #0
 800d5fe:	d109      	bne.n	800d614 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800d600:	69ab      	ldr	r3, [r5, #24]
 800d602:	4628      	mov	r0, r5
 800d604:	9201      	str	r2, [sp, #4]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	4798      	blx	r3
 800d60a:	b1c0      	cbz	r0, 800d63e <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800d60c:	69ab      	ldr	r3, [r5, #24]
 800d60e:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800d610:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800d614:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800d618:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800d61c:	2bff      	cmp	r3, #255	; 0xff
 800d61e:	d0ec      	beq.n	800d5fa <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800d620:	b113      	cbz	r3, 800d628 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800d622:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800d626:	e7bf      	b.n	800d5a8 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800d628:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800d62c:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800d62e:	2e18      	cmp	r6, #24
 800d630:	ddd2      	ble.n	800d5d8 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800d632:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800d636:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800d63a:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800d63e:	4658      	mov	r0, fp
 800d640:	b003      	add	sp, #12
 800d642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d648 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64a:	9d06      	ldr	r5, [sp, #24]
 800d64c:	4606      	mov	r6, r0
 800d64e:	468c      	mov	ip, r1
 800d650:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800d652:	4295      	cmp	r5, r2
{
 800d654:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800d656:	dd08      	ble.n	800d66a <jpeg_huff_decode+0x22>
 800d658:	462b      	mov	r3, r5
 800d65a:	f7ff ff97 	bl	800d58c <jpeg_fill_bit_buffer>
 800d65e:	b910      	cbnz	r0, 800d666 <jpeg_huff_decode+0x1e>
 800d660:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800d664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800d666:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800d66a:	1b62      	subs	r2, r4, r5
 800d66c:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <jpeg_huff_decode+0x90>)
 800d66e:	fa4c f002 	asr.w	r0, ip, r2
 800d672:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d676:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800d678:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800d67c:	4283      	cmp	r3, r0
 800d67e:	db0d      	blt.n	800d69c <jpeg_huff_decode+0x54>
  if (l > 16) {
 800d680:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800d682:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800d686:	dd1e      	ble.n	800d6c6 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800d688:	6930      	ldr	r0, [r6, #16]
 800d68a:	2279      	movs	r2, #121	; 0x79
 800d68c:	f04f 31ff 	mov.w	r1, #4294967295
 800d690:	6803      	ldr	r3, [r0, #0]
 800d692:	615a      	str	r2, [r3, #20]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800d698:	2000      	movs	r0, #0
 800d69a:	e7e3      	b.n	800d664 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800d69c:	2a00      	cmp	r2, #0
    code <<= 1;
 800d69e:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800d6a2:	dc08      	bgt.n	800d6b6 <jpeg_huff_decode+0x6e>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	4661      	mov	r1, ip
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f7ff ff6f 	bl	800d58c <jpeg_fill_bit_buffer>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d0d6      	beq.n	800d660 <jpeg_huff_decode+0x18>
 800d6b2:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800d6b6:	3a01      	subs	r2, #1
    l++;
 800d6b8:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800d6ba:	fa4c f002 	asr.w	r0, ip, r2
 800d6be:	f000 0001 	and.w	r0, r0, #1
 800d6c2:	4320      	orrs	r0, r4
    l++;
 800d6c4:	e7d8      	b.n	800d678 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800d6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6ca:	3512      	adds	r5, #18
 800d6cc:	4418      	add	r0, r3
 800d6ce:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800d6d2:	4410      	add	r0, r2
 800d6d4:	7c40      	ldrb	r0, [r0, #17]
 800d6d6:	e7c5      	b.n	800d664 <jpeg_huff_decode+0x1c>
 800d6d8:	0802e700 	.word	0x0802e700

0800d6dc <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800d6dc:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800d6de:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800d6e2:	2600      	movs	r6, #0
{
 800d6e4:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800d6e6:	68eb      	ldr	r3, [r5, #12]
 800d6e8:	6991      	ldr	r1, [r2, #24]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	bfb8      	it	lt
 800d6ee:	3307      	addlt	r3, #7
 800d6f0:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800d6f4:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800d6f6:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800d6f8:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800d6fa:	4798      	blx	r3
 800d6fc:	b190      	cbz	r0, 800d724 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800d6fe:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800d702:	4631      	mov	r1, r6
 800d704:	f105 0014 	add.w	r0, r5, #20
 800d708:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800d70c:	0092      	lsls	r2, r2, #2
 800d70e:	f01d faef 	bl	802acf0 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800d712:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800d716:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800d718:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800d71a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800d71e:	b903      	cbnz	r3, 800d722 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800d720:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800d722:	2001      	movs	r0, #1
}
 800d724:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d728 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800d72c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800d730:	b091      	sub	sp, #68	; 0x44
 800d732:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d734:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800d738:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d73a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800d73e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800d740:	b933      	cbnz	r3, 800d750 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d742:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d744:	b17e      	cbz	r6, 800d766 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d746:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800d748:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d74a:	3b01      	subs	r3, #1
 800d74c:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800d74e:	e007      	b.n	800d760 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800d750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1f5      	bne.n	800d742 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800d756:	f7ff ffc1 	bl	800d6dc <process_restart>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d1f1      	bne.n	800d742 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800d75e:	2000      	movs	r0, #0
}
 800d760:	b011      	add	sp, #68	; 0x44
 800d762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d766:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800d768:	f104 0810 	add.w	r8, r4, #16
 800d76c:	af0b      	add	r7, sp, #44	; 0x2c
 800d76e:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	f104 0b10 	add.w	fp, r4, #16
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	9206      	str	r2, [sp, #24]
 800d77c:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800d77e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800d898 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d782:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800d784:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d788:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800d78c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d78e:	f8d8 3000 	ldr.w	r3, [r8]
 800d792:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d794:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800d798:	42b3      	cmp	r3, r6
 800d79a:	dc0d      	bgt.n	800d7b8 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d79c:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d79e:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d7a0:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800d7a2:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d7a4:	601a      	str	r2, [r3, #0]
 800d7a6:	9a07      	ldr	r2, [sp, #28]
 800d7a8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800d7aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d7ac:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800d7b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7b2:	6833      	ldr	r3, [r6, #0]
 800d7b4:	602b      	str	r3, [r5, #0]
 800d7b6:	e7c6      	b.n	800d746 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800d7b8:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800d7ba:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800d7be:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800d7c2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800d7c6:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800d7c8:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800d7cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d7d0:	695b      	ldr	r3, [r3, #20]
 800d7d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7d6:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800d7da:	dc0c      	bgt.n	800d7f6 <decode_mcu_DC_first+0xce>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	4662      	mov	r2, ip
 800d7e0:	4671      	mov	r1, lr
 800d7e2:	a806      	add	r0, sp, #24
 800d7e4:	f7ff fed2 	bl	800d58c <jpeg_fill_bit_buffer>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d0b8      	beq.n	800d75e <decode_mcu_DC_first+0x36>
 800d7ec:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d7f0:	f1bc 0f07 	cmp.w	ip, #7
 800d7f4:	dd3e      	ble.n	800d874 <decode_mcu_DC_first+0x14c>
 800d7f6:	f1ac 0308 	sub.w	r3, ip, #8
 800d7fa:	fa4e f303 	asr.w	r3, lr, r3
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d804:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800d808:	2a00      	cmp	r2, #0
 800d80a:	d042      	beq.n	800d892 <decode_mcu_DC_first+0x16a>
 800d80c:	4443      	add	r3, r8
 800d80e:	ebac 0c02 	sub.w	ip, ip, r2
 800d812:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800d816:	f1b8 0f00 	cmp.w	r8, #0
 800d81a:	d01b      	beq.n	800d854 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d81c:	45e0      	cmp	r8, ip
 800d81e:	dd09      	ble.n	800d834 <decode_mcu_DC_first+0x10c>
 800d820:	4643      	mov	r3, r8
 800d822:	4662      	mov	r2, ip
 800d824:	4671      	mov	r1, lr
 800d826:	a806      	add	r0, sp, #24
 800d828:	f7ff feb0 	bl	800d58c <jpeg_fill_bit_buffer>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d096      	beq.n	800d75e <decode_mcu_DC_first+0x36>
 800d830:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800d834:	ebac 0c08 	sub.w	ip, ip, r8
 800d838:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800d83c:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800d840:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800d844:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800d848:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800d84a:	4299      	cmp	r1, r3
 800d84c:	bfac      	ite	ge
 800d84e:	eba3 0802 	subge.w	r8, r3, r2
 800d852:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800d854:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d856:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800d858:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800d85c:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800d85e:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800d862:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800d864:	fa00 f803 	lsl.w	r8, r0, r3
 800d868:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800d86a:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800d86e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d872:	e78f      	b.n	800d794 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800d874:	2301      	movs	r3, #1
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	4662      	mov	r2, ip
 800d87a:	4643      	mov	r3, r8
 800d87c:	4671      	mov	r1, lr
 800d87e:	a806      	add	r0, sp, #24
 800d880:	f7ff fee2 	bl	800d648 <jpeg_huff_decode>
 800d884:	f1b0 0800 	subs.w	r8, r0, #0
 800d888:	f6ff af69 	blt.w	800d75e <decode_mcu_DC_first+0x36>
 800d88c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800d890:	e7c1      	b.n	800d816 <decode_mcu_DC_first+0xee>
 800d892:	2309      	movs	r3, #9
 800d894:	e7ef      	b.n	800d876 <decode_mcu_DC_first+0x14e>
 800d896:	bf00      	nop
 800d898:	0802e700 	.word	0x0802e700

0800d89c <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d89c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a4:	4607      	mov	r7, r0
 800d8a6:	b08d      	sub	sp, #52	; 0x34
 800d8a8:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d8aa:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800d8ae:	b933      	cbnz	r3, 800d8be <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d8b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d8b2:	b17b      	cbz	r3, 800d8d4 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d8b4:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800d8b6:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800d8bc:	e007      	b.n	800d8ce <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800d8be:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1f5      	bne.n	800d8b0 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800d8c4:	f7ff ff0a 	bl	800d6dc <process_restart>
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	d1f1      	bne.n	800d8b0 <decode_mcu_AC_first+0x14>
	return FALSE;
 800d8cc:	2000      	movs	r0, #0
}
 800d8ce:	b00d      	add	sp, #52	; 0x34
 800d8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800d8d4:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800d8d6:	b116      	cbz	r6, 800d8de <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800d8d8:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800d8da:	612e      	str	r6, [r5, #16]
 800d8dc:	e7ea      	b.n	800d8b4 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800d8de:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800d8e2:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800d8e6:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800d8e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800d8ec:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800d8f0:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d8f2:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800d8f4:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	9207      	str	r2, [sp, #28]
 800d8fe:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800d900:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800d9f8 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800d904:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d906:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800d908:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d90a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800d90e:	9b03      	ldr	r3, [sp, #12]
 800d910:	4598      	cmp	r8, r3
 800d912:	dc69      	bgt.n	800d9e8 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800d914:	2a07      	cmp	r2, #7
 800d916:	dc09      	bgt.n	800d92c <decode_mcu_AC_first+0x90>
 800d918:	2300      	movs	r3, #0
 800d91a:	a807      	add	r0, sp, #28
 800d91c:	f7ff fe36 	bl	800d58c <jpeg_fill_bit_buffer>
 800d920:	2800      	cmp	r0, #0
 800d922:	d0d3      	beq.n	800d8cc <decode_mcu_AC_first+0x30>
 800d924:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800d928:	2a07      	cmp	r2, #7
 800d92a:	dd33      	ble.n	800d994 <decode_mcu_AC_first+0xf8>
 800d92c:	f1a2 0308 	sub.w	r3, r2, #8
 800d930:	fa41 f303 	asr.w	r3, r1, r3
 800d934:	b2db      	uxtb	r3, r3
 800d936:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d93a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800d93e:	b3a0      	cbz	r0, 800d9aa <decode_mcu_AC_first+0x10e>
 800d940:	444b      	add	r3, r9
 800d942:	1a12      	subs	r2, r2, r0
 800d944:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800d948:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800d94c:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800d950:	d02d      	beq.n	800d9ae <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d952:	42a2      	cmp	r2, r4
	  k += r;
 800d954:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d956:	da07      	bge.n	800d968 <decode_mcu_AC_first+0xcc>
 800d958:	4623      	mov	r3, r4
 800d95a:	a807      	add	r0, sp, #28
 800d95c:	f7ff fe16 	bl	800d58c <jpeg_fill_bit_buffer>
 800d960:	2800      	cmp	r0, #0
 800d962:	d0b3      	beq.n	800d8cc <decode_mcu_AC_first+0x30>
 800d964:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800d968:	1b12      	subs	r2, r2, r4
 800d96a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800d96e:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800d970:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800d974:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800d978:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800d97a:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800d97c:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800d97e:	bfa8      	it	ge
 800d980:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800d982:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800d986:	40a3      	lsls	r3, r4
 800d988:	9c05      	ldr	r4, [sp, #20]
 800d98a:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800d98e:	f108 0801 	add.w	r8, r8, #1
 800d992:	e7bc      	b.n	800d90e <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800d994:	2301      	movs	r3, #1
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	a807      	add	r0, sp, #28
 800d99a:	464b      	mov	r3, r9
 800d99c:	f7ff fe54 	bl	800d648 <jpeg_huff_decode>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	db93      	blt.n	800d8cc <decode_mcu_AC_first+0x30>
 800d9a4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800d9a8:	e7ce      	b.n	800d948 <decode_mcu_AC_first+0xac>
 800d9aa:	2309      	movs	r3, #9
 800d9ac:	e7f3      	b.n	800d996 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800d9ae:	2b0f      	cmp	r3, #15
 800d9b0:	d102      	bne.n	800d9b8 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800d9b2:	f108 080f 	add.w	r8, r8, #15
 800d9b6:	e7ea      	b.n	800d98e <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800d9b8:	2601      	movs	r6, #1
 800d9ba:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800d9bc:	b19b      	cbz	r3, 800d9e6 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	da09      	bge.n	800d9d6 <decode_mcu_AC_first+0x13a>
 800d9c2:	a807      	add	r0, sp, #28
 800d9c4:	9303      	str	r3, [sp, #12]
 800d9c6:	f7ff fde1 	bl	800d58c <jpeg_fill_bit_buffer>
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	f43f af7e 	beq.w	800d8cc <decode_mcu_AC_first+0x30>
 800d9d0:	9b03      	ldr	r3, [sp, #12]
 800d9d2:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800d9d6:	1ad2      	subs	r2, r2, r3
 800d9d8:	4807      	ldr	r0, [pc, #28]	; (800d9f8 <decode_mcu_AC_first+0x15c>)
 800d9da:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d9de:	fa41 f302 	asr.w	r3, r1, r2
 800d9e2:	4003      	ands	r3, r0
	      EOBRUN += r;
 800d9e4:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800d9e6:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	9807      	ldr	r0, [sp, #28]
 800d9ec:	6018      	str	r0, [r3, #0]
 800d9ee:	9808      	ldr	r0, [sp, #32]
 800d9f0:	6058      	str	r0, [r3, #4]
 800d9f2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800d9f6:	e770      	b.n	800d8da <decode_mcu_AC_first+0x3e>
 800d9f8:	0802e700 	.word	0x0802e700

0800d9fc <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800d9fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800da00:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800da04:	2701      	movs	r7, #1
{   
 800da06:	b087      	sub	sp, #28
 800da08:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800da0a:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800da0c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800da10:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800da12:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800da16:	b9c3      	cbnz	r3, 800da4a <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800da18:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800da1a:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800da1c:	9405      	str	r4, [sp, #20]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	9201      	str	r2, [sp, #4]
 800da24:	9302      	str	r3, [sp, #8]
 800da26:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800da2a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800da2e:	42b3      	cmp	r3, r6
 800da30:	dc16      	bgt.n	800da60 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800da32:	69a3      	ldr	r3, [r4, #24]
 800da34:	9801      	ldr	r0, [sp, #4]
 800da36:	6018      	str	r0, [r3, #0]
 800da38:	9802      	ldr	r0, [sp, #8]
 800da3a:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800da3c:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800da3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800da40:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800da42:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800da46:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800da48:	e007      	b.n	800da5a <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800da4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1e3      	bne.n	800da18 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800da50:	f7ff fe44 	bl	800d6dc <process_restart>
 800da54:	2800      	cmp	r0, #0
 800da56:	d1df      	bne.n	800da18 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800da58:	2000      	movs	r0, #0
}
 800da5a:	b007      	add	sp, #28
 800da5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800da60:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800da62:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800da66:	dc07      	bgt.n	800da78 <decode_mcu_DC_refine+0x7c>
 800da68:	2301      	movs	r3, #1
 800da6a:	a801      	add	r0, sp, #4
 800da6c:	f7ff fd8e 	bl	800d58c <jpeg_fill_bit_buffer>
 800da70:	2800      	cmp	r0, #0
 800da72:	d0f1      	beq.n	800da58 <decode_mcu_DC_refine+0x5c>
 800da74:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800da78:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800da7a:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800da7c:	fa41 f302 	asr.w	r3, r1, r2
 800da80:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800da82:	bf42      	ittt	mi
 800da84:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800da88:	433b      	orrmi	r3, r7
 800da8a:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800da8e:	e7cc      	b.n	800da2a <decode_mcu_DC_refine+0x2e>

0800da90 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800da90:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800da94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da98:	4606      	mov	r6, r0
 800da9a:	b0d1      	sub	sp, #324	; 0x144
 800da9c:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800da9e:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800daa2:	b95b      	cbnz	r3, 800dabc <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800daa4:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800daa8:	f1bb 0f00 	cmp.w	fp, #0
 800daac:	d012      	beq.n	800dad4 <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800daae:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800dab2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800dab4:	3b01      	subs	r3, #1
 800dab6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800daba:	e008      	b.n	800dace <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800dabc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1ef      	bne.n	800daa4 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800dac4:	f7ff fe0a 	bl	800d6dc <process_restart>
 800dac8:	2800      	cmp	r0, #0
 800daca:	d1eb      	bne.n	800daa4 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800dacc:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800dace:	b051      	add	sp, #324	; 0x144
 800dad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800dad4:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800dad8:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800dada:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800dadc:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800dae0:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800dae2:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800dae6:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800daea:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800daec:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800daee:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800daf0:	f04f 32ff 	mov.w	r2, #4294967295
 800daf4:	fa02 f303 	lsl.w	r3, r2, r3
 800daf8:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800dafa:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800dafe:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800db00:	69b3      	ldr	r3, [r6, #24]
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	602a      	str	r2, [r5, #0]
 800db08:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800db0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800db0e:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800db12:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800db14:	2b00      	cmp	r3, #0
 800db16:	f040 80bf 	bne.w	800dc98 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800db1a:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800db1e:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800db20:	9b06      	ldr	r3, [sp, #24]
 800db22:	429f      	cmp	r7, r3
 800db24:	dd0a      	ble.n	800db3c <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800db26:	69b3      	ldr	r3, [r6, #24]
 800db28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db2a:	6019      	str	r1, [r3, #0]
 800db2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800db2e:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800db30:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800db32:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800db36:	f8c8 3010 	str.w	r3, [r8, #16]
 800db3a:	e7b8      	b.n	800daae <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800db3c:	2a07      	cmp	r2, #7
 800db3e:	dc0a      	bgt.n	800db56 <decode_mcu_AC_refine+0xc6>
 800db40:	2300      	movs	r3, #0
 800db42:	4621      	mov	r1, r4
 800db44:	4628      	mov	r0, r5
 800db46:	f7ff fd21 	bl	800d58c <jpeg_fill_bit_buffer>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d06e      	beq.n	800dc2c <decode_mcu_AC_refine+0x19c>
 800db4e:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800db52:	2a07      	cmp	r2, #7
 800db54:	dd61      	ble.n	800dc1a <decode_mcu_AC_refine+0x18a>
 800db56:	f1a2 0308 	sub.w	r3, r2, #8
 800db5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db5c:	fa44 f303 	asr.w	r3, r4, r3
 800db60:	b2db      	uxtb	r3, r3
 800db62:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800db66:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800db6a:	2900      	cmp	r1, #0
 800db6c:	d06b      	beq.n	800dc46 <decode_mcu_AC_refine+0x1b6>
 800db6e:	4403      	add	r3, r0
 800db70:	1a52      	subs	r2, r2, r1
 800db72:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800db76:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800db7a:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800db7e:	9304      	str	r3, [sp, #16]
 800db80:	d066      	beq.n	800dc50 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800db82:	2b01      	cmp	r3, #1
 800db84:	d009      	beq.n	800db9a <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800db86:	6833      	ldr	r3, [r6, #0]
 800db88:	2179      	movs	r1, #121	; 0x79
 800db8a:	4630      	mov	r0, r6
 800db8c:	9204      	str	r2, [sp, #16]
 800db8e:	6159      	str	r1, [r3, #20]
 800db90:	f04f 31ff 	mov.w	r1, #4294967295
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	4798      	blx	r3
 800db98:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800db9a:	2a00      	cmp	r2, #0
 800db9c:	dc08      	bgt.n	800dbb0 <decode_mcu_AC_refine+0x120>
 800db9e:	2301      	movs	r3, #1
 800dba0:	4621      	mov	r1, r4
 800dba2:	4628      	mov	r0, r5
 800dba4:	f7ff fcf2 	bl	800d58c <jpeg_fill_bit_buffer>
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d03f      	beq.n	800dc2c <decode_mcu_AC_refine+0x19c>
 800dbac:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800dbb0:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800dbb2:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800dbb4:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800dbb8:	f013 0f01 	tst.w	r3, #1
 800dbbc:	9b03      	ldr	r3, [sp, #12]
 800dbbe:	bf08      	it	eq
 800dbc0:	460b      	moveq	r3, r1
 800dbc2:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800dbc4:	9b08      	ldr	r3, [sp, #32]
 800dbc6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800dbca:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800dbcc:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d068      	beq.n	800dca6 <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800dbd4:	2a00      	cmp	r2, #0
 800dbd6:	dc07      	bgt.n	800dbe8 <decode_mcu_AC_refine+0x158>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	4621      	mov	r1, r4
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f7ff fcd5 	bl	800d58c <jpeg_fill_bit_buffer>
 800dbe2:	b318      	cbz	r0, 800dc2c <decode_mcu_AC_refine+0x19c>
 800dbe4:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800dbe8:	3a01      	subs	r2, #1
 800dbea:	fa44 f302 	asr.w	r3, r4, r2
 800dbee:	07d9      	lsls	r1, r3, #31
 800dbf0:	d50e      	bpl.n	800dc10 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800dbf2:	9b05      	ldr	r3, [sp, #20]
 800dbf4:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800dbf8:	9b03      	ldr	r3, [sp, #12]
 800dbfa:	4219      	tst	r1, r3
 800dbfc:	d108      	bne.n	800dc10 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800dbfe:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800dc00:	b28b      	uxth	r3, r1
 800dc02:	bfac      	ite	ge
 800dc04:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800dc06:	9907      	ldrlt	r1, [sp, #28]
 800dc08:	440b      	add	r3, r1
 800dc0a:	9905      	ldr	r1, [sp, #20]
 800dc0c:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800dc10:	3701      	adds	r7, #1
	} while (k <= Se);
 800dc12:	9b06      	ldr	r3, [sp, #24]
 800dc14:	42bb      	cmp	r3, r7
 800dc16:	dad5      	bge.n	800dbc4 <decode_mcu_AC_refine+0x134>
 800dc18:	e048      	b.n	800dcac <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	4621      	mov	r1, r4
 800dc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc22:	4628      	mov	r0, r5
 800dc24:	f7ff fd10 	bl	800d648 <jpeg_huff_decode>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	da0e      	bge.n	800dc4a <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800dc2c:	ab10      	add	r3, sp, #64	; 0x40
 800dc2e:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800dc30:	f1bb 0f00 	cmp.w	fp, #0
 800dc34:	f43f af4a 	beq.w	800dacc <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800dc38:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc3c:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800dc40:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800dc44:	e7f4      	b.n	800dc30 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800dc46:	2309      	movs	r3, #9
 800dc48:	e7e8      	b.n	800dc1c <decode_mcu_AC_refine+0x18c>
 800dc4a:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800dc4e:	e792      	b.n	800db76 <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800dc50:	f1ba 0f0f 	cmp.w	sl, #15
 800dc54:	d0b6      	beq.n	800dbc4 <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800dc56:	2301      	movs	r3, #1
 800dc58:	fa03 f30a 	lsl.w	r3, r3, sl
 800dc5c:	9302      	str	r3, [sp, #8]
	    if (r) {
 800dc5e:	f1ba 0f00 	cmp.w	sl, #0
 800dc62:	d015      	beq.n	800dc90 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800dc64:	4552      	cmp	r2, sl
 800dc66:	da08      	bge.n	800dc7a <decode_mcu_AC_refine+0x1ea>
 800dc68:	4653      	mov	r3, sl
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	a80b      	add	r0, sp, #44	; 0x2c
 800dc6e:	f7ff fc8d 	bl	800d58c <jpeg_fill_bit_buffer>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d0da      	beq.n	800dc2c <decode_mcu_AC_refine+0x19c>
 800dc76:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800dc7a:	4b26      	ldr	r3, [pc, #152]	; (800dd14 <decode_mcu_AC_refine+0x284>)
 800dc7c:	eba2 020a 	sub.w	r2, r2, sl
 800dc80:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800dc84:	fa44 f302 	asr.w	r3, r4, r2
 800dc88:	400b      	ands	r3, r1
	      EOBRUN += r;
 800dc8a:	9902      	ldr	r1, [sp, #8]
 800dc8c:	4419      	add	r1, r3
 800dc8e:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800dc90:	9b02      	ldr	r3, [sp, #8]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f43f af47 	beq.w	800db26 <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800dc98:	9b06      	ldr	r3, [sp, #24]
 800dc9a:	429f      	cmp	r7, r3
 800dc9c:	dd15      	ble.n	800dcca <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800dc9e:	9b02      	ldr	r3, [sp, #8]
 800dca0:	3b01      	subs	r3, #1
 800dca2:	9302      	str	r3, [sp, #8]
 800dca4:	e73f      	b.n	800db26 <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800dca6:	f1ba 0a01 	subs.w	sl, sl, #1
 800dcaa:	d2b1      	bcs.n	800dc10 <decode_mcu_AC_refine+0x180>
	if (s) {
 800dcac:	9b04      	ldr	r3, [sp, #16]
 800dcae:	b153      	cbz	r3, 800dcc6 <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800dcb0:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800dcb2:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800dcb4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800dcb8:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800dcbc:	a910      	add	r1, sp, #64	; 0x40
 800dcbe:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800dcc2:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800dcc6:	3701      	adds	r7, #1
 800dcc8:	e72a      	b.n	800db20 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800dcca:	9b08      	ldr	r3, [sp, #32]
 800dccc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800dcd0:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800dcd4:	b1e3      	cbz	r3, 800dd10 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800dcd6:	2a00      	cmp	r2, #0
 800dcd8:	dc08      	bgt.n	800dcec <decode_mcu_AC_refine+0x25c>
 800dcda:	2301      	movs	r3, #1
 800dcdc:	4621      	mov	r1, r4
 800dcde:	a80b      	add	r0, sp, #44	; 0x2c
 800dce0:	f7ff fc54 	bl	800d58c <jpeg_fill_bit_buffer>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d0a1      	beq.n	800dc2c <decode_mcu_AC_refine+0x19c>
 800dce8:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800dcec:	3a01      	subs	r2, #1
 800dcee:	fa44 f302 	asr.w	r3, r4, r2
 800dcf2:	07db      	lsls	r3, r3, #31
 800dcf4:	d50c      	bpl.n	800dd10 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800dcf6:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800dcfa:	9b03      	ldr	r3, [sp, #12]
 800dcfc:	4219      	tst	r1, r3
 800dcfe:	d107      	bne.n	800dd10 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800dd00:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800dd02:	b28b      	uxth	r3, r1
 800dd04:	bfac      	ite	ge
 800dd06:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800dd08:	9907      	ldrlt	r1, [sp, #28]
 800dd0a:	440b      	add	r3, r1
 800dd0c:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800dd10:	3701      	adds	r7, #1
 800dd12:	e7c1      	b.n	800dc98 <decode_mcu_AC_refine+0x208>
 800dd14:	0802e700 	.word	0x0802e700

0800dd18 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800dd1c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800dd20:	b093      	sub	sp, #76	; 0x4c
 800dd22:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800dd24:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800dd28:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800dd2a:	b933      	cbnz	r3, 800dd3a <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800dd2c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800dd2e:	b17f      	cbz	r7, 800dd50 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800dd30:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800dd32:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800dd34:	3b01      	subs	r3, #1
 800dd36:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800dd38:	e007      	b.n	800dd4a <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800dd3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1f5      	bne.n	800dd2c <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800dd40:	f7ff fccc 	bl	800d6dc <process_restart>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d1f1      	bne.n	800dd2c <decode_mcu_sub+0x14>
	return FALSE;
 800dd48:	2000      	movs	r0, #0
}
 800dd4a:	b013      	add	sp, #76	; 0x4c
 800dd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800dd50:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800dd54:	f105 0810 	add.w	r8, r5, #16
 800dd58:	ac0d      	add	r4, sp, #52	; 0x34
 800dd5a:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800dd5e:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800dd60:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800dd64:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800e004 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800dd68:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800dd6a:	69b3      	ldr	r3, [r6, #24]
 800dd6c:	960c      	str	r6, [sp, #48]	; 0x30
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	9208      	str	r2, [sp, #32]
 800dd74:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800dd76:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800dd7a:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800dd7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd80:	f8d8 3000 	ldr.w	r3, [r8]
 800dd84:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800dd86:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800dd8a:	42bb      	cmp	r3, r7
 800dd8c:	dc0e      	bgt.n	800ddac <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800dd8e:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800dd90:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800dd92:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800dd94:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800dd98:	601a      	str	r2, [r3, #0]
 800dd9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd9c:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800dd9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800dda0:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800dda4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dda6:	6833      	ldr	r3, [r6, #0]
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	e7c1      	b.n	800dd30 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800ddac:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800ddae:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800ddb2:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800ddb6:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800ddba:	dc0c      	bgt.n	800ddd6 <decode_mcu_sub+0xbe>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	4662      	mov	r2, ip
 800ddc0:	4671      	mov	r1, lr
 800ddc2:	a808      	add	r0, sp, #32
 800ddc4:	f7ff fbe2 	bl	800d58c <jpeg_fill_bit_buffer>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d0bd      	beq.n	800dd48 <decode_mcu_sub+0x30>
 800ddcc:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800ddd0:	f1bc 0f07 	cmp.w	ip, #7
 800ddd4:	dd4a      	ble.n	800de6c <decode_mcu_sub+0x154>
 800ddd6:	f1ac 0308 	sub.w	r3, ip, #8
 800ddda:	fa4e f303 	asr.w	r3, lr, r3
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800dde4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dde8:	2a00      	cmp	r2, #0
 800ddea:	d04d      	beq.n	800de88 <decode_mcu_sub+0x170>
 800ddec:	4423      	add	r3, r4
 800ddee:	ebac 0c02 	sub.w	ip, ip, r2
 800ddf2:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800ddf6:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800ddfa:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800ddfe:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800de00:	2b00      	cmp	r3, #0
 800de02:	f000 80a0 	beq.w	800df46 <decode_mcu_sub+0x22e>
	if (s) {
 800de06:	b1cc      	cbz	r4, 800de3c <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800de08:	45a4      	cmp	ip, r4
 800de0a:	da09      	bge.n	800de20 <decode_mcu_sub+0x108>
 800de0c:	4623      	mov	r3, r4
 800de0e:	4662      	mov	r2, ip
 800de10:	4671      	mov	r1, lr
 800de12:	a808      	add	r0, sp, #32
 800de14:	f7ff fbba 	bl	800d58c <jpeg_fill_bit_buffer>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d095      	beq.n	800dd48 <decode_mcu_sub+0x30>
 800de1c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800de20:	ebac 0c04 	sub.w	ip, ip, r4
 800de24:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800de28:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800de2a:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800de2e:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800de32:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800de34:	4299      	cmp	r1, r3
 800de36:	bfac      	ite	ge
 800de38:	1a9c      	subge	r4, r3, r2
 800de3a:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800de3c:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800de40:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800de44:	ab12      	add	r3, sp, #72	; 0x48
 800de46:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800de4a:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800de4e:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800de50:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800de54:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800de58:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800de5a:	9b03      	ldr	r3, [sp, #12]
 800de5c:	429c      	cmp	r4, r3
 800de5e:	db15      	blt.n	800de8c <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800de60:	9b05      	ldr	r3, [sp, #20]
 800de62:	429c      	cmp	r4, r3
 800de64:	f340 8081 	ble.w	800df6a <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800de68:	3701      	adds	r7, #1
 800de6a:	e78c      	b.n	800dd86 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800de6c:	2301      	movs	r3, #1
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	4662      	mov	r2, ip
 800de72:	4623      	mov	r3, r4
 800de74:	4671      	mov	r1, lr
 800de76:	a808      	add	r0, sp, #32
 800de78:	f7ff fbe6 	bl	800d648 <jpeg_huff_decode>
 800de7c:	1e04      	subs	r4, r0, #0
 800de7e:	f6ff af63 	blt.w	800dd48 <decode_mcu_sub+0x30>
 800de82:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800de86:	e7b6      	b.n	800ddf6 <decode_mcu_sub+0xde>
 800de88:	2309      	movs	r3, #9
 800de8a:	e7f0      	b.n	800de6e <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800de8c:	f1bc 0f07 	cmp.w	ip, #7
 800de90:	dc0d      	bgt.n	800deae <decode_mcu_sub+0x196>
 800de92:	2300      	movs	r3, #0
 800de94:	4662      	mov	r2, ip
 800de96:	4671      	mov	r1, lr
 800de98:	a808      	add	r0, sp, #32
 800de9a:	f7ff fb77 	bl	800d58c <jpeg_fill_bit_buffer>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	f43f af52 	beq.w	800dd48 <decode_mcu_sub+0x30>
 800dea4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800dea8:	f1bc 0f07 	cmp.w	ip, #7
 800deac:	dd37      	ble.n	800df1e <decode_mcu_sub+0x206>
 800deae:	f1ac 0308 	sub.w	r3, ip, #8
 800deb2:	fa4e f303 	asr.w	r3, lr, r3
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800debc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800dec0:	2a00      	cmp	r2, #0
 800dec2:	d03a      	beq.n	800df3a <decode_mcu_sub+0x222>
 800dec4:	4443      	add	r3, r8
 800dec6:	ebac 0c02 	sub.w	ip, ip, r2
 800deca:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800dece:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800ded2:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800ded6:	d032      	beq.n	800df3e <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ded8:	459c      	cmp	ip, r3
	    k += r;
 800deda:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800dedc:	da0b      	bge.n	800def6 <decode_mcu_sub+0x1de>
 800dede:	4662      	mov	r2, ip
 800dee0:	4671      	mov	r1, lr
 800dee2:	a808      	add	r0, sp, #32
 800dee4:	9307      	str	r3, [sp, #28]
 800dee6:	f7ff fb51 	bl	800d58c <jpeg_fill_bit_buffer>
 800deea:	2800      	cmp	r0, #0
 800deec:	f43f af2c 	beq.w	800dd48 <decode_mcu_sub+0x30>
 800def0:	9b07      	ldr	r3, [sp, #28]
 800def2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800def6:	ebac 0c03 	sub.w	ip, ip, r3
 800defa:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800defe:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800df00:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800df04:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800df08:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800df0a:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800df0c:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800df0e:	bfa8      	it	ge
 800df10:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800df12:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800df16:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800df1a:	3401      	adds	r4, #1
 800df1c:	e79d      	b.n	800de5a <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800df1e:	2301      	movs	r3, #1
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	4662      	mov	r2, ip
 800df24:	4643      	mov	r3, r8
 800df26:	4671      	mov	r1, lr
 800df28:	a808      	add	r0, sp, #32
 800df2a:	f7ff fb8d 	bl	800d648 <jpeg_huff_decode>
 800df2e:	2800      	cmp	r0, #0
 800df30:	f6ff af0a 	blt.w	800dd48 <decode_mcu_sub+0x30>
 800df34:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800df38:	e7c9      	b.n	800dece <decode_mcu_sub+0x1b6>
 800df3a:	2309      	movs	r3, #9
 800df3c:	e7f0      	b.n	800df20 <decode_mcu_sub+0x208>
	    if (r != 15)
 800df3e:	2a0f      	cmp	r2, #15
 800df40:	d192      	bne.n	800de68 <decode_mcu_sub+0x150>
	    k += 15;
 800df42:	340f      	adds	r4, #15
 800df44:	e7e9      	b.n	800df1a <decode_mcu_sub+0x202>
	if (s) {
 800df46:	b174      	cbz	r4, 800df66 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800df48:	45a4      	cmp	ip, r4
 800df4a:	da0a      	bge.n	800df62 <decode_mcu_sub+0x24a>
 800df4c:	4623      	mov	r3, r4
 800df4e:	4662      	mov	r2, ip
 800df50:	4671      	mov	r1, lr
 800df52:	a808      	add	r0, sp, #32
 800df54:	f7ff fb1a 	bl	800d58c <jpeg_fill_bit_buffer>
 800df58:	2800      	cmp	r0, #0
 800df5a:	f43f aef5 	beq.w	800dd48 <decode_mcu_sub+0x30>
 800df5e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800df62:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800df66:	2401      	movs	r4, #1
 800df68:	e77a      	b.n	800de60 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800df6a:	f1bc 0f07 	cmp.w	ip, #7
 800df6e:	dc0d      	bgt.n	800df8c <decode_mcu_sub+0x274>
 800df70:	2300      	movs	r3, #0
 800df72:	4662      	mov	r2, ip
 800df74:	4671      	mov	r1, lr
 800df76:	a808      	add	r0, sp, #32
 800df78:	f7ff fb08 	bl	800d58c <jpeg_fill_bit_buffer>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	f43f aee3 	beq.w	800dd48 <decode_mcu_sub+0x30>
 800df82:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800df86:	f1bc 0f07 	cmp.w	ip, #7
 800df8a:	dd25      	ble.n	800dfd8 <decode_mcu_sub+0x2c0>
 800df8c:	f1ac 0308 	sub.w	r3, ip, #8
 800df90:	fa4e f303 	asr.w	r3, lr, r3
 800df94:	b2db      	uxtb	r3, r3
 800df96:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800df9a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800df9e:	b34a      	cbz	r2, 800dff4 <decode_mcu_sub+0x2dc>
 800dfa0:	4443      	add	r3, r8
 800dfa2:	ebac 0c02 	sub.w	ip, ip, r2
 800dfa6:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800dfaa:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800dfae:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800dfb2:	d021      	beq.n	800dff8 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800dfb4:	45dc      	cmp	ip, fp
	  k += r;
 800dfb6:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800dfb8:	da0a      	bge.n	800dfd0 <decode_mcu_sub+0x2b8>
 800dfba:	465b      	mov	r3, fp
 800dfbc:	4662      	mov	r2, ip
 800dfbe:	4671      	mov	r1, lr
 800dfc0:	a808      	add	r0, sp, #32
 800dfc2:	f7ff fae3 	bl	800d58c <jpeg_fill_bit_buffer>
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	f43f aebe 	beq.w	800dd48 <decode_mcu_sub+0x30>
 800dfcc:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800dfd0:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800dfd4:	3401      	adds	r4, #1
 800dfd6:	e743      	b.n	800de60 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800dfd8:	2301      	movs	r3, #1
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	4662      	mov	r2, ip
 800dfde:	4643      	mov	r3, r8
 800dfe0:	4671      	mov	r1, lr
 800dfe2:	a808      	add	r0, sp, #32
 800dfe4:	f7ff fb30 	bl	800d648 <jpeg_huff_decode>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	f6ff aead 	blt.w	800dd48 <decode_mcu_sub+0x30>
 800dfee:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800dff2:	e7da      	b.n	800dfaa <decode_mcu_sub+0x292>
 800dff4:	2309      	movs	r3, #9
 800dff6:	e7f0      	b.n	800dfda <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800dff8:	2b0f      	cmp	r3, #15
 800dffa:	f47f af35 	bne.w	800de68 <decode_mcu_sub+0x150>
	  k += 15;
 800dffe:	340f      	adds	r4, #15
 800e000:	e7e8      	b.n	800dfd4 <decode_mcu_sub+0x2bc>
 800e002:	bf00      	nop
 800e004:	0802e700 	.word	0x0802e700

0800e008 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800e008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800e00c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800e010:	b091      	sub	sp, #68	; 0x44
 800e012:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800e014:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800e018:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800e01a:	b933      	cbnz	r3, 800e02a <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800e01c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800e01e:	b17f      	cbz	r7, 800e040 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800e020:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800e022:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800e024:	3b01      	subs	r3, #1
 800e026:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800e028:	e007      	b.n	800e03a <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800e02a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1f5      	bne.n	800e01c <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800e030:	f7ff fb54 	bl	800d6dc <process_restart>
 800e034:	2800      	cmp	r0, #0
 800e036:	d1f1      	bne.n	800e01c <decode_mcu+0x14>
	return FALSE;
 800e038:	2000      	movs	r0, #0
}
 800e03a:	b011      	add	sp, #68	; 0x44
 800e03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800e040:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800e042:	f105 0810 	add.w	r8, r5, #16
 800e046:	ac0b      	add	r4, sp, #44	; 0x2c
 800e048:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	9206      	str	r2, [sp, #24]
 800e052:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800e054:	f8df a290 	ldr.w	sl, [pc, #656]	; 800e2e8 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800e058:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800e05a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800e05e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800e062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e064:	f8d8 3000 	ldr.w	r3, [r8]
 800e068:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e06a:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800e06e:	42bb      	cmp	r3, r7
 800e070:	dc0e      	bgt.n	800e090 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800e072:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800e074:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800e076:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800e078:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	9a07      	ldr	r2, [sp, #28]
 800e080:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800e082:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800e084:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800e088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e08a:	6833      	ldr	r3, [r6, #0]
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	e7c7      	b.n	800e020 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800e090:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800e092:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800e096:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800e09a:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800e09e:	dc0c      	bgt.n	800e0ba <decode_mcu+0xb2>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	4662      	mov	r2, ip
 800e0a4:	4671      	mov	r1, lr
 800e0a6:	a806      	add	r0, sp, #24
 800e0a8:	f7ff fa70 	bl	800d58c <jpeg_fill_bit_buffer>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d0c3      	beq.n	800e038 <decode_mcu+0x30>
 800e0b0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800e0b4:	f1bc 0f07 	cmp.w	ip, #7
 800e0b8:	dd49      	ble.n	800e14e <decode_mcu+0x146>
 800e0ba:	f1ac 0308 	sub.w	r3, ip, #8
 800e0be:	fa4e f303 	asr.w	r3, lr, r3
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e0c8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0cc:	2a00      	cmp	r2, #0
 800e0ce:	d04c      	beq.n	800e16a <decode_mcu+0x162>
 800e0d0:	4423      	add	r3, r4
 800e0d2:	ebac 0c02 	sub.w	ip, ip, r2
 800e0d6:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800e0da:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800e0de:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800e0e2:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f000 809f 	beq.w	800e228 <decode_mcu+0x220>
	if (s) {
 800e0ea:	b1cc      	cbz	r4, 800e120 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e0ec:	45a4      	cmp	ip, r4
 800e0ee:	da09      	bge.n	800e104 <decode_mcu+0xfc>
 800e0f0:	4623      	mov	r3, r4
 800e0f2:	4662      	mov	r2, ip
 800e0f4:	4671      	mov	r1, lr
 800e0f6:	a806      	add	r0, sp, #24
 800e0f8:	f7ff fa48 	bl	800d58c <jpeg_fill_bit_buffer>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	d09b      	beq.n	800e038 <decode_mcu+0x30>
 800e100:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800e104:	ebac 0c04 	sub.w	ip, ip, r4
 800e108:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800e10c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800e10e:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800e112:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800e116:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800e118:	4299      	cmp	r1, r3
 800e11a:	bfac      	ite	ge
 800e11c:	1a9c      	subge	r4, r3, r2
 800e11e:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800e120:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800e124:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800e128:	ab10      	add	r3, sp, #64	; 0x40
 800e12a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e12e:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800e132:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800e134:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800e138:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800e13c:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800e13e:	9b03      	ldr	r3, [sp, #12]
 800e140:	429c      	cmp	r4, r3
 800e142:	db14      	blt.n	800e16e <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800e144:	2c3f      	cmp	r4, #63	; 0x3f
 800e146:	f340 8081 	ble.w	800e24c <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e14a:	3701      	adds	r7, #1
 800e14c:	e78d      	b.n	800e06a <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800e14e:	2301      	movs	r3, #1
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	4662      	mov	r2, ip
 800e154:	4623      	mov	r3, r4
 800e156:	4671      	mov	r1, lr
 800e158:	a806      	add	r0, sp, #24
 800e15a:	f7ff fa75 	bl	800d648 <jpeg_huff_decode>
 800e15e:	1e04      	subs	r4, r0, #0
 800e160:	f6ff af6a 	blt.w	800e038 <decode_mcu+0x30>
 800e164:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800e168:	e7b7      	b.n	800e0da <decode_mcu+0xd2>
 800e16a:	2309      	movs	r3, #9
 800e16c:	e7f0      	b.n	800e150 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800e16e:	f1bc 0f07 	cmp.w	ip, #7
 800e172:	dc0d      	bgt.n	800e190 <decode_mcu+0x188>
 800e174:	2300      	movs	r3, #0
 800e176:	4662      	mov	r2, ip
 800e178:	4671      	mov	r1, lr
 800e17a:	a806      	add	r0, sp, #24
 800e17c:	f7ff fa06 	bl	800d58c <jpeg_fill_bit_buffer>
 800e180:	2800      	cmp	r0, #0
 800e182:	f43f af59 	beq.w	800e038 <decode_mcu+0x30>
 800e186:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800e18a:	f1bc 0f07 	cmp.w	ip, #7
 800e18e:	dd37      	ble.n	800e200 <decode_mcu+0x1f8>
 800e190:	f1ac 0308 	sub.w	r3, ip, #8
 800e194:	fa4e f303 	asr.w	r3, lr, r3
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e19e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800e1a2:	2a00      	cmp	r2, #0
 800e1a4:	d03a      	beq.n	800e21c <decode_mcu+0x214>
 800e1a6:	4443      	add	r3, r8
 800e1a8:	ebac 0c02 	sub.w	ip, ip, r2
 800e1ac:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800e1b0:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800e1b4:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800e1b8:	d032      	beq.n	800e220 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e1ba:	459c      	cmp	ip, r3
	    k += r;
 800e1bc:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e1be:	da0b      	bge.n	800e1d8 <decode_mcu+0x1d0>
 800e1c0:	4662      	mov	r2, ip
 800e1c2:	4671      	mov	r1, lr
 800e1c4:	a806      	add	r0, sp, #24
 800e1c6:	9305      	str	r3, [sp, #20]
 800e1c8:	f7ff f9e0 	bl	800d58c <jpeg_fill_bit_buffer>
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	f43f af33 	beq.w	800e038 <decode_mcu+0x30>
 800e1d2:	9b05      	ldr	r3, [sp, #20]
 800e1d4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800e1d8:	ebac 0c03 	sub.w	ip, ip, r3
 800e1dc:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800e1e0:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800e1e2:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800e1e6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800e1ea:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800e1ec:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800e1ee:	4b3d      	ldr	r3, [pc, #244]	; (800e2e4 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800e1f0:	bfa8      	it	ge
 800e1f2:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800e1f4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e1f8:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800e1fc:	3401      	adds	r4, #1
 800e1fe:	e79e      	b.n	800e13e <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800e200:	2301      	movs	r3, #1
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	4662      	mov	r2, ip
 800e206:	4643      	mov	r3, r8
 800e208:	4671      	mov	r1, lr
 800e20a:	a806      	add	r0, sp, #24
 800e20c:	f7ff fa1c 	bl	800d648 <jpeg_huff_decode>
 800e210:	2800      	cmp	r0, #0
 800e212:	f6ff af11 	blt.w	800e038 <decode_mcu+0x30>
 800e216:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800e21a:	e7c9      	b.n	800e1b0 <decode_mcu+0x1a8>
 800e21c:	2309      	movs	r3, #9
 800e21e:	e7f0      	b.n	800e202 <decode_mcu+0x1fa>
	    if (r != 15)
 800e220:	2a0f      	cmp	r2, #15
 800e222:	d192      	bne.n	800e14a <decode_mcu+0x142>
	    k += 15;
 800e224:	340f      	adds	r4, #15
 800e226:	e7e9      	b.n	800e1fc <decode_mcu+0x1f4>
	if (s) {
 800e228:	b174      	cbz	r4, 800e248 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e22a:	45a4      	cmp	ip, r4
 800e22c:	da0a      	bge.n	800e244 <decode_mcu+0x23c>
 800e22e:	4623      	mov	r3, r4
 800e230:	4662      	mov	r2, ip
 800e232:	4671      	mov	r1, lr
 800e234:	a806      	add	r0, sp, #24
 800e236:	f7ff f9a9 	bl	800d58c <jpeg_fill_bit_buffer>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	f43f aefc 	beq.w	800e038 <decode_mcu+0x30>
 800e240:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800e244:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800e248:	2401      	movs	r4, #1
 800e24a:	e77b      	b.n	800e144 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800e24c:	f1bc 0f07 	cmp.w	ip, #7
 800e250:	dc0d      	bgt.n	800e26e <decode_mcu+0x266>
 800e252:	2300      	movs	r3, #0
 800e254:	4662      	mov	r2, ip
 800e256:	4671      	mov	r1, lr
 800e258:	a806      	add	r0, sp, #24
 800e25a:	f7ff f997 	bl	800d58c <jpeg_fill_bit_buffer>
 800e25e:	2800      	cmp	r0, #0
 800e260:	f43f aeea 	beq.w	800e038 <decode_mcu+0x30>
 800e264:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800e268:	f1bc 0f07 	cmp.w	ip, #7
 800e26c:	dd25      	ble.n	800e2ba <decode_mcu+0x2b2>
 800e26e:	f1ac 0308 	sub.w	r3, ip, #8
 800e272:	fa4e f303 	asr.w	r3, lr, r3
 800e276:	b2db      	uxtb	r3, r3
 800e278:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e27c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800e280:	b34a      	cbz	r2, 800e2d6 <decode_mcu+0x2ce>
 800e282:	4443      	add	r3, r8
 800e284:	ebac 0c02 	sub.w	ip, ip, r2
 800e288:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800e28c:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800e290:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800e294:	d021      	beq.n	800e2da <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e296:	45dc      	cmp	ip, fp
	  k += r;
 800e298:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e29a:	da0a      	bge.n	800e2b2 <decode_mcu+0x2aa>
 800e29c:	465b      	mov	r3, fp
 800e29e:	4662      	mov	r2, ip
 800e2a0:	4671      	mov	r1, lr
 800e2a2:	a806      	add	r0, sp, #24
 800e2a4:	f7ff f972 	bl	800d58c <jpeg_fill_bit_buffer>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	f43f aec5 	beq.w	800e038 <decode_mcu+0x30>
 800e2ae:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800e2b2:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800e2b6:	3401      	adds	r4, #1
 800e2b8:	e744      	b.n	800e144 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	9300      	str	r3, [sp, #0]
 800e2be:	4662      	mov	r2, ip
 800e2c0:	4643      	mov	r3, r8
 800e2c2:	4671      	mov	r1, lr
 800e2c4:	a806      	add	r0, sp, #24
 800e2c6:	f7ff f9bf 	bl	800d648 <jpeg_huff_decode>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	f6ff aeb4 	blt.w	800e038 <decode_mcu+0x30>
 800e2d0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800e2d4:	e7da      	b.n	800e28c <decode_mcu+0x284>
 800e2d6:	2309      	movs	r3, #9
 800e2d8:	e7f0      	b.n	800e2bc <decode_mcu+0x2b4>
	  if (r != 15)
 800e2da:	2b0f      	cmp	r3, #15
 800e2dc:	f47f af35 	bne.w	800e14a <decode_mcu+0x142>
	  k += 15;
 800e2e0:	340f      	adds	r4, #15
 800e2e2:	e7e8      	b.n	800e2b6 <decode_mcu+0x2ae>
 800e2e4:	0802ffd8 	.word	0x0802ffd8
 800e2e8:	0802e700 	.word	0x0802e700

0800e2ec <jpeg_make_d_derived_tbl>:
{
 800e2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800e2f0:	2a03      	cmp	r2, #3
{
 800e2f2:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	4616      	mov	r6, r2
 800e2fa:	461f      	mov	r7, r3
 800e2fc:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800e2fe:	d905      	bls.n	800e30c <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800e300:	6803      	ldr	r3, [r0, #0]
 800e302:	2234      	movs	r2, #52	; 0x34
 800e304:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800e30c:	9b03      	ldr	r3, [sp, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d044      	beq.n	800e39c <jpeg_make_d_derived_tbl+0xb0>
 800e312:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e316:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800e31a:	b935      	cbnz	r5, 800e32a <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800e31c:	6823      	ldr	r3, [r4, #0]
 800e31e:	2234      	movs	r2, #52	; 0x34
 800e320:	4620      	mov	r0, r4
 800e322:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4798      	blx	r3
  if (*pdtbl == NULL)
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	b93b      	cbnz	r3, 800e33e <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e32e:	6863      	ldr	r3, [r4, #4]
 800e330:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800e334:	2101      	movs	r1, #1
 800e336:	4620      	mov	r0, r4
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800e33c:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800e33e:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800e342:	2601      	movs	r6, #1
  p = 0;
 800e344:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e346:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800e34a:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800e34e:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800e352:	46ba      	mov	sl, r7
 800e354:	444f      	add	r7, r9
 800e356:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800e35a:	dd05      	ble.n	800e368 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e35c:	6823      	ldr	r3, [r4, #0]
 800e35e:	4620      	mov	r0, r4
 800e360:	f8c3 b014 	str.w	fp, [r3, #20]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4798      	blx	r3
 800e368:	f10a 0318 	add.w	r3, sl, #24
 800e36c:	446b      	add	r3, sp
    while (i--)
 800e36e:	f1b9 0901 	subs.w	r9, r9, #1
 800e372:	d218      	bcs.n	800e3a6 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800e374:	3601      	adds	r6, #1
 800e376:	2e11      	cmp	r6, #17
 800e378:	d1e9      	bne.n	800e34e <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800e37a:	2200      	movs	r2, #0
 800e37c:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800e37e:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800e382:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800e386:	55da      	strb	r2, [r3, r7]
  p = 0;
 800e388:	4691      	mov	r9, r2
  si = huffsize[0];
 800e38a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800e38e:	ab06      	add	r3, sp, #24
 800e390:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e394:	b313      	cbz	r3, 800e3dc <jpeg_make_d_derived_tbl+0xf0>
 800e396:	4649      	mov	r1, r9
 800e398:	1a52      	subs	r2, r2, r1
 800e39a:	e00a      	b.n	800e3b2 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800e39c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e3a0:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800e3a4:	e7b9      	b.n	800e31a <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800e3a6:	f803 6b01 	strb.w	r6, [r3], #1
 800e3aa:	e7e0      	b.n	800e36e <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800e3ac:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800e3b0:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800e3b2:	a806      	add	r0, sp, #24
 800e3b4:	1853      	adds	r3, r2, r1
 800e3b6:	4689      	mov	r9, r1
 800e3b8:	5c40      	ldrb	r0, [r0, r1]
 800e3ba:	42b0      	cmp	r0, r6
 800e3bc:	d0f6      	beq.n	800e3ac <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800e3be:	fa0b f206 	lsl.w	r2, fp, r6
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	dc07      	bgt.n	800e3d6 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e3c6:	6822      	ldr	r2, [r4, #0]
 800e3c8:	2109      	movs	r1, #9
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	9301      	str	r3, [sp, #4]
 800e3ce:	6151      	str	r1, [r2, #20]
 800e3d0:	6812      	ldr	r2, [r2, #0]
 800e3d2:	4790      	blx	r2
 800e3d4:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800e3d6:	005a      	lsls	r2, r3, #1
    si++;
 800e3d8:	3601      	adds	r6, #1
 800e3da:	e7d8      	b.n	800e38e <jpeg_make_d_derived_tbl+0xa2>
 800e3dc:	1c68      	adds	r0, r5, #1
 800e3de:	f108 0204 	add.w	r2, r8, #4
 800e3e2:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800e3e6:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800e3ea:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800e3ec:	f810 9b01 	ldrb.w	r9, [r0], #1
 800e3f0:	f1b9 0f00 	cmp.w	r9, #0
 800e3f4:	d029      	beq.n	800e44a <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800e3f6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800e3fa:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800e3fc:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800e3fe:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800e400:	1e59      	subs	r1, r3, #1
 800e402:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800e406:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800e408:	3204      	adds	r2, #4
 800e40a:	4594      	cmp	ip, r2
 800e40c:	d1ee      	bne.n	800e3ec <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800e40e:	4b2d      	ldr	r3, [pc, #180]	; (800e4c4 <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800e410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e414:	2100      	movs	r1, #0
 800e416:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800e41a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800e41e:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800e420:	f01c fc66 	bl	802acf0 <memset>
  p = 0;
 800e424:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800e428:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800e42a:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800e42c:	2101      	movs	r1, #1
 800e42e:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800e430:	9201      	str	r2, [sp, #4]
 800e432:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800e436:	fa01 fb02 	lsl.w	fp, r1, r2
 800e43a:	9202      	str	r2, [sp, #8]
 800e43c:	9a01      	ldr	r2, [sp, #4]
 800e43e:	4452      	add	r2, sl
 800e440:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800e442:	f105 0211 	add.w	r2, r5, #17
 800e446:	9205      	str	r2, [sp, #20]
 800e448:	e020      	b.n	800e48c <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800e44a:	f8c2 e000 	str.w	lr, [r2]
 800e44e:	e7db      	b.n	800e408 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800e450:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800e452:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800e454:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800e458:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800e45a:	9a05      	ldr	r2, [sp, #20]
 800e45c:	f812 1009 	ldrb.w	r1, [r2, r9]
 800e460:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800e464:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800e468:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 800e46c:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800e470:	d1fa      	bne.n	800e468 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800e472:	f1bb 0f00 	cmp.w	fp, #0
 800e476:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800e47a:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800e47e:	bfcc      	ite	gt
 800e480:	465a      	movgt	r2, fp
 800e482:	2201      	movle	r2, #1
 800e484:	4440      	add	r0, r8
 800e486:	f01c fc33 	bl	802acf0 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800e48a:	ab47      	add	r3, sp, #284	; 0x11c
 800e48c:	9a04      	ldr	r2, [sp, #16]
 800e48e:	4591      	cmp	r9, r2
 800e490:	d1de      	bne.n	800e450 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800e492:	3601      	adds	r6, #1
 800e494:	9a01      	ldr	r2, [sp, #4]
 800e496:	2e09      	cmp	r6, #9
 800e498:	4492      	add	sl, r2
 800e49a:	d1c6      	bne.n	800e42a <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 800e49c:	9b03      	ldr	r3, [sp, #12]
 800e49e:	b11b      	cbz	r3, 800e4a8 <jpeg_make_d_derived_tbl+0x1bc>
 800e4a0:	3511      	adds	r5, #17
 800e4a2:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800e4a4:	42af      	cmp	r7, r5
 800e4a6:	d103      	bne.n	800e4b0 <jpeg_make_d_derived_tbl+0x1c4>
}
 800e4a8:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800e4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800e4b0:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800e4b4:	2b0f      	cmp	r3, #15
 800e4b6:	d9f5      	bls.n	800e4a4 <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e4b8:	6823      	ldr	r3, [r4, #0]
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	615e      	str	r6, [r3, #20]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800e4c2:	e7ef      	b.n	800e4a4 <jpeg_make_d_derived_tbl+0x1b8>
 800e4c4:	000fffff 	.word	0x000fffff

0800e4c8 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800e4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800e4cc:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800e4d0:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800e4d2:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800e4d6:	f500 74aa 	add.w	r4, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800e4da:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800e4de:	2d00      	cmp	r5, #0
 800e4e0:	f000 80b1 	beq.w	800e646 <start_pass_huff_decoder+0x17e>
    if (cinfo->Ss == 0) {
 800e4e4:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800e4e8:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800e4ec:	b962      	cbnz	r2, 800e508 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800e4ee:	b1a9      	cbz	r1, 800e51c <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800e4f0:	f8da 3000 	ldr.w	r3, [sl]
 800e4f4:	2711      	movs	r7, #17
 800e4f6:	4650      	mov	r0, sl
 800e4f8:	625d      	str	r5, [r3, #36]	; 0x24
 800e4fa:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800e4fe:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4798      	blx	r3
 800e506:	e00f      	b.n	800e528 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800e508:	428a      	cmp	r2, r1
 800e50a:	dcf1      	bgt.n	800e4f0 <start_pass_huff_decoder+0x28>
 800e50c:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800e510:	428b      	cmp	r3, r1
 800e512:	dbed      	blt.n	800e4f0 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800e514:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d1e9      	bne.n	800e4f0 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800e51c:	b116      	cbz	r6, 800e524 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800e51e:	1e73      	subs	r3, r6, #1
 800e520:	42ab      	cmp	r3, r5
 800e522:	d1e5      	bne.n	800e4f0 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800e524:	2d0d      	cmp	r5, #13
 800e526:	dce3      	bgt.n	800e4f0 <start_pass_huff_decoder+0x28>
{
 800e528:	46a1      	mov	r9, r4
 800e52a:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e52c:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800e530:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e534:	42ba      	cmp	r2, r7
 800e536:	dc1e      	bgt.n	800e576 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800e538:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800e53c:	2a00      	cmp	r2, #0
 800e53e:	d158      	bne.n	800e5f2 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800e540:	2b00      	cmp	r3, #0
 800e542:	d154      	bne.n	800e5ee <start_pass_huff_decoder+0x126>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800e544:	4bbb      	ldr	r3, [pc, #748]	; (800e834 <start_pass_huff_decoder+0x36c>)
{
 800e546:	2600      	movs	r6, #0
 800e548:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800e54c:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800e550:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e552:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800e556:	42b3      	cmp	r3, r6
 800e558:	dc50      	bgt.n	800e5fc <start_pass_huff_decoder+0x134>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800e560:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800e562:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800e566:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800e56a:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800e56e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800e572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800e576:	f859 2b04 	ldr.w	r2, [r9], #4
 800e57a:	f8d2 8004 	ldr.w	r8, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800e57e:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800e582:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800e586:	eb02 2608 	add.w	r6, r2, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800e58a:	b173      	cbz	r3, 800e5aa <start_pass_huff_decoder+0xe2>
 800e58c:	5853      	ldr	r3, [r2, r1]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	da0b      	bge.n	800e5aa <start_pass_huff_decoder+0xe2>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800e592:	f8da 3000 	ldr.w	r3, [sl]
 800e596:	2276      	movs	r2, #118	; 0x76
 800e598:	f04f 31ff 	mov.w	r1, #4294967295
 800e59c:	4650      	mov	r0, sl
 800e59e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	61da      	str	r2, [r3, #28]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800e5aa:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800e5ae:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800e5b2:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800e5b6:	42ab      	cmp	r3, r5
 800e5b8:	da01      	bge.n	800e5be <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e5ba:	3701      	adds	r7, #1
 800e5bc:	e7b6      	b.n	800e52c <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800e5be:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800e5c0:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800e5c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d00a      	beq.n	800e5e2 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800e5cc:	f8da 3000 	ldr.w	r3, [sl]
 800e5d0:	2276      	movs	r2, #118	; 0x76
 800e5d2:	f04f 31ff 	mov.w	r1, #4294967295
 800e5d6:	4650      	mov	r0, sl
 800e5d8:	61dd      	str	r5, [r3, #28]
 800e5da:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800e5e2:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800e5e6:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800e5e8:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800e5ec:	e7e1      	b.n	800e5b2 <start_pass_huff_decoder+0xea>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800e5ee:	4b92      	ldr	r3, [pc, #584]	; (800e838 <start_pass_huff_decoder+0x370>)
 800e5f0:	e7a9      	b.n	800e546 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800e5f2:	b90b      	cbnz	r3, 800e5f8 <start_pass_huff_decoder+0x130>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800e5f4:	4b91      	ldr	r3, [pc, #580]	; (800e83c <start_pass_huff_decoder+0x374>)
 800e5f6:	e7a6      	b.n	800e546 <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800e5f8:	4b91      	ldr	r3, [pc, #580]	; (800e840 <start_pass_huff_decoder+0x378>)
 800e5fa:	e7a4      	b.n	800e546 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800e5fc:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800e600:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800e604:	b97a      	cbnz	r2, 800e626 <start_pass_huff_decoder+0x15e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800e606:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800e60a:	b942      	cbnz	r2, 800e61e <start_pass_huff_decoder+0x156>
	  tbl = compptr->dc_tbl_no;
 800e60c:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800e60e:	2101      	movs	r1, #1
 800e610:	4650      	mov	r0, sl
 800e612:	f102 030b 	add.w	r3, r2, #11
 800e616:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800e61a:	f7ff fe67 	bl	800e2ec <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e61e:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800e620:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e624:	e795      	b.n	800e552 <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800e626:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800e628:	2100      	movs	r1, #0
 800e62a:	4650      	mov	r0, sl
 800e62c:	f105 030b 	add.w	r3, r5, #11
 800e630:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800e632:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800e636:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800e63a:	f7ff fe57 	bl	800e2ec <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800e63e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e640:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800e644:	e7eb      	b.n	800e61e <start_pass_huff_decoder+0x156>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800e646:	b982      	cbnz	r2, 800e66a <start_pass_huff_decoder+0x1a2>
 800e648:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800e64c:	b96b      	cbnz	r3, 800e66a <start_pass_huff_decoder+0x1a2>
 800e64e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800e652:	b953      	cbnz	r3, 800e66a <start_pass_huff_decoder+0x1a2>
 800e654:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800e658:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800e65c:	b90a      	cbnz	r2, 800e662 <start_pass_huff_decoder+0x19a>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800e65e:	2b3f      	cmp	r3, #63	; 0x3f
 800e660:	dc0c      	bgt.n	800e67c <start_pass_huff_decoder+0x1b4>
 800e662:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800e666:	429a      	cmp	r2, r3
 800e668:	d008      	beq.n	800e67c <start_pass_huff_decoder+0x1b4>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800e66a:	f8da 3000 	ldr.w	r3, [sl]
 800e66e:	227d      	movs	r2, #125	; 0x7d
 800e670:	f04f 31ff 	mov.w	r1, #4294967295
 800e674:	4650      	mov	r0, sl
 800e676:	615a      	str	r2, [r3, #20]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800e67c:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800e680:	2600      	movs	r6, #0
 800e682:	4b70      	ldr	r3, [pc, #448]	; (800e844 <start_pass_huff_decoder+0x37c>)
 800e684:	f10b 0714 	add.w	r7, fp, #20
 800e688:	4a6f      	ldr	r2, [pc, #444]	; (800e848 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800e68a:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800e68c:	293f      	cmp	r1, #63	; 0x3f
 800e68e:	bf08      	it	eq
 800e690:	4613      	moveq	r3, r2
 800e692:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e696:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800e69a:	42b3      	cmp	r3, r6
 800e69c:	dc3c      	bgt.n	800e718 <start_pass_huff_decoder+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e69e:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800e6a2:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800e6a6:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800e6aa:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800e6ae:	4f67      	ldr	r7, [pc, #412]	; (800e84c <start_pass_huff_decoder+0x384>)
	  entropy->coef_limit[blkn] = 1;
 800e6b0:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e6b4:	42a8      	cmp	r0, r5
 800e6b6:	f77f af53 	ble.w	800e560 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800e6ba:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800e6be:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800e6c2:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800e6c6:	6953      	ldr	r3, [r2, #20]
 800e6c8:	3310      	adds	r3, #16
 800e6ca:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800e6ce:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800e6d2:	6993      	ldr	r3, [r2, #24]
 800e6d4:	3314      	adds	r3, #20
 800e6d6:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800e6da:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800e6dc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d052      	beq.n	800e788 <start_pass_huff_decoder+0x2c0>
	switch (cinfo->lim_Se) {
 800e6e2:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800e6e6:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800e6e8:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800e6ec:	d075      	beq.n	800e7da <start_pass_huff_decoder+0x312>
 800e6ee:	dc30      	bgt.n	800e752 <start_pass_huff_decoder+0x28a>
 800e6f0:	2c03      	cmp	r4, #3
 800e6f2:	d04f      	beq.n	800e794 <start_pass_huff_decoder+0x2cc>
 800e6f4:	2c08      	cmp	r4, #8
 800e6f6:	d05d      	beq.n	800e7b4 <start_pass_huff_decoder+0x2ec>
 800e6f8:	2c00      	cmp	r4, #0
 800e6fa:	d047      	beq.n	800e78c <start_pass_huff_decoder+0x2c4>
	  if (ci <= 0 || ci > 8) ci = 8;
 800e6fc:	1e5c      	subs	r4, r3, #1
 800e6fe:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800e700:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800e704:	bf28      	it	cs
 800e706:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800e708:	2c08      	cmp	r4, #8
 800e70a:	bf28      	it	cs
 800e70c:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800e70e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e712:	4b4f      	ldr	r3, [pc, #316]	; (800e850 <start_pass_huff_decoder+0x388>)
 800e714:	3a09      	subs	r2, #9
 800e716:	e04a      	b.n	800e7ae <start_pass_huff_decoder+0x2e6>
      compptr = cinfo->cur_comp_info[ci];
 800e718:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800e71c:	2101      	movs	r1, #1
 800e71e:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800e720:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800e724:	f102 0310 	add.w	r3, r2, #16
 800e728:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800e72c:	f7ff fdde 	bl	800e2ec <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800e730:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800e734:	b14b      	cbz	r3, 800e74a <start_pass_huff_decoder+0x282>
	tbl = compptr->ac_tbl_no;
 800e736:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800e73a:	2100      	movs	r1, #0
 800e73c:	4650      	mov	r0, sl
 800e73e:	f102 0314 	add.w	r3, r2, #20
 800e742:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800e746:	f7ff fdd1 	bl	800e2ec <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e74a:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800e74c:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e750:	e7a1      	b.n	800e696 <start_pass_huff_decoder+0x1ce>
	switch (cinfo->lim_Se) {
 800e752:	2c23      	cmp	r4, #35	; 0x23
 800e754:	f103 3eff 	add.w	lr, r3, #4294967295
 800e758:	f102 39ff 	add.w	r9, r2, #4294967295
 800e75c:	d04b      	beq.n	800e7f6 <start_pass_huff_decoder+0x32e>
 800e75e:	2c30      	cmp	r4, #48	; 0x30
 800e760:	d057      	beq.n	800e812 <start_pass_huff_decoder+0x34a>
 800e762:	2c18      	cmp	r4, #24
 800e764:	d1ca      	bne.n	800e6fc <start_pass_huff_decoder+0x234>
	  if (ci <= 0 || ci > 5) ci = 5;
 800e766:	f1be 0f05 	cmp.w	lr, #5
 800e76a:	bf28      	it	cs
 800e76c:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800e76e:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800e772:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800e776:	bf28      	it	cs
 800e778:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800e77a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e77e:	3a01      	subs	r2, #1
 800e780:	4413      	add	r3, r2
 800e782:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800e786:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800e788:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e78a:	e001      	b.n	800e790 <start_pass_huff_decoder+0x2c8>
	  entropy->coef_limit[blkn] = 1;
 800e78c:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e790:	3501      	adds	r5, #1
 800e792:	e78f      	b.n	800e6b4 <start_pass_huff_decoder+0x1ec>
	  if (ci <= 0 || ci > 2) ci = 2;
 800e794:	1e5c      	subs	r4, r3, #1
 800e796:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800e798:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800e79c:	bf28      	it	cs
 800e79e:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800e7a0:	2c02      	cmp	r4, #2
 800e7a2:	bf28      	it	cs
 800e7a4:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800e7a6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800e7aa:	4b2a      	ldr	r3, [pc, #168]	; (800e854 <start_pass_huff_decoder+0x38c>)
 800e7ac:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800e7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7b2:	e7e8      	b.n	800e786 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 3) ci = 3;
 800e7b4:	1e5c      	subs	r4, r3, #1
 800e7b6:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800e7b8:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800e7bc:	bf28      	it	cs
 800e7be:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800e7c0:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800e7c2:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800e7c6:	bf28      	it	cs
 800e7c8:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800e7ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e7ce:	3a01      	subs	r2, #1
 800e7d0:	4413      	add	r3, r2
 800e7d2:	4a21      	ldr	r2, [pc, #132]	; (800e858 <start_pass_huff_decoder+0x390>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800e7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7d8:	e7d5      	b.n	800e786 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 4) ci = 4;
 800e7da:	1e5c      	subs	r4, r3, #1
 800e7dc:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800e7de:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800e7e2:	bf28      	it	cs
 800e7e4:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800e7e6:	2c04      	cmp	r4, #4
 800e7e8:	bf28      	it	cs
 800e7ea:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800e7ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e7f0:	4b1a      	ldr	r3, [pc, #104]	; (800e85c <start_pass_huff_decoder+0x394>)
 800e7f2:	3a05      	subs	r2, #5
 800e7f4:	e7db      	b.n	800e7ae <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 6) ci = 6;
 800e7f6:	f1be 0f06 	cmp.w	lr, #6
 800e7fa:	bf28      	it	cs
 800e7fc:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800e7fe:	f1b9 0f06 	cmp.w	r9, #6
 800e802:	bf28      	it	cs
 800e804:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800e806:	3b01      	subs	r3, #1
 800e808:	3a01      	subs	r2, #1
 800e80a:	fb0c 2303 	mla	r3, ip, r3, r2
 800e80e:	4a14      	ldr	r2, [pc, #80]	; (800e860 <start_pass_huff_decoder+0x398>)
 800e810:	e7e0      	b.n	800e7d4 <start_pass_huff_decoder+0x30c>
	  if (ci <= 0 || ci > 7) ci = 7;
 800e812:	f1be 0f07 	cmp.w	lr, #7
 800e816:	bf28      	it	cs
 800e818:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800e81a:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800e81e:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800e822:	bf28      	it	cs
 800e824:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800e826:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e82a:	3a01      	subs	r2, #1
 800e82c:	4413      	add	r3, r2
 800e82e:	4a0d      	ldr	r2, [pc, #52]	; (800e864 <start_pass_huff_decoder+0x39c>)
 800e830:	e7d0      	b.n	800e7d4 <start_pass_huff_decoder+0x30c>
 800e832:	bf00      	nop
 800e834:	0800d729 	.word	0x0800d729
 800e838:	0800d89d 	.word	0x0800d89d
 800e83c:	0800d9fd 	.word	0x0800d9fd
 800e840:	0800da91 	.word	0x0800da91
 800e844:	0800dd19 	.word	0x0800dd19
 800e848:	0800e009 	.word	0x0800e009
 800e84c:	0802e8b4 	.word	0x0802e8b4
 800e850:	0802e740 	.word	0x0802e740
 800e854:	0802e840 	.word	0x0802e840
 800e858:	0802e850 	.word	0x0802e850
 800e85c:	0802e874 	.word	0x0802e874
 800e860:	0802e918 	.word	0x0802e918
 800e864:	0802e9a8 	.word	0x0802e9a8

0800e868 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800e868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e86a:	6843      	ldr	r3, [r0, #4]
 800e86c:	22d8      	movs	r2, #216	; 0xd8
 800e86e:	2101      	movs	r1, #1
{
 800e870:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800e876:	4b17      	ldr	r3, [pc, #92]	; (800e8d4 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800e878:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e87c:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800e87e:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800e880:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800e884:	b943      	cbnz	r3, 800e898 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800e886:	6503      	str	r3, [r0, #80]	; 0x50
 800e888:	6403      	str	r3, [r0, #64]	; 0x40
 800e88a:	6543      	str	r3, [r0, #84]	; 0x54
 800e88c:	6443      	str	r3, [r0, #68]	; 0x44
 800e88e:	6583      	str	r3, [r0, #88]	; 0x58
 800e890:	6483      	str	r3, [r0, #72]	; 0x48
 800e892:	65c3      	str	r3, [r0, #92]	; 0x5c
 800e894:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800e896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e898:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e89a:	2101      	movs	r1, #1
 800e89c:	686b      	ldr	r3, [r5, #4]
 800e89e:	4628      	mov	r0, r5
 800e8a0:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800e8a2:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4798      	blx	r3
 800e8a8:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800e8aa:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800e8ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e8b0:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800e8b4:	42b3      	cmp	r3, r6
 800e8b6:	dc05      	bgt.n	800e8c4 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800e8be:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800e8c2:	e7e8      	b.n	800e896 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800e8c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8c8:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800e8ca:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800e8cc:	f01c fa10 	bl	802acf0 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800e8d0:	e7ed      	b.n	800e8ae <jinit_huff_decoder+0x46>
 800e8d2:	bf00      	nop
 800e8d4:	0800e4c9 	.word	0x0800e4c9

0800e8d8 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800e8d8:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800e8dc:	4a01      	ldr	r2, [pc, #4]	; (800e8e4 <finish_input_pass+0xc>)
 800e8de:	601a      	str	r2, [r3, #0]
}
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	0800eaa1 	.word	0x0800eaa1

0800e8e8 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800e8e8:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800e8ea:	4a0a      	ldr	r2, [pc, #40]	; (800e914 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800e8ec:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800e8ee:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800e8f2:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800e8f4:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800e8f6:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800e8f8:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800e8fc:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800e8fe:	6803      	ldr	r3, [r0, #0]
 800e900:	691b      	ldr	r3, [r3, #16]
 800e902:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800e904:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e908:	4620      	mov	r0, r4
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800e90e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800e912:	bd38      	pop	{r3, r4, r5, pc}
 800e914:	0800eaa1 	.word	0x0800eaa1

0800e918 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800e918:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800e91c:	2a01      	cmp	r2, #1
{
 800e91e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e922:	4604      	mov	r4, r0
 800e924:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800e928:	d135      	bne.n	800e996 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800e92a:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800e92e:	69d9      	ldr	r1, [r3, #28]
 800e930:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800e934:	6a19      	ldr	r1, [r3, #32]
 800e936:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800e93a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800e93c:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800e93e:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800e942:	68d8      	ldr	r0, [r3, #12]
 800e944:	fbb1 f5f0 	udiv	r5, r1, r0
 800e948:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800e94c:	2900      	cmp	r1, #0
 800e94e:	bf08      	it	eq
 800e950:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800e952:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800e956:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800e958:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800e95a:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800e95e:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800e962:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e964:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800e966:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e96a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800e96e:	429f      	cmp	r7, r3
 800e970:	db71      	blt.n	800ea56 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800e972:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800e976:	4620      	mov	r0, r4
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800e97c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800e980:	4620      	mov	r0, r4
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800e986:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800e98a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800e98e:	6852      	ldr	r2, [r2, #4]
 800e990:	601a      	str	r2, [r3, #0]
}
 800e992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800e996:	1e53      	subs	r3, r2, #1
 800e998:	2b03      	cmp	r3, #3
 800e99a:	d907      	bls.n	800e9ac <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800e99c:	6803      	ldr	r3, [r0, #0]
 800e99e:	211b      	movs	r1, #27
 800e9a0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e9a4:	2204      	movs	r2, #4
 800e9a6:	61da      	str	r2, [r3, #28]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e9ac:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800e9b0:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e9b2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800e9b6:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800e9b8:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800e9ba:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800e9be:	4359      	muls	r1, r3
 800e9c0:	f009 fdd4 	bl	801856c <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e9c4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800e9c8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800e9cc:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800e9d0:	4359      	muls	r1, r3
 800e9d2:	6a20      	ldr	r0, [r4, #32]
 800e9d4:	f009 fdca 	bl	801856c <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800e9d8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800e9dc:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e9e0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800e9e4:	429d      	cmp	r5, r3
 800e9e6:	dabc      	bge.n	800e962 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800e9e8:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800e9ec:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800e9ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800e9f0:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800e9f2:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800e9f4:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800e9f8:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800e9fa:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800e9fc:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800e9fe:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800ea00:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800ea02:	fbb2 fcf1 	udiv	ip, r2, r1
 800ea06:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800ea0a:	2a00      	cmp	r2, #0
 800ea0c:	bf08      	it	eq
 800ea0e:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800ea10:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800ea12:	6a1a      	ldr	r2, [r3, #32]
 800ea14:	fbb2 f1f0 	udiv	r1, r2, r0
 800ea18:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800ea1c:	2a00      	cmp	r2, #0
 800ea1e:	bf08      	it	eq
 800ea20:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800ea22:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800ea24:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800ea28:	443b      	add	r3, r7
 800ea2a:	2b0a      	cmp	r3, #10
 800ea2c:	dd05      	ble.n	800ea3a <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800ea2e:	6823      	ldr	r3, [r4, #0]
 800ea30:	4620      	mov	r0, r4
 800ea32:	f8c3 9014 	str.w	r9, [r3, #20]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4798      	blx	r3
      while (mcublks-- > 0) {
 800ea3a:	2f00      	cmp	r7, #0
 800ea3c:	dc01      	bgt.n	800ea42 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ea3e:	3501      	adds	r5, #1
 800ea40:	e7ce      	b.n	800e9e0 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800ea42:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800ea46:	3f01      	subs	r7, #1
 800ea48:	1c5a      	adds	r2, r3, #1
 800ea4a:	335c      	adds	r3, #92	; 0x5c
 800ea4c:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800ea50:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800ea54:	e7f1      	b.n	800ea3a <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800ea56:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 800ea5a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ea5c:	b9eb      	cbnz	r3, 800ea9a <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800ea5e:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800ea60:	2a03      	cmp	r2, #3
 800ea62:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800ea66:	d803      	bhi.n	800ea70 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800ea68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	b92b      	cbnz	r3, 800ea7c <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	4620      	mov	r0, r4
 800ea74:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ea7c:	6863      	ldr	r3, [r4, #4]
 800ea7e:	2284      	movs	r2, #132	; 0x84
 800ea80:	2101      	movs	r1, #1
 800ea82:	4620      	mov	r0, r4
 800ea84:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800ea86:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ea8a:	4798      	blx	r3
 800ea8c:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800ea8e:	2284      	movs	r2, #132	; 0x84
 800ea90:	6869      	ldr	r1, [r5, #4]
 800ea92:	f01c f91f 	bl	802acd4 <memcpy>
    compptr->quant_table = qtbl;
 800ea96:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ea9a:	3701      	adds	r7, #1
 800ea9c:	e765      	b.n	800e96a <start_input_pass+0x52>
	...

0800eaa0 <consume_markers>:
{
 800eaa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800eaa4:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800eaa8:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800eaaa:	6973      	ldr	r3, [r6, #20]
 800eaac:	b9eb      	cbnz	r3, 800eaea <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800eaae:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800eab2:	4db0      	ldr	r5, [pc, #704]	; (800ed74 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800eab4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800eab8:	4620      	mov	r0, r4
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	4798      	blx	r3
    switch (val) {
 800eabe:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800eac0:	4607      	mov	r7, r0
    switch (val) {
 800eac2:	d016      	beq.n	800eaf2 <consume_markers+0x52>
 800eac4:	2802      	cmp	r0, #2
 800eac6:	d111      	bne.n	800eaec <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800eac8:	2301      	movs	r3, #1
 800eaca:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800eacc:	69b3      	ldr	r3, [r6, #24]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f000 8174 	beq.w	800edbc <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800ead4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ead8:	691b      	ldr	r3, [r3, #16]
 800eada:	b133      	cbz	r3, 800eaea <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	223d      	movs	r2, #61	; 0x3d
 800eae0:	4620      	mov	r0, r4
 800eae2:	615a      	str	r2, [r3, #20]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4798      	blx	r3
 800eae8:	e000      	b.n	800eaec <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800eaea:	2702      	movs	r7, #2
}
 800eaec:	4638      	mov	r0, r7
 800eaee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800eaf2:	69b3      	ldr	r3, [r6, #24]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f000 8150 	beq.w	800ed9a <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	f040 80d8 	bne.w	800ecb0 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800eb00:	6a22      	ldr	r2, [r4, #32]
 800eb02:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800eb06:	429a      	cmp	r2, r3
 800eb08:	dc02      	bgt.n	800eb10 <consume_markers+0x70>
 800eb0a:	69e2      	ldr	r2, [r4, #28]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	dd08      	ble.n	800eb22 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	212a      	movs	r1, #42	; 0x2a
 800eb14:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800eb18:	4620      	mov	r0, r4
 800eb1a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800eb22:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800eb26:	2a08      	cmp	r2, #8
 800eb28:	d006      	beq.n	800eb38 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800eb2a:	6823      	ldr	r3, [r4, #0]
 800eb2c:	2110      	movs	r1, #16
 800eb2e:	4620      	mov	r0, r4
 800eb30:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800eb38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800eb3a:	2a0a      	cmp	r2, #10
 800eb3c:	dd08      	ble.n	800eb50 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	211b      	movs	r1, #27
 800eb42:	4620      	mov	r0, r4
 800eb44:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800eb48:	220a      	movs	r2, #10
 800eb4a:	61da      	str	r2, [r3, #28]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eb50:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800eb54:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800eb58:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800eb5c:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eb60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb62:	459a      	cmp	sl, r3
 800eb64:	db0d      	blt.n	800eb82 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800eb66:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800eb6a:	b92b      	cbnz	r3, 800eb78 <consume_markers+0xd8>
 800eb6c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800eb70:	b383      	cbz	r3, 800ebd4 <consume_markers+0x134>
 800eb72:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800eb76:	b36b      	cbz	r3, 800ebd4 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800eb78:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800eb7a:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800eb7e:	233f      	movs	r3, #63	; 0x3f
 800eb80:	e071      	b.n	800ec66 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800eb82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb86:	3b01      	subs	r3, #1
 800eb88:	2b03      	cmp	r3, #3
 800eb8a:	d804      	bhi.n	800eb96 <consume_markers+0xf6>
 800eb8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	2b03      	cmp	r3, #3
 800eb94:	d905      	bls.n	800eba2 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f8c3 b014 	str.w	fp, [r3, #20]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800eba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800eba6:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800ebaa:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800ebae:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	bfac      	ite	ge
 800ebb6:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800ebba:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800ebbe:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800ebc2:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	bfac      	ite	ge
 800ebca:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800ebce:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800ebd2:	e7c5      	b.n	800eb60 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800ebd4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800ebd8:	2b50      	cmp	r3, #80	; 0x50
 800ebda:	f000 808a 	beq.w	800ecf2 <consume_markers+0x252>
 800ebde:	dc2b      	bgt.n	800ec38 <consume_markers+0x198>
 800ebe0:	2b18      	cmp	r3, #24
 800ebe2:	d078      	beq.n	800ecd6 <consume_markers+0x236>
 800ebe4:	dc1d      	bgt.n	800ec22 <consume_markers+0x182>
 800ebe6:	2b08      	cmp	r3, #8
 800ebe8:	d070      	beq.n	800eccc <consume_markers+0x22c>
 800ebea:	dc13      	bgt.n	800ec14 <consume_markers+0x174>
 800ebec:	b3bb      	cbz	r3, 800ec5e <consume_markers+0x1be>
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d065      	beq.n	800ecbe <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800ebf2:	6822      	ldr	r2, [r4, #0]
 800ebf4:	2111      	movs	r1, #17
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	6151      	str	r1, [r2, #20]
 800ebfa:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800ebfe:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800ec02:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800ec06:	6213      	str	r3, [r2, #32]
 800ec08:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800ec0c:	6253      	str	r3, [r2, #36]	; 0x24
 800ec0e:	6813      	ldr	r3, [r2, #0]
 800ec10:	4798      	blx	r3
      break;
 800ec12:	e02a      	b.n	800ec6a <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800ec14:	2b0f      	cmp	r3, #15
 800ec16:	d1ec      	bne.n	800ebf2 <consume_markers+0x152>
      cinfo->block_size = 4;
 800ec18:	2204      	movs	r2, #4
 800ec1a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800ec1e:	4a56      	ldr	r2, [pc, #344]	; (800ed78 <consume_markers+0x2d8>)
 800ec20:	e051      	b.n	800ecc6 <consume_markers+0x226>
    switch (cinfo->Se) {
 800ec22:	2b30      	cmp	r3, #48	; 0x30
 800ec24:	d05c      	beq.n	800ece0 <consume_markers+0x240>
 800ec26:	2b3f      	cmp	r3, #63	; 0x3f
 800ec28:	d05f      	beq.n	800ecea <consume_markers+0x24a>
 800ec2a:	2b23      	cmp	r3, #35	; 0x23
 800ec2c:	d1e1      	bne.n	800ebf2 <consume_markers+0x152>
      cinfo->block_size = 6;
 800ec2e:	2206      	movs	r2, #6
 800ec30:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800ec34:	4a51      	ldr	r2, [pc, #324]	; (800ed7c <consume_markers+0x2dc>)
 800ec36:	e046      	b.n	800ecc6 <consume_markers+0x226>
    switch (cinfo->Se) {
 800ec38:	2ba8      	cmp	r3, #168	; 0xa8
 800ec3a:	d060      	beq.n	800ecfe <consume_markers+0x25e>
 800ec3c:	dc07      	bgt.n	800ec4e <consume_markers+0x1ae>
 800ec3e:	2b78      	cmp	r3, #120	; 0x78
 800ec40:	d059      	beq.n	800ecf6 <consume_markers+0x256>
 800ec42:	2b8f      	cmp	r3, #143	; 0x8f
 800ec44:	d059      	beq.n	800ecfa <consume_markers+0x25a>
 800ec46:	2b63      	cmp	r3, #99	; 0x63
 800ec48:	d1d3      	bne.n	800ebf2 <consume_markers+0x152>
      cinfo->block_size = 10;
 800ec4a:	230a      	movs	r3, #10
 800ec4c:	e795      	b.n	800eb7a <consume_markers+0xda>
    switch (cinfo->Se) {
 800ec4e:	2be0      	cmp	r3, #224	; 0xe0
 800ec50:	d057      	beq.n	800ed02 <consume_markers+0x262>
 800ec52:	2bff      	cmp	r3, #255	; 0xff
 800ec54:	d057      	beq.n	800ed06 <consume_markers+0x266>
 800ec56:	2bc3      	cmp	r3, #195	; 0xc3
 800ec58:	d1cb      	bne.n	800ebf2 <consume_markers+0x152>
      cinfo->block_size = 14;
 800ec5a:	230e      	movs	r3, #14
 800ec5c:	e78d      	b.n	800eb7a <consume_markers+0xda>
      cinfo->block_size = 1;
 800ec5e:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800ec62:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800ec66:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec6a:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800ec6e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec72:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800ec76:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800ec78:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800ec7e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec82:	459a      	cmp	sl, r3
 800ec84:	db41      	blt.n	800ed0a <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ec86:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800ec8a:	6a20      	ldr	r0, [r4, #32]
 800ec8c:	4359      	muls	r1, r3
 800ec8e:	f009 fc6d 	bl	801856c <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800ec92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec94:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800ec98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800eca2:	db03      	blt.n	800ecac <consume_markers+0x20c>
 800eca4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800eca8:	2a00      	cmp	r2, #0
 800ecaa:	d071      	beq.n	800ed90 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800ecac:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800ecb0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d16d      	bne.n	800ed94 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800ecb8:	2302      	movs	r3, #2
 800ecba:	61b3      	str	r3, [r6, #24]
	  break;
 800ecbc:	e6fa      	b.n	800eab4 <consume_markers+0x14>
      cinfo->block_size = 2;
 800ecbe:	2202      	movs	r2, #2
 800ecc0:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800ecc4:	4a2e      	ldr	r2, [pc, #184]	; (800ed80 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800ecc6:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800ecca:	e7cc      	b.n	800ec66 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800eccc:	2203      	movs	r2, #3
 800ecce:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800ecd2:	4a2c      	ldr	r2, [pc, #176]	; (800ed84 <consume_markers+0x2e4>)
 800ecd4:	e7f7      	b.n	800ecc6 <consume_markers+0x226>
      cinfo->block_size = 5;
 800ecd6:	2205      	movs	r2, #5
 800ecd8:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800ecdc:	4a2a      	ldr	r2, [pc, #168]	; (800ed88 <consume_markers+0x2e8>)
 800ecde:	e7f2      	b.n	800ecc6 <consume_markers+0x226>
      cinfo->block_size = 7;
 800ece0:	2207      	movs	r2, #7
 800ece2:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800ece6:	4a29      	ldr	r2, [pc, #164]	; (800ed8c <consume_markers+0x2ec>)
 800ece8:	e7ed      	b.n	800ecc6 <consume_markers+0x226>
      cinfo->block_size = 8;
 800ecea:	2208      	movs	r2, #8
 800ecec:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800ecf0:	e7b7      	b.n	800ec62 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800ecf2:	2309      	movs	r3, #9
 800ecf4:	e741      	b.n	800eb7a <consume_markers+0xda>
      cinfo->block_size = 11;
 800ecf6:	230b      	movs	r3, #11
 800ecf8:	e73f      	b.n	800eb7a <consume_markers+0xda>
      cinfo->block_size = 12;
 800ecfa:	230c      	movs	r3, #12
 800ecfc:	e73d      	b.n	800eb7a <consume_markers+0xda>
      cinfo->block_size = 13;
 800ecfe:	230d      	movs	r3, #13
 800ed00:	e73b      	b.n	800eb7a <consume_markers+0xda>
      cinfo->block_size = 15;
 800ed02:	230f      	movs	r3, #15
 800ed04:	e739      	b.n	800eb7a <consume_markers+0xda>
      cinfo->block_size = 16;
 800ed06:	2310      	movs	r3, #16
 800ed08:	e737      	b.n	800eb7a <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800ed0a:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800ed0e:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800ed12:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800ed16:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800ed1a:	69e3      	ldr	r3, [r4, #28]
 800ed1c:	4351      	muls	r1, r2
 800ed1e:	4358      	muls	r0, r3
 800ed20:	f009 fc24 	bl	801856c <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800ed24:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800ed28:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ed2c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800ed30:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ed32:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800ed36:	4358      	muls	r0, r3
 800ed38:	4351      	muls	r1, r2
 800ed3a:	f009 fc17 	bl	801856c <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800ed3e:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800ed42:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ed46:	69e3      	ldr	r3, [r4, #28]
 800ed48:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800ed4c:	4358      	muls	r0, r3
 800ed4e:	f009 fc0d 	bl	801856c <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800ed52:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800ed56:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800ed5a:	6a23      	ldr	r3, [r4, #32]
 800ed5c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800ed60:	4358      	muls	r0, r3
 800ed62:	f009 fc03 	bl	801856c <jdiv_round_up>
    compptr->quant_table = NULL;
 800ed66:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800ed6a:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800ed6e:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800ed72:	e783      	b.n	800ec7c <consume_markers+0x1dc>
 800ed74:	0802ffd8 	.word	0x0802ffd8
 800ed78:	080301cc 	.word	0x080301cc
 800ed7c:	080302f0 	.word	0x080302f0
 800ed80:	08030118 	.word	0x08030118
 800ed84:	08030168 	.word	0x08030168
 800ed88:	0803024c 	.word	0x0803024c
 800ed8c:	080303c0 	.word	0x080303c0
    cinfo->inputctl->has_multiple_scans = FALSE;
 800ed90:	611a      	str	r2, [r3, #16]
 800ed92:	e78d      	b.n	800ecb0 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800ed94:	2300      	movs	r3, #0
 800ed96:	61b3      	str	r3, [r6, #24]
 800ed98:	e6a8      	b.n	800eaec <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800ed9a:	6933      	ldr	r3, [r6, #16]
 800ed9c:	b92b      	cbnz	r3, 800edaa <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800ed9e:	6823      	ldr	r3, [r4, #0]
 800eda0:	2224      	movs	r2, #36	; 0x24
 800eda2:	4620      	mov	r0, r4
 800eda4:	615a      	str	r2, [r3, #20]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800edaa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800edae:	2b00      	cmp	r3, #0
 800edb0:	f43f ae80 	beq.w	800eab4 <consume_markers+0x14>
	start_input_pass(cinfo);
 800edb4:	4620      	mov	r0, r4
 800edb6:	f7ff fdaf 	bl	800e918 <start_input_pass>
 800edba:	e697      	b.n	800eaec <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800edbc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800edc0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800edc4:	429a      	cmp	r2, r3
 800edc6:	f77f ae90 	ble.w	800eaea <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800edca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800edce:	e68d      	b.n	800eaec <consume_markers+0x4c>

0800edd0 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800edd0:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800edd4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800edd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800edd8:	434a      	muls	r2, r1
 800edda:	429a      	cmp	r2, r3
{
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800ede0:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800ede2:	d80c      	bhi.n	800edfe <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800ede4:	f009 fbc2 	bl	801856c <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800ede8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800edec:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800edee:	6a20      	ldr	r0, [r4, #32]
 800edf0:	f009 fbbc 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800edf4:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800edf6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800edf8:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800edfc:	e059      	b.n	800eeb2 <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800edfe:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800ee02:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800ee06:	d80c      	bhi.n	800ee22 <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800ee08:	0040      	lsls	r0, r0, #1
 800ee0a:	f009 fbaf 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ee0e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800ee10:	6a20      	ldr	r0, [r4, #32]
 800ee12:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ee16:	0040      	lsls	r0, r0, #1
 800ee18:	f009 fba8 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800ee1c:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800ee1e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800ee20:	e7ea      	b.n	800edf8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800ee22:	441d      	add	r5, r3
 800ee24:	42aa      	cmp	r2, r5
 800ee26:	d80e      	bhi.n	800ee46 <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800ee28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ee2c:	f009 fb9e 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ee30:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800ee32:	6a20      	ldr	r0, [r4, #32]
 800ee34:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ee38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ee3c:	f009 fb96 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800ee40:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800ee42:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800ee44:	e7d8      	b.n	800edf8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800ee46:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800ee4a:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800ee4e:	d80c      	bhi.n	800ee6a <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800ee50:	0080      	lsls	r0, r0, #2
 800ee52:	f009 fb8b 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ee56:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800ee58:	6a20      	ldr	r0, [r4, #32]
 800ee5a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ee5e:	0080      	lsls	r0, r0, #2
 800ee60:	f009 fb84 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800ee64:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800ee66:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800ee68:	e7c6      	b.n	800edf8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800ee6a:	441d      	add	r5, r3
 800ee6c:	42aa      	cmp	r2, r5
 800ee6e:	d80e      	bhi.n	800ee8e <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800ee70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ee74:	f009 fb7a 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ee78:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800ee7a:	6a20      	ldr	r0, [r4, #32]
 800ee7c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ee80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ee84:	f009 fb72 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800ee88:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800ee8a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800ee8c:	e7b4      	b.n	800edf8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800ee8e:	2506      	movs	r5, #6
 800ee90:	fb05 f603 	mul.w	r6, r5, r3
 800ee94:	42b2      	cmp	r2, r6
 800ee96:	d813      	bhi.n	800eec0 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800ee98:	4368      	muls	r0, r5
 800ee9a:	f009 fb67 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ee9e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800eea0:	6a20      	ldr	r0, [r4, #32]
 800eea2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800eea6:	4368      	muls	r0, r5
 800eea8:	f009 fb60 	bl	801856c <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800eeac:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800eeae:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eeb2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eeba:	4291      	cmp	r1, r2
 800eebc:	dc6f      	bgt.n	800ef9e <jpeg_core_output_dimensions+0x1ce>
}
 800eebe:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800eec0:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800eec4:	00dd      	lsls	r5, r3, #3
 800eec6:	42b2      	cmp	r2, r6
 800eec8:	d80e      	bhi.n	800eee8 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800eeca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800eece:	f009 fb4d 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800eed2:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800eed4:	6a20      	ldr	r0, [r4, #32]
 800eed6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800eeda:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800eede:	f009 fb45 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800eee2:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800eee4:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800eee6:	e787      	b.n	800edf8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800eee8:	42aa      	cmp	r2, r5
 800eeea:	d80c      	bhi.n	800ef06 <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800eeec:	00c0      	lsls	r0, r0, #3
 800eeee:	f009 fb3d 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800eef2:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800eef4:	6a20      	ldr	r0, [r4, #32]
 800eef6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800eefa:	00c0      	lsls	r0, r0, #3
 800eefc:	f009 fb36 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800ef00:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800ef02:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800ef04:	e778      	b.n	800edf8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800ef06:	441d      	add	r5, r3
 800ef08:	42aa      	cmp	r2, r5
 800ef0a:	d80e      	bhi.n	800ef2a <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800ef0c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800ef10:	f009 fb2c 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ef14:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800ef16:	6a20      	ldr	r0, [r4, #32]
 800ef18:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ef1c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800ef20:	f009 fb24 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800ef24:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800ef26:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800ef28:	e766      	b.n	800edf8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800ef2a:	250a      	movs	r5, #10
 800ef2c:	fb05 f603 	mul.w	r6, r5, r3
 800ef30:	42b2      	cmp	r2, r6
 800ef32:	d9b1      	bls.n	800ee98 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800ef34:	250b      	movs	r5, #11
 800ef36:	fb05 f603 	mul.w	r6, r5, r3
 800ef3a:	42b2      	cmp	r2, r6
 800ef3c:	d9ac      	bls.n	800ee98 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800ef3e:	250c      	movs	r5, #12
 800ef40:	fb05 f603 	mul.w	r6, r5, r3
 800ef44:	42b2      	cmp	r2, r6
 800ef46:	d9a7      	bls.n	800ee98 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800ef48:	250d      	movs	r5, #13
 800ef4a:	fb05 f603 	mul.w	r6, r5, r3
 800ef4e:	42b2      	cmp	r2, r6
 800ef50:	d9a2      	bls.n	800ee98 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800ef52:	250e      	movs	r5, #14
 800ef54:	fb05 f603 	mul.w	r6, r5, r3
 800ef58:	42b2      	cmp	r2, r6
 800ef5a:	d99d      	bls.n	800ee98 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800ef5c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800ef60:	429a      	cmp	r2, r3
 800ef62:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800ef66:	d80d      	bhi.n	800ef84 <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800ef68:	1a18      	subs	r0, r3, r0
 800ef6a:	f009 faff 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ef6e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800ef70:	6a20      	ldr	r0, [r4, #32]
 800ef72:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ef76:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800ef7a:	f009 faf7 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800ef7e:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800ef80:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800ef82:	e739      	b.n	800edf8 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800ef84:	4618      	mov	r0, r3
 800ef86:	f009 faf1 	bl	801856c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ef8a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800ef8c:	6a20      	ldr	r0, [r4, #32]
 800ef8e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ef92:	0100      	lsls	r0, r0, #4
 800ef94:	f009 faea 	bl	801856c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800ef98:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800ef9a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800ef9c:	e72c      	b.n	800edf8 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800ef9e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800efa2:	3201      	adds	r2, #1
 800efa4:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800efa6:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800efaa:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800efae:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800efb2:	e782      	b.n	800eeba <jpeg_core_output_dimensions+0xea>

0800efb4 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800efb4:	6843      	ldr	r3, [r0, #4]
 800efb6:	221c      	movs	r2, #28
 800efb8:	2100      	movs	r1, #0
 800efba:	681b      	ldr	r3, [r3, #0]
{
 800efbc:	b510      	push	{r4, lr}
 800efbe:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800efc0:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800efc2:	4b08      	ldr	r3, [pc, #32]	; (800efe4 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800efc4:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800efc8:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800efca:	4b07      	ldr	r3, [pc, #28]	; (800efe8 <jinit_input_controller+0x34>)
 800efcc:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800efce:	4b07      	ldr	r3, [pc, #28]	; (800efec <jinit_input_controller+0x38>)
 800efd0:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800efd2:	4b07      	ldr	r3, [pc, #28]	; (800eff0 <jinit_input_controller+0x3c>)
 800efd4:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800efd6:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800efd8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800efdc:	2301      	movs	r3, #1
 800efde:	6183      	str	r3, [r0, #24]
}
 800efe0:	bd10      	pop	{r4, pc}
 800efe2:	bf00      	nop
 800efe4:	0800eaa1 	.word	0x0800eaa1
 800efe8:	0800e8e9 	.word	0x0800e8e9
 800efec:	0800e919 	.word	0x0800e919
 800eff0:	0800e8d9 	.word	0x0800e8d9

0800eff4 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800eff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800eff8:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800effc:	4602      	mov	r2, r0

  switch (pass_mode) {
 800effe:	b149      	cbz	r1, 800f014 <start_pass_main+0x20>
 800f000:	2902      	cmp	r1, #2
 800f002:	d070      	beq.n	800f0e6 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f004:	6803      	ldr	r3, [r0, #0]
 800f006:	2203      	movs	r2, #3
 800f008:	615a      	str	r2, [r3, #20]
 800f00a:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800f00c:	b003      	add	sp, #12
 800f00e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f012:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800f014:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800f018:	6880      	ldr	r0, [r0, #8]
 800f01a:	2800      	cmp	r0, #0
 800f01c:	d060      	beq.n	800f0e0 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800f01e:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800f022:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f026:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800f02a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800f02c:	482f      	ldr	r0, [pc, #188]	; (800f0ec <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f02e:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800f030:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800f032:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800f034:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f036:	9a00      	ldr	r2, [sp, #0]
 800f038:	4291      	cmp	r1, r2
 800f03a:	db09      	blt.n	800f050 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800f03c:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800f03e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800f042:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800f044:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800f046:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800f04a:	b003      	add	sp, #12
 800f04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f050:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800f052:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800f054:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f056:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800f058:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800f05a:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800f05e:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800f062:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f064:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800f068:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800f06c:	fb02 f905 	mul.w	r9, r2, r5
 800f070:	2500      	movs	r5, #0
 800f072:	454d      	cmp	r5, r9
 800f074:	db1c      	blt.n	800f0b0 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800f076:	fb02 fb07 	mul.w	fp, r2, r7
 800f07a:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800f07e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800f082:	fb05 b502 	mla	r5, r5, r2, fp
 800f086:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800f08a:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800f08e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800f092:	2400      	movs	r4, #0
 800f094:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800f098:	4554      	cmp	r4, sl
 800f09a:	db11      	blt.n	800f0c0 <start_pass_main+0xcc>
 800f09c:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800f0a0:	2400      	movs	r4, #0
 800f0a2:	fb00 c502 	mla	r5, r0, r2, ip
 800f0a6:	42a2      	cmp	r2, r4
 800f0a8:	dc14      	bgt.n	800f0d4 <start_pass_main+0xe0>
       ci++, compptr++) {
 800f0aa:	3101      	adds	r1, #1
 800f0ac:	3658      	adds	r6, #88	; 0x58
 800f0ae:	e7c2      	b.n	800f036 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800f0b0:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800f0b4:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800f0b8:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800f0bc:	3501      	adds	r5, #1
 800f0be:	e7d8      	b.n	800f072 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800f0c0:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800f0c4:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800f0c6:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800f0ca:	f855 bb04 	ldr.w	fp, [r5], #4
 800f0ce:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800f0d2:	e7e1      	b.n	800f098 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800f0d4:	f8dc 0000 	ldr.w	r0, [ip]
 800f0d8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800f0dc:	3401      	adds	r4, #1
 800f0de:	e7e2      	b.n	800f0a6 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800f0e0:	4a03      	ldr	r2, [pc, #12]	; (800f0f0 <start_pass_main+0xfc>)
 800f0e2:	605a      	str	r2, [r3, #4]
 800f0e4:	e7ae      	b.n	800f044 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800f0e6:	4a03      	ldr	r2, [pc, #12]	; (800f0f4 <start_pass_main+0x100>)
 800f0e8:	605a      	str	r2, [r3, #4]
    break;
 800f0ea:	e7ae      	b.n	800f04a <start_pass_main+0x56>
 800f0ec:	0800f151 	.word	0x0800f151
 800f0f0:	0800f0f9 	.word	0x0800f0f9
 800f0f4:	0800f345 	.word	0x0800f345

0800f0f8 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800f0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800f0fc:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800f100:	4698      	mov	r8, r3
 800f102:	460e      	mov	r6, r1
 800f104:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800f106:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800f108:	4605      	mov	r5, r0
 800f10a:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800f10c:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800f110:	b943      	cbnz	r3, 800f124 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800f112:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800f116:	9105      	str	r1, [sp, #20]
 800f118:	68db      	ldr	r3, [r3, #12]
 800f11a:	4798      	blx	r3
 800f11c:	b1a8      	cbz	r0, 800f14a <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800f11e:	2301      	movs	r3, #1
 800f120:	9905      	ldr	r1, [sp, #20]
 800f122:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800f124:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800f128:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800f12c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800f130:	4628      	mov	r0, r5
 800f132:	9600      	str	r6, [sp, #0]
 800f134:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800f138:	685e      	ldr	r6, [r3, #4]
 800f13a:	464b      	mov	r3, r9
 800f13c:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800f13e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f140:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800f142:	bf24      	itt	cs
 800f144:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800f146:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800f14a:	b007      	add	sp, #28
 800f14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f150 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800f150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800f154:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800f158:	4698      	mov	r8, r3
 800f15a:	b08b      	sub	sp, #44	; 0x2c
 800f15c:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800f15e:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800f160:	4689      	mov	r9, r1
 800f162:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800f164:	b973      	cbnz	r3, 800f184 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800f166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f168:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800f16c:	330e      	adds	r3, #14
 800f16e:	68d2      	ldr	r2, [r2, #12]
 800f170:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800f174:	4790      	blx	r2
 800f176:	2800      	cmp	r0, #0
 800f178:	d05a      	beq.n	800f230 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800f17a:	2301      	movs	r3, #1
 800f17c:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800f17e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f180:	3301      	adds	r3, #1
 800f182:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800f184:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f186:	2b01      	cmp	r3, #1
 800f188:	d011      	beq.n	800f1ae <process_data_context_main+0x5e>
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d036      	beq.n	800f1fc <process_data_context_main+0xac>
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d14e      	bne.n	800f230 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800f192:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800f196:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800f198:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800f19a:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800f19e:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800f1a0:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800f1a2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d045      	beq.n	800f236 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800f1ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1b0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	f103 010e 	add.w	r1, r3, #14
 800f1ba:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800f1be:	f8cd 9000 	str.w	r9, [sp]
 800f1c2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800f1c6:	685e      	ldr	r6, [r3, #4]
 800f1c8:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800f1cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f1ce:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800f1d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f1d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d32b      	bcc.n	800f230 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800f1d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800f1da:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d063      	beq.n	800f2aa <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800f1e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1e4:	f083 0301 	eor.w	r3, r3, #1
 800f1e8:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800f1ee:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800f1f0:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800f1f2:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800f1f4:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800f1f6:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800f1f8:	6463      	str	r3, [r4, #68]	; 0x44
 800f1fa:	e019      	b.n	800f230 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800f1fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1fe:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800f202:	4628      	mov	r0, r5
 800f204:	f103 010e 	add.w	r1, r3, #14
 800f208:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800f20c:	f8cd 9000 	str.w	r9, [sp]
 800f210:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800f214:	685e      	ldr	r6, [r3, #4]
 800f216:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800f21a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f21c:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800f21e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f220:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f222:	429a      	cmp	r2, r3
 800f224:	d304      	bcc.n	800f230 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800f226:	2300      	movs	r3, #0
 800f228:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	4543      	cmp	r3, r8
 800f22e:	d3b0      	bcc.n	800f192 <process_data_context_main+0x42>
  }
}
 800f230:	b00b      	add	sp, #44	; 0x2c
 800f232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f236:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800f238:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800f23c:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f240:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800f244:	9206      	str	r2, [sp, #24]
 800f246:	9a06      	ldr	r2, [sp, #24]
 800f248:	4296      	cmp	r6, r2
 800f24a:	daae      	bge.n	800f1aa <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800f24c:	68d8      	ldr	r0, [r3, #12]
 800f24e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f250:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800f252:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f254:	fbb0 fbf2 	udiv	fp, r0, r2
 800f258:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800f25c:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800f260:	2800      	cmp	r0, #0
 800f262:	bf08      	it	eq
 800f264:	4610      	moveq	r0, r2
    if (ci == 0) {
 800f266:	b926      	cbnz	r6, 800f272 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800f268:	1e42      	subs	r2, r0, #1
 800f26a:	fb92 f2fa 	sdiv	r2, r2, sl
 800f26e:	3201      	adds	r2, #1
 800f270:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800f272:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800f274:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800f276:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800f27a:	320e      	adds	r2, #14
 800f27c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f280:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800f284:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800f288:	2200      	movs	r2, #0
 800f28a:	4658      	mov	r0, fp
 800f28c:	3004      	adds	r0, #4
 800f28e:	9205      	str	r2, [sp, #20]
 800f290:	9a05      	ldr	r2, [sp, #20]
 800f292:	4552      	cmp	r2, sl
 800f294:	db02      	blt.n	800f29c <process_data_context_main+0x14c>
       ci++, compptr++) {
 800f296:	3601      	adds	r6, #1
 800f298:	3358      	adds	r3, #88	; 0x58
 800f29a:	e7d4      	b.n	800f246 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800f29c:	f8db 2000 	ldr.w	r2, [fp]
 800f2a0:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800f2a4:	9a05      	ldr	r2, [sp, #20]
 800f2a6:	3201      	adds	r2, #1
 800f2a8:	e7f1      	b.n	800f28e <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f2aa:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800f2ae:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f2b2:	9305      	str	r3, [sp, #20]
 800f2b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f2b6:	2500      	movs	r5, #0
 800f2b8:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800f2ba:	1c43      	adds	r3, r0, #1
 800f2bc:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f2be:	9b08      	ldr	r3, [sp, #32]
 800f2c0:	429d      	cmp	r5, r3
 800f2c2:	da8e      	bge.n	800f1e2 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f2c4:	9b05      	ldr	r3, [sp, #20]
 800f2c6:	68da      	ldr	r2, [r3, #12]
 800f2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ca:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800f2cc:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f2d0:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800f2d4:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800f2d8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800f2dc:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800f2e0:	9b07      	ldr	r3, [sp, #28]
 800f2e2:	4353      	muls	r3, r2
 800f2e4:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800f2e8:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800f2ec:	4413      	add	r3, r2
 800f2ee:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800f2f6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800f2fa:	461e      	mov	r6, r3
 800f2fc:	f06f 0303 	mvn.w	r3, #3
 800f300:	fb03 fe02 	mul.w	lr, r3, r2
 800f304:	eb07 030e 	add.w	r3, r7, lr
 800f308:	44e6      	add	lr, ip
 800f30a:	9309      	str	r3, [sp, #36]	; 0x24
 800f30c:	428a      	cmp	r2, r1
 800f30e:	dc04      	bgt.n	800f31a <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800f310:	9b05      	ldr	r3, [sp, #20]
 800f312:	3501      	adds	r5, #1
 800f314:	3358      	adds	r3, #88	; 0x58
 800f316:	9305      	str	r3, [sp, #20]
 800f318:	e7d1      	b.n	800f2be <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800f31a:	9b06      	ldr	r3, [sp, #24]
 800f31c:	f853 bb04 	ldr.w	fp, [r3], #4
 800f320:	9306      	str	r3, [sp, #24]
 800f322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f324:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800f328:	f85a bb04 	ldr.w	fp, [sl], #4
 800f32c:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800f330:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800f334:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800f338:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800f33c:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800f33e:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800f342:	e7e3      	b.n	800f30c <process_data_context_main+0x1bc>

0800f344 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800f344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800f346:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800f34a:	9100      	str	r1, [sp, #0]
 800f34c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f350:	2300      	movs	r3, #0
 800f352:	6864      	ldr	r4, [r4, #4]
 800f354:	461a      	mov	r2, r3
 800f356:	4619      	mov	r1, r3
 800f358:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800f35a:	b004      	add	sp, #16
 800f35c:	bd10      	pop	{r4, pc}
	...

0800f360 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800f360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f364:	6843      	ldr	r3, [r0, #4]
{
 800f366:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f368:	2250      	movs	r2, #80	; 0x50
 800f36a:	2101      	movs	r1, #1
 800f36c:	681b      	ldr	r3, [r3, #0]
{
 800f36e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f370:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800f372:	4b3a      	ldr	r3, [pc, #232]	; (800f45c <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800f374:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f378:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800f37a:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800f37c:	b12d      	cbz	r5, 800f38a <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	2203      	movs	r2, #3
 800f382:	4620      	mov	r0, r4
 800f384:	615a      	str	r2, [r3, #20]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800f38a:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800f38e:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	b31b      	cbz	r3, 800f3de <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800f396:	2d01      	cmp	r5, #1
 800f398:	dc05      	bgt.n	800f3a6 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800f39a:	6823      	ldr	r3, [r4, #0]
 800f39c:	2230      	movs	r2, #48	; 0x30
 800f39e:	4620      	mov	r0, r4
 800f3a0:	615a      	str	r2, [r3, #20]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f3a8:	2101      	movs	r1, #1
 800f3aa:	6863      	ldr	r3, [r4, #4]
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800f3b0:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3b4:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f3b6:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800f3ba:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3be:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800f3c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800f3c2:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800f3c4:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800f3c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f3cc:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800f3d0:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800f3d4:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f3d8:	4598      	cmp	r8, r3
 800f3da:	db0a      	blt.n	800f3f2 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800f3dc:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f3de:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800f3e2:	3608      	adds	r6, #8
 800f3e4:	f04f 0800 	mov.w	r8, #0
 800f3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3ea:	4543      	cmp	r3, r8
 800f3ec:	dc1d      	bgt.n	800f42a <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800f3ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f3f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f3f4:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f3f6:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 800f3f8:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f3fa:	4353      	muls	r3, r2
 800f3fc:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f400:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800f402:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f406:	4620      	mov	r0, r4
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f40e:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800f410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800f412:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800f416:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800f41a:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800f41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f420:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800f424:	f108 0801 	add.w	r8, r8, #1
 800f428:	e7d3      	b.n	800f3d2 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f42a:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800f42c:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f430:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800f432:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800f434:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f438:	4353      	muls	r3, r2
 800f43a:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800f43e:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f440:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800f444:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800f448:	436b      	muls	r3, r5
 800f44a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800f44e:	4620      	mov	r0, r4
 800f450:	434a      	muls	r2, r1
 800f452:	2101      	movs	r1, #1
 800f454:	47c8      	blx	r9
 800f456:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800f45a:	e7c5      	b.n	800f3e8 <jinit_d_main_controller+0x88>
 800f45c:	0800eff5 	.word	0x0800eff5

0800f460 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800f460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800f464:	6986      	ldr	r6, [r0, #24]
{
 800f466:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800f468:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800f46c:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800f470:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800f474:	b93d      	cbnz	r5, 800f486 <get_sof+0x26>
 800f476:	68f3      	ldr	r3, [r6, #12]
 800f478:	4798      	blx	r3
 800f47a:	b910      	cbnz	r0, 800f482 <get_sof+0x22>
 800f47c:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800f47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f482:	e9d6 c500 	ldrd	ip, r5, [r6]
 800f486:	1e6b      	subs	r3, r5, #1
 800f488:	f89c 7000 	ldrb.w	r7, [ip]
 800f48c:	f000 8088 	beq.w	800f5a0 <get_sof+0x140>
 800f490:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800f494:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f496:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800f49a:	f000 808a 	beq.w	800f5b2 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f49e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800f4a0:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800f4a2:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800f4a4:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800f4a8:	f000 808c 	beq.w	800f5c4 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800f4ac:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800f4ae:	782a      	ldrb	r2, [r5, #0]
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800f4b6:	6222      	str	r2, [r4, #32]
 800f4b8:	f000 808d 	beq.w	800f5d6 <get_sof+0x176>
 800f4bc:	3501      	adds	r5, #1
 800f4be:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800f4c0:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800f4c2:	6a22      	ldr	r2, [r4, #32]
 800f4c4:	440a      	add	r2, r1
 800f4c6:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800f4c8:	f000 808e 	beq.w	800f5e8 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800f4cc:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800f4ce:	782a      	ldrb	r2, [r5, #0]
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800f4d6:	61e2      	str	r2, [r4, #28]
 800f4d8:	f000 808f 	beq.w	800f5fa <get_sof+0x19a>
 800f4dc:	3501      	adds	r5, #1
 800f4de:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800f4e0:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800f4e2:	69e2      	ldr	r2, [r4, #28]
 800f4e4:	440a      	add	r2, r1
 800f4e6:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800f4e8:	f000 8090 	beq.w	800f60c <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800f4ec:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800f4ee:	f103 39ff 	add.w	r9, r3, #4294967295
 800f4f2:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800f4f6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800f4fa:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800f4fc:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800f4fe:	4620      	mov	r0, r4
 800f500:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f502:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800f506:	619a      	str	r2, [r3, #24]
  length -= 8;
 800f508:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800f50c:	69e2      	ldr	r2, [r4, #28]
 800f50e:	61da      	str	r2, [r3, #28]
 800f510:	6a22      	ldr	r2, [r4, #32]
 800f512:	621a      	str	r2, [r3, #32]
 800f514:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f516:	625a      	str	r2, [r3, #36]	; 0x24
 800f518:	2266      	movs	r2, #102	; 0x66
 800f51a:	615a      	str	r2, [r3, #20]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800f520:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	b12b      	cbz	r3, 800f534 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800f528:	6823      	ldr	r3, [r4, #0]
 800f52a:	223c      	movs	r2, #60	; 0x3c
 800f52c:	4620      	mov	r0, r4
 800f52e:	615a      	str	r2, [r3, #20]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800f534:	6a23      	ldr	r3, [r4, #32]
 800f536:	b123      	cbz	r3, 800f542 <get_sof+0xe2>
 800f538:	69e3      	ldr	r3, [r4, #28]
 800f53a:	b113      	cbz	r3, 800f542 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800f53c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f53e:	2b00      	cmp	r3, #0
 800f540:	dc05      	bgt.n	800f54e <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800f542:	6823      	ldr	r3, [r4, #0]
 800f544:	2221      	movs	r2, #33	; 0x21
 800f546:	4620      	mov	r0, r4
 800f548:	615a      	str	r2, [r3, #20]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800f54e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f550:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f554:	4543      	cmp	r3, r8
 800f556:	d005      	beq.n	800f564 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	220c      	movs	r2, #12
 800f55c:	4620      	mov	r0, r4
 800f55e:	615a      	str	r2, [r3, #20]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800f564:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800f568:	b94b      	cbnz	r3, 800f57e <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800f56a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f56c:	2158      	movs	r1, #88	; 0x58
 800f56e:	6863      	ldr	r3, [r4, #4]
 800f570:	4620      	mov	r0, r4
 800f572:	434a      	muls	r2, r1
 800f574:	2101      	movs	r1, #1
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4798      	blx	r3
 800f57a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f57e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800f582:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800f586:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f58a:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f58c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f58e:	4543      	cmp	r3, r8
 800f590:	dc45      	bgt.n	800f61e <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800f592:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f596:	2001      	movs	r0, #1
 800f598:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800f59a:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800f59e:	e76e      	b.n	800f47e <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f5a0:	68f3      	ldr	r3, [r6, #12]
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	4798      	blx	r3
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	f43f af68 	beq.w	800f47c <get_sof+0x1c>
 800f5ac:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f5b0:	e770      	b.n	800f494 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800f5b2:	68f3      	ldr	r3, [r6, #12]
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	4798      	blx	r3
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	f43f af5f 	beq.w	800f47c <get_sof+0x1c>
 800f5be:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f5c2:	e76d      	b.n	800f4a0 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800f5c4:	68f3      	ldr	r3, [r6, #12]
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	4798      	blx	r3
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	f43f af56 	beq.w	800f47c <get_sof+0x1c>
 800f5d0:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f5d4:	e76b      	b.n	800f4ae <get_sof+0x4e>
 800f5d6:	68f3      	ldr	r3, [r6, #12]
 800f5d8:	4620      	mov	r0, r4
 800f5da:	4798      	blx	r3
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	f43f af4d 	beq.w	800f47c <get_sof+0x1c>
 800f5e2:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f5e6:	e76a      	b.n	800f4be <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800f5e8:	68f3      	ldr	r3, [r6, #12]
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	4798      	blx	r3
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	f43f af44 	beq.w	800f47c <get_sof+0x1c>
 800f5f4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f5f8:	e769      	b.n	800f4ce <get_sof+0x6e>
 800f5fa:	68f3      	ldr	r3, [r6, #12]
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	4798      	blx	r3
 800f600:	2800      	cmp	r0, #0
 800f602:	f43f af3b 	beq.w	800f47c <get_sof+0x1c>
 800f606:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f60a:	e768      	b.n	800f4de <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800f60c:	68f3      	ldr	r3, [r6, #12]
 800f60e:	4620      	mov	r0, r4
 800f610:	4798      	blx	r3
 800f612:	2800      	cmp	r0, #0
 800f614:	f43f af32 	beq.w	800f47c <get_sof+0x1c>
 800f618:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f61c:	e767      	b.n	800f4ee <get_sof+0x8e>
    compptr->component_index = ci;
 800f61e:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800f622:	f1b9 0f00 	cmp.w	r9, #0
 800f626:	d107      	bne.n	800f638 <get_sof+0x1d8>
 800f628:	68f3      	ldr	r3, [r6, #12]
 800f62a:	4620      	mov	r0, r4
 800f62c:	4798      	blx	r3
 800f62e:	2800      	cmp	r0, #0
 800f630:	f43f af24 	beq.w	800f47c <get_sof+0x1c>
 800f634:	e9d6 5900 	ldrd	r5, r9, [r6]
 800f638:	782b      	ldrb	r3, [r5, #0]
 800f63a:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f63e:	f1b9 0301 	subs.w	r3, r9, #1
 800f642:	d029      	beq.n	800f698 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800f644:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800f646:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800f648:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800f64a:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800f64e:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800f652:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800f656:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800f65a:	d026      	beq.n	800f6aa <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800f65c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800f65e:	f103 39ff 	add.w	r9, r3, #4294967295
 800f662:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800f666:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800f66a:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800f66c:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800f670:	4620      	mov	r0, r4
 800f672:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800f674:	f108 0801 	add.w	r8, r8, #1
 800f678:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800f67a:	619a      	str	r2, [r3, #24]
 800f67c:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800f680:	61da      	str	r2, [r3, #28]
 800f682:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800f686:	621a      	str	r2, [r3, #32]
 800f688:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800f68c:	f8c3 a014 	str.w	sl, [r3, #20]
 800f690:	625a      	str	r2, [r3, #36]	; 0x24
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	4798      	blx	r3
       ci++, compptr++) {
 800f696:	e779      	b.n	800f58c <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800f698:	68f3      	ldr	r3, [r6, #12]
 800f69a:	4620      	mov	r0, r4
 800f69c:	4798      	blx	r3
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	f43f aeec 	beq.w	800f47c <get_sof+0x1c>
 800f6a4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f6a8:	e7cd      	b.n	800f646 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800f6aa:	68f3      	ldr	r3, [r6, #12]
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	4798      	blx	r3
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	f43f aee3 	beq.w	800f47c <get_sof+0x1c>
 800f6b6:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f6ba:	e7d0      	b.n	800f65e <get_sof+0x1fe>

0800f6bc <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800f6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800f6c0:	2a0d      	cmp	r2, #13
{
 800f6c2:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800f6c4:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800f6c6:	eb02 0603 	add.w	r6, r2, r3
{
 800f6ca:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800f6cc:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800f6ce:	d96d      	bls.n	800f7ac <examine_app0+0xf0>
 800f6d0:	7822      	ldrb	r2, [r4, #0]
 800f6d2:	2a4a      	cmp	r2, #74	; 0x4a
 800f6d4:	f040 808f 	bne.w	800f7f6 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800f6d8:	7862      	ldrb	r2, [r4, #1]
 800f6da:	2a46      	cmp	r2, #70	; 0x46
 800f6dc:	f040 808b 	bne.w	800f7f6 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800f6e0:	78a2      	ldrb	r2, [r4, #2]
 800f6e2:	2a49      	cmp	r2, #73	; 0x49
 800f6e4:	d16a      	bne.n	800f7bc <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800f6e6:	78e2      	ldrb	r2, [r4, #3]
 800f6e8:	2a46      	cmp	r2, #70	; 0x46
 800f6ea:	d167      	bne.n	800f7bc <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800f6ec:	7922      	ldrb	r2, [r4, #4]
 800f6ee:	2a00      	cmp	r2, #0
 800f6f0:	d164      	bne.n	800f7bc <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800f6f8:	7962      	ldrb	r2, [r4, #5]
 800f6fa:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800f6fe:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800f700:	f894 c006 	ldrb.w	ip, [r4, #6]
 800f704:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800f708:	79e7      	ldrb	r7, [r4, #7]
 800f70a:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800f70e:	f894 e008 	ldrb.w	lr, [r4, #8]
 800f712:	7a67      	ldrb	r7, [r4, #9]
 800f714:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800f718:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800f71c:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800f720:	7ae7      	ldrb	r7, [r4, #11]
 800f722:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800f726:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800f72a:	d007      	beq.n	800f73c <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800f72c:	277a      	movs	r7, #122	; 0x7a
 800f72e:	f8c1 c01c 	str.w	ip, [r1, #28]
 800f732:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800f736:	f04f 31ff 	mov.w	r1, #4294967295
 800f73a:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	2101      	movs	r1, #1
 800f740:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800f744:	4628      	mov	r0, r5
 800f746:	619a      	str	r2, [r3, #24]
 800f748:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800f74c:	61da      	str	r2, [r3, #28]
 800f74e:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800f752:	621a      	str	r2, [r3, #32]
 800f754:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800f758:	625a      	str	r2, [r3, #36]	; 0x24
 800f75a:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800f75e:	629a      	str	r2, [r3, #40]	; 0x28
 800f760:	2259      	movs	r2, #89	; 0x59
 800f762:	615a      	str	r2, [r3, #20]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800f768:	7b22      	ldrb	r2, [r4, #12]
 800f76a:	7b63      	ldrb	r3, [r4, #13]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	d00a      	beq.n	800f786 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800f770:	682b      	ldr	r3, [r5, #0]
 800f772:	225c      	movs	r2, #92	; 0x5c
 800f774:	2101      	movs	r1, #1
 800f776:	4628      	mov	r0, r5
 800f778:	615a      	str	r2, [r3, #20]
 800f77a:	7b22      	ldrb	r2, [r4, #12]
 800f77c:	619a      	str	r2, [r3, #24]
 800f77e:	7b62      	ldrb	r2, [r4, #13]
 800f780:	61da      	str	r2, [r3, #28]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800f786:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800f788:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800f78a:	7b63      	ldrb	r3, [r4, #13]
 800f78c:	fb12 f203 	smulbb	r2, r2, r3
 800f790:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800f794:	42b2      	cmp	r2, r6
 800f796:	d030      	beq.n	800f7fa <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800f798:	682a      	ldr	r2, [r5, #0]
 800f79a:	235a      	movs	r3, #90	; 0x5a
 800f79c:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800f7a0:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	2101      	movs	r1, #1
  }
}
 800f7a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800f7aa:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800f7ac:	2a05      	cmp	r2, #5
 800f7ae:	d922      	bls.n	800f7f6 <examine_app0+0x13a>
 800f7b0:	7822      	ldrb	r2, [r4, #0]
 800f7b2:	2a4a      	cmp	r2, #74	; 0x4a
 800f7b4:	d11f      	bne.n	800f7f6 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800f7b6:	7862      	ldrb	r2, [r4, #1]
 800f7b8:	2a46      	cmp	r2, #70	; 0x46
 800f7ba:	d11c      	bne.n	800f7f6 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800f7bc:	78a2      	ldrb	r2, [r4, #2]
 800f7be:	2a58      	cmp	r2, #88	; 0x58
 800f7c0:	d119      	bne.n	800f7f6 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800f7c2:	78e2      	ldrb	r2, [r4, #3]
 800f7c4:	2a58      	cmp	r2, #88	; 0x58
 800f7c6:	d116      	bne.n	800f7f6 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800f7c8:	7922      	ldrb	r2, [r4, #4]
 800f7ca:	b9a2      	cbnz	r2, 800f7f6 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800f7cc:	7962      	ldrb	r2, [r4, #5]
 800f7ce:	2a11      	cmp	r2, #17
 800f7d0:	d007      	beq.n	800f7e2 <examine_app0+0x126>
 800f7d2:	2a13      	cmp	r2, #19
 800f7d4:	d007      	beq.n	800f7e6 <examine_app0+0x12a>
 800f7d6:	2a10      	cmp	r2, #16
 800f7d8:	d107      	bne.n	800f7ea <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800f7da:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800f7dc:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800f7e0:	e7df      	b.n	800f7a2 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800f7e2:	226f      	movs	r2, #111	; 0x6f
 800f7e4:	e7fa      	b.n	800f7dc <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800f7e6:	2270      	movs	r2, #112	; 0x70
 800f7e8:	e7f8      	b.n	800f7dc <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800f7ea:	225b      	movs	r2, #91	; 0x5b
 800f7ec:	614a      	str	r2, [r1, #20]
 800f7ee:	7962      	ldrb	r2, [r4, #5]
 800f7f0:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800f7f4:	e7d5      	b.n	800f7a2 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800f7f6:	224f      	movs	r2, #79	; 0x4f
 800f7f8:	e7f0      	b.n	800f7dc <examine_app0+0x120>
}
 800f7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f7fe <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800f7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800f802:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800f804:	6804      	ldr	r4, [r0, #0]
{
 800f806:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800f808:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800f80a:	d92b      	bls.n	800f864 <examine_app14+0x66>
 800f80c:	780f      	ldrb	r7, [r1, #0]
 800f80e:	2f41      	cmp	r7, #65	; 0x41
 800f810:	d128      	bne.n	800f864 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800f812:	784f      	ldrb	r7, [r1, #1]
 800f814:	2f64      	cmp	r7, #100	; 0x64
 800f816:	d125      	bne.n	800f864 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800f818:	788f      	ldrb	r7, [r1, #2]
 800f81a:	2f6f      	cmp	r7, #111	; 0x6f
 800f81c:	d122      	bne.n	800f864 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800f81e:	78cf      	ldrb	r7, [r1, #3]
 800f820:	2f62      	cmp	r7, #98	; 0x62
 800f822:	d11f      	bne.n	800f864 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800f824:	790f      	ldrb	r7, [r1, #4]
 800f826:	2f65      	cmp	r7, #101	; 0x65
 800f828:	d11c      	bne.n	800f864 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800f82a:	79cb      	ldrb	r3, [r1, #7]
 800f82c:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800f82e:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800f830:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800f834:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800f836:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800f83a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800f83e:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800f840:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800f842:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800f846:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800f84a:	234e      	movs	r3, #78	; 0x4e
 800f84c:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800f850:	6163      	str	r3, [r4, #20]
 800f852:	2101      	movs	r1, #1
 800f854:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800f856:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800f858:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800f85c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800f860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800f864:	2150      	movs	r1, #80	; 0x50
 800f866:	4413      	add	r3, r2
 800f868:	4628      	mov	r0, r5
 800f86a:	6161      	str	r1, [r4, #20]
 800f86c:	2101      	movs	r1, #1
 800f86e:	61a3      	str	r3, [r4, #24]
 800f870:	4633      	mov	r3, r6
}
 800f872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800f876:	4718      	bx	r3

0800f878 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800f878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800f87c:	6986      	ldr	r6, [r0, #24]
{
 800f87e:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800f880:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800f882:	b39f      	cbz	r7, 800f8ec <get_interesting_appn+0x74>
  INPUT_VARS(cinfo);
 800f884:	6834      	ldr	r4, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f886:	7825      	ldrb	r5, [r4, #0]
 800f888:	3f01      	subs	r7, #1
 800f88a:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800f88e:	d037      	beq.n	800f900 <get_interesting_appn+0x88>
 800f890:	3401      	adds	r4, #1
 800f892:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f896:	3f01      	subs	r7, #1
 800f898:	444d      	add	r5, r9
  length -= 2;
 800f89a:	3d02      	subs	r5, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800f89c:	2d0d      	cmp	r5, #13
 800f89e:	dc37      	bgt.n	800f910 <get_interesting_appn+0x98>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 800f8a0:	2d00      	cmp	r5, #0
 800f8a2:	dd38      	ble.n	800f916 <get_interesting_appn+0x9e>
    numtoread = (unsigned int) length;
 800f8a4:	46a9      	mov	r9, r5
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 800f8a6:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800f8aa:	b92f      	cbnz	r7, 800f8b8 <get_interesting_appn+0x40>
 800f8ac:	68f3      	ldr	r3, [r6, #12]
 800f8ae:	4640      	mov	r0, r8
 800f8b0:	4798      	blx	r3
 800f8b2:	b1f0      	cbz	r0, 800f8f2 <get_interesting_appn+0x7a>
 800f8b4:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f8b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f8bc:	3f01      	subs	r7, #1
 800f8be:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800f8c2:	f10a 0a01 	add.w	sl, sl, #1
 800f8c6:	45d1      	cmp	r9, sl
 800f8c8:	d1ef      	bne.n	800f8aa <get_interesting_appn+0x32>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 800f8ca:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800f8ce:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800f8d2:	2ae0      	cmp	r2, #224	; 0xe0
 800f8d4:	d022      	beq.n	800f91c <get_interesting_appn+0xa4>
 800f8d6:	2aee      	cmp	r2, #238	; 0xee
 800f8d8:	d032      	beq.n	800f940 <get_interesting_appn+0xc8>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800f8da:	f8d8 3000 	ldr.w	r3, [r8]
 800f8de:	2146      	movs	r1, #70	; 0x46
 800f8e0:	4640      	mov	r0, r8
 800f8e2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4798      	blx	r3
    break;
 800f8ea:	e01d      	b.n	800f928 <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f8ec:	68f3      	ldr	r3, [r6, #12]
 800f8ee:	4798      	blx	r3
 800f8f0:	b918      	cbnz	r0, 800f8fa <get_interesting_appn+0x82>
 800f8f2:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800f8f4:	b004      	add	sp, #16
 800f8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f8fa:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f8fe:	e7c2      	b.n	800f886 <get_interesting_appn+0xe>
 800f900:	68f3      	ldr	r3, [r6, #12]
 800f902:	4640      	mov	r0, r8
 800f904:	4798      	blx	r3
 800f906:	2800      	cmp	r0, #0
 800f908:	d0f3      	beq.n	800f8f2 <get_interesting_appn+0x7a>
 800f90a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f90e:	e7c0      	b.n	800f892 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800f910:	f04f 090e 	mov.w	r9, #14
 800f914:	e7c7      	b.n	800f8a6 <get_interesting_appn+0x2e>
    numtoread = 0;
 800f916:	f04f 0900 	mov.w	r9, #0
 800f91a:	e7d6      	b.n	800f8ca <get_interesting_appn+0x52>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800f91c:	462b      	mov	r3, r5
 800f91e:	464a      	mov	r2, r9
 800f920:	4669      	mov	r1, sp
 800f922:	4640      	mov	r0, r8
 800f924:	f7ff feca 	bl	800f6bc <examine_app0>
  if (length > 0)
 800f928:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800f92a:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800f92e:	dd05      	ble.n	800f93c <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800f930:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f934:	4629      	mov	r1, r5
 800f936:	4640      	mov	r0, r8
 800f938:	691b      	ldr	r3, [r3, #16]
 800f93a:	4798      	blx	r3
  return TRUE;
 800f93c:	2001      	movs	r0, #1
 800f93e:	e7d9      	b.n	800f8f4 <get_interesting_appn+0x7c>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800f940:	462b      	mov	r3, r5
 800f942:	464a      	mov	r2, r9
 800f944:	4669      	mov	r1, sp
 800f946:	4640      	mov	r0, r8
 800f948:	f7ff ff59 	bl	800f7fe <examine_app14>
    break;
 800f94c:	e7ec      	b.n	800f928 <get_interesting_appn+0xb0>

0800f94e <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800f94e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800f952:	6984      	ldr	r4, [r0, #24]
{
 800f954:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800f956:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800f958:	b31b      	cbz	r3, 800f9a2 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800f95a:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f95c:	782e      	ldrb	r6, [r5, #0]
 800f95e:	f1b3 0801 	subs.w	r8, r3, #1
 800f962:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800f966:	d025      	beq.n	800f9b4 <skip_variable+0x66>
 800f968:	3501      	adds	r5, #1
 800f96a:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f96e:	235d      	movs	r3, #93	; 0x5d
 800f970:	683a      	ldr	r2, [r7, #0]
 800f972:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f974:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f976:	4638      	mov	r0, r7
 800f978:	6153      	str	r3, [r2, #20]
  length -= 2;
 800f97a:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f97c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800f980:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800f984:	6853      	ldr	r3, [r2, #4]
 800f986:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f988:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800f98c:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800f98e:	6025      	str	r5, [r4, #0]
 800f990:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800f992:	dd04      	ble.n	800f99e <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	4631      	mov	r1, r6
 800f998:	4638      	mov	r0, r7
 800f99a:	691b      	ldr	r3, [r3, #16]
 800f99c:	4798      	blx	r3

  return TRUE;
 800f99e:	2001      	movs	r0, #1
 800f9a0:	e003      	b.n	800f9aa <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f9a2:	68e3      	ldr	r3, [r4, #12]
 800f9a4:	4798      	blx	r3
 800f9a6:	b910      	cbnz	r0, 800f9ae <skip_variable+0x60>
 800f9a8:	2000      	movs	r0, #0
}
 800f9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f9ae:	e9d4 5300 	ldrd	r5, r3, [r4]
 800f9b2:	e7d3      	b.n	800f95c <skip_variable+0xe>
 800f9b4:	68e3      	ldr	r3, [r4, #12]
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	4798      	blx	r3
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d0f4      	beq.n	800f9a8 <skip_variable+0x5a>
 800f9be:	e9d4 5800 	ldrd	r5, r8, [r4]
 800f9c2:	e7d2      	b.n	800f96a <skip_variable+0x1c>

0800f9c4 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800f9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800f9c8:	6986      	ldr	r6, [r0, #24]
{
 800f9ca:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800f9cc:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800f9d0:	b987      	cbnz	r7, 800f9f4 <next_marker+0x30>
 800f9d2:	68f3      	ldr	r3, [r6, #12]
 800f9d4:	4640      	mov	r0, r8
 800f9d6:	4798      	blx	r3
 800f9d8:	b950      	cbnz	r0, 800f9f0 <next_marker+0x2c>
 800f9da:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800f9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800f9e0:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800f9e4:	6993      	ldr	r3, [r2, #24]
 800f9e6:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800f9e8:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800f9ea:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f9ee:	e7ef      	b.n	800f9d0 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800f9f0:	e9d6 4700 	ldrd	r4, r7, [r6]
 800f9f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9f8:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800f9fa:	2bff      	cmp	r3, #255	; 0xff
 800f9fc:	d1f0      	bne.n	800f9e0 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800f9fe:	b937      	cbnz	r7, 800fa0e <next_marker+0x4a>
 800fa00:	68f3      	ldr	r3, [r6, #12]
 800fa02:	4640      	mov	r0, r8
 800fa04:	4798      	blx	r3
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d0e7      	beq.n	800f9da <next_marker+0x16>
 800fa0a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800fa0e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fa12:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800fa14:	2dff      	cmp	r5, #255	; 0xff
 800fa16:	d0f2      	beq.n	800f9fe <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800fa18:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800fa1c:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800fa1e:	b90d      	cbnz	r5, 800fa24 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800fa20:	3302      	adds	r3, #2
 800fa22:	e7e1      	b.n	800f9e8 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800fa24:	b173      	cbz	r3, 800fa44 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800fa26:	f8d8 2000 	ldr.w	r2, [r8]
 800fa2a:	2177      	movs	r1, #119	; 0x77
 800fa2c:	4640      	mov	r0, r8
 800fa2e:	61d5      	str	r5, [r2, #28]
 800fa30:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800fa34:	6853      	ldr	r3, [r2, #4]
 800fa36:	f04f 31ff 	mov.w	r1, #4294967295
 800fa3a:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800fa3c:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800fa40:	2200      	movs	r2, #0
 800fa42:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800fa44:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800fa48:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800fa4a:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800fa4e:	e7c5      	b.n	800f9dc <next_marker+0x18>

0800fa50 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800fa50:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800fa54:	b510      	push	{r4, lr}
 800fa56:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800fa58:	b1e3      	cbz	r3, 800fa94 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800fa5a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800fa5e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800fa62:	6959      	ldr	r1, [r3, #20]
 800fa64:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d119      	bne.n	800faa0 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	2264      	movs	r2, #100	; 0x64
 800fa70:	4620      	mov	r0, r4
 800fa72:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	2103      	movs	r1, #3
 800fa7a:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800fa82:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800fa86:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800fa88:	6953      	ldr	r3, [r2, #20]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	f003 0307 	and.w	r3, r3, #7
 800fa90:	6153      	str	r3, [r2, #20]
  return TRUE;
 800fa92:	e004      	b.n	800fa9e <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800fa94:	f7ff ff96 	bl	800f9c4 <next_marker>
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d1de      	bne.n	800fa5a <read_restart_marker+0xa>
      return FALSE;
 800fa9c:	2000      	movs	r0, #0
}
 800fa9e:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800faa0:	69a3      	ldr	r3, [r4, #24]
 800faa2:	4620      	mov	r0, r4
 800faa4:	695b      	ldr	r3, [r3, #20]
 800faa6:	4798      	blx	r3
 800faa8:	2800      	cmp	r0, #0
 800faaa:	d1ea      	bne.n	800fa82 <read_restart_marker+0x32>
 800faac:	e7f6      	b.n	800fa9c <read_restart_marker+0x4c>

0800faae <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800faae:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800fab0:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800fab4:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800fab8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800fabc:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800fac0:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800fac2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800fac6:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800faca:	4770      	bx	lr

0800facc <get_dht>:
{
 800facc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800fad0:	6987      	ldr	r7, [r0, #24]
{
 800fad2:	b0c9      	sub	sp, #292	; 0x124
 800fad4:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800fad6:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fad8:	b1fe      	cbz	r6, 800fb1a <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800fada:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fadc:	f894 9000 	ldrb.w	r9, [r4]
 800fae0:	3e01      	subs	r6, #1
 800fae2:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800fae6:	d022      	beq.n	800fb2e <get_dht+0x62>
 800fae8:	3401      	adds	r4, #1
 800faea:	f814 9b01 	ldrb.w	r9, [r4], #1
 800faee:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800faf0:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800faf4:	44c1      	add	r9, r8
  length -= 2;
 800faf6:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800fafa:	f1b9 0f10 	cmp.w	r9, #16
 800fafe:	dc1e      	bgt.n	800fb3e <get_dht+0x72>
  if (length != 0)
 800fb00:	f1b9 0f00 	cmp.w	r9, #0
 800fb04:	d005      	beq.n	800fb12 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800fb06:	682b      	ldr	r3, [r5, #0]
 800fb08:	220c      	movs	r2, #12
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	615a      	str	r2, [r3, #20]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4798      	blx	r3
  return TRUE;
 800fb12:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800fb14:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800fb18:	e003      	b.n	800fb22 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	4798      	blx	r3
 800fb1e:	b918      	cbnz	r0, 800fb28 <get_dht+0x5c>
 800fb20:	2000      	movs	r0, #0
}
 800fb22:	b049      	add	sp, #292	; 0x124
 800fb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fb28:	e9d7 4600 	ldrd	r4, r6, [r7]
 800fb2c:	e7d6      	b.n	800fadc <get_dht+0x10>
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	4628      	mov	r0, r5
 800fb32:	4798      	blx	r3
 800fb34:	2800      	cmp	r0, #0
 800fb36:	d0f3      	beq.n	800fb20 <get_dht+0x54>
 800fb38:	e9d7 4600 	ldrd	r4, r6, [r7]
 800fb3c:	e7d5      	b.n	800faea <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800fb3e:	b936      	cbnz	r6, 800fb4e <get_dht+0x82>
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	4628      	mov	r0, r5
 800fb44:	4790      	blx	r2
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d0ea      	beq.n	800fb20 <get_dht+0x54>
 800fb4a:	e9d7 4600 	ldrd	r4, r6, [r7]
 800fb4e:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800fb52:	2152      	movs	r1, #82	; 0x52
 800fb54:	682a      	ldr	r2, [r5, #0]
 800fb56:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800fb58:	f8cd 8000 	str.w	r8, [sp]
 800fb5c:	3e01      	subs	r6, #1
    count = 0;
 800fb5e:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800fb62:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800fb66:	6852      	ldr	r2, [r2, #4]
 800fb68:	2101      	movs	r1, #1
 800fb6a:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800fb6c:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800fb6e:	b946      	cbnz	r6, 800fb82 <get_dht+0xb6>
 800fb70:	68f9      	ldr	r1, [r7, #12]
 800fb72:	4628      	mov	r0, r5
 800fb74:	9201      	str	r2, [sp, #4]
 800fb76:	4788      	blx	r1
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	d0d1      	beq.n	800fb20 <get_dht+0x54>
 800fb7c:	9a01      	ldr	r2, [sp, #4]
 800fb7e:	e9d7 4600 	ldrd	r4, r6, [r7]
 800fb82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb86:	3e01      	subs	r6, #1
 800fb88:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800fb8c:	3201      	adds	r2, #1
      count += bits[i];
 800fb8e:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800fb90:	2a11      	cmp	r2, #17
 800fb92:	d1ec      	bne.n	800fb6e <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800fb94:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800fb96:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800fb9a:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800fb9e:	f04f 0958 	mov.w	r9, #88	; 0x58
 800fba2:	4628      	mov	r0, r5
    length -= 1 + 16;
 800fba4:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800fba6:	6191      	str	r1, [r2, #24]
 800fba8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800fbac:	f8c2 9014 	str.w	r9, [r2, #20]
 800fbb0:	61d1      	str	r1, [r2, #28]
 800fbb2:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800fbb6:	6211      	str	r1, [r2, #32]
 800fbb8:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800fbbc:	6251      	str	r1, [r2, #36]	; 0x24
 800fbbe:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800fbc2:	6291      	str	r1, [r2, #40]	; 0x28
 800fbc4:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800fbc8:	62d1      	str	r1, [r2, #44]	; 0x2c
 800fbca:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800fbce:	6311      	str	r1, [r2, #48]	; 0x30
 800fbd0:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800fbd4:	6351      	str	r1, [r2, #52]	; 0x34
 800fbd6:	2102      	movs	r1, #2
 800fbd8:	6852      	ldr	r2, [r2, #4]
 800fbda:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800fbdc:	682a      	ldr	r2, [r5, #0]
 800fbde:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	f8c2 9014 	str.w	r9, [r2, #20]
 800fbe8:	6191      	str	r1, [r2, #24]
 800fbea:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800fbee:	61d1      	str	r1, [r2, #28]
 800fbf0:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800fbf4:	6211      	str	r1, [r2, #32]
 800fbf6:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800fbfa:	6251      	str	r1, [r2, #36]	; 0x24
 800fbfc:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800fc00:	6291      	str	r1, [r2, #40]	; 0x28
 800fc02:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800fc06:	62d1      	str	r1, [r2, #44]	; 0x2c
 800fc08:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800fc0c:	6311      	str	r1, [r2, #48]	; 0x30
 800fc0e:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800fc12:	6351      	str	r1, [r2, #52]	; 0x34
 800fc14:	2102      	movs	r1, #2
 800fc16:	6852      	ldr	r2, [r2, #4]
 800fc18:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800fc1a:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800fc1e:	dc02      	bgt.n	800fc26 <get_dht+0x15a>
 800fc20:	9b01      	ldr	r3, [sp, #4]
 800fc22:	4553      	cmp	r3, sl
 800fc24:	da05      	bge.n	800fc32 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800fc26:	682a      	ldr	r2, [r5, #0]
 800fc28:	2109      	movs	r1, #9
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	6151      	str	r1, [r2, #20]
 800fc2e:	6812      	ldr	r2, [r2, #0]
 800fc30:	4790      	blx	r2
 800fc32:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800fc36:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800fc38:	45d1      	cmp	r9, sl
 800fc3a:	d13f      	bne.n	800fcbc <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800fc3c:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800fc40:	9b01      	ldr	r3, [sp, #4]
 800fc42:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800fc46:	bf17      	itett	ne
 800fc48:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800fc4c:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800fc50:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800fc54:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800fc56:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800fc58:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800fc5c:	2b03      	cmp	r3, #3
 800fc5e:	d906      	bls.n	800fc6e <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800fc60:	682a      	ldr	r2, [r5, #0]
 800fc62:	211f      	movs	r1, #31
 800fc64:	4628      	mov	r0, r5
 800fc66:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800fc6a:	6812      	ldr	r2, [r2, #0]
 800fc6c:	4790      	blx	r2
    if (*htblptr == NULL)
 800fc6e:	f8d8 2000 	ldr.w	r2, [r8]
 800fc72:	b922      	cbnz	r2, 800fc7e <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800fc74:	4628      	mov	r0, r5
 800fc76:	f7fb fb8b 	bl	800b390 <jpeg_alloc_huff_table>
 800fc7a:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800fc7e:	2200      	movs	r2, #0
 800fc80:	46de      	mov	lr, fp
 800fc82:	f10d 0a1c 	add.w	sl, sp, #28
 800fc86:	f88b 2000 	strb.w	r2, [fp]
 800fc8a:	f8d8 2000 	ldr.w	r2, [r8]
 800fc8e:	46f4      	mov	ip, lr
 800fc90:	3208      	adds	r2, #8
 800fc92:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800fc96:	45d4      	cmp	ip, sl
 800fc98:	f842 0c08 	str.w	r0, [r2, #-8]
 800fc9c:	f842 1c04 	str.w	r1, [r2, #-4]
 800fca0:	46e6      	mov	lr, ip
 800fca2:	d1f4      	bne.n	800fc8e <get_dht+0x1c2>
 800fca4:	f89c 1000 	ldrb.w	r1, [ip]
 800fca8:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800fcaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fcae:	f8d8 0000 	ldr.w	r0, [r8]
 800fcb2:	a908      	add	r1, sp, #32
 800fcb4:	3011      	adds	r0, #17
 800fcb6:	f01b f80d 	bl	802acd4 <memcpy>
 800fcba:	e71e      	b.n	800fafa <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800fcbc:	b946      	cbnz	r6, 800fcd0 <get_dht+0x204>
 800fcbe:	68fa      	ldr	r2, [r7, #12]
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	4790      	blx	r2
 800fcc4:	2800      	cmp	r0, #0
 800fcc6:	f43f af2b 	beq.w	800fb20 <get_dht+0x54>
 800fcca:	a908      	add	r1, sp, #32
 800fccc:	e9d7 4600 	ldrd	r4, r6, [r7]
 800fcd0:	f814 2b01 	ldrb.w	r2, [r4], #1
 800fcd4:	3e01      	subs	r6, #1
 800fcd6:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800fcda:	f109 0901 	add.w	r9, r9, #1
 800fcde:	e7ab      	b.n	800fc38 <get_dht+0x16c>

0800fce0 <read_markers>:
{
 800fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	4604      	mov	r4, r0
 800fce6:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800fce8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800fcec:	bb2b      	cbnz	r3, 800fd3a <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800fcee:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d17c      	bne.n	800fdf2 <read_markers+0x112>
  INPUT_VARS(cinfo);
 800fcf8:	69a7      	ldr	r7, [r4, #24]
 800fcfa:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d06a      	beq.n	800fdd6 <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800fd00:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800fd02:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800fd04:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800fd08:	d06c      	beq.n	800fde4 <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800fd0a:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800fd0c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800fd10:	f103 36ff 	add.w	r6, r3, #4294967295
 800fd14:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800fd18:	d102      	bne.n	800fd20 <read_markers+0x40>
 800fd1a:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800fd1e:	d008      	beq.n	800fd32 <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800fd20:	6823      	ldr	r3, [r4, #0]
 800fd22:	2237      	movs	r2, #55	; 0x37
 800fd24:	4620      	mov	r0, r4
 800fd26:	f8c3 901c 	str.w	r9, [r3, #28]
 800fd2a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800fd32:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800fd36:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800fd3a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	f000 83c3 	beq.w	80104ca <read_markers+0x7ea>
 800fd44:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800fd48:	2a3e      	cmp	r2, #62	; 0x3e
 800fd4a:	f200 83cb 	bhi.w	80104e4 <read_markers+0x804>
 800fd4e:	2a3e      	cmp	r2, #62	; 0x3e
 800fd50:	f200 83c8 	bhi.w	80104e4 <read_markers+0x804>
 800fd54:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fd58:	009b0092 	.word	0x009b0092
 800fd5c:	00a7009e 	.word	0x00a7009e
 800fd60:	00a70239 	.word	0x00a70239
 800fd64:	00a700a7 	.word	0x00a700a7
 800fd68:	00a200a7 	.word	0x00a200a7
 800fd6c:	00a700a4 	.word	0x00a700a4
 800fd70:	00a701bf 	.word	0x00a701bf
 800fd74:	00a700a7 	.word	0x00a700a7
 800fd78:	03b903b9 	.word	0x03b903b9
 800fd7c:	03b903b9 	.word	0x03b903b9
 800fd80:	03b903b9 	.word	0x03b903b9
 800fd84:	03b903b9 	.word	0x03b903b9
 800fd88:	01b30054 	.word	0x01b30054
 800fd8c:	023d00af 	.word	0x023d00af
 800fd90:	035b03c2 	.word	0x035b03c2
 800fd94:	03c603c6 	.word	0x03c603c6
 800fd98:	03ad03ad 	.word	0x03ad03ad
 800fd9c:	03ad03ad 	.word	0x03ad03ad
 800fda0:	03ad03ad 	.word	0x03ad03ad
 800fda4:	03ad03ad 	.word	0x03ad03ad
 800fda8:	03ad03ad 	.word	0x03ad03ad
 800fdac:	03ad03ad 	.word	0x03ad03ad
 800fdb0:	03ad03ad 	.word	0x03ad03ad
 800fdb4:	03ad03ad 	.word	0x03ad03ad
 800fdb8:	03c603c6 	.word	0x03c603c6
 800fdbc:	03c603c6 	.word	0x03c603c6
 800fdc0:	03c603c6 	.word	0x03c603c6
 800fdc4:	03c603c6 	.word	0x03c603c6
 800fdc8:	03c603c6 	.word	0x03c603c6
 800fdcc:	03c603c6 	.word	0x03c603c6
 800fdd0:	03c603c6 	.word	0x03c603c6
 800fdd4:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	4620      	mov	r0, r4
 800fdda:	4798      	blx	r3
 800fddc:	b170      	cbz	r0, 800fdfc <read_markers+0x11c>
 800fdde:	e9d7 5300 	ldrd	r5, r3, [r7]
 800fde2:	e78e      	b.n	800fd02 <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	4620      	mov	r0, r4
 800fde8:	4798      	blx	r3
 800fdea:	b138      	cbz	r0, 800fdfc <read_markers+0x11c>
 800fdec:	e9d7 5300 	ldrd	r5, r3, [r7]
 800fdf0:	e78c      	b.n	800fd0c <read_markers+0x2c>
	if (! next_marker(cinfo))
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	f7ff fde6 	bl	800f9c4 <next_marker>
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	d19e      	bne.n	800fd3a <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	e0e9      	b.n	800ffd4 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800fe00:	6823      	ldr	r3, [r4, #0]
 800fe02:	2268      	movs	r2, #104	; 0x68
 800fe04:	2101      	movs	r1, #1
 800fe06:	4620      	mov	r0, r4
 800fe08:	615a      	str	r2, [r3, #20]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800fe0e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	b12b      	cbz	r3, 800fe22 <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800fe16:	6823      	ldr	r3, [r4, #0]
 800fe18:	223f      	movs	r2, #63	; 0x3f
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	615a      	str	r2, [r3, #20]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800fe22:	2210      	movs	r2, #16
 800fe24:	2100      	movs	r1, #0
 800fe26:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800fe2a:	f01a ff61 	bl	802acf0 <memset>
    cinfo->arith_dc_U[i] = 1;
 800fe2e:	2210      	movs	r2, #16
 800fe30:	2101      	movs	r1, #1
 800fe32:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800fe36:	f01a ff5b 	bl	802acf0 <memset>
    cinfo->arith_ac_K[i] = 5;
 800fe3a:	2210      	movs	r2, #16
 800fe3c:	2105      	movs	r1, #5
 800fe3e:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800fe42:	f01a ff55 	bl	802acf0 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800fe46:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800fe4a:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800fe4c:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800fe50:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800fe54:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800fe58:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800fe5c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800fe60:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800fe64:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800fe68:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800fe72:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800fe74:	2300      	movs	r3, #0
 800fe76:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800fe7a:	e735      	b.n	800fce8 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	2101      	movs	r1, #1
 800fe80:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800fe82:	4620      	mov	r0, r4
 800fe84:	f7ff faec 	bl	800f460 <get_sof>
      if (! skip_variable(cinfo))
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d1f3      	bne.n	800fe74 <read_markers+0x194>
 800fe8c:	e7b6      	b.n	800fdfc <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800fe8e:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800fe90:	2200      	movs	r2, #0
 800fe92:	e001      	b.n	800fe98 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800fe94:	2300      	movs	r3, #0
 800fe96:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800fe98:	2100      	movs	r1, #0
 800fe9a:	e7f2      	b.n	800fe82 <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e7f7      	b.n	800fe90 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800fea0:	2301      	movs	r3, #1
 800fea2:	461a      	mov	r2, r3
 800fea4:	e7f8      	b.n	800fe98 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800fea6:	6822      	ldr	r2, [r4, #0]
 800fea8:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800feaa:	4620      	mov	r0, r4
 800feac:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800feb0:	6813      	ldr	r3, [r2, #0]
 800feb2:	4798      	blx	r3
      break;
 800feb4:	e7de      	b.n	800fe74 <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 800feb6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800feba:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800febc:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800febe:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800fec2:	b92b      	cbnz	r3, 800fed0 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800fec4:	6823      	ldr	r3, [r4, #0]
 800fec6:	2240      	movs	r2, #64	; 0x40
 800fec8:	4620      	mov	r0, r4
 800feca:	615a      	str	r2, [r3, #20]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fed0:	b936      	cbnz	r6, 800fee0 <read_markers+0x200>
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	4620      	mov	r0, r4
 800fed6:	4798      	blx	r3
 800fed8:	2800      	cmp	r0, #0
 800feda:	d08f      	beq.n	800fdfc <read_markers+0x11c>
 800fedc:	e9d7 5600 	ldrd	r5, r6, [r7]
 800fee0:	f895 8000 	ldrb.w	r8, [r5]
 800fee4:	3e01      	subs	r6, #1
 800fee6:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800feea:	d076      	beq.n	800ffda <read_markers+0x2fa>
 800feec:	3501      	adds	r5, #1
 800feee:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800fef0:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fef2:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800fef4:	d07a      	beq.n	800ffec <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800fef6:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800fef8:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800fefc:	2269      	movs	r2, #105	; 0x69
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	2101      	movs	r1, #1
 800ff02:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800ff04:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800ff06:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800ff0e:	f109 0303 	add.w	r3, r9, #3
 800ff12:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800ff16:	d108      	bne.n	800ff2a <read_markers+0x24a>
 800ff18:	f1b9 0f04 	cmp.w	r9, #4
 800ff1c:	dc05      	bgt.n	800ff2a <read_markers+0x24a>
 800ff1e:	f1b9 0f00 	cmp.w	r9, #0
 800ff22:	d108      	bne.n	800ff36 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800ff24:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800ff28:	b92b      	cbnz	r3, 800ff36 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800ff2a:	6823      	ldr	r3, [r4, #0]
 800ff2c:	220c      	movs	r2, #12
 800ff2e:	4620      	mov	r0, r4
 800ff30:	615a      	str	r2, [r3, #20]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800ff36:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800ff3a:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800ff3e:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800ff42:	9301      	str	r3, [sp, #4]
 800ff44:	45d1      	cmp	r9, sl
 800ff46:	dc5a      	bgt.n	800fffe <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff48:	b93e      	cbnz	r6, 800ff5a <read_markers+0x27a>
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	4798      	blx	r3
 800ff50:	2800      	cmp	r0, #0
 800ff52:	f43f af53 	beq.w	800fdfc <read_markers+0x11c>
 800ff56:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ff5a:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff5c:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff5e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff62:	f000 809a 	beq.w	801009a <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff66:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff68:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff6a:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff6c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff70:	f000 809c 	beq.w	80100ac <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff74:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff76:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800ff7a:	2101      	movs	r1, #1
 800ff7c:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800ff7e:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800ff80:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800ff82:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800ff86:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800ff8a:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800ff8e:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800ff92:	6823      	ldr	r3, [r4, #0]
 800ff94:	619a      	str	r2, [r3, #24]
 800ff96:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800ff9a:	61da      	str	r2, [r3, #28]
 800ff9c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800ffa0:	621a      	str	r2, [r3, #32]
 800ffa2:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800ffa6:	625a      	str	r2, [r3, #36]	; 0x24
 800ffa8:	226b      	movs	r2, #107	; 0x6b
 800ffaa:	615a      	str	r2, [r3, #20]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800ffb0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800ffb8:	f1b9 0f00 	cmp.w	r9, #0
 800ffbc:	d004      	beq.n	800ffc8 <read_markers+0x2e8>
 800ffbe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800ffc8:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800ffca:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800ffcc:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800ffd0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800ffd4:	b005      	add	sp, #20
 800ffd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	4620      	mov	r0, r4
 800ffde:	4798      	blx	r3
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	f43f af0b 	beq.w	800fdfc <read_markers+0x11c>
 800ffe6:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ffea:	e780      	b.n	800feee <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	4620      	mov	r0, r4
 800fff0:	4798      	blx	r3
 800fff2:	2800      	cmp	r0, #0
 800fff4:	f43f af02 	beq.w	800fdfc <read_markers+0x11c>
 800fff8:	e9d7 5600 	ldrd	r5, r6, [r7]
 800fffc:	e77c      	b.n	800fef8 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800fffe:	b93e      	cbnz	r6, 8010010 <read_markers+0x330>
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	4620      	mov	r0, r4
 8010004:	4798      	blx	r3
 8010006:	2800      	cmp	r0, #0
 8010008:	f43f aef8 	beq.w	800fdfc <read_markers+0x11c>
 801000c:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 8010010:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 8010012:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 8010016:	d02f      	beq.n	8010078 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 8010018:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 801001a:	3e01      	subs	r6, #1
 801001c:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010020:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 8010024:	2000      	movs	r0, #0
 8010026:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010028:	4290      	cmp	r0, r2
 801002a:	db2e      	blt.n	801008a <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 801002c:	6821      	ldr	r1, [r4, #0]
 801002e:	4620      	mov	r0, r4
 8010030:	9302      	str	r3, [sp, #8]
 8010032:	2304      	movs	r3, #4
 8010034:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 8010038:	6809      	ldr	r1, [r1, #0]
 801003a:	4788      	blx	r1
 801003c:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 801003e:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 8010040:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 8010042:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 8010046:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 8010048:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 801004c:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 8010050:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 8010054:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 8010056:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 801005a:	f8c1 b018 	str.w	fp, [r1, #24]
 801005e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 8010062:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 8010064:	61cb      	str	r3, [r1, #28]
 8010066:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801006a:	620b      	str	r3, [r1, #32]
 801006c:	236a      	movs	r3, #106	; 0x6a
 801006e:	614b      	str	r3, [r1, #20]
 8010070:	684b      	ldr	r3, [r1, #4]
 8010072:	2101      	movs	r1, #1
 8010074:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 8010076:	e765      	b.n	800ff44 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	4620      	mov	r0, r4
 801007c:	4798      	blx	r3
 801007e:	2800      	cmp	r0, #0
 8010080:	f43f aebc 	beq.w	800fdfc <read_markers+0x11c>
 8010084:	e9d7 5600 	ldrd	r5, r6, [r7]
 8010088:	e7c7      	b.n	801001a <read_markers+0x33a>
      if (cc == compptr->component_id)
 801008a:	f8d8 1000 	ldr.w	r1, [r8]
 801008e:	458b      	cmp	fp, r1
 8010090:	d0d5      	beq.n	801003e <read_markers+0x35e>
	 ci++, compptr++) {
 8010092:	3001      	adds	r0, #1
 8010094:	f108 0858 	add.w	r8, r8, #88	; 0x58
 8010098:	e7c6      	b.n	8010028 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	4620      	mov	r0, r4
 801009e:	4798      	blx	r3
 80100a0:	2800      	cmp	r0, #0
 80100a2:	f43f aeab 	beq.w	800fdfc <read_markers+0x11c>
 80100a6:	e9d7 5600 	ldrd	r5, r6, [r7]
 80100aa:	e75d      	b.n	800ff68 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	4620      	mov	r0, r4
 80100b0:	4798      	blx	r3
 80100b2:	2800      	cmp	r0, #0
 80100b4:	f43f aea2 	beq.w	800fdfc <read_markers+0x11c>
 80100b8:	e9d7 5600 	ldrd	r5, r6, [r7]
 80100bc:	e75b      	b.n	800ff76 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 80100be:	6823      	ldr	r3, [r4, #0]
 80100c0:	2257      	movs	r2, #87	; 0x57
 80100c2:	4620      	mov	r0, r4
 80100c4:	2101      	movs	r1, #1
 80100c6:	615a      	str	r2, [r3, #20]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 80100cc:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 80100ce:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 80100d0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 80100d4:	e77e      	b.n	800ffd4 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 80100d6:	69a7      	ldr	r7, [r4, #24]
 80100d8:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 80100da:	b1e6      	cbz	r6, 8010116 <read_markers+0x436>
  INPUT_VARS(cinfo);
 80100dc:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 80100de:	f895 9000 	ldrb.w	r9, [r5]
 80100e2:	3e01      	subs	r6, #1
 80100e4:	ea4f 2909 	mov.w	r9, r9, lsl #8
 80100e8:	d01e      	beq.n	8010128 <read_markers+0x448>
 80100ea:	3501      	adds	r5, #1
 80100ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80100f0:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 80100f2:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 80100f6:	4499      	add	r9, r3
  length -= 2;
 80100f8:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 80100fc:	f1b9 0f00 	cmp.w	r9, #0
 8010100:	dc1b      	bgt.n	801013a <read_markers+0x45a>
  if (length != 0)
 8010102:	d005      	beq.n	8010110 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8010104:	6823      	ldr	r3, [r4, #0]
 8010106:	220c      	movs	r2, #12
 8010108:	4620      	mov	r0, r4
 801010a:	615a      	str	r2, [r3, #20]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 8010110:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 8010112:	607e      	str	r6, [r7, #4]
  return TRUE;
 8010114:	e6ae      	b.n	800fe74 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	4620      	mov	r0, r4
 801011a:	4798      	blx	r3
 801011c:	2800      	cmp	r0, #0
 801011e:	f43f ae6d 	beq.w	800fdfc <read_markers+0x11c>
 8010122:	e9d7 5600 	ldrd	r5, r6, [r7]
 8010126:	e7da      	b.n	80100de <read_markers+0x3fe>
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	4620      	mov	r0, r4
 801012c:	4798      	blx	r3
 801012e:	2800      	cmp	r0, #0
 8010130:	f43f ae64 	beq.w	800fdfc <read_markers+0x11c>
 8010134:	e9d7 5600 	ldrd	r5, r6, [r7]
 8010138:	e7d8      	b.n	80100ec <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 801013a:	b93e      	cbnz	r6, 801014c <read_markers+0x46c>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	4620      	mov	r0, r4
 8010140:	4798      	blx	r3
 8010142:	2800      	cmp	r0, #0
 8010144:	f43f ae5a 	beq.w	800fdfc <read_markers+0x11c>
 8010148:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 801014c:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 801014e:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 8010152:	d01f      	beq.n	8010194 <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 8010154:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 8010156:	6822      	ldr	r2, [r4, #0]
 8010158:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 801015a:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 801015e:	2101      	movs	r1, #1
 8010160:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 8010162:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 8010164:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 8010168:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 801016c:	e9c2 3805 	strd	r3, r8, [r2, #20]
 8010170:	6852      	ldr	r2, [r2, #4]
 8010172:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 8010174:	f1b8 0f1f 	cmp.w	r8, #31
 8010178:	d905      	bls.n	8010186 <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 801017a:	6822      	ldr	r2, [r4, #0]
 801017c:	4620      	mov	r0, r4
 801017e:	e9c2 b805 	strd	fp, r8, [r2, #20]
 8010182:	6812      	ldr	r2, [r2, #0]
 8010184:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 8010186:	f1b8 0f0f 	cmp.w	r8, #15
 801018a:	44a0      	add	r8, r4
 801018c:	dd0b      	ble.n	80101a6 <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 801018e:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 8010192:	e7b3      	b.n	80100fc <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	4620      	mov	r0, r4
 8010198:	4798      	blx	r3
 801019a:	2800      	cmp	r0, #0
 801019c:	f43f ae2e 	beq.w	800fdfc <read_markers+0x11c>
 80101a0:	e9d7 5600 	ldrd	r5, r6, [r7]
 80101a4:	e7d7      	b.n	8010156 <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 80101a6:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 80101aa:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 80101ae:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 80101b0:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 80101b4:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 80101b8:	d9a0      	bls.n	80100fc <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 80101ba:	6822      	ldr	r2, [r4, #0]
 80101bc:	211e      	movs	r1, #30
 80101be:	4620      	mov	r0, r4
 80101c0:	6813      	ldr	r3, [r2, #0]
 80101c2:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 80101c6:	4798      	blx	r3
 80101c8:	e798      	b.n	80100fc <read_markers+0x41c>
      if (! get_dht(cinfo))
 80101ca:	4620      	mov	r0, r4
 80101cc:	f7ff fc7e 	bl	800facc <get_dht>
 80101d0:	e65a      	b.n	800fe88 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 80101d2:	69a6      	ldr	r6, [r4, #24]
 80101d4:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 80101d6:	b1db      	cbz	r3, 8010210 <read_markers+0x530>
  INPUT_VARS(cinfo);
 80101d8:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 80101da:	f895 8000 	ldrb.w	r8, [r5]
 80101de:	3b01      	subs	r3, #1
 80101e0:	ea4f 2708 	mov.w	r7, r8, lsl #8
 80101e4:	d01d      	beq.n	8010222 <read_markers+0x542>
 80101e6:	3501      	adds	r5, #1
 80101e8:	f815 8b01 	ldrb.w	r8, [r5], #1
 80101ec:	f103 3aff 	add.w	sl, r3, #4294967295
 80101f0:	44b8      	add	r8, r7
  length -= 2;
 80101f2:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 80101f6:	f1b8 0f00 	cmp.w	r8, #0
 80101fa:	dc1b      	bgt.n	8010234 <read_markers+0x554>
  if (length != 0)
 80101fc:	d005      	beq.n	801020a <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 80101fe:	6822      	ldr	r2, [r4, #0]
 8010200:	210c      	movs	r1, #12
 8010202:	4620      	mov	r0, r4
 8010204:	6151      	str	r1, [r2, #20]
 8010206:	6812      	ldr	r2, [r2, #0]
 8010208:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 801020a:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 801020e:	e631      	b.n	800fe74 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 8010210:	68f3      	ldr	r3, [r6, #12]
 8010212:	4620      	mov	r0, r4
 8010214:	4798      	blx	r3
 8010216:	2800      	cmp	r0, #0
 8010218:	f43f adf0 	beq.w	800fdfc <read_markers+0x11c>
 801021c:	e9d6 5300 	ldrd	r5, r3, [r6]
 8010220:	e7db      	b.n	80101da <read_markers+0x4fa>
 8010222:	68f3      	ldr	r3, [r6, #12]
 8010224:	4620      	mov	r0, r4
 8010226:	4798      	blx	r3
 8010228:	2800      	cmp	r0, #0
 801022a:	f43f ade7 	beq.w	800fdfc <read_markers+0x11c>
 801022e:	e9d6 5300 	ldrd	r5, r3, [r6]
 8010232:	e7d9      	b.n	80101e8 <read_markers+0x508>
    length--;
 8010234:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 8010238:	f1ba 0f00 	cmp.w	sl, #0
 801023c:	d107      	bne.n	801024e <read_markers+0x56e>
 801023e:	68f3      	ldr	r3, [r6, #12]
 8010240:	4620      	mov	r0, r4
 8010242:	4798      	blx	r3
 8010244:	2800      	cmp	r0, #0
 8010246:	f43f add9 	beq.w	800fdfc <read_markers+0x11c>
 801024a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 801024e:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 8010252:	2153      	movs	r1, #83	; 0x53
 8010254:	6822      	ldr	r2, [r4, #0]
 8010256:	4620      	mov	r0, r4
    prec = n >> 4;
 8010258:	ea4f 1329 	mov.w	r3, r9, asr #4
 801025c:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 8010260:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 8010264:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 8010266:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 8010268:	e9c2 1705 	strd	r1, r7, [r2, #20]
 801026c:	6852      	ldr	r2, [r2, #4]
 801026e:	2101      	movs	r1, #1
 8010270:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 8010272:	f019 0f0c 	tst.w	r9, #12
 8010276:	d006      	beq.n	8010286 <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 8010278:	6822      	ldr	r2, [r4, #0]
 801027a:	2120      	movs	r1, #32
 801027c:	4620      	mov	r0, r4
 801027e:	e9c2 1705 	strd	r1, r7, [r2, #20]
 8010282:	6812      	ldr	r2, [r2, #0]
 8010284:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 8010286:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 801028a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801028e:	b922      	cbnz	r2, 801029a <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 8010290:	4620      	mov	r0, r4
 8010292:	f7fb f873 	bl	800b37c <jpeg_alloc_quant_table>
 8010296:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 801029a:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 801029c:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d057      	beq.n	8010354 <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 80102a4:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 80102a8:	dc6c      	bgt.n	8010384 <read_markers+0x6a4>
 80102aa:	f1ab 0202 	sub.w	r2, fp, #2
 80102ae:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 80102b2:	2001      	movs	r0, #1
 80102b4:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 80102b8:	4291      	cmp	r1, r2
 80102ba:	d1fb      	bne.n	80102b4 <read_markers+0x5d4>
	count = length >> 1;
 80102bc:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 80102c0:	f1b9 0f19 	cmp.w	r9, #25
 80102c4:	d062      	beq.n	801038c <read_markers+0x6ac>
 80102c6:	dc53      	bgt.n	8010370 <read_markers+0x690>
 80102c8:	f1b9 0f09 	cmp.w	r9, #9
 80102cc:	d060      	beq.n	8010390 <read_markers+0x6b0>
 80102ce:	f1b9 0f10 	cmp.w	r9, #16
 80102d2:	d05f      	beq.n	8010394 <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 80102d4:	4f85      	ldr	r7, [pc, #532]	; (80104ec <read_markers+0x80c>)
 80102d6:	4a86      	ldr	r2, [pc, #536]	; (80104f0 <read_markers+0x810>)
 80102d8:	f1b9 0f04 	cmp.w	r9, #4
 80102dc:	bf18      	it	ne
 80102de:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 80102e0:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 80102e4:	9302      	str	r3, [sp, #8]
 80102e6:	9b02      	ldr	r3, [sp, #8]
 80102e8:	42bb      	cmp	r3, r7
 80102ea:	d157      	bne.n	801039c <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 80102ec:	6822      	ldr	r2, [r4, #0]
 80102ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80102f0:	2a01      	cmp	r2, #1
 80102f2:	dd26      	ble.n	8010342 <read_markers+0x662>
 80102f4:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 80102f8:	275f      	movs	r7, #95	; 0x5f
 80102fa:	f8bb 1000 	ldrh.w	r1, [fp]
 80102fe:	4620      	mov	r0, r4
 8010300:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 8010302:	f10b 0b10 	add.w	fp, fp, #16
 8010306:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 8010308:	6191      	str	r1, [r2, #24]
 801030a:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 801030e:	61d1      	str	r1, [r2, #28]
 8010310:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 8010314:	6211      	str	r1, [r2, #32]
 8010316:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 801031a:	6251      	str	r1, [r2, #36]	; 0x24
 801031c:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 8010320:	6291      	str	r1, [r2, #40]	; 0x28
 8010322:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 8010326:	62d1      	str	r1, [r2, #44]	; 0x2c
 8010328:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 801032c:	6311      	str	r1, [r2, #48]	; 0x30
 801032e:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 8010332:	6157      	str	r7, [r2, #20]
 8010334:	6351      	str	r1, [r2, #52]	; 0x34
 8010336:	2102      	movs	r1, #2
 8010338:	6852      	ldr	r2, [r2, #4]
 801033a:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 801033c:	9b02      	ldr	r3, [sp, #8]
 801033e:	459b      	cmp	fp, r3
 8010340:	d1db      	bne.n	80102fa <read_markers+0x61a>
    if (prec) length -= count;
 8010342:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 8010344:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 8010348:	2b00      	cmp	r3, #0
 801034a:	f43f af54 	beq.w	80101f6 <read_markers+0x516>
 801034e:	eba8 0809 	sub.w	r8, r8, r9
 8010352:	e750      	b.n	80101f6 <read_markers+0x516>
      if (length < DCTSIZE2) {
 8010354:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8010358:	dc14      	bgt.n	8010384 <read_markers+0x6a4>
 801035a:	f1ab 0202 	sub.w	r2, fp, #2
 801035e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 8010362:	2001      	movs	r0, #1
 8010364:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 8010368:	4291      	cmp	r1, r2
 801036a:	d1fb      	bne.n	8010364 <read_markers+0x684>
 801036c:	46c1      	mov	r9, r8
 801036e:	e7a7      	b.n	80102c0 <read_markers+0x5e0>
    switch (count) {
 8010370:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 8010374:	d010      	beq.n	8010398 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 8010376:	4f5e      	ldr	r7, [pc, #376]	; (80104f0 <read_markers+0x810>)
 8010378:	4b5e      	ldr	r3, [pc, #376]	; (80104f4 <read_markers+0x814>)
 801037a:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 801037e:	bf08      	it	eq
 8010380:	461f      	moveq	r7, r3
 8010382:	e7ad      	b.n	80102e0 <read_markers+0x600>
	count = DCTSIZE2;
 8010384:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 8010388:	4f59      	ldr	r7, [pc, #356]	; (80104f0 <read_markers+0x810>)
 801038a:	e7a9      	b.n	80102e0 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 801038c:	4f5a      	ldr	r7, [pc, #360]	; (80104f8 <read_markers+0x818>)
 801038e:	e7a7      	b.n	80102e0 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 8010390:	4f5a      	ldr	r7, [pc, #360]	; (80104fc <read_markers+0x81c>)
 8010392:	e7a5      	b.n	80102e0 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 8010394:	4f5a      	ldr	r7, [pc, #360]	; (8010500 <read_markers+0x820>)
 8010396:	e7a3      	b.n	80102e0 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 8010398:	4f5a      	ldr	r7, [pc, #360]	; (8010504 <read_markers+0x824>)
 801039a:	e7a1      	b.n	80102e0 <read_markers+0x600>
      if (prec)
 801039c:	9b01      	ldr	r3, [sp, #4]
 801039e:	b333      	cbz	r3, 80103ee <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 80103a0:	f1ba 0f00 	cmp.w	sl, #0
 80103a4:	d107      	bne.n	80103b6 <read_markers+0x6d6>
 80103a6:	68f3      	ldr	r3, [r6, #12]
 80103a8:	4620      	mov	r0, r4
 80103aa:	4798      	blx	r3
 80103ac:	2800      	cmp	r0, #0
 80103ae:	f43f ad25 	beq.w	800fdfc <read_markers+0x11c>
 80103b2:	e9d6 5a00 	ldrd	r5, sl, [r6]
 80103b6:	782a      	ldrb	r2, [r5, #0]
 80103b8:	f1ba 0301 	subs.w	r3, sl, #1
 80103bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80103c0:	d00a      	beq.n	80103d8 <read_markers+0x6f8>
 80103c2:	3501      	adds	r5, #1
 80103c4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80103c8:	f103 3aff 	add.w	sl, r3, #4294967295
 80103cc:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 80103ce:	f857 1b04 	ldr.w	r1, [r7], #4
 80103d2:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 80103d6:	e786      	b.n	80102e6 <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 80103d8:	68f3      	ldr	r3, [r6, #12]
 80103da:	4620      	mov	r0, r4
 80103dc:	9203      	str	r2, [sp, #12]
 80103de:	4798      	blx	r3
 80103e0:	2800      	cmp	r0, #0
 80103e2:	f43f ad0b 	beq.w	800fdfc <read_markers+0x11c>
 80103e6:	9a03      	ldr	r2, [sp, #12]
 80103e8:	e9d6 5300 	ldrd	r5, r3, [r6]
 80103ec:	e7ea      	b.n	80103c4 <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 80103ee:	f1ba 0f00 	cmp.w	sl, #0
 80103f2:	d107      	bne.n	8010404 <read_markers+0x724>
 80103f4:	68f3      	ldr	r3, [r6, #12]
 80103f6:	4620      	mov	r0, r4
 80103f8:	4798      	blx	r3
 80103fa:	2800      	cmp	r0, #0
 80103fc:	f43f acfe 	beq.w	800fdfc <read_markers+0x11c>
 8010400:	e9d6 5a00 	ldrd	r5, sl, [r6]
 8010404:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010408:	f815 2b01 	ldrb.w	r2, [r5], #1
 801040c:	e7df      	b.n	80103ce <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 801040e:	69a7      	ldr	r7, [r4, #24]
 8010410:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 8010412:	b353      	cbz	r3, 801046a <read_markers+0x78a>
  INPUT_VARS(cinfo);
 8010414:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 8010416:	782a      	ldrb	r2, [r5, #0]
 8010418:	3b01      	subs	r3, #1
 801041a:	ea4f 2802 	mov.w	r8, r2, lsl #8
 801041e:	d02d      	beq.n	801047c <read_markers+0x79c>
 8010420:	3501      	adds	r5, #1
 8010422:	782a      	ldrb	r2, [r5, #0]
 8010424:	1e5e      	subs	r6, r3, #1
 8010426:	4442      	add	r2, r8
  if (length != 4)
 8010428:	2a04      	cmp	r2, #4
 801042a:	d005      	beq.n	8010438 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 801042c:	6823      	ldr	r3, [r4, #0]
 801042e:	220c      	movs	r2, #12
 8010430:	4620      	mov	r0, r4
 8010432:	615a      	str	r2, [r3, #20]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 8010438:	b34e      	cbz	r6, 801048e <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 801043a:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 801043c:	f895 8000 	ldrb.w	r8, [r5]
 8010440:	3e01      	subs	r6, #1
 8010442:	ea4f 2908 	mov.w	r9, r8, lsl #8
 8010446:	d02b      	beq.n	80104a0 <read_markers+0x7c0>
 8010448:	3501      	adds	r5, #1
 801044a:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 801044e:	2254      	movs	r2, #84	; 0x54
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 8010454:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 8010456:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 8010458:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 801045a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 8010462:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 8010466:	603d      	str	r5, [r7, #0]
 8010468:	e653      	b.n	8010112 <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	4620      	mov	r0, r4
 801046e:	4798      	blx	r3
 8010470:	2800      	cmp	r0, #0
 8010472:	f43f acc3 	beq.w	800fdfc <read_markers+0x11c>
 8010476:	e9d7 5300 	ldrd	r5, r3, [r7]
 801047a:	e7cc      	b.n	8010416 <read_markers+0x736>
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	4620      	mov	r0, r4
 8010480:	4798      	blx	r3
 8010482:	2800      	cmp	r0, #0
 8010484:	f43f acba 	beq.w	800fdfc <read_markers+0x11c>
 8010488:	e9d7 5300 	ldrd	r5, r3, [r7]
 801048c:	e7c9      	b.n	8010422 <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	4620      	mov	r0, r4
 8010492:	4798      	blx	r3
 8010494:	2800      	cmp	r0, #0
 8010496:	f43f acb1 	beq.w	800fdfc <read_markers+0x11c>
 801049a:	e9d7 5600 	ldrd	r5, r6, [r7]
 801049e:	e7cd      	b.n	801043c <read_markers+0x75c>
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	4620      	mov	r0, r4
 80104a4:	4798      	blx	r3
 80104a6:	2800      	cmp	r0, #0
 80104a8:	f43f aca8 	beq.w	800fdfc <read_markers+0x11c>
 80104ac:	e9d7 5600 	ldrd	r5, r6, [r7]
 80104b0:	e7cb      	b.n	801044a <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 80104b2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 80104b6:	3bd8      	subs	r3, #216	; 0xd8
 80104b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104bc:	4620      	mov	r0, r4
 80104be:	4798      	blx	r3
 80104c0:	e4e2      	b.n	800fe88 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 80104c2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 80104c6:	69db      	ldr	r3, [r3, #28]
 80104c8:	e7f8      	b.n	80104bc <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 80104ca:	6822      	ldr	r2, [r4, #0]
 80104cc:	215e      	movs	r1, #94	; 0x5e
 80104ce:	4620      	mov	r0, r4
 80104d0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80104d4:	6853      	ldr	r3, [r2, #4]
 80104d6:	2101      	movs	r1, #1
 80104d8:	4798      	blx	r3
      break;
 80104da:	e4cb      	b.n	800fe74 <read_markers+0x194>
      if (! skip_variable(cinfo))
 80104dc:	4620      	mov	r0, r4
 80104de:	f7ff fa36 	bl	800f94e <skip_variable>
 80104e2:	e4d1      	b.n	800fe88 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 80104e4:	6822      	ldr	r2, [r4, #0]
 80104e6:	2146      	movs	r1, #70	; 0x46
 80104e8:	e4df      	b.n	800feaa <read_markers+0x1ca>
 80104ea:	bf00      	nop
 80104ec:	08030118 	.word	0x08030118
 80104f0:	0802ffd8 	.word	0x0802ffd8
 80104f4:	080303c0 	.word	0x080303c0
 80104f8:	0803024c 	.word	0x0803024c
 80104fc:	08030168 	.word	0x08030168
 8010500:	080301cc 	.word	0x080301cc
 8010504:	080302f0 	.word	0x080302f0

08010508 <jpeg_resync_to_restart>:
{
 8010508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801050c:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 801050e:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 8010510:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 8010514:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 8010516:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 801051a:	61d9      	str	r1, [r3, #28]
 801051c:	f04f 31ff 	mov.w	r1, #4294967295
{
 8010520:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 8010522:	f008 0807 	and.w	r8, r8, #7
 8010526:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 801052a:	e9c3 2505 	strd	r2, r5, [r3, #20]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 8010532:	2dbf      	cmp	r5, #191	; 0xbf
 8010534:	dd2e      	ble.n	8010594 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 8010536:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 801053a:	2b07      	cmp	r3, #7
 801053c:	d828      	bhi.n	8010590 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 801053e:	4545      	cmp	r5, r8
 8010540:	d026      	beq.n	8010590 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 8010542:	1cbb      	adds	r3, r7, #2
 8010544:	f003 0307 	and.w	r3, r3, #7
 8010548:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 801054a:	429d      	cmp	r5, r3
 801054c:	d020      	beq.n	8010590 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 801054e:	1e7b      	subs	r3, r7, #1
 8010550:	f003 0307 	and.w	r3, r3, #7
 8010554:	33d0      	adds	r3, #208	; 0xd0
 8010556:	429d      	cmp	r5, r3
 8010558:	d01c      	beq.n	8010594 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 801055a:	1ebc      	subs	r4, r7, #2
 801055c:	f004 0407 	and.w	r4, r4, #7
 8010560:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 8010562:	42a5      	cmp	r5, r4
 8010564:	bf14      	ite	ne
 8010566:	2401      	movne	r4, #1
 8010568:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 801056a:	6833      	ldr	r3, [r6, #0]
 801056c:	2263      	movs	r2, #99	; 0x63
 801056e:	2104      	movs	r1, #4
 8010570:	4630      	mov	r0, r6
 8010572:	61dc      	str	r4, [r3, #28]
 8010574:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	4798      	blx	r3
    switch (action) {
 801057c:	2c02      	cmp	r4, #2
 801057e:	d00b      	beq.n	8010598 <jpeg_resync_to_restart+0x90>
 8010580:	2c03      	cmp	r4, #3
 8010582:	d002      	beq.n	801058a <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 8010584:	2300      	movs	r3, #0
 8010586:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 801058a:	2001      	movs	r0, #1
}
 801058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 8010590:	2403      	movs	r4, #3
 8010592:	e7ea      	b.n	801056a <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 8010594:	2402      	movs	r4, #2
 8010596:	e7e8      	b.n	801056a <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 8010598:	4630      	mov	r0, r6
 801059a:	f7ff fa13 	bl	800f9c4 <next_marker>
 801059e:	2800      	cmp	r0, #0
 80105a0:	d0f4      	beq.n	801058c <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 80105a2:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 80105a6:	e7c4      	b.n	8010532 <jpeg_resync_to_restart+0x2a>

080105a8 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 80105a8:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 80105aa:	6843      	ldr	r3, [r0, #4]
 80105ac:	22ac      	movs	r2, #172	; 0xac
 80105ae:	2100      	movs	r1, #0
{
 80105b0:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 80105b6:	4b11      	ldr	r3, [pc, #68]	; (80105fc <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 80105b8:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 80105bc:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 80105be:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 80105c0:	f100 0160 	add.w	r1, r0, #96	; 0x60
 80105c4:	4b0e      	ldr	r3, [pc, #56]	; (8010600 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 80105c6:	4a0f      	ldr	r2, [pc, #60]	; (8010604 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 80105c8:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 80105ca:	4b0f      	ldr	r3, [pc, #60]	; (8010608 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 80105cc:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 80105ce:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 80105d0:	2300      	movs	r3, #0
 80105d2:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 80105d4:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 80105d8:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 80105dc:	4299      	cmp	r1, r3
 80105de:	d1fb      	bne.n	80105d8 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 80105e0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80105e4:	2240      	movs	r2, #64	; 0x40
 80105e6:	2100      	movs	r1, #0
 80105e8:	f01a fb82 	bl	802acf0 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 80105ec:	4b07      	ldr	r3, [pc, #28]	; (801060c <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 80105ee:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 80105f0:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 80105f2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80105f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 80105f8:	f7ff ba59 	b.w	800faae <reset_marker_reader>
 80105fc:	0800faaf 	.word	0x0800faaf
 8010600:	0800fce1 	.word	0x0800fce1
 8010604:	0800f94f 	.word	0x0800f94f
 8010608:	0800fa51 	.word	0x0800fa51
 801060c:	0800f879 	.word	0x0800f879

08010610 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 8010610:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 8010612:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 8010616:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 8010618:	68ab      	ldr	r3, [r5, #8]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d02a      	beq.n	8010674 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 801061e:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 8010620:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 8010624:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 801062a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 801062e:	2102      	movs	r1, #2
 8010630:	4620      	mov	r0, r4
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 8010636:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 801063a:	2102      	movs	r1, #2
 801063c:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 801063e:	4620      	mov	r0, r4
 8010640:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 8010642:	68a2      	ldr	r2, [r4, #8]
 8010644:	b1aa      	cbz	r2, 8010672 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 8010646:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 8010648:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 801064a:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 801064c:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 801064e:	bf14      	ite	ne
 8010650:	2102      	movne	r1, #2
 8010652:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 8010654:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 8010656:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 8010658:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 801065a:	b151      	cbz	r1, 8010672 <prepare_for_output_pass+0x62>
 801065c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 8010660:	6949      	ldr	r1, [r1, #20]
 8010662:	b931      	cbnz	r1, 8010672 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 8010664:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8010666:	2900      	cmp	r1, #0
 8010668:	bf14      	ite	ne
 801066a:	2102      	movne	r1, #2
 801066c:	2101      	moveq	r1, #1
 801066e:	440b      	add	r3, r1
 8010670:	6113      	str	r3, [r2, #16]
    }
  }
}
 8010672:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 8010674:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8010676:	b16b      	cbz	r3, 8010694 <prepare_for_output_pass+0x84>
 8010678:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801067c:	b953      	cbnz	r3, 8010694 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 801067e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8010680:	2b00      	cmp	r3, #0
 8010682:	d037      	beq.n	80106f4 <prepare_for_output_pass+0xe4>
 8010684:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8010686:	2b00      	cmp	r3, #0
 8010688:	d034      	beq.n	80106f4 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 801068a:	69ab      	ldr	r3, [r5, #24]
 801068c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 8010690:	2301      	movs	r3, #1
 8010692:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 8010694:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8010698:	4620      	mov	r0, r4
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 801069e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 80106a2:	4620      	mov	r0, r4
 80106a4:	689b      	ldr	r3, [r3, #8]
 80106a6:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 80106a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1c9      	bne.n	8010642 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 80106ae:	692b      	ldr	r3, [r5, #16]
 80106b0:	b923      	cbnz	r3, 80106bc <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 80106b2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 80106b6:	4620      	mov	r0, r4
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 80106bc:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 80106c0:	4620      	mov	r0, r4
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4798      	blx	r3
      if (cinfo->quantize_colors)
 80106c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80106c8:	b12b      	cbz	r3, 80106d6 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 80106ca:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 80106ce:	4620      	mov	r0, r4
 80106d0:	68a9      	ldr	r1, [r5, #8]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 80106d6:	68aa      	ldr	r2, [r5, #8]
 80106d8:	4620      	mov	r0, r4
 80106da:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80106de:	2a00      	cmp	r2, #0
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	bf14      	ite	ne
 80106e4:	2103      	movne	r1, #3
 80106e6:	2100      	moveq	r1, #0
 80106e8:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 80106ea:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 80106ee:	2100      	movs	r1, #0
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	e7a4      	b.n	801063e <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 80106f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106f6:	b11b      	cbz	r3, 8010700 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 80106f8:	696b      	ldr	r3, [r5, #20]
 80106fa:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 80106fe:	e7c9      	b.n	8010694 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 8010700:	6823      	ldr	r3, [r4, #0]
 8010702:	222f      	movs	r2, #47	; 0x2f
 8010704:	4620      	mov	r0, r4
 8010706:	615a      	str	r2, [r3, #20]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4798      	blx	r3
 801070c:	e7c2      	b.n	8010694 <prepare_for_output_pass+0x84>

0801070e <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 801070e:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 8010710:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 8010712:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 8010716:	b11a      	cbz	r2, 8010720 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 8010718:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	4798      	blx	r3
  master->pass_number++;
 8010720:	68e3      	ldr	r3, [r4, #12]
 8010722:	3301      	adds	r3, #1
 8010724:	60e3      	str	r3, [r4, #12]
}
 8010726:	bd10      	pop	{r4, pc}

08010728 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 8010728:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 801072a:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 801072c:	2b00      	cmp	r3, #0
 801072e:	d143      	bne.n	80107b8 <use_merged_upsample+0x90>
 8010730:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 8010734:	2a00      	cmp	r2, #0
 8010736:	d141      	bne.n	80107bc <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 8010738:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801073c:	2b03      	cmp	r3, #3
 801073e:	d139      	bne.n	80107b4 <use_merged_upsample+0x8c>
 8010740:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010742:	2b03      	cmp	r3, #3
 8010744:	d136      	bne.n	80107b4 <use_merged_upsample+0x8c>
 8010746:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 801074a:	2b02      	cmp	r3, #2
 801074c:	d132      	bne.n	80107b4 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 801074e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8010750:	2b03      	cmp	r3, #3
 8010752:	d12f      	bne.n	80107b4 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 8010754:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8010758:	6899      	ldr	r1, [r3, #8]
 801075a:	2902      	cmp	r1, #2
 801075c:	d12a      	bne.n	80107b4 <use_merged_upsample+0x8c>
 801075e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8010760:	2901      	cmp	r1, #1
 8010762:	d127      	bne.n	80107b4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 8010764:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010768:	2901      	cmp	r1, #1
 801076a:	d123      	bne.n	80107b4 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 801076c:	68d9      	ldr	r1, [r3, #12]
 801076e:	2902      	cmp	r1, #2
 8010770:	dc20      	bgt.n	80107b4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 8010772:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8010774:	2901      	cmp	r1, #1
 8010776:	d11d      	bne.n	80107b4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 8010778:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 801077c:	2901      	cmp	r1, #1
 801077e:	d119      	bne.n	80107b4 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 8010780:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 8010784:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010786:	42a1      	cmp	r1, r4
 8010788:	d114      	bne.n	80107b4 <use_merged_upsample+0x8c>
 801078a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 801078c:	42a1      	cmp	r1, r4
 801078e:	d111      	bne.n	80107b4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 8010790:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 8010794:	42a1      	cmp	r1, r4
 8010796:	d10d      	bne.n	80107b4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 8010798:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 801079c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801079e:	4281      	cmp	r1, r0
 80107a0:	d108      	bne.n	80107b4 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 80107a2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80107a6:	4281      	cmp	r1, r0
 80107a8:	d104      	bne.n	80107b4 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 80107aa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80107ae:	1a53      	subs	r3, r2, r1
 80107b0:	425a      	negs	r2, r3
 80107b2:	415a      	adcs	r2, r3
}
 80107b4:	4610      	mov	r0, r2
 80107b6:	bd10      	pop	{r4, pc}
    return FALSE;
 80107b8:	2200      	movs	r2, #0
 80107ba:	e7fb      	b.n	80107b4 <use_merged_upsample+0x8c>
 80107bc:	461a      	mov	r2, r3
 80107be:	e7f9      	b.n	80107b4 <use_merged_upsample+0x8c>

080107c0 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 80107c0:	6942      	ldr	r2, [r0, #20]
 80107c2:	2aca      	cmp	r2, #202	; 0xca
{
 80107c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107c8:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 80107ca:	d005      	beq.n	80107d8 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80107cc:	6803      	ldr	r3, [r0, #0]
 80107ce:	2115      	movs	r1, #21
 80107d0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 80107d8:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80107da:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 80107dc:	f7fe faf8 	bl	800edd0 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80107e0:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 80107e4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 80107e8:	462b      	mov	r3, r5
 80107ea:	45b4      	cmp	ip, r6
 80107ec:	dd6b      	ble.n	80108c6 <jpeg_calc_output_dimensions+0x106>
 80107ee:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 80107f0:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 80107f2:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 80107f6:	2a00      	cmp	r2, #0
 80107f8:	bf14      	ite	ne
 80107fa:	2708      	movne	r7, #8
 80107fc:	2704      	moveq	r7, #4
 80107fe:	e00a      	b.n	8010816 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 8010800:	689a      	ldr	r2, [r3, #8]
 8010802:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 8010806:	434a      	muls	r2, r1
 8010808:	0052      	lsls	r2, r2, #1
 801080a:	fb9e f9f2 	sdiv	r9, lr, r2
 801080e:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 8010812:	b922      	cbnz	r2, 801081e <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 8010814:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 8010816:	fb01 f008 	mul.w	r0, r1, r8
 801081a:	42b8      	cmp	r0, r7
 801081c:	ddf0      	ble.n	8010800 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 801081e:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 8010820:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 8010824:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 8010828:	fb08 f109 	mul.w	r1, r8, r9
 801082c:	42b9      	cmp	r1, r7
 801082e:	dd0b      	ble.n	8010848 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 8010830:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 8010834:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 8010836:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801083a:	dc14      	bgt.n	8010866 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 801083c:	0042      	lsls	r2, r0, #1
 801083e:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 8010842:	bfc8      	it	gt
 8010844:	629a      	strgt	r2, [r3, #40]	; 0x28
 8010846:	e00f      	b.n	8010868 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 8010848:	68da      	ldr	r2, [r3, #12]
 801084a:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 801084e:	fb02 f208 	mul.w	r2, r2, r8
 8010852:	0052      	lsls	r2, r2, #1
 8010854:	fb9e faf2 	sdiv	sl, lr, r2
 8010858:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 801085c:	2a00      	cmp	r2, #0
 801085e:	d1e7      	bne.n	8010830 <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 8010860:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8010864:	e7e0      	b.n	8010828 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 8010866:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 8010868:	3601      	adds	r6, #1
 801086a:	3358      	adds	r3, #88	; 0x58
 801086c:	e7bd      	b.n	80107ea <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 801086e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 8010870:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 8010872:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 8010874:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 8010876:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 801087a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 801087e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 8010880:	69e3      	ldr	r3, [r4, #28]
 8010882:	4351      	muls	r1, r2
 8010884:	4358      	muls	r0, r3
 8010886:	f007 fe71 	bl	801856c <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 801088a:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 801088e:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 8010892:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 8010896:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 801089a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 801089e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 80108a0:	6a23      	ldr	r3, [r4, #32]
 80108a2:	4351      	muls	r1, r2
 80108a4:	4358      	muls	r0, r3
 80108a6:	f007 fe61 	bl	801856c <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 80108aa:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80108ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80108b0:	42b2      	cmp	r2, r6
 80108b2:	dcdc      	bgt.n	801086e <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 80108b4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80108b8:	2b03      	cmp	r3, #3
 80108ba:	d806      	bhi.n	80108ca <jpeg_calc_output_dimensions+0x10a>
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d809      	bhi.n	80108d4 <jpeg_calc_output_dimensions+0x114>
 80108c0:	d009      	beq.n	80108d6 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 80108c2:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 80108c4:	e008      	b.n	80108d8 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80108c6:	2600      	movs	r6, #0
 80108c8:	e7f1      	b.n	80108ae <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 80108ca:	3b04      	subs	r3, #4
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d8f8      	bhi.n	80108c2 <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 80108d0:	2304      	movs	r3, #4
 80108d2:	e000      	b.n	80108d6 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 80108d4:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 80108d6:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 80108d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108da:	b95b      	cbnz	r3, 80108f4 <jpeg_calc_output_dimensions+0x134>
 80108dc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 80108de:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 80108e0:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 80108e2:	f7ff ff21 	bl	8010728 <use_merged_upsample>
 80108e6:	b138      	cbz	r0, 80108f8 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 80108e8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80108ec:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80108f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 80108f4:	2301      	movs	r3, #1
 80108f6:	e7f2      	b.n	80108de <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 80108f8:	2301      	movs	r3, #1
 80108fa:	e7f7      	b.n	80108ec <jpeg_calc_output_dimensions+0x12c>

080108fc <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 80108fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80108fe:	6843      	ldr	r3, [r0, #4]
 8010900:	221c      	movs	r2, #28
 8010902:	2101      	movs	r1, #1
{
 8010904:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010906:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 8010908:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801090a:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 801090c:	4b6d      	ldr	r3, [pc, #436]	; (8010ac4 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 801090e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010912:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 8010914:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 8010916:	4b6c      	ldr	r3, [pc, #432]	; (8010ac8 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 8010918:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 801091a:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 801091c:	4620      	mov	r0, r4
 801091e:	f7ff ff4f 	bl	80107c0 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010922:	6863      	ldr	r3, [r4, #4]
 8010924:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8010928:	2101      	movs	r1, #1
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4620      	mov	r0, r4
 801092e:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 8010930:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010934:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 8010936:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 8010938:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 801093c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010940:	f01a f9d6 	bl	802acf0 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 8010944:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 8010948:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 801094a:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 801094e:	3101      	adds	r1, #1
 8010950:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8010954:	d1f9      	bne.n	801094a <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 8010956:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801095a:	21ff      	movs	r1, #255	; 0xff
 801095c:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 8010960:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 8010962:	f01a f9c5 	bl	802acf0 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 8010966:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801096a:	2100      	movs	r1, #0
 801096c:	f507 7060 	add.w	r0, r7, #896	; 0x380
 8010970:	f01a f9be 	bl	802acf0 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 8010974:	2280      	movs	r2, #128	; 0x80
 8010976:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 801097a:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 801097e:	f01a f9a9 	bl	802acd4 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 8010982:	4620      	mov	r0, r4
  master->pass_number = 0;
 8010984:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 8010986:	f7ff fecf 	bl	8010728 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 801098a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 801098c:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 801098e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 8010992:	b1b3      	cbz	r3, 80109c2 <jinit_master_decompress+0xc6>
 8010994:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010996:	b1a2      	cbz	r2, 80109c2 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 8010998:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801099a:	2b00      	cmp	r3, #0
 801099c:	d166      	bne.n	8010a6c <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 801099e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80109a0:	2b03      	cmp	r3, #3
 80109a2:	f04f 0301 	mov.w	r3, #1
 80109a6:	d068      	beq.n	8010a7a <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 80109a8:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 80109aa:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 80109ac:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 80109b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 80109b4:	4620      	mov	r0, r4
 80109b6:	f006 fef1 	bl	801779c <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 80109ba:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 80109be:	616b      	str	r3, [r5, #20]
 80109c0:	e062      	b.n	8010a88 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 80109c2:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 80109c6:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1e5      	bne.n	8010998 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 80109cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80109ce:	b94b      	cbnz	r3, 80109e4 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 80109d0:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 80109d2:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d069      	beq.n	8010aac <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 80109d8:	f000 fa1c 	bl	8010e14 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 80109dc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80109de:	4620      	mov	r0, r4
 80109e0:	f000 fb98 	bl	8011114 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 80109e4:	4620      	mov	r0, r4
 80109e6:	f7fc fda7 	bl	800d538 <jinit_inverse_dct>
  if (cinfo->arith_code)
 80109ea:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 80109ee:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d061      	beq.n	8010ab8 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 80109f4:	f7fb fc16 	bl	800c224 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 80109f8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80109fc:	691b      	ldr	r3, [r3, #16]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d15d      	bne.n	8010abe <jinit_master_decompress+0x1c2>
 8010a02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010a04:	3900      	subs	r1, #0
 8010a06:	bf18      	it	ne
 8010a08:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f7fc f8fc 	bl	800cc08 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 8010a10:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010a12:	b911      	cbnz	r1, 8010a1a <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 8010a14:	4620      	mov	r0, r4
 8010a16:	f7fe fca3 	bl	800f360 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 8010a1a:	6863      	ldr	r3, [r4, #4]
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	699b      	ldr	r3, [r3, #24]
 8010a20:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 8010a22:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8010a26:	4620      	mov	r0, r4
 8010a28:	689b      	ldr	r3, [r3, #8]
 8010a2a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 8010a2c:	68a2      	ldr	r2, [r4, #8]
 8010a2e:	b1e2      	cbz	r2, 8010a6a <jinit_master_decompress+0x16e>
 8010a30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a32:	b9d3      	cbnz	r3, 8010a6a <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 8010a34:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 8010a38:	691b      	ldr	r3, [r3, #16]
 8010a3a:	b1b3      	cbz	r3, 8010a6a <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 8010a3c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 8010a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 8010a42:	b111      	cbz	r1, 8010a4a <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 8010a44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010a48:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 8010a4a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 8010a4e:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 8010a50:	434b      	muls	r3, r1
    cinfo->progress->pass_counter = 0L;
 8010a52:	6050      	str	r0, [r2, #4]
    cinfo->progress->completed_passes = 0;
 8010a54:	e9c2 3002 	strd	r3, r0, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 8010a58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010a5a:	4283      	cmp	r3, r0
 8010a5c:	bf14      	ite	ne
 8010a5e:	2303      	movne	r3, #3
 8010a60:	2302      	moveq	r3, #2
 8010a62:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 8010a64:	68eb      	ldr	r3, [r5, #12]
 8010a66:	3301      	adds	r3, #1
 8010a68:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 8010a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 8010a6c:	6823      	ldr	r3, [r4, #0]
 8010a6e:	2230      	movs	r2, #48	; 0x30
 8010a70:	4620      	mov	r0, r4
 8010a72:	615a      	str	r2, [r3, #20]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4798      	blx	r3
 8010a78:	e791      	b.n	801099e <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 8010a7a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8010a7e:	b17a      	cbz	r2, 8010aa0 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 8010a80:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 8010a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d195      	bne.n	80109b4 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 8010a88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010a8a:	b913      	cbnz	r3, 8010a92 <jinit_master_decompress+0x196>
 8010a8c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d09c      	beq.n	80109cc <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 8010a92:	4620      	mov	r0, r4
 8010a94:	f007 fcfe 	bl	8018494 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 8010a98:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8010a9c:	61ab      	str	r3, [r5, #24]
 8010a9e:	e795      	b.n	80109cc <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 8010aa0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010aa2:	b10a      	cbz	r2, 8010aa8 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 8010aa4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8010aa6:	e7ec      	b.n	8010a82 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 8010aa8:	6663      	str	r3, [r4, #100]	; 0x64
 8010aaa:	e783      	b.n	80109b4 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 8010aac:	f7fc fad2 	bl	800d054 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	f000 fc4f 	bl	8011354 <jinit_upsampler>
 8010ab6:	e791      	b.n	80109dc <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 8010ab8:	f7fd fed6 	bl	800e868 <jinit_huff_decoder>
 8010abc:	e79c      	b.n	80109f8 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 8010abe:	2101      	movs	r1, #1
 8010ac0:	e7a3      	b.n	8010a0a <jinit_master_decompress+0x10e>
 8010ac2:	bf00      	nop
 8010ac4:	08010611 	.word	0x08010611
 8010ac8:	0801070f 	.word	0x0801070f

08010acc <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010acc:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 8010ad4:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8010ad6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010ad8:	4770      	bx	lr

08010ada <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 8010ada:	b570      	push	{r4, r5, r6, lr}
 8010adc:	9d05      	ldr	r5, [sp, #20]
 8010ade:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 8010ae0:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 8010ae4:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 8010ae6:	68de      	ldr	r6, [r3, #12]
 8010ae8:	9b04      	ldr	r3, [sp, #16]
 8010aea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010aee:	6822      	ldr	r2, [r4, #0]
 8010af0:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 8010af2:	682b      	ldr	r3, [r5, #0]
 8010af4:	3301      	adds	r3, #1
 8010af6:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 8010af8:	6823      	ldr	r3, [r4, #0]
 8010afa:	3301      	adds	r3, #1
 8010afc:	6023      	str	r3, [r4, #0]
}
 8010afe:	bd70      	pop	{r4, r5, r6, pc}

08010b00 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 8010b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010b04:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 8010b08:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 8010b0a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 8010b0e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 8010b10:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8010b14:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 8010b16:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 8010b18:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8010b1a:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 8010b1e:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 8010b20:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 8010b22:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 8010b24:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 8010b26:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8010b2a:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 8010b2c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 8010b2e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 8010b30:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 8010b34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010b38:	9903      	ldr	r1, [sp, #12]
 8010b3a:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8010b3c:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 8010b3e:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8010b42:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8010b46:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 8010b4a:	9205      	str	r2, [sp, #20]
 8010b4c:	9a05      	ldr	r2, [sp, #20]
 8010b4e:	3306      	adds	r3, #6
 8010b50:	3102      	adds	r1, #2
 8010b52:	4295      	cmp	r5, r2
 8010b54:	d128      	bne.n	8010ba8 <h2v1_merged_upsample+0xa8>
 8010b56:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 8010b58:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8010b5a:	fb03 f30e 	mul.w	r3, r3, lr
 8010b5e:	07d2      	lsls	r2, r2, #31
 8010b60:	eb0c 0103 	add.w	r1, ip, r3
 8010b64:	d51d      	bpl.n	8010ba2 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 8010b66:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010b68:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 8010b6a:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010b6e:	782a      	ldrb	r2, [r5, #0]
 8010b70:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8010b74:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 8010b78:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010b7a:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 8010b7c:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 8010b7e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 8010b82:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010b86:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 8010b8a:	9a03      	ldr	r2, [sp, #12]
 8010b8c:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 8010b90:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010b92:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 8010b94:	5dbe      	ldrb	r6, [r7, r6]
 8010b96:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010b98:	5c80      	ldrb	r0, [r0, r2]
 8010b9a:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010b9c:	5ca2      	ldrb	r2, [r4, r2]
 8010b9e:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 8010ba2:	b007      	add	sp, #28
 8010ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 8010ba8:	f819 ab01 	ldrb.w	sl, [r9], #1
 8010bac:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010bae:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 8010bb2:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010bb6:	9a02      	ldr	r2, [sp, #8]
 8010bb8:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 8010bbc:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 8010bc0:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010bc4:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 8010bc6:	9f01      	ldr	r7, [sp, #4]
 8010bc8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 8010bcc:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010bd0:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 8010bd4:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010bd8:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 8010bda:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010bde:	f812 b00a 	ldrb.w	fp, [r2, sl]
 8010be2:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010be6:	f816 a00a 	ldrb.w	sl, [r6, sl]
 8010bea:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 8010bee:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 8010bf2:	f817 700a 	ldrb.w	r7, [r7, sl]
 8010bf6:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010bfa:	f812 200a 	ldrb.w	r2, [r2, sl]
 8010bfe:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010c02:	f816 200a 	ldrb.w	r2, [r6, sl]
 8010c06:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8010c0a:	e79f      	b.n	8010b4c <h2v1_merged_upsample+0x4c>

08010c0c <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 8010c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010c10:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 8010c14:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8010c16:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 8010c1a:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 8010c1c:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 8010c20:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 8010c22:	696e      	ldr	r6, [r5, #20]
 8010c24:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 8010c26:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 8010c28:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 8010c2a:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 8010c2c:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 8010c30:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010c34:	686d      	ldr	r5, [r5, #4]
 8010c36:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 8010c38:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 8010c3a:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 8010c3c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 8010c3e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 8010c40:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 8010c44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8010c48:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 8010c4a:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8010c4c:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010c5a:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 8010c5c:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 8010c5e:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 8010c60:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 8010c62:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8010c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c66:	3206      	adds	r2, #6
 8010c68:	3306      	adds	r3, #6
 8010c6a:	f10e 0e02 	add.w	lr, lr, #2
 8010c6e:	4588      	cmp	r8, r1
 8010c70:	f10c 0c02 	add.w	ip, ip, #2
 8010c74:	d13a      	bne.n	8010cec <h2v2_merged_upsample+0xe0>
 8010c76:	2306      	movs	r3, #6
 8010c78:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 8010c7a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8010c7c:	437b      	muls	r3, r7
 8010c7e:	07c0      	lsls	r0, r0, #31
 8010c80:	eb02 0103 	add.w	r1, r2, r3
 8010c84:	9a01      	ldr	r2, [sp, #4]
 8010c86:	441a      	add	r2, r3
 8010c88:	d52d      	bpl.n	8010ce6 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 8010c8a:	9808      	ldr	r0, [sp, #32]
 8010c8c:	9d03      	ldr	r5, [sp, #12]
 8010c8e:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010c90:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 8010c94:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010c98:	9d05      	ldr	r5, [sp, #20]
 8010c9a:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 8010c9e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010ca2:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010ca6:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 8010ca8:	9804      	ldr	r0, [sp, #16]
 8010caa:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010cae:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 8010cb2:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010cb4:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 8010cb6:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010cba:	f815 e000 	ldrb.w	lr, [r5, r0]
 8010cbe:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010cc2:	f81c e000 	ldrb.w	lr, [ip, r0]
 8010cc6:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010cca:	5c21      	ldrb	r1, [r4, r0]
 8010ccc:	9800      	ldr	r0, [sp, #0]
 8010cce:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 8010cd0:	9907      	ldr	r1, [sp, #28]
 8010cd2:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 8010cd6:	5c68      	ldrb	r0, [r5, r1]
 8010cd8:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8010cda:	f81c 0001 	ldrb.w	r0, [ip, r1]
 8010cde:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8010ce0:	5c62      	ldrb	r2, [r4, r1]
 8010ce2:	9901      	ldr	r1, [sp, #4]
 8010ce4:	54ca      	strb	r2, [r1, r3]
  }
}
 8010ce6:	b00b      	add	sp, #44	; 0x2c
 8010ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 8010cec:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010cee:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 8010cf2:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010cf6:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 8010cfa:	9102      	str	r1, [sp, #8]
 8010cfc:	9903      	ldr	r1, [sp, #12]
 8010cfe:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010d02:	9905      	ldr	r1, [sp, #20]
 8010d04:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 8010d08:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010d0c:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 8010d0e:	9e04      	ldr	r6, [sp, #16]
 8010d10:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010d14:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010d18:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010d1c:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010d20:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010d22:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010d26:	f811 b009 	ldrb.w	fp, [r1, r9]
 8010d2a:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010d2e:	f815 9009 	ldrb.w	r9, [r5, r9]
 8010d32:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 8010d36:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010d3a:	f816 b009 	ldrb.w	fp, [r6, r9]
 8010d3e:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010d42:	f811 b009 	ldrb.w	fp, [r1, r9]
 8010d46:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010d4a:	f815 9009 	ldrb.w	r9, [r5, r9]
 8010d4e:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 8010d52:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 8010d56:	f816 b009 	ldrb.w	fp, [r6, r9]
 8010d5a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8010d5e:	f811 b009 	ldrb.w	fp, [r1, r9]
 8010d62:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8010d66:	f815 9009 	ldrb.w	r9, [r5, r9]
 8010d6a:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 8010d6e:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 8010d72:	f816 6009 	ldrb.w	r6, [r6, r9]
 8010d76:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8010d7a:	f811 1009 	ldrb.w	r1, [r1, r9]
 8010d7e:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8010d82:	f815 1009 	ldrb.w	r1, [r5, r9]
 8010d86:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8010d8a:	e76b      	b.n	8010c64 <h2v2_merged_upsample+0x58>

08010d8c <merged_2v_upsample>:
{
 8010d8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010d90:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 8010d94:	4616      	mov	r6, r2
 8010d96:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 8010d9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 8010d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8010da0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 8010da4:	b1dd      	cbz	r5, 8010dde <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 8010da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010da8:	2501      	movs	r5, #1
 8010daa:	f104 0020 	add.w	r0, r4, #32
 8010dae:	9301      	str	r3, [sp, #4]
 8010db0:	2300      	movs	r3, #0
 8010db2:	9500      	str	r5, [sp, #0]
 8010db4:	4619      	mov	r1, r3
 8010db6:	f007 fbe6 	bl	8018586 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 8010dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8010dc2:	442b      	add	r3, r5
 8010dc4:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 8010dc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010dca:	1b5b      	subs	r3, r3, r5
 8010dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 8010dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dd0:	b913      	cbnz	r3, 8010dd8 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 8010dd2:	6833      	ldr	r3, [r6, #0]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	6033      	str	r3, [r6, #0]
}
 8010dd8:	b004      	add	sp, #16
 8010dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 8010dde:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 8010de0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 8010de2:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 8010de4:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 8010de8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 8010dec:	bf28      	it	cs
 8010dee:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 8010df0:	9302      	str	r3, [sp, #8]
 8010df2:	42bd      	cmp	r5, r7
 8010df4:	bf28      	it	cs
 8010df6:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 8010df8:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 8010dfa:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 8010dfc:	bf17      	itett	ne
 8010dfe:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 8010e00:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 8010e02:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 8010e04:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 8010e06:	bf0c      	ite	eq
 8010e08:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 8010e0a:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 8010e0c:	ab02      	add	r3, sp, #8
 8010e0e:	6832      	ldr	r2, [r6, #0]
 8010e10:	47b8      	blx	r7
 8010e12:	e7d4      	b.n	8010dbe <merged_2v_upsample+0x32>

08010e14 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e14:	6843      	ldr	r3, [r0, #4]
 8010e16:	2230      	movs	r2, #48	; 0x30
 8010e18:	2101      	movs	r1, #1
 8010e1a:	681b      	ldr	r3, [r3, #0]
{
 8010e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e20:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e22:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 8010e24:	4b37      	ldr	r3, [pc, #220]	; (8010f04 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e26:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 8010e28:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8010e2a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 8010e2c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 8010e30:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 8010e32:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 8010e36:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 8010e38:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 8010e3a:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 8010e3c:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 8010e3e:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 8010e40:	d15a      	bne.n	8010ef8 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 8010e42:	4b31      	ldr	r3, [pc, #196]	; (8010f08 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e44:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 8010e46:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 8010e48:	4b30      	ldr	r3, [pc, #192]	; (8010f0c <jinit_merged_upsampler+0xf8>)
 8010e4a:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	6863      	ldr	r3, [r4, #4]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 8010e54:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e56:	6863      	ldr	r3, [r4, #4]
 8010e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010e5c:	2101      	movs	r1, #1
 8010e5e:	4620      	mov	r0, r4
 8010e60:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010e62:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e66:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e68:	6863      	ldr	r3, [r4, #4]
 8010e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 8010e6e:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e70:	2101      	movs	r1, #1
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4620      	mov	r0, r4
 8010e76:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e78:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 8010e7a:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	2101      	movs	r1, #1
 8010e84:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8010e86:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8010f24 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e8a:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e8c:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 8010e8e:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e90:	2101      	movs	r1, #1
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4620      	mov	r0, r4
 8010e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8010e9a:	4f1d      	ldr	r7, [pc, #116]	; (8010f10 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010e9c:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8010e9e:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 8010ea0:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8010ea2:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8010ea4:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010f28 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8010ea8:	491a      	ldr	r1, [pc, #104]	; (8010f14 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 8010eaa:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8010eae:	4d1a      	ldr	r5, [pc, #104]	; (8010f18 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8010eb0:	fb08 e203 	mla	r2, r8, r3, lr
 8010eb4:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 8010eb6:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8010eba:	fb07 f203 	mul.w	r2, r7, r3
 8010ebe:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8010ec2:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 8010ec6:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 8010ec8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8010ecc:	fb05 f203 	mul.w	r2, r5, r3
 8010ed0:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 8010ed4:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 8010ed8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8010edc:	fb01 f203 	mul.w	r2, r1, r3
 8010ee0:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 8010ee4:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 8010ee8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8010eec:	3301      	adds	r3, #1
 8010eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ef2:	d1dd      	bne.n	8010eb0 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 8010ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 8010ef8:	4a08      	ldr	r2, [pc, #32]	; (8010f1c <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 8010efa:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 8010efc:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 8010efe:	4a08      	ldr	r2, [pc, #32]	; (8010f20 <jinit_merged_upsampler+0x10c>)
 8010f00:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 8010f02:	e7a8      	b.n	8010e56 <jinit_merged_upsampler+0x42>
 8010f04:	08010acd 	.word	0x08010acd
 8010f08:	08010d8d 	.word	0x08010d8d
 8010f0c:	08010c0d 	.word	0x08010c0d
 8010f10:	0001c5a2 	.word	0x0001c5a2
 8010f14:	ffffa7e6 	.word	0xffffa7e6
 8010f18:	ffff492e 	.word	0xffff492e
 8010f1c:	08010adb 	.word	0x08010adb
 8010f20:	08010b01 	.word	0x08010b01
 8010f24:	000166e9 	.word	0x000166e9
 8010f28:	ff4d0b80 	.word	0xff4d0b80

08010f2c <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 8010f2c:	2902      	cmp	r1, #2
{
 8010f2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8010f30:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 8010f34:	d023      	beq.n	8010f7e <start_pass_dpost+0x52>
 8010f36:	2903      	cmp	r1, #3
 8010f38:	d019      	beq.n	8010f6e <start_pass_dpost+0x42>
 8010f3a:	2900      	cmp	r1, #0
 8010f3c:	d128      	bne.n	8010f90 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 8010f3e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8010f40:	b182      	cbz	r2, 8010f64 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 8010f42:	4a16      	ldr	r2, [pc, #88]	; (8010f9c <start_pass_dpost+0x70>)
 8010f44:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 8010f46:	68e2      	ldr	r2, [r4, #12]
 8010f48:	b93a      	cbnz	r2, 8010f5a <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 8010f4a:	6843      	ldr	r3, [r0, #4]
 8010f4c:	2101      	movs	r1, #1
 8010f4e:	9100      	str	r1, [sp, #0]
 8010f50:	69dd      	ldr	r5, [r3, #28]
 8010f52:	68a1      	ldr	r1, [r4, #8]
 8010f54:	6923      	ldr	r3, [r4, #16]
 8010f56:	47a8      	blx	r5
 8010f58:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 8010f60:	b003      	add	sp, #12
 8010f62:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 8010f64:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 8010f68:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 8010f6a:	6063      	str	r3, [r4, #4]
    break;
 8010f6c:	e7f5      	b.n	8010f5a <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 8010f6e:	68a2      	ldr	r2, [r4, #8]
 8010f70:	b91a      	cbnz	r2, 8010f7a <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010f72:	6803      	ldr	r3, [r0, #0]
 8010f74:	6159      	str	r1, [r3, #20]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 8010f7a:	4b09      	ldr	r3, [pc, #36]	; (8010fa0 <start_pass_dpost+0x74>)
 8010f7c:	e7f5      	b.n	8010f6a <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 8010f7e:	68a2      	ldr	r2, [r4, #8]
 8010f80:	b922      	cbnz	r2, 8010f8c <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010f82:	6803      	ldr	r3, [r0, #0]
 8010f84:	2203      	movs	r2, #3
 8010f86:	615a      	str	r2, [r3, #20]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 8010f8c:	4b05      	ldr	r3, [pc, #20]	; (8010fa4 <start_pass_dpost+0x78>)
 8010f8e:	e7ec      	b.n	8010f6a <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010f90:	6803      	ldr	r3, [r0, #0]
 8010f92:	2203      	movs	r2, #3
 8010f94:	615a      	str	r2, [r3, #20]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4798      	blx	r3
    break;
 8010f9a:	e7de      	b.n	8010f5a <start_pass_dpost+0x2e>
 8010f9c:	08010fa9 	.word	0x08010fa9
 8010fa0:	08011009 	.word	0x08011009
 8010fa4:	08011097 	.word	0x08011097

08010fa8 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8010fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fac:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8010fae:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 8010fb6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8010fb8:	682f      	ldr	r7, [r5, #0]
 8010fba:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 8010fbc:	2700      	movs	r7, #0
 8010fbe:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 8010fc0:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 8010fc4:	9705      	str	r7, [sp, #20]
 8010fc6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010fca:	42be      	cmp	r6, r7
 8010fcc:	bf94      	ite	ls
 8010fce:	9602      	strls	r6, [sp, #8]
 8010fd0:	9702      	strhi	r7, [sp, #8]
 8010fd2:	ae07      	add	r6, sp, #28
 8010fd4:	9601      	str	r6, [sp, #4]
 8010fd6:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010fda:	9600      	str	r6, [sp, #0]
 8010fdc:	9e05      	ldr	r6, [sp, #20]
 8010fde:	6876      	ldr	r6, [r6, #4]
 8010fe0:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 8010fe2:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010fe4:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8010fe8:	4620      	mov	r0, r4
 8010fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010fec:	685e      	ldr	r6, [r3, #4]
 8010fee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010ff2:	9b07      	ldr	r3, [sp, #28]
 8010ff4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8010ff8:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 8010ffa:	682b      	ldr	r3, [r5, #0]
 8010ffc:	9a07      	ldr	r2, [sp, #28]
 8010ffe:	4413      	add	r3, r2
 8011000:	602b      	str	r3, [r5, #0]
}
 8011002:	b008      	add	sp, #32
 8011004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011008 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 8011008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 801100c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 8011010:	b085      	sub	sp, #20
 8011012:	469a      	mov	sl, r3
 8011014:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 8011016:	69a3      	ldr	r3, [r4, #24]
{
 8011018:	460e      	mov	r6, r1
 801101a:	4691      	mov	r9, r2
 801101c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 8011020:	b943      	cbnz	r3, 8011034 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 8011022:	6843      	ldr	r3, [r0, #4]
 8011024:	2201      	movs	r2, #1
 8011026:	9200      	str	r2, [sp, #0]
 8011028:	69df      	ldr	r7, [r3, #28]
 801102a:	68a1      	ldr	r1, [r4, #8]
 801102c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8011030:	47b8      	blx	r7
 8011032:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 8011034:	6922      	ldr	r2, [r4, #16]
 8011036:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 8011038:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 801103a:	4628      	mov	r0, r5
 801103c:	9202      	str	r2, [sp, #8]
 801103e:	f104 0218 	add.w	r2, r4, #24
 8011042:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 8011046:	9201      	str	r2, [sp, #4]
 8011048:	68e2      	ldr	r2, [r4, #12]
 801104a:	9200      	str	r2, [sp, #0]
 801104c:	464a      	mov	r2, r9
 801104e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8011052:	4653      	mov	r3, sl
 8011054:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 8011056:	69a6      	ldr	r6, [r4, #24]
 8011058:	42be      	cmp	r6, r7
 801105a:	d910      	bls.n	801107e <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 801105c:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 8011060:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 8011062:	68e1      	ldr	r1, [r4, #12]
 8011064:	2200      	movs	r2, #0
 8011066:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801106a:	4628      	mov	r0, r5
 801106c:	4633      	mov	r3, r6
 801106e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8011072:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 8011074:	f8d8 3000 	ldr.w	r3, [r8]
 8011078:	4433      	add	r3, r6
 801107a:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 801107e:	6922      	ldr	r2, [r4, #16]
 8011080:	69a3      	ldr	r3, [r4, #24]
 8011082:	4293      	cmp	r3, r2
 8011084:	d304      	bcc.n	8011090 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 8011086:	6963      	ldr	r3, [r4, #20]
 8011088:	4413      	add	r3, r2
 801108a:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 801108c:	2300      	movs	r3, #0
 801108e:	61a3      	str	r3, [r4, #24]
  }
}
 8011090:	b005      	add	sp, #20
 8011092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011096 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8011096:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 801109a:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 801109e:	4607      	mov	r7, r0
 80110a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 80110a2:	69a3      	ldr	r3, [r4, #24]
 80110a4:	b93b      	cbnz	r3, 80110b6 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 80110a6:	6842      	ldr	r2, [r0, #4]
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	69d5      	ldr	r5, [r2, #28]
 80110ac:	68a1      	ldr	r1, [r4, #8]
 80110ae:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80110b2:	47a8      	blx	r5
 80110b4:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 80110b6:	6963      	ldr	r3, [r4, #20]
 80110b8:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 80110ba:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 80110bc:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 80110be:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 80110c0:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 80110c2:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 80110c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80110c6:	429d      	cmp	r5, r3
 80110c8:	bf28      	it	cs
 80110ca:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 80110cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110ce:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 80110d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80110d4:	429d      	cmp	r5, r3
 80110d6:	bf28      	it	cs
 80110d8:	461d      	movcs	r5, r3
 80110da:	68e3      	ldr	r3, [r4, #12]
 80110dc:	9303      	str	r3, [sp, #12]
 80110de:	9803      	ldr	r0, [sp, #12]
 80110e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80110e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80110e8:	4638      	mov	r0, r7
 80110ea:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80110ee:	462b      	mov	r3, r5
 80110f0:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 80110f2:	6833      	ldr	r3, [r6, #0]
 80110f4:	442b      	add	r3, r5
 80110f6:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 80110f8:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 80110fa:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 80110fc:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 80110fe:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 8011100:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 8011102:	d304      	bcc.n	801110e <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 8011104:	6963      	ldr	r3, [r4, #20]
 8011106:	4413      	add	r3, r2
 8011108:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 801110a:	2300      	movs	r3, #0
 801110c:	61a3      	str	r3, [r4, #24]
  }
}
 801110e:	b004      	add	sp, #16
 8011110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011114 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8011114:	6843      	ldr	r3, [r0, #4]
 8011116:	221c      	movs	r2, #28
{
 8011118:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801111a:	681b      	ldr	r3, [r3, #0]
{
 801111c:	b085      	sub	sp, #20
 801111e:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8011120:	2101      	movs	r1, #1
{
 8011122:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8011124:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 8011126:	4b15      	ldr	r3, [pc, #84]	; (801117c <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 8011128:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 801112a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801112e:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 8011130:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 8011132:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 8011134:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 8011138:	b1bb      	cbz	r3, 801116a <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 801113a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 801113e:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 8011140:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8011142:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8011144:	6861      	ldr	r1, [r4, #4]
 8011146:	4342      	muls	r2, r0
    if (need_full_buffer) {
 8011148:	b18f      	cbz	r7, 801116e <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 801114a:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 801114c:	4619      	mov	r1, r3
 801114e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8011150:	9203      	str	r2, [sp, #12]
 8011152:	f007 fa10 	bl	8018576 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8011156:	692b      	ldr	r3, [r5, #16]
 8011158:	2101      	movs	r1, #1
 801115a:	9a03      	ldr	r2, [sp, #12]
 801115c:	e9cd 0300 	strd	r0, r3, [sp]
 8011160:	4613      	mov	r3, r2
 8011162:	4620      	mov	r0, r4
 8011164:	4632      	mov	r2, r6
 8011166:	47b8      	blx	r7
 8011168:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 801116a:	b005      	add	sp, #20
 801116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 801116e:	688e      	ldr	r6, [r1, #8]
 8011170:	4620      	mov	r0, r4
 8011172:	2101      	movs	r1, #1
 8011174:	47b0      	blx	r6
 8011176:	60e8      	str	r0, [r5, #12]
}
 8011178:	e7f7      	b.n	801116a <jinit_d_post_controller+0x56>
 801117a:	bf00      	nop
 801117c:	08010f2d 	.word	0x08010f2d

08011180 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 8011180:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8011184:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 8011188:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 801118a:	6f42      	ldr	r2, [r0, #116]	; 0x74
 801118c:	661a      	str	r2, [r3, #96]	; 0x60
}
 801118e:	4770      	bx	lr

08011190 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 8011190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8011194:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 8011198:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 801119a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 801119e:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 80111a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 80111a2:	4683      	mov	fp, r0
 80111a4:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 80111a6:	429a      	cmp	r2, r3
 80111a8:	db10      	blt.n	80111cc <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80111aa:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80111ae:	2600      	movs	r6, #0
 80111b0:	f04f 0a58 	mov.w	sl, #88	; 0x58
 80111b4:	9303      	str	r3, [sp, #12]
 80111b6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80111ba:	9a03      	ldr	r2, [sp, #12]
 80111bc:	fb0a 2106 	mla	r1, sl, r6, r2
 80111c0:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 80111c4:	42b2      	cmp	r2, r6
 80111c6:	dc32      	bgt.n	801122e <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 80111c8:	2300      	movs	r3, #0
 80111ca:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 80111cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 80111ce:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 80111d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80111d2:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 80111da:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 80111de:	1ace      	subs	r6, r1, r3
 80111e0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80111e2:	428e      	cmp	r6, r1
 80111e4:	bf28      	it	cs
 80111e6:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 80111e8:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 80111ec:	4566      	cmp	r6, ip
 80111ee:	bf28      	it	cs
 80111f0:	4666      	movcs	r6, ip
 80111f2:	9600      	str	r6, [sp, #0]
 80111f4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80111f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80111fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80111fe:	f104 010c 	add.w	r1, r4, #12
 8011202:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 8011204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	4433      	add	r3, r6
 801120c:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 801120e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011210:	1b9b      	subs	r3, r3, r6
 8011212:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 8011214:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011216:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 8011218:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 801121c:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 801121e:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 8011220:	bfa2      	ittt	ge
 8011222:	682b      	ldrge	r3, [r5, #0]
 8011224:	3301      	addge	r3, #1
 8011226:	602b      	strge	r3, [r5, #0]
}
 8011228:	b005      	add	sp, #20
 801122a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 801122e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011230:	f103 0904 	add.w	r9, r3, #4
 8011234:	682a      	ldr	r2, [r5, #0]
 8011236:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 8011238:	f853 0928 	ldr.w	r0, [r3], #-40
 801123c:	4607      	mov	r7, r0
 801123e:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 8011242:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 8011244:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011248:	4658      	mov	r0, fp
 801124a:	47b8      	blx	r7
	 ci++, compptr++) {
 801124c:	464b      	mov	r3, r9
 801124e:	e7b4      	b.n	80111ba <sep_upsample+0x2a>

08011250 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 8011250:	601a      	str	r2, [r3, #0]
}
 8011252:	4770      	bx	lr

08011254 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 8011254:	2200      	movs	r2, #0
 8011256:	601a      	str	r2, [r3, #0]
}
 8011258:	4770      	bx	lr

0801125a <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 801125a:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 801125c:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 801125e:	2300      	movs	r3, #0
 8011260:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 8011264:	4299      	cmp	r1, r3
 8011266:	dc00      	bgt.n	801126a <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 8011268:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 801126a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 801126e:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 8011270:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 8011274:	440c      	add	r4, r1
    while (outptr < outend) {
 8011276:	42a1      	cmp	r1, r4
 8011278:	d301      	bcc.n	801127e <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 801127a:	3301      	adds	r3, #1
 801127c:	e7f0      	b.n	8011260 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 801127e:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 8011282:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 8011286:	f801 6c01 	strb.w	r6, [r1, #-1]
 801128a:	e7f4      	b.n	8011276 <h2v1_upsample+0x1c>

0801128c <int_upsample>:
{
 801128c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011290:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 8011292:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8011294:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 8011298:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 801129a:	684b      	ldr	r3, [r1, #4]
 801129c:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 801129e:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 80112a0:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 80112a2:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 80112a6:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 80112aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80112ae:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 80112b0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 80112b4:	42a3      	cmp	r3, r4
 80112b6:	dc02      	bgt.n	80112be <int_upsample+0x32>
}
 80112b8:	b005      	add	sp, #20
 80112ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 80112be:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 80112c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 80112c4:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 80112c8:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 80112cc:	454b      	cmp	r3, r9
 80112ce:	d30e      	bcc.n	80112ee <int_upsample+0x62>
    if (v_expand > 1) {
 80112d0:	f1b8 0f01 	cmp.w	r8, #1
 80112d4:	dd09      	ble.n	80112ea <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 80112d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80112d8:	463a      	mov	r2, r7
 80112da:	4621      	mov	r1, r4
 80112dc:	4638      	mov	r0, r7
 80112de:	9301      	str	r3, [sp, #4]
 80112e0:	9b03      	ldr	r3, [sp, #12]
 80112e2:	9300      	str	r3, [sp, #0]
 80112e4:	1c63      	adds	r3, r4, #1
 80112e6:	f007 f94e 	bl	8018586 <jcopy_sample_rows>
    outrow += v_expand;
 80112ea:	4444      	add	r4, r8
 80112ec:	e7e0      	b.n	80112b0 <int_upsample+0x24>
	*outptr++ = invalue;
 80112ee:	4618      	mov	r0, r3
 80112f0:	4652      	mov	r2, sl
 80112f2:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80112f6:	f019 fcfb 	bl	802acf0 <memset>
 80112fa:	4603      	mov	r3, r0
 80112fc:	4453      	add	r3, sl
 80112fe:	e7e5      	b.n	80112cc <int_upsample+0x40>

08011300 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8011300:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011304:	4605      	mov	r5, r0
 8011306:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 8011308:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 801130a:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 801130c:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 8011310:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 8011314:	42a3      	cmp	r3, r4
 8011316:	dc02      	bgt.n	801131e <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 8011318:	b002      	add	sp, #8
 801131a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 801131e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 8011322:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 8011324:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 8011328:	441a      	add	r2, r3
    while (outptr < outend) {
 801132a:	4293      	cmp	r3, r2
 801132c:	d30a      	bcc.n	8011344 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 801132e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8011330:	4621      	mov	r1, r4
 8011332:	4632      	mov	r2, r6
 8011334:	4630      	mov	r0, r6
 8011336:	e9cd 8300 	strd	r8, r3, [sp]
 801133a:	1c63      	adds	r3, r4, #1
    outrow += 2;
 801133c:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 801133e:	f007 f922 	bl	8018586 <jcopy_sample_rows>
    outrow += 2;
 8011342:	e7e5      	b.n	8011310 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 8011344:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 8011348:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 801134c:	f803 0c01 	strb.w	r0, [r3, #-1]
 8011350:	e7eb      	b.n	801132a <h2v2_upsample+0x2a>
	...

08011354 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 8011354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8011358:	6843      	ldr	r3, [r0, #4]
 801135a:	22a0      	movs	r2, #160	; 0xa0
 801135c:	2101      	movs	r1, #1
{
 801135e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 8011364:	4b3f      	ldr	r3, [pc, #252]	; (8011464 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 8011366:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801136a:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 801136c:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 801136e:	4b3e      	ldr	r3, [pc, #248]	; (8011468 <jinit_upsampler+0x114>)
 8011370:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 8011372:	2300      	movs	r3, #0
 8011374:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 8011376:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 801137a:	b12b      	cbz	r3, 8011388 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 801137c:	6823      	ldr	r3, [r4, #0]
 801137e:	221a      	movs	r2, #26
 8011380:	4620      	mov	r0, r4
 8011382:	615a      	str	r2, [r3, #20]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8011388:	f105 060c 	add.w	r6, r5, #12
 801138c:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 8011390:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 8011394:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 8011398:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8011478 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 801139c:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 80113a0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801147c <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80113a4:	3574      	adds	r5, #116	; 0x74
 80113a6:	eb05 0308 	add.w	r3, r5, r8
 80113aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80113ac:	429a      	cmp	r2, r3
 80113ae:	dc01      	bgt.n	80113b4 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 80113b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80113b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113b6:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 80113b8:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80113bc:	4343      	muls	r3, r0
 80113be:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 80113c2:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 80113c6:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80113ca:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 80113ce:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 80113d2:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 80113d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113d6:	b932      	cbnz	r2, 80113e6 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 80113d8:	4b24      	ldr	r3, [pc, #144]	; (801146c <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 80113da:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 80113dc:	3758      	adds	r7, #88	; 0x58
 80113de:	3604      	adds	r6, #4
 80113e0:	f108 0801 	add.w	r8, r8, #1
 80113e4:	e7df      	b.n	80113a6 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 80113e6:	fb0c f20e 	mul.w	r2, ip, lr
 80113ea:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 80113ee:	4559      	cmp	r1, fp
 80113f0:	d103      	bne.n	80113fa <jinit_upsampler+0xa6>
 80113f2:	4283      	cmp	r3, r0
 80113f4:	d101      	bne.n	80113fa <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 80113f6:	4b1e      	ldr	r3, [pc, #120]	; (8011470 <jinit_upsampler+0x11c>)
 80113f8:	e7ef      	b.n	80113da <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 80113fa:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 80113fe:	d119      	bne.n	8011434 <jinit_upsampler+0xe0>
 8011400:	4283      	cmp	r3, r0
 8011402:	d111      	bne.n	8011428 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 8011404:	4b1b      	ldr	r3, [pc, #108]	; (8011474 <jinit_upsampler+0x120>)
 8011406:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8011408:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 801140a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 801140e:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8011410:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8011414:	f007 f8af 	bl	8018576 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8011418:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 801141c:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 801141e:	2101      	movs	r1, #1
 8011420:	4620      	mov	r0, r4
 8011422:	47d8      	blx	fp
 8011424:	6030      	str	r0, [r6, #0]
 8011426:	e7d9      	b.n	80113dc <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 8011428:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 801142c:	d102      	bne.n	8011434 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 801142e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 8011432:	e7e9      	b.n	8011408 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 8011434:	fb9b f2f1 	sdiv	r2, fp, r1
 8011438:	fb01 b112 	mls	r1, r1, r2, fp
 801143c:	b959      	cbnz	r1, 8011456 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 801143e:	fb90 f1f3 	sdiv	r1, r0, r3
 8011442:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 8011446:	b933      	cbnz	r3, 8011456 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 8011448:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 801144c:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 8011450:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 8011454:	e7d8      	b.n	8011408 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	2227      	movs	r2, #39	; 0x27
 801145a:	4620      	mov	r0, r4
 801145c:	615a      	str	r2, [r3, #20]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4798      	blx	r3
    if (need_buffer) {
 8011462:	e7d1      	b.n	8011408 <jinit_upsampler+0xb4>
 8011464:	08011181 	.word	0x08011181
 8011468:	08011191 	.word	0x08011191
 801146c:	08011255 	.word	0x08011255
 8011470:	08011251 	.word	0x08011251
 8011474:	0801125b 	.word	0x0801125b
 8011478:	0801128d 	.word	0x0801128d
 801147c:	08011301 	.word	0x08011301

08011480 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 8011480:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 8011482:	6803      	ldr	r3, [r0, #0]
{
 8011484:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 8011486:	68db      	ldr	r3, [r3, #12]
 8011488:	4669      	mov	r1, sp
 801148a:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 801148c:	b033      	add	sp, #204	; 0xcc
 801148e:	f85d fb04 	ldr.w	pc, [sp], #4

08011492 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 8011492:	2900      	cmp	r1, #0
{
 8011494:	4603      	mov	r3, r0
 8011496:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 8011498:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 801149a:	da0b      	bge.n	80114b4 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 801149c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801149e:	b112      	cbz	r2, 80114a6 <emit_message+0x14>
 80114a0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80114a2:	2a02      	cmp	r2, #2
 80114a4:	dd02      	ble.n	80114ac <emit_message+0x1a>
      (*err->output_message) (cinfo);
 80114a6:	68a2      	ldr	r2, [r4, #8]
 80114a8:	4618      	mov	r0, r3
 80114aa:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 80114ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80114ae:	3301      	adds	r3, #1
 80114b0:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 80114b2:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 80114b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80114b6:	428b      	cmp	r3, r1
 80114b8:	dbfb      	blt.n	80114b2 <emit_message+0x20>
      (*err->output_message) (cinfo);
 80114ba:	68a3      	ldr	r3, [r4, #8]
}
 80114bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 80114c0:	4718      	bx	r3

080114c2 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 80114c2:	6803      	ldr	r3, [r0, #0]
 80114c4:	2200      	movs	r2, #0
 80114c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 80114c8:	615a      	str	r2, [r3, #20]
}
 80114ca:	4770      	bx	lr

080114cc <format_message>:
{
 80114cc:	4603      	mov	r3, r0
 80114ce:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 80114d0:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 80114d2:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 80114d4:	2b00      	cmp	r3, #0
{
 80114d6:	b530      	push	{r4, r5, lr}
 80114d8:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 80114da:	dd1f      	ble.n	801151c <format_message+0x50>
 80114dc:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80114de:	4299      	cmp	r1, r3
 80114e0:	db1c      	blt.n	801151c <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 80114e2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80114e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 80114e8:	b911      	cbnz	r1, 80114f0 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 80114ea:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 80114ec:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80114ee:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 80114f0:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 80114f2:	f813 4b01 	ldrb.w	r4, [r3], #1
 80114f6:	b9fc      	cbnz	r4, 8011538 <format_message+0x6c>
    sprintf(buffer, msgtext,
 80114f8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80114fa:	9305      	str	r3, [sp, #20]
 80114fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80114fe:	9304      	str	r3, [sp, #16]
 8011500:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8011502:	9303      	str	r3, [sp, #12]
 8011504:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8011506:	9302      	str	r3, [sp, #8]
 8011508:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801150a:	9301      	str	r3, [sp, #4]
 801150c:	6a13      	ldr	r3, [r2, #32]
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 8011514:	f01a f880 	bl	802b618 <siprintf>
}
 8011518:	b007      	add	sp, #28
 801151a:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 801151c:	6f94      	ldr	r4, [r2, #120]	; 0x78
 801151e:	2c00      	cmp	r4, #0
 8011520:	d0e3      	beq.n	80114ea <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 8011522:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 8011524:	4299      	cmp	r1, r3
 8011526:	dce0      	bgt.n	80114ea <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 8011528:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 801152c:	429d      	cmp	r5, r3
 801152e:	dbdc      	blt.n	80114ea <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 8011530:	1a59      	subs	r1, r3, r1
 8011532:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8011536:	e7d7      	b.n	80114e8 <format_message+0x1c>
    if (ch == '%') {
 8011538:	2c25      	cmp	r4, #37	; 0x25
 801153a:	d1da      	bne.n	80114f2 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	2b73      	cmp	r3, #115	; 0x73
 8011540:	d1da      	bne.n	80114f8 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 8011542:	3218      	adds	r2, #24
}
 8011544:	b007      	add	sp, #28
 8011546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 801154a:	f01a b865 	b.w	802b618 <siprintf>

0801154e <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 801154e:	6803      	ldr	r3, [r0, #0]
{
 8011550:	b510      	push	{r4, lr}
 8011552:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 8011554:	689b      	ldr	r3, [r3, #8]
 8011556:	4798      	blx	r3
  jpeg_destroy(cinfo);
 8011558:	4620      	mov	r0, r4
}
 801155a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 801155e:	f7f9 bf03 	b.w	800b368 <jpeg_destroy>
	...

08011564 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 8011564:	4a0a      	ldr	r2, [pc, #40]	; (8011590 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 8011566:	490b      	ldr	r1, [pc, #44]	; (8011594 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 8011568:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 801156a:	4a0b      	ldr	r2, [pc, #44]	; (8011598 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 801156c:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 801156e:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 8011570:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 8011572:	4a0a      	ldr	r2, [pc, #40]	; (801159c <jpeg_std_error+0x38>)
 8011574:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 8011576:	4a0a      	ldr	r2, [pc, #40]	; (80115a0 <jpeg_std_error+0x3c>)
 8011578:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 801157a:	4a0a      	ldr	r2, [pc, #40]	; (80115a4 <jpeg_std_error+0x40>)
 801157c:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 801157e:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 8011580:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 8011584:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 8011586:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 801158a:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 801158e:	4770      	bx	lr
 8011590:	0801154f 	.word	0x0801154f
 8011594:	0802fcbc 	.word	0x0802fcbc
 8011598:	08011493 	.word	0x08011493
 801159c:	08011481 	.word	0x08011481
 80115a0:	080114cd 	.word	0x080114cd
 80115a4:	080114c3 	.word	0x080114c3

080115a8 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80115a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 80115ac:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 80115b0:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 80115b2:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80115b6:	3a02      	subs	r2, #2
 80115b8:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 80115bc:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 80115be:	ed9f 5abd 	vldr	s10, [pc, #756]	; 80118b4 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 80115c2:	ed9f 4abd 	vldr	s8, [pc, #756]	; 80118b8 <jpeg_idct_float+0x310>
 80115c6:	eddf 4abd 	vldr	s9, [pc, #756]	; 80118bc <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 80115ca:	eddf 3abd 	vldr	s7, [pc, #756]	; 80118c0 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80115ce:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 80115d2:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80115d4:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80115d8:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 80115dc:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80115e0:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 80115e4:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80115e8:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80115ec:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 80115f0:	ecbc 7a01 	vldmia	ip!, {s14}
 80115f4:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80115f8:	ea4e 0b09 	orr.w	fp, lr, r9
 80115fc:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011604:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011608:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801160c:	ea41 0b0b 	orr.w	fp, r1, fp
 8011610:	ea45 0b0b 	orr.w	fp, r5, fp
 8011614:	ea50 0b0b 	orrs.w	fp, r0, fp
 8011618:	f040 80c0 	bne.w	801179c <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 801161c:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8011620:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 8011624:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8011628:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801162c:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8011630:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8011634:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8011638:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801163c:	45e2      	cmp	sl, ip
 801163e:	d1c6      	bne.n	80115ce <jpeg_idct_float+0x26>
 8011640:	1f1c      	subs	r4, r3, #4
 8011642:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 8011646:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8011648:	eddf 2a9e 	vldr	s5, [pc, #632]	; 80118c4 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 801164c:	eddf 4a99 	vldr	s9, [pc, #612]	; 80118b4 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8011650:	ed9f 3a99 	vldr	s6, [pc, #612]	; 80118b8 <jpeg_idct_float+0x310>
 8011654:	ed9f 4a99 	vldr	s8, [pc, #612]	; 80118bc <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8011658:	eddf 3a99 	vldr	s7, [pc, #612]	; 80118c0 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 801165c:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8011660:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 8011662:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8011666:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 801166a:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 801166e:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 8011672:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 8011676:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 801167a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 801167c:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 8011680:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 8011684:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8011686:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 8011688:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 801168c:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 801168e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011692:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 8011696:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 801169a:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 801169e:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 80116a2:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 80116a6:	ed52 7a03 	vldr	s15, [r2, #-12]
 80116aa:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 80116ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 80116b2:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 80116b6:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 80116ba:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 80116be:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 80116c2:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 80116c6:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 80116ca:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 80116ce:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 80116d2:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 80116d6:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 80116da:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 80116de:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 80116e2:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 80116e6:	eef0 1a67 	vmov.f32	s3, s15
 80116ea:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 80116ee:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 80116f2:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 80116f6:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 80116fa:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 80116fe:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8011702:	ee12 3a10 	vmov	r3, s4
 8011706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801170a:	5cf3      	ldrb	r3, [r6, r3]
 801170c:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 801170e:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8011712:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8011716:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 801171a:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 801171e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8011722:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8011724:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8011728:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 801172a:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 801172e:	ee16 3a10 	vmov	r3, s12
 8011732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011736:	5cf3      	ldrb	r3, [r6, r3]
 8011738:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 801173a:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 801173e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8011742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011746:	5cf3      	ldrb	r3, [r6, r3]
 8011748:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 801174a:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 801174e:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8011752:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8011756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 801175a:	5cf3      	ldrb	r3, [r6, r3]
 801175c:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 801175e:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8011762:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8011766:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 801176a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 801176e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8011772:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8011774:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8011778:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 801177a:	ee17 3a90 	vmov	r3, s15
 801177e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011782:	5cf3      	ldrb	r3, [r6, r3]
 8011784:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8011786:	ee17 3a10 	vmov	r3, s14
 801178a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801178e:	5cf3      	ldrb	r3, [r6, r3]
 8011790:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8011792:	f47f af63 	bne.w	801165c <jpeg_idct_float+0xb4>
  }
}
 8011796:	b041      	add	sp, #260	; 0x104
 8011798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801179c:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80117a0:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80117a4:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80117a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80117ac:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80117b0:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80117b4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80117b8:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80117bc:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80117c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80117c4:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80117c8:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80117cc:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 80117d0:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 80117d4:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 80117d8:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 80117dc:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 80117e0:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 80117e4:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 80117e8:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 80117ec:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 80117f0:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 80117f4:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80117f8:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 80117fc:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 8011800:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011804:	ee07 ea90 	vmov	s15, lr
 8011808:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801180c:	ee07 8a90 	vmov	s15, r8
 8011810:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011814:	ee07 1a90 	vmov	s15, r1
 8011818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801181c:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011820:	ee07 0a10 	vmov	s14, r0
 8011824:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011828:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 801182c:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 8011830:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 8011834:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 8011838:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 801183c:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 8011840:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8011844:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8011848:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 801184c:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8011850:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8011854:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 8011858:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 801185c:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8011860:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 8011864:	eeb0 6a67 	vmov.f32	s12, s15
 8011868:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 801186c:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8011870:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 8011874:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8011878:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 801187c:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8011880:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8011884:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 8011888:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 801188c:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8011890:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 8011894:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8011898:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 801189c:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 80118a0:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 80118a4:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 80118a8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 80118ac:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 80118b0:	e6c4      	b.n	801163c <jpeg_idct_float+0x94>
 80118b2:	bf00      	nop
 80118b4:	3fb504f3 	.word	0x3fb504f3
 80118b8:	3f8a8bd4 	.word	0x3f8a8bd4
 80118bc:	3fec835e 	.word	0x3fec835e
 80118c0:	40273d75 	.word	0x40273d75
 80118c4:	43008000 	.word	0x43008000

080118c8 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80118c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118cc:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 80118ce:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80118d0:	3a02      	subs	r2, #2
{
 80118d2:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80118d4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80118d8:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80118dc:	f105 0320 	add.w	r3, r5, #32
 80118e0:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 80118e2:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80118e4:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80118e8:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80118ea:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 80118ee:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80118f2:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 80118f6:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80118fa:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80118fe:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011902:	f855 0b04 	ldr.w	r0, [r5], #4
 8011906:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801190a:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801190c:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801190e:	ea46 000c 	orr.w	r0, r6, ip
 8011912:	4338      	orrs	r0, r7
 8011914:	ea4a 0000 	orr.w	r0, sl, r0
 8011918:	4308      	orrs	r0, r1
 801191a:	ea4e 0000 	orr.w	r0, lr, r0
 801191e:	ea58 0100 	orrs.w	r1, r8, r0
 8011922:	d146      	bne.n	80119b2 <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 8011924:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8011928:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 801192a:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 801192c:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801192e:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8011930:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8011934:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8011938:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801193c:	9903      	ldr	r1, [sp, #12]
 801193e:	42a9      	cmp	r1, r5
 8011940:	d1d0      	bne.n	80118e4 <jpeg_idct_ifast+0x1c>
 8011942:	9b02      	ldr	r3, [sp, #8]
 8011944:	f1a3 0b04 	sub.w	fp, r3, #4
 8011948:	331c      	adds	r3, #28
 801194a:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 801194c:	ab04      	add	r3, sp, #16
 801194e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011950:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8011952:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8011956:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 8011958:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 801195c:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 801195e:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8011960:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 8011964:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011966:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 801196a:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801196e:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 8011972:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8011974:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011976:	ea47 0708 	orr.w	r7, r7, r8
 801197a:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 801197e:	4327      	orrs	r7, r4
 8011980:	ea47 070c 	orr.w	r7, r7, ip
 8011984:	ea57 0502 	orrs.w	r5, r7, r2
 8011988:	d17e      	bne.n	8011a88 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 801198a:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 801198e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8011990:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 8011994:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 8011998:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 801199a:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 801199c:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 801199e:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 80119a0:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 80119a2:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 80119a4:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80119a6:	9b02      	ldr	r3, [sp, #8]
 80119a8:	455b      	cmp	r3, fp
 80119aa:	d1d1      	bne.n	8011950 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 80119ac:	b045      	add	sp, #276	; 0x114
 80119ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119b2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 80119b4:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80119b8:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80119bc:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80119be:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80119c2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 80119c6:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 80119ca:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 80119ce:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 80119d2:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 80119d6:	ebac 0000 	sub.w	r0, ip, r0
 80119da:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 80119dc:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 80119e0:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 80119e4:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 80119e8:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 80119ec:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119ee:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80119f0:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 80119f4:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119f6:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119f8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80119fa:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119fc:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80119fe:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8011a02:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011a04:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 8011a08:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 8011a0c:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 8011a10:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 8011a12:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 8011a16:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8011a18:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 8011a1a:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8011a1e:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8011a22:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011a24:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 8011a28:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8011a2a:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 8011a2e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011a32:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011a36:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011a38:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011a3a:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011a3e:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8011a40:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011a42:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8011a46:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 8011a4a:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8011a4e:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8011a52:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8011a56:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8011a5a:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 8011a5e:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8011a60:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8011a64:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 8011a68:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8011a6a:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 8011a6c:	4459      	add	r1, fp
 8011a6e:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 8011a70:	9900      	ldr	r1, [sp, #0]
 8011a72:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8011a76:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 8011a7a:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 8011a7e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8011a82:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 8011a84:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 8011a86:	e759      	b.n	801193c <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 8011a88:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8011a8c:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 8011a90:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 8011a94:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8011a98:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 8011a9c:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8011aa0:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8011aa2:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 8011aa4:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 8011aa6:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8011aaa:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 8011aae:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 8011ab2:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8011ab4:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 8011ab6:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8011aba:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 8011abe:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 8011ac2:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8011ac6:	f240 15d9 	movw	r5, #473	; 0x1d9
 8011aca:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011ace:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 8011ad2:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8011ad4:	9d01      	ldr	r5, [sp, #4]
 8011ad6:	1b64      	subs	r4, r4, r5
 8011ad8:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011adc:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8011ade:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011ae0:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011ae4:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011ae8:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8011aea:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8011aec:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011af0:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 8011af2:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011af6:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8011afa:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8011afe:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 8011b02:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 8011b06:	44a6      	add	lr, r4
			    & RANGE_MASK];
 8011b08:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8011b0c:	f819 2002 	ldrb.w	r2, [r9, r2]
 8011b10:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8011b14:	f819 200c 	ldrb.w	r2, [r9, ip]
 8011b18:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8011b1a:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 8011b1c:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8011b1e:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 8011b22:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8011b26:	f819 2002 	ldrb.w	r2, [r9, r2]
 8011b2a:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 8011b2c:	f819 3007 	ldrb.w	r3, [r9, r7]
 8011b30:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 8011b32:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8011b34:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 8011b36:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 8011b3a:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 8011b3e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011b42:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8011b44:	f819 3001 	ldrb.w	r3, [r9, r1]
 8011b48:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8011b4a:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8011b4e:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 8011b52:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 8011b56:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8011b5a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011b5e:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8011b60:	f819 300e 	ldrb.w	r3, [r9, lr]
 8011b64:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8011b66:	e71e      	b.n	80119a6 <jpeg_idct_ifast+0xde>

08011b68 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b6c:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8011b6e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8011b70:	3a02      	subs	r2, #2
{
 8011b72:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8011b74:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b76:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011b7a:	3380      	adds	r3, #128	; 0x80
 8011b7c:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011b7e:	f105 0320 	add.w	r3, r5, #32
 8011b82:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8011b84:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8011b88:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8011b8a:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8011b8e:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 8011b92:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011b96:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 8011b9a:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8011b9e:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8011ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ba6:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8011baa:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011bac:	ea4a 030b 	orr.w	r3, sl, fp
 8011bb0:	ea4e 0303 	orr.w	r3, lr, r3
 8011bb4:	433b      	orrs	r3, r7
 8011bb6:	ea48 0303 	orr.w	r3, r8, r3
 8011bba:	4333      	orrs	r3, r6
 8011bbc:	ea59 0303 	orrs.w	r3, r9, r3
 8011bc0:	d145      	bne.n	8011c4e <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8011bc2:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 8011bc4:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8011bc8:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8011bca:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8011bcc:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8011bce:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8011bd0:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8011bd4:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8011bd8:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011bdc:	9b05      	ldr	r3, [sp, #20]
 8011bde:	42ab      	cmp	r3, r5
 8011be0:	d1d0      	bne.n	8011b84 <jpeg_idct_islow+0x1c>
 8011be2:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8011be4:	ad06      	add	r5, sp, #24
 8011be6:	f1a3 0904 	sub.w	r9, r3, #4
 8011bea:	331c      	adds	r3, #28
 8011bec:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011bee:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8011bf2:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8011bf4:	9302      	str	r3, [sp, #8]
 8011bf6:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011bf8:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8011bfc:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 8011c00:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011c04:	ea4a 0200 	orr.w	r2, sl, r0
 8011c08:	ea42 020e 	orr.w	r2, r2, lr
 8011c0c:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 8011c10:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8011c12:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011c16:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8011c1a:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8011c1c:	430a      	orrs	r2, r1
 8011c1e:	ea52 020c 	orrs.w	r2, r2, ip
 8011c22:	f040 8098 	bne.w	8011d56 <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8011c26:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 8011c28:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 8011c2c:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8011c2e:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 8011c30:	9902      	ldr	r1, [sp, #8]
 8011c32:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 8011c34:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 8011c36:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 8011c38:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 8011c3a:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 8011c3c:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 8011c3e:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 8011c40:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8011c42:	9b05      	ldr	r3, [sp, #20]
 8011c44:	454b      	cmp	r3, r9
 8011c46:	d1d2      	bne.n	8011bee <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 8011c48:	b047      	add	sp, #284	; 0x11c
 8011c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011c4e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8011c50:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011c54:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8011c58:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8011c5a:	f241 1651 	movw	r6, #4433	; 0x1151
 8011c5e:	eb0b 0300 	add.w	r3, fp, r0
 8011c62:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8011c64:	f641 067e 	movw	r6, #6270	; 0x187e
 8011c68:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8011c6c:	4e7a      	ldr	r6, [pc, #488]	; (8011e58 <jpeg_idct_islow+0x2f0>)
 8011c6e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8011c72:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011c74:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011c7a:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 8011c7c:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8011c80:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8011c84:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 8011c88:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011c8c:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 8011c8e:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 8011c90:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 8011c92:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011c94:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011c98:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8011c9c:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8011c9e:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011ca2:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011ca6:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8011caa:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011cae:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8011cb0:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8011cb4:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8011cb8:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8011cbc:	1930      	adds	r0, r6, r4
 8011cbe:	4358      	muls	r0, r3
    z2 += z1;
 8011cc0:	4b66      	ldr	r3, [pc, #408]	; (8011e5c <jpeg_idct_islow+0x2f4>)
 8011cc2:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8011cc6:	4b66      	ldr	r3, [pc, #408]	; (8011e60 <jpeg_idct_islow+0x2f8>)
 8011cc8:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8011ccc:	eb09 040a 	add.w	r4, r9, sl
 8011cd0:	4b64      	ldr	r3, [pc, #400]	; (8011e64 <jpeg_idct_islow+0x2fc>)
 8011cd2:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8011cd4:	f640 138e 	movw	r3, #2446	; 0x98e
 8011cd8:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8011cdc:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8011cde:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8011ce2:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011ce6:	4b60      	ldr	r3, [pc, #384]	; (8011e68 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 8011ce8:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011cec:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8011cf0:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011cf4:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011cf8:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 8011cfa:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8011cfc:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8011cfe:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8011d02:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8011d06:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011d0a:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011d0e:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011d12:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011d14:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011d16:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011d1a:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011d1e:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011d22:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011d26:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011d28:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011d2c:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011d2e:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011d30:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011d32:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011d34:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011d36:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011d3a:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011d3c:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011d3e:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011d40:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011d42:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011d46:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8011d48:	9b02      	ldr	r3, [sp, #8]
 8011d4a:	eba3 0909 	sub.w	r9, r3, r9
 8011d4e:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8011d52:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 8011d54:	e742      	b.n	8011bdc <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8011d56:	1842      	adds	r2, r0, r1
 8011d58:	f241 1451 	movw	r4, #4433	; 0x1151
 8011d5c:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8011d5e:	f641 047e 	movw	r4, #6270	; 0x187e
 8011d62:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8011d66:	4c3c      	ldr	r4, [pc, #240]	; (8011e58 <jpeg_idct_islow+0x2f0>)
 8011d68:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 8011d6c:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8011d6e:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 8011d70:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8011d74:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 8011d78:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 8011d7c:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8011d80:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 8011d82:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 8011d86:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 8011d8a:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8011d8c:	f242 52a1 	movw	r2, #9633	; 0x25a1
 8011d90:	1821      	adds	r1, r4, r0
 8011d92:	4351      	muls	r1, r2
    z2 += z1;
 8011d94:	4a31      	ldr	r2, [pc, #196]	; (8011e5c <jpeg_idct_islow+0x2f4>)
 8011d96:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 8011d9a:	4a31      	ldr	r2, [pc, #196]	; (8011e60 <jpeg_idct_islow+0x2f8>)
 8011d9c:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8011da0:	eb0a 000c 	add.w	r0, sl, ip
 8011da4:	4a2f      	ldr	r2, [pc, #188]	; (8011e64 <jpeg_idct_islow+0x2fc>)
 8011da6:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 8011da8:	f640 128e 	movw	r2, #2446	; 0x98e
 8011dac:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 8011db0:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 8011db2:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 8011db6:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011dba:	4a2b      	ldr	r2, [pc, #172]	; (8011e68 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 8011dbc:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011dc0:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 8011dc4:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011dc8:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011dcc:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 8011dce:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 8011dd0:	4454      	add	r4, sl
 8011dd2:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8011dd6:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011dda:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 8011dde:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011de2:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 8011de4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8011de8:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8011dea:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011dee:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 8011df2:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011df6:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 8011df8:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8011dfc:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8011e00:	9a01      	ldr	r2, [sp, #4]
 8011e02:	5dd0      	ldrb	r0, [r2, r7]
 8011e04:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8011e06:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 8011e08:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8011e0c:	5c10      	ldrb	r0, [r2, r0]
 8011e0e:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8011e10:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8011e14:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8011e16:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8011e18:	eb02 000b 	add.w	r0, r2, fp
 8011e1c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 8011e1e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8011e22:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8011e24:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8011e26:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8011e28:	eba2 010b 	sub.w	r1, r2, fp
 8011e2c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 8011e2e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8011e32:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8011e34:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8011e36:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8011e38:	9a03      	ldr	r2, [sp, #12]
 8011e3a:	4462      	add	r2, ip
			    & RANGE_MASK];
 8011e3c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8011e40:	5c8a      	ldrb	r2, [r1, r2]
 8011e42:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8011e44:	9a03      	ldr	r2, [sp, #12]
 8011e46:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 8011e4a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8011e4e:	f811 200c 	ldrb.w	r2, [r1, ip]
 8011e52:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8011e54:	e6f5      	b.n	8011c42 <jpeg_idct_islow+0xda>
 8011e56:	bf00      	nop
 8011e58:	ffffc4df 	.word	0xffffc4df
 8011e5c:	ffffc13b 	.word	0xffffc13b
 8011e60:	fffff384 	.word	0xfffff384
 8011e64:	ffffe333 	.word	0xffffe333
 8011e68:	ffffadfd 	.word	0xffffadfd

08011e6c <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e70:	b0b9      	sub	sp, #228	; 0xe4
 8011e72:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8011e74:	1e96      	subs	r6, r2, #2
 8011e76:	9304      	str	r3, [sp, #16]
 8011e78:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011e7a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011e7e:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011e82:	3380      	adds	r3, #128	; 0x80
 8011e84:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8011e86:	f102 030c 	add.w	r3, r2, #12
 8011e8a:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011e8c:	f936 3f02 	ldrsh.w	r3, [r6, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011e90:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011e94:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8011e98:	f10c 0c04 	add.w	ip, ip, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011e9c:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ea0:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011ea2:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011ea6:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 8011eaa:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011eb0:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011eb2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8011eb4:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011eb6:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8011eba:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011ebe:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8011ec2:	4353      	muls	r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011ec4:	ebae 0203 	sub.w	r2, lr, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
 8011ec8:	eb04 0803 	add.w	r8, r4, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011ecc:	fb01 f902 	mul.w	r9, r1, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8011ed0:	eba4 010e 	sub.w	r1, r4, lr
 8011ed4:	f640 2212 	movw	r2, #2578	; 0xa12
 8011ed8:	fb02 f701 	mul.w	r7, r2, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011edc:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8011ede:	f642 01c6 	movw	r1, #10438	; 0x28c6
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011ee2:	eb09 0007 	add.w	r0, r9, r7
 8011ee6:	4410      	add	r0, r2
 8011ee8:	4a87      	ldr	r2, [pc, #540]	; (8012108 <jpeg_idct_7x7+0x29c>)
 8011eea:	fb02 000e 	mla	r0, r2, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8011eee:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
 8011ef0:	ebae 0e08 	sub.w	lr, lr, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8011ef4:	fb01 2108 	mla	r1, r1, r8, r2
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8011ef8:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011efc:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8011f00:	fb02 1203 	mla	r2, r2, r3, r1
 8011f04:	eb02 0309 	add.w	r3, r2, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011f08:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8011f0c:	f641 52ef 	movw	r2, #7663	; 0x1def
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8011f10:	9303      	str	r3, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8011f12:	4b7e      	ldr	r3, [pc, #504]	; (801210c <jpeg_idct_7x7+0x2a0>)
 8011f14:	fb03 1104 	mla	r1, r3, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011f18:	f9b6 4010 	ldrsh.w	r4, [r6, #16]
 8011f1c:	6a2b      	ldr	r3, [r5, #32]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8011f1e:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011f20:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011f24:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011f26:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8011f28:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011f2a:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 8011f2e:	fb07 f709 	mul.w	r7, r7, r9
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8011f32:	eb03 0904 	add.w	r9, r3, r4
 8011f36:	fb02 fb09 	mul.w	fp, r2, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8011f3a:	eba3 0904 	sub.w	r9, r3, r4
 8011f3e:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011f42:	443b      	add	r3, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8011f44:	443c      	add	r4, r7
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8011f46:	fb02 f909 	mul.w	r9, r2, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8011f4a:	4a71      	ldr	r2, [pc, #452]	; (8012110 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 8011f4c:	ebab 0a09 	sub.w	sl, fp, r9
    tmp1 += tmp2;
 8011f50:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011f52:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8011f56:	4354      	muls	r4, r2
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8011f58:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8011f5c:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8011f60:	44a1      	add	r9, r4
    tmp0 += z2;
 8011f62:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8011f64:	fb0b 3707 	mla	r7, fp, r7, r3

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011f68:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8011f6a:	443c      	add	r4, r7
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011f6c:	4453      	add	r3, sl
 8011f6e:	12db      	asrs	r3, r3, #11
 8011f70:	f84c 3c04 	str.w	r3, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011f74:	9b03      	ldr	r3, [sp, #12]
 8011f76:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011f7a:	eb00 0309 	add.w	r3, r0, r9
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011f7e:	eba0 0009 	sub.w	r0, r0, r9
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011f82:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011f84:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011f88:	f8cc 3018 	str.w	r3, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011f8c:	190b      	adds	r3, r1, r4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011f8e:	1b0c      	subs	r4, r1, r4
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011f90:	12c0      	asrs	r0, r0, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011f92:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011f94:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011f98:	12e4      	asrs	r4, r4, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011f9a:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011f9e:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011fa2:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011fa4:	f8cc 406c 	str.w	r4, [ip, #108]	; 0x6c
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8011fa8:	fb08 3e0e 	mla	lr, r8, lr, r3
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 8011fac:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8011fb0:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8011fb4:	9b05      	ldr	r3, [sp, #20]
 8011fb6:	42b3      	cmp	r3, r6
 8011fb8:	f47f af68 	bne.w	8011e8c <jpeg_idct_7x7+0x20>
 8011fbc:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 8011fbe:	ac07      	add	r4, sp, #28
 8011fc0:	f1a3 0904 	sub.w	r9, r3, #4
 8011fc4:	3318      	adds	r3, #24
 8011fc6:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011fc8:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8011fcc:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 8011fce:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 8011fd0:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8011fd4:	189e      	adds	r6, r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011fd6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 8011fda:	9304      	str	r3, [sp, #16]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011fdc:	1b51      	subs	r1, r2, r5
 8011fde:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8011fe2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8011fe6:	fb02 fe01 	mul.w	lr, r2, r1
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8011fea:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011fee:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp0 = z1 + z3;
 8011ff2:	eb03 0805 	add.w	r8, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8011ff6:	eba3 0c02 	sub.w	ip, r3, r2
 8011ffa:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ffe:	3710      	adds	r7, #16
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012000:	4941      	ldr	r1, [pc, #260]	; (8012108 <jpeg_idct_7x7+0x29c>)
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8012002:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012006:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 801200a:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801200e:	eb0e 000c 	add.w	r0, lr, ip
 8012012:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8012016:	fb01 0002 	mla	r0, r1, r2, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801201a:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801201e:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8012022:	fb02 f208 	mul.w	r2, r2, r8
 8012026:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801202a:	fb01 2105 	mla	r1, r1, r5, r2
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801202e:	4d37      	ldr	r5, [pc, #220]	; (801210c <jpeg_idct_7x7+0x2a0>)
 8012030:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 8012034:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8012038:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 801203a:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801203e:	4463      	add	r3, ip
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8012040:	eb02 050a 	add.w	r5, r2, sl
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8012044:	9102      	str	r1, [sp, #8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8012046:	9303      	str	r3, [sp, #12]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8012048:	f641 53ef 	movw	r3, #7663	; 0x1def
 801204c:	fb03 fb05 	mul.w	fp, r3, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8012050:	eba2 050a 	sub.w	r5, r2, sl
 8012054:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8012058:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801205a:	44f2      	add	sl, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801205c:	435d      	muls	r5, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801205e:	4b2c      	ldr	r3, [pc, #176]	; (8012110 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 8012060:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 8012064:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8012066:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801206a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801206e:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8012070:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8012074:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8012078:	4455      	add	r5, sl
    tmp0 += z2;
 801207a:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801207c:	fb0b 220e 	mla	r2, fp, lr, r2
 8012080:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012082:	eb01 020c 	add.w	r2, r1, ip
 8012086:	9942      	ldr	r1, [sp, #264]	; 0x108
			    & RANGE_MASK];
 8012088:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801208c:	5c9a      	ldrb	r2, [r3, r2]
 801208e:	9b04      	ldr	r3, [sp, #16]
 8012090:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012092:	9b02      	ldr	r3, [sp, #8]
 8012094:	eba3 0c0c 	sub.w	ip, r3, ip
 8012098:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801209a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801209e:	f813 200c 	ldrb.w	r2, [r3, ip]
 80120a2:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80120a4:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80120a6:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 80120a8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80120ac:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80120b0:	5c9a      	ldrb	r2, [r3, r2]
 80120b2:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80120b4:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80120b6:	9b03      	ldr	r3, [sp, #12]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80120b8:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80120ba:	eb03 020a 	add.w	r2, r3, sl
 80120be:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80120c0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80120c4:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80120c6:	9b03      	ldr	r3, [sp, #12]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80120c8:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80120ca:	eba3 0a0a 	sub.w	sl, r3, sl
 80120ce:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80120d0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80120d4:	f813 300a 	ldrb.w	r3, [r3, sl]
 80120d8:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 80120da:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80120de:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80120e2:	f642 5341 	movw	r3, #11585	; 0x2d41
 80120e6:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 80120ea:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80120ec:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 80120f0:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 80120f4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80120f8:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 80120fa:	9b05      	ldr	r3, [sp, #20]
 80120fc:	454b      	cmp	r3, r9
 80120fe:	f47f af63 	bne.w	8011fc8 <jpeg_idct_7x7+0x15c>
  }
}
 8012102:	b039      	add	sp, #228	; 0xe4
 8012104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012108:	ffffc515 	.word	0xffffc515
 801210c:	ffffb0f1 	.word	0xffffb0f1
 8012110:	ffffd3e1 	.word	0xffffd3e1

08012114 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012118:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801211c:	b0a7      	sub	sp, #156	; 0x9c
 801211e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012120:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012122:	3080      	adds	r0, #128	; 0x80
 8012124:	320a      	adds	r2, #10
 8012126:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012128:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801212a:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801212c:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801212e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8012132:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012136:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801213a:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801213c:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012140:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012142:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012146:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801214a:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 801214c:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801214e:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012152:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012156:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801215a:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801215e:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 8012160:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8012162:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012166:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8012168:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801216c:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8012170:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012172:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 8012174:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012178:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 801217c:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801217e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012182:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012184:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012188:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801218c:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8012190:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012194:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8012198:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801219c:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80121a0:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80121a4:	eba9 0808 	sub.w	r8, r9, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80121a8:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80121ac:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80121b0:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80121b4:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80121b8:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80121bc:	12d2      	asrs	r2, r2, #11
 80121be:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80121c2:	ea4f 22ee 	mov.w	r2, lr, asr #11
 80121c6:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 80121c8:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 80121cc:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 80121d0:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80121d2:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80121d6:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 80121da:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80121dc:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80121de:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80121e2:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80121e4:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80121e6:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80121e8:	42b2      	cmp	r2, r6
 80121ea:	d1a0      	bne.n	801212e <jpeg_idct_6x6+0x1a>
 80121ec:	f1a3 0e04 	sub.w	lr, r3, #4
 80121f0:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 80121f4:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80121f6:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80121fa:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 80121fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8012200:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8012202:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 8012206:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8012208:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801220c:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8012210:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8012214:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012218:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801221c:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012220:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8012224:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8012228:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 801222c:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8012230:	f242 7231 	movw	r2, #10033	; 0x2731
 8012234:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 8012238:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 801223c:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 8012240:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012244:	eb04 0508 	add.w	r5, r4, r8
 8012248:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801224c:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8012250:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8012254:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8012258:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801225c:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801225e:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8012262:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8012266:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801226a:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801226e:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8012272:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8012276:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801227a:	5d04      	ldrb	r4, [r0, r4]
 801227c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801227e:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012282:	9800      	ldr	r0, [sp, #0]
 8012284:	5d84      	ldrb	r4, [r0, r6]
 8012286:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012288:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801228c:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8012290:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8012294:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012298:	5d04      	ldrb	r4, [r0, r4]
 801229a:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801229c:	f810 3008 	ldrb.w	r3, [r0, r8]
 80122a0:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80122a2:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80122a6:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 80122aa:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80122ae:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80122b2:	5cc3      	ldrb	r3, [r0, r3]
 80122b4:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80122b6:	5d43      	ldrb	r3, [r0, r5]
 80122b8:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 80122ba:	d19c      	bne.n	80121f6 <jpeg_idct_6x6+0xe2>
  }
}
 80122bc:	b027      	add	sp, #156	; 0x9c
 80122be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080122c4 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80122c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80122c8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80122cc:	b09d      	sub	sp, #116	; 0x74
 80122ce:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80122d0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80122d2:	3080      	adds	r0, #128	; 0x80
 80122d4:	3208      	adds	r2, #8
 80122d6:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80122d8:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80122da:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80122de:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80122e2:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80122e4:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80122e6:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80122ea:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80122ec:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80122f0:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80122f4:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80122f6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80122f8:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80122fc:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80122fe:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012302:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8012304:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012306:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801230a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801230e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012312:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8012316:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801231a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801231e:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012322:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8012324:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8012328:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801232c:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 8012330:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8012332:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8012336:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801233a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 801233e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8012342:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012346:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8012348:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801234c:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012350:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8012352:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8012356:	483b      	ldr	r0, [pc, #236]	; (8012444 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8012358:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 801235a:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801235e:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8012362:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8012366:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8012368:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801236c:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8012370:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8012374:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8012378:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801237c:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8012380:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8012384:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8012388:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801238c:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801238e:	d1aa      	bne.n	80122e6 <jpeg_idct_5x5+0x22>
 8012390:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8012394:	a903      	add	r1, sp, #12
 8012396:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8012398:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801239c:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 80123a0:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 80123a2:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80123a6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80123aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 80123ac:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 80123ae:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 80123b2:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80123b6:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 80123ba:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80123be:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 80123c2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 80123c6:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80123ca:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80123cc:	1b1b      	subs	r3, r3, r4
 80123ce:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80123d2:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 80123d6:	eb03 344c 	add.w	r4, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 80123da:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 80123dc:	1915      	adds	r5, r2, r4
    tmp11 = z3 - z1;
 80123de:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80123e0:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 80123e4:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80123e8:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80123ea:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 80123ee:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80123f2:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 80123f6:	4813      	ldr	r0, [pc, #76]	; (8012444 <jpeg_idct_5x5+0x180>)
 80123f8:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80123fc:	eb05 0b06 	add.w	fp, r5, r6
 8012400:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012402:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8012404:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8012408:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801240c:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8012410:	9826      	ldr	r0, [sp, #152]	; 0x98
 8012412:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012416:	9800      	ldr	r0, [sp, #0]
 8012418:	5d45      	ldrb	r5, [r0, r5]
 801241a:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801241c:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801241e:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8012420:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8012424:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012428:	5d45      	ldrb	r5, [r0, r5]
 801242a:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801242c:	5c82      	ldrb	r2, [r0, r2]
 801242e:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8012430:	f810 300c 	ldrb.w	r3, [r0, ip]
 8012434:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8012436:	9b01      	ldr	r3, [sp, #4]
 8012438:	4573      	cmp	r3, lr
 801243a:	d1b2      	bne.n	80123a2 <jpeg_idct_5x5+0xde>
  }
}
 801243c:	b01d      	add	sp, #116	; 0x74
 801243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012442:	bf00      	nop
 8012444:	ffffba5c 	.word	0xffffba5c

08012448 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801244c:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801244e:	b093      	sub	sp, #76	; 0x4c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012450:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8012454:	1e96      	subs	r6, r2, #2
 8012456:	3c04      	subs	r4, #4
 8012458:	1d97      	adds	r7, r2, #6
 801245a:	3580      	adds	r5, #128	; 0x80

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801245c:	a902      	add	r1, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 801245e:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8012462:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8012466:	f8df c108 	ldr.w	ip, [pc, #264]	; 8012570 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801246a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801246e:	3104      	adds	r1, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012470:	f854 2f04 	ldr.w	r2, [r4, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012474:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8012478:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801247a:	fb02 f000 	mul.w	r0, r2, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801247e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012480:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012484:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012488:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 801248c:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8012490:	eba0 0002 	sub.w	r0, r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012494:	6a22      	ldr	r2, [r4, #32]
 8012496:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801249a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801249c:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80124a0:	eb0a 020b 	add.w	r2, sl, fp
 80124a4:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80124a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80124ac:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80124b0:	fb0c 220b 	mla	r2, ip, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80124b4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80124b8:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 80124bc:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 80124c0:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 80124c4:	eb02 0980 	add.w	r9, r2, r0, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 80124c8:	f841 bc04 	str.w	fp, [r1, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 80124cc:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 80124d0:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 80124d4:	f8c1 900c 	str.w	r9, [r1, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 80124d8:	61ca      	str	r2, [r1, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80124da:	d1c6      	bne.n	801246a <jpeg_idct_4x4+0x22>
 80124dc:	1f1e      	subs	r6, r3, #4
 80124de:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 80124e2:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80124e4:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80124e8:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80124ec:	f8df e080 	ldr.w	lr, [pc, #128]	; 8012570 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 80124f0:	f856 3f04 	ldr.w	r3, [r6, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 80124f4:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 80124f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80124f8:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 80124fc:	45b4      	cmp	ip, r6
    outptr = output_buf[ctr] + output_col;
 80124fe:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8012502:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8012506:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801250a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 801250e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8012512:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8012516:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801251a:	eb01 020b 	add.w	r2, r1, fp
 801251e:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8012522:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8012526:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801252a:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801252e:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8012532:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8012534:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012538:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 801253a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801253e:	f815 b00b 	ldrb.w	fp, [r5, fp]
 8012542:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012546:	5c6b      	ldrb	r3, [r5, r1]
 8012548:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801254a:	9b01      	ldr	r3, [sp, #4]
 801254c:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8012550:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8012554:	5ceb      	ldrb	r3, [r5, r3]
 8012556:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8012558:	9b01      	ldr	r3, [sp, #4]
 801255a:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 801255e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8012562:	5cab      	ldrb	r3, [r5, r2]
 8012564:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8012566:	d1c3      	bne.n	80124f0 <jpeg_idct_4x4+0xa8>
  }
}
 8012568:	b013      	add	sp, #76	; 0x4c
 801256a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801256e:	bf00      	nop
 8012570:	ffffc4df 	.word	0xffffc4df

08012574 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012578:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801257a:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801257e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8012580:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012584:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012586:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801258a:	f1a1 0c04 	sub.w	ip, r1, #4
 801258e:	1d10      	adds	r0, r2, #4
 8012590:	4621      	mov	r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8012592:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8012596:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801259a:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801259e:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80125a0:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80125a4:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80125a8:	4540      	cmp	r0, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80125aa:	fb05 f202 	mul.w	r2, r5, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80125ae:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80125b2:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80125b6:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 <<= CONST_BITS;
 80125ba:	ea4f 3242 	mov.w	r2, r2, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80125be:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80125c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80125c6:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80125ca:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 80125ce:	eb02 0605 	add.w	r6, r2, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 80125d2:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80125d6:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80125da:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80125de:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80125e2:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80125e6:	60a2      	str	r2, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80125e8:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80125ec:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80125f0:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80125f4:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80125f6:	d1d0      	bne.n	801259a <jpeg_idct_3x3+0x26>
 80125f8:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80125fa:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 80125fe:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8012600:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8012604:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8012608:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 801260a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801260c:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8012610:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8012612:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012616:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801261a:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801261e:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012622:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012626:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8012628:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 801262c:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8012630:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012634:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012638:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 801263c:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8012640:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8012644:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8012648:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801264c:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8012650:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012654:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8012658:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801265a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801265e:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8012660:	d1d0      	bne.n	8012604 <jpeg_idct_3x3+0x90>
  }
}
 8012662:	b00b      	add	sp, #44	; 0x2c
 8012664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012668 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801266c:	6d4f      	ldr	r7, [r1, #84]	; 0x54
{
 801266e:	4698      	mov	r8, r3
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012670:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012674:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012678:	6838      	ldr	r0, [r7, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801267a:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801267c:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012680:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012682:	6a38      	ldr	r0, [r7, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8012684:	687b      	ldr	r3, [r7, #4]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012686:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8012688:	3104      	adds	r1, #4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 801268a:	6a7f      	ldr	r7, [r7, #36]	; 0x24
  tmp0 = tmp4 + tmp5;
 801268c:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 801268e:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8012690:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8012694:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8012698:	435c      	muls	r4, r3
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 801269a:	f8d8 c000 	ldr.w	ip, [r8]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 801269e:	437a      	muls	r2, r7
{
 80126a0:	9e06      	ldr	r6, [sp, #24]
  tmp1 = tmp4 + tmp5;
 80126a2:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 80126a4:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 80126a6:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80126aa:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80126ac:	1bc0      	subs	r0, r0, r7

  /* Row 1 */
  outptr = output_buf[1] + output_col;

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80126ae:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80126b0:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80126b2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80126b6:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80126ba:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80126be:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80126c2:	5d2c      	ldrb	r4, [r5, r4]
 80126c4:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80126c8:	5c28      	ldrb	r0, [r5, r0]
 80126ca:	f88e 0001 	strb.w	r0, [lr, #1]
  outptr = output_buf[1] + output_col;
 80126ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80126d2:	5ceb      	ldrb	r3, [r5, r3]
  outptr = output_buf[1] + output_col;
 80126d4:	1984      	adds	r4, r0, r6
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80126d6:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80126d8:	5c6b      	ldrb	r3, [r5, r1]
 80126da:	7063      	strb	r3, [r4, #1]
}
 80126dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126e0 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 80126e0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80126e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80126e6:	6809      	ldr	r1, [r1, #0]
 80126e8:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 80126ea:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 80126ee:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 80126f0:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80126f4:	440a      	add	r2, r1
 80126f6:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 80126fa:	681a      	ldr	r2, [r3, #0]
 80126fc:	9b00      	ldr	r3, [sp, #0]
 80126fe:	54d1      	strb	r1, [r2, r3]
}
 8012700:	4770      	bx	lr
	...

08012704 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012708:	b0d1      	sub	sp, #324	; 0x144
 801270a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801270c:	1e96      	subs	r6, r2, #2
 801270e:	9306      	str	r3, [sp, #24]
 8012710:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012712:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012716:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012718:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801271c:	f102 030e 	add.w	r3, r2, #14
 8012720:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012722:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012726:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012728:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801272c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012730:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012732:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012734:	f9b6 2040 	ldrsh.w	r2, [r6, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012738:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801273a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801273e:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    tmp0 <<= CONST_BITS;
 8012742:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012744:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012746:	f9b6 3060 	ldrsh.w	r3, [r6, #96]	; 0x60
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801274a:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801274e:	f9b6 c050 	ldrsh.w	ip, [r6, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012752:	437b      	muls	r3, r7
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8012754:	f241 67a1 	movw	r7, #5793	; 0x16a1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012758:	f9b6 e070 	ldrsh.w	lr, [r6, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 801275c:	437b      	muls	r3, r7
    tmp1 = tmp0 + tmp3;
 801275e:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8012760:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8012764:	f241 65a1 	movw	r5, #5793	; 0x16a1
    tmp2 = tmp0 - tmp3 - tmp3;
 8012768:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 801276a:	1a8b      	subs	r3, r1, r2
 801276c:	436b      	muls	r3, r5
 801276e:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8012770:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8012774:	442b      	add	r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8012776:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp11 = tmp2 + tmp0;
 801277a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 801277c:	188b      	adds	r3, r1, r2
 801277e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8012780:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8012784:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8012786:	f240 75dc 	movw	r5, #2012	; 0x7dc
 801278a:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 801278c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 801278e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8012790:	1aad      	subs	r5, r5, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 8012792:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8012794:	1a79      	subs	r1, r7, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012796:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    tmp13 = tmp1 - tmp2 + tmp3;
 801279a:	188a      	adds	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801279c:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    tmp12 = tmp1 - tmp0 + tmp2;
 80127a0:	9304      	str	r3, [sp, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 80127a2:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80127a4:	6a22      	ldr	r2, [r4, #32]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80127a6:	4b89      	ldr	r3, [pc, #548]	; (80129cc <jpeg_idct_9x9+0x2c8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80127a8:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80127aa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80127ac:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80127ae:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 80127b2:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80127b6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80127ba:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80127bc:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80127c0:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80127c4:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80127c8:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80127cc:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80127d0:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80127d4:	ebac 0e07 	sub.w	lr, ip, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80127d8:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80127dc:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80127e0:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80127e4:	ebac 0707 	sub.w	r7, ip, r7
    tmp0 = tmp2 + tmp3 - z2;
 80127e8:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80127ec:	fb03 f30e 	mul.w	r3, r3, lr
    tmp0 = tmp2 + tmp3 - z2;
 80127f0:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 80127f4:	eba2 0e03 	sub.w	lr, r2, r3
    tmp3 += z2 + tmp1;
 80127f8:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80127fa:	f242 7331 	movw	r3, #10033	; 0x2731

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80127fe:	eb05 0108 	add.w	r1, r5, r8
    tmp2 += z2 - tmp1;
 8012802:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8012804:	435f      	muls	r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8012806:	9b03      	ldr	r3, [sp, #12]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8012808:	12c9      	asrs	r1, r1, #11
    tmp3 += z2 + tmp1;
 801280a:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801280c:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8012810:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8012814:	19d9      	adds	r1, r3, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8012816:	1bdf      	subs	r7, r3, r7
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8012818:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801281a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801281c:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801281e:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8012820:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8012824:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8012828:	12ff      	asrs	r7, r7, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801282a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801282c:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8012830:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8012834:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8012838:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801283a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 801283e:	9b05      	ldr	r3, [sp, #20]
 8012840:	4413      	add	r3, r2
 8012842:	12db      	asrs	r3, r3, #11
 8012844:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8012846:	9b05      	ldr	r3, [sp, #20]
 8012848:	1a9a      	subs	r2, r3, r2
 801284a:	12d2      	asrs	r2, r2, #11
 801284c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8012850:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8012854:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8012858:	12db      	asrs	r3, r3, #11
 801285a:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801285c:	9b07      	ldr	r3, [sp, #28]
 801285e:	42b3      	cmp	r3, r6
 8012860:	f47f af5f 	bne.w	8012722 <jpeg_idct_9x9+0x1e>
 8012864:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8012866:	aa08      	add	r2, sp, #32
 8012868:	3b04      	subs	r3, #4
 801286a:	9301      	str	r3, [sp, #4]
 801286c:	9b06      	ldr	r3, [sp, #24]
 801286e:	3320      	adds	r3, #32
 8012870:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012872:	9b01      	ldr	r3, [sp, #4]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8012874:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z1 = (INT32) wsptr[2];
 8012878:	6890      	ldr	r0, [r2, #8]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801287a:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 801287c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z4 = (INT32) wsptr[7];
 8012880:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 8012884:	9106      	str	r1, [sp, #24]
 8012886:	9301      	str	r3, [sp, #4]
 8012888:	460b      	mov	r3, r1
 801288a:	995a      	ldr	r1, [sp, #360]	; 0x168
 801288c:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801288e:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z2 = (INT32) wsptr[4];
 8012892:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012896:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 801289a:	f852 3c08 	ldr.w	r3, [r2, #-8]
 801289e:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 80128a2:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 80128a6:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80128aa:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 80128ae:	1b9e      	subs	r6, r3, r6
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 80128b0:	1a43      	subs	r3, r0, r1
 80128b2:	fb0c f303 	mul.w	r3, ip, r3
 80128b6:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 80128b8:	18f3      	adds	r3, r6, r3
 80128ba:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80128bc:	1843      	adds	r3, r0, r1
 80128be:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 80128c0:	f242 25ab 	movw	r5, #8875	; 0x22ab
 80128c4:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 80128c6:	f240 75dc 	movw	r5, #2012	; 0x7dc
 80128ca:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 80128cc:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 80128ce:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 80128d0:	1a6d      	subs	r5, r5, r1
    tmp12 = tmp1 - tmp0 + tmp2;
 80128d2:	4403      	add	r3, r0
    tmp13 = tmp1 - tmp2 + tmp3;
 80128d4:	1a38      	subs	r0, r7, r0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80128d6:	4f3d      	ldr	r7, [pc, #244]	; (80129cc <jpeg_idct_9x9+0x2c8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 80128d8:	1841      	adds	r1, r0, r1
    z1 = (INT32) wsptr[1];
 80128da:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp12 = tmp1 - tmp0 + tmp2;
 80128de:	9304      	str	r3, [sp, #16]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80128e0:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp13 = tmp1 - tmp2 + tmp3;
 80128e4:	9105      	str	r1, [sp, #20]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80128e6:	eb00 0e09 	add.w	lr, r0, r9
    z2 = (INT32) wsptr[3];
 80128ea:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80128ee:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80128f0:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 80128f4:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80128f8:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80128fc:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8012900:	f640 737a 	movw	r3, #3962	; 0xf7a
 8012904:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8012908:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 801290c:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8012910:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8012914:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8012918:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 801291c:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8012920:	1ac0      	subs	r0, r0, r3
    tmp3 += z2 + tmp1;
 8012922:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8012924:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8012928:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801292a:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801292e:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012932:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8012936:	448e      	add	lr, r1
			    & RANGE_MASK];
 8012938:	f3c0 4089 	ubfx	r0, r0, #18, #10
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801293c:	fb03 f909 	mul.w	r9, r3, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012940:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 8012942:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8012946:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801294a:	9b06      	ldr	r3, [sp, #24]
 801294c:	5458      	strb	r0, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801294e:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8012950:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8012954:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012956:	eb03 0009 	add.w	r0, r3, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801295a:	eba3 0909 	sub.w	r9, r3, r9
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801295e:	9b04      	ldr	r3, [sp, #16]
			    & RANGE_MASK];
 8012960:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8012964:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012968:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801296c:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801296e:	f81a 0009 	ldrb.w	r0, [sl, r9]
 8012972:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8012974:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8012976:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8012978:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 801297c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8012980:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012984:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8012986:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801298a:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 801298c:	9b05      	ldr	r3, [sp, #20]
 801298e:	4473      	add	r3, lr
			    & RANGE_MASK];
 8012990:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8012994:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8012998:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 801299a:	9b05      	ldr	r3, [sp, #20]
 801299c:	eba3 010e 	sub.w	r1, r3, lr
			    & RANGE_MASK];
 80129a0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80129a4:	f81a 3001 	ldrb.w	r3, [sl, r1]
  for (ctr = 0; ctr < 9; ctr++) {
 80129a8:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80129aa:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 80129ac:	9b02      	ldr	r3, [sp, #8]
 80129ae:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
			    & RANGE_MASK];
 80129b2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 80129b6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80129ba:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 80129bc:	9b07      	ldr	r3, [sp, #28]
 80129be:	428b      	cmp	r3, r1
 80129c0:	f47f af57 	bne.w	8012872 <jpeg_idct_9x9+0x16e>
  }
}
 80129c4:	b051      	add	sp, #324	; 0x144
 80129c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ca:	bf00      	nop
 80129cc:	ffffd8cf 	.word	0xffffd8cf

080129d0 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80129d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80129d4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80129d8:	b0d7      	sub	sp, #348	; 0x15c
 80129da:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80129dc:	f1a2 0b02 	sub.w	fp, r2, #2
 80129e0:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80129e2:	f100 0380 	add.w	r3, r0, #128	; 0x80
 80129e6:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80129e8:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80129ea:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129ec:	f102 030e 	add.w	r3, r2, #14
 80129f0:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80129f2:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80129f6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80129fa:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129fe:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012a00:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012a04:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012a06:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a0a:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012a0e:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012a10:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8012a14:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012a16:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012a1a:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012a1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012a22:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8012a24:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 8012a26:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8012a28:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012a2a:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8012a2e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012a32:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8012a36:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a3a:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012a3c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8012a40:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8012a42:	19f3      	adds	r3, r6, r7
 8012a44:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8012a46:	f241 0071 	movw	r0, #4209	; 0x1071
 8012a4a:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8012a4e:	489d      	ldr	r0, [pc, #628]	; (8012cc4 <jpeg_idct_10x10+0x2f4>)
 8012a50:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8012a54:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 8012a58:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a5a:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8012a5e:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8012a60:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a62:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 8012a66:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a68:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a6a:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a6e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a70:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp24 = tmp10 - tmp12;
 8012a72:	9001      	str	r0, [sp, #4]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012a74:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a78:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a7a:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8012a7e:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a82:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8012a86:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 8012a88:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8012a8c:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012a8e:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012a92:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8012a96:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012a9a:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 8012a9e:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012aa2:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012aa6:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012aaa:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012aae:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012ab0:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012ab2:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8012ab6:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012ab8:	1b86      	subs	r6, r0, r6
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8012aba:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012abe:	f642 0353 	movw	r3, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012ac2:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012ac4:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012ac8:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8012aca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012ace:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012ad2:	f241 468c 	movw	r6, #5260	; 0x148c
 8012ad6:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012ad8:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012adc:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012ae0:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012ae4:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012ae8:	1b5b      	subs	r3, r3, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012aea:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012aec:	444d      	add	r5, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012aee:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012af2:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8012af6:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012afa:	18fa      	adds	r2, r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012afc:	1aff      	subs	r7, r7, r3
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8012afe:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012b00:	12d2      	asrs	r2, r2, #11
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8012b02:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012b06:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012b08:	61ca      	str	r2, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8012b0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8012b0c:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012b0e:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8012b12:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8012b16:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012b1a:	9b02      	ldr	r3, [sp, #8]
 8012b1c:	442b      	add	r3, r5
 8012b1e:	12db      	asrs	r3, r3, #11
 8012b20:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012b22:	9b02      	ldr	r3, [sp, #8]
 8012b24:	1b5d      	subs	r5, r3, r5
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012b26:	9b01      	ldr	r3, [sp, #4]
 8012b28:	4453      	add	r3, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012b2a:	12ed      	asrs	r5, r5, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012b2c:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012b2e:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012b32:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012b34:	9b01      	ldr	r3, [sp, #4]
 8012b36:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012b3a:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012b3c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012b40:	455b      	cmp	r3, fp
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012b42:	f8c1 609c 	str.w	r6, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012b46:	f47f af54 	bne.w	80129f2 <jpeg_idct_10x10+0x22>
 8012b4a:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 8012b4c:	a906      	add	r1, sp, #24
 8012b4e:	f1a3 0b04 	sub.w	fp, r3, #4
 8012b52:	3324      	adds	r3, #36	; 0x24
 8012b54:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012b56:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8012b5a:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8012b5e:	9a60      	ldr	r2, [sp, #384]	; 0x180
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012b60:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8012b62:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8012b66:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012b68:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8012b6c:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012b6e:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012b72:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012b76:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012b7a:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012b7c:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8012b7e:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012b82:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8012b84:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8012b88:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012b8c:	006d      	lsls	r5, r5, #1
 8012b8e:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8012b92:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012b96:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8012b98:	19eb      	adds	r3, r5, r7
 8012b9a:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8012b9c:	f241 0071 	movw	r0, #4209	; 0x1071
 8012ba0:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8012ba4:	4847      	ldr	r0, [pc, #284]	; (8012cc4 <jpeg_idct_10x10+0x2f4>)
 8012ba6:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8012baa:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8012bae:	1b70      	subs	r0, r6, r5
    z2 = (INT32) wsptr[3];
 8012bb0:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp21 = tmp11 + tmp13;
 8012bb4:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8012bb6:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8012bb8:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012bba:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 8012bbe:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 8012bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 8012bc4:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8012bc8:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8012bcc:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012bce:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012bd2:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8012bd6:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8012bda:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8012bde:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012be2:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8012be6:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012bea:	f240 7014 	movw	r0, #1812	; 0x714
 8012bee:	fb00 f602 	mul.w	r6, r0, r2
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012bf2:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012bf6:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012bf8:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012bfc:	eba6 0608 	sub.w	r6, r6, r8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012c00:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8012c04:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012c06:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012c08:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8012c0c:	035b      	lsls	r3, r3, #13
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012c0e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012c12:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8012c16:	eba3 3840 	sub.w	r8, r3, r0, lsl #13
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012c1a:	f642 0353 	movw	r3, #10323	; 0x2853
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c1e:	9800      	ldr	r0, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012c20:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012c22:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c24:	9e60      	ldr	r6, [sp, #384]	; 0x180
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012c26:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012c2a:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c2e:	eb0c 020e 	add.w	r2, ip, lr
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012c32:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012c36:	1b5b      	subs	r3, r3, r5
			    & RANGE_MASK];
 8012c38:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012c3c:	444d      	add	r5, r9
			    & RANGE_MASK];
 8012c3e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c42:	5c82      	ldrb	r2, [r0, r2]
 8012c44:	9804      	ldr	r0, [sp, #16]
 8012c46:	5582      	strb	r2, [r0, r6]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012c48:	9a00      	ldr	r2, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012c4a:	9800      	ldr	r0, [sp, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012c4c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8012c50:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012c52:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012c54:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8012c56:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8012c5a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012c5e:	5c82      	ldrb	r2, [r0, r2]
 8012c60:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012c62:	5dc3      	ldrb	r3, [r0, r7]
 8012c64:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012c66:	9b01      	ldr	r3, [sp, #4]
 8012c68:	4443      	add	r3, r8
			    & RANGE_MASK];
 8012c6a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012c6e:	5cc3      	ldrb	r3, [r0, r3]
 8012c70:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012c72:	9b01      	ldr	r3, [sp, #4]
 8012c74:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 8012c78:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012c7c:	f810 3008 	ldrb.w	r3, [r0, r8]
 8012c80:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012c82:	9b03      	ldr	r3, [sp, #12]
 8012c84:	442b      	add	r3, r5
			    & RANGE_MASK];
 8012c86:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012c8a:	5cc3      	ldrb	r3, [r0, r3]
 8012c8c:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012c8e:	9b03      	ldr	r3, [sp, #12]
 8012c90:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8012c92:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012c96:	5d43      	ldrb	r3, [r0, r5]
 8012c98:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012c9a:	9b02      	ldr	r3, [sp, #8]
 8012c9c:	4453      	add	r3, sl
			    & RANGE_MASK];
 8012c9e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012ca2:	5cc3      	ldrb	r3, [r0, r3]
 8012ca4:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012ca6:	9b02      	ldr	r3, [sp, #8]
 8012ca8:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 8012cac:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012cb0:	f810 300a 	ldrb.w	r3, [r0, sl]
 8012cb4:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 8012cb6:	9b05      	ldr	r3, [sp, #20]
 8012cb8:	455b      	cmp	r3, fp
 8012cba:	f47f af4c 	bne.w	8012b56 <jpeg_idct_10x10+0x186>
  }
}
 8012cbe:	b057      	add	sp, #348	; 0x15c
 8012cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cc4:	ffffba5c 	.word	0xffffba5c

08012cc8 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ccc:	b0e5      	sub	sp, #404	; 0x194
 8012cce:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8012cd0:	f1a2 0a02 	sub.w	sl, r2, #2
 8012cd4:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012cd6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012cda:	3380      	adds	r3, #128	; 0x80
 8012cdc:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012cde:	1f0b      	subs	r3, r1, #4
 8012ce0:	9302      	str	r3, [sp, #8]
 8012ce2:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8012ce6:	aa0c      	add	r2, sp, #48	; 0x30
 8012ce8:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012cea:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012cec:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012cf0:	f93a 3f02 	ldrsh.w	r3, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012cf4:	3204      	adds	r2, #4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012cf6:	f851 0f04 	ldr.w	r0, [r1, #4]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012cfa:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012cfe:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012d00:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012d02:	f9ba 5040 	ldrsh.w	r5, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012d06:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012d08:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012d0c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp10 <<= CONST_BITS;
 8012d10:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012d12:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012d14:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d18:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012d1e:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012d20:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012d24:	1a27      	subs	r7, r4, r0
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012d26:	f9ba e010 	ldrsh.w	lr, [sl, #16]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012d2a:	eba4 0b06 	sub.w	fp, r4, r6
 8012d2e:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012d32:	f640 55c9 	movw	r5, #3529	; 0xdc9
 8012d36:	436f      	muls	r7, r5
    z4 = z1 + z3;
 8012d38:	1985      	adds	r5, r0, r6
    z4 -= z2;
 8012d3a:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012d3c:	fb0c 3301 	mla	r3, ip, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012d40:	eb0b 0c07 	add.w	ip, fp, r7
    z4 -= z2;
 8012d44:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012d46:	449c      	add	ip, r3
 8012d48:	49d0      	ldr	r1, [pc, #832]	; (801308c <jpeg_idct_11x11+0x3c4>)
 8012d4a:	fb01 c104 	mla	r1, r1, r4, ip
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012d4e:	f244 3cb5 	movw	ip, #17333	; 0x43b5
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012d52:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012d54:	fb0c 3c06 	mla	ip, ip, r6, r3
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8012d58:	49cd      	ldr	r1, [pc, #820]	; (8013090 <jpeg_idct_11x11+0x3c8>)
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012d5a:	44e3      	add	fp, ip
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8012d5c:	fb01 3c00 	mla	ip, r1, r0, r3
 8012d60:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012d64:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012d68:	f9ba c050 	ldrsh.w	ip, [sl, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8012d6c:	9104      	str	r1, [sp, #16]
    tmp24 += tmp25;
 8012d6e:	49c9      	ldr	r1, [pc, #804]	; (8013094 <jpeg_idct_11x11+0x3cc>)
 8012d70:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012d74:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 8012d78:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012d7c:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012d80:	9105      	str	r1, [sp, #20]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8012d82:	49c5      	ldr	r1, [pc, #788]	; (8013098 <jpeg_idct_11x11+0x3d0>)
 8012d84:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012d86:	fb06 0004 	mla	r0, r6, r4, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012d8a:	f9ba 6070 	ldrsh.w	r6, [sl, #112]	; 0x70

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012d8e:	f44f 644c 	mov.w	r4, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012d92:	1941      	adds	r1, r0, r5
 8012d94:	9106      	str	r1, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012d96:	9902      	ldr	r1, [sp, #8]
 8012d98:	6a08      	ldr	r0, [r1, #32]
 8012d9a:	fb00 f90e 	mul.w	r9, r0, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012d9e:	6e08      	ldr	r0, [r1, #96]	; 0x60
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8012da0:	f241 5e74 	movw	lr, #5492	; 0x1574
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012da4:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012da6:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 8012daa:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012dae:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 8012db2:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 8012db4:	eb09 0007 	add.w	r0, r9, r7
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012db8:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012dbc:	eb09 0806 	add.w	r8, r9, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012dc0:	4435      	add	r5, r6
 8012dc2:	4365      	muls	r5, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8012dc4:	f641 446a 	movw	r4, #7274	; 0x1c6a
 8012dc8:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8012dca:	eb09 040c 	add.w	r4, r9, ip
 8012dce:	fb0e f104 	mul.w	r1, lr, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012dd2:	f640 34b8 	movw	r4, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012dd6:	eb00 0e01 	add.w	lr, r0, r1
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012dda:	fb04 5808 	mla	r8, r4, r8, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8012dde:	9107      	str	r1, [sp, #28]
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8012de0:	eb07 040c 	add.w	r4, r7, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012de4:	44c6      	add	lr, r8
 8012de6:	49ad      	ldr	r1, [pc, #692]	; (801309c <jpeg_idct_11x11+0x3d4>)
 8012de8:	fb01 ee09 	mla	lr, r1, r9, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8012dec:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012df0:	f244 2958 	movw	r9, #16984	; 0x4258
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8012df4:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012df8:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012dfa:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012dfe:	fb01 440c 	mla	r4, r1, ip, r4
 8012e02:	9907      	ldr	r1, [sp, #28]
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012e04:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012e06:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012e08:	440c      	add	r4, r1
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012e0a:	49a5      	ldr	r1, [pc, #660]	; (80130a0 <jpeg_idct_11x11+0x3d8>)
 8012e0c:	4348      	muls	r0, r1
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012e0e:	f244 3147 	movw	r1, #17223	; 0x4347
    tmp11 += z1;
 8012e12:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012e14:	fb01 0006 	mla	r0, r1, r6, r0

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012e18:	9903      	ldr	r1, [sp, #12]
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012e1a:	4480      	add	r8, r0
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012e1c:	f242 000b 	movw	r0, #8203	; 0x200b
 8012e20:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012e24:	489f      	ldr	r0, [pc, #636]	; (80130a4 <jpeg_idct_11x11+0x3dc>)
 8012e26:	fb00 cc07 	mla	ip, r0, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012e2a:	f2a0 60f7 	subw	r0, r0, #1783	; 0x6f7
 8012e2e:	fb00 cc06 	mla	ip, r0, r6, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012e32:	eb0b 000e 	add.w	r0, fp, lr
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012e36:	ebab 0e0e 	sub.w	lr, fp, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012e3a:	12c0      	asrs	r0, r0, #11
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012e3c:	4465      	add	r5, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012e3e:	f842 0c04 	str.w	r0, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012e42:	ea4f 20ee 	mov.w	r0, lr, asr #11
 8012e46:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012e4a:	eb01 0009 	add.w	r0, r1, r9
 8012e4e:	12c0      	asrs	r0, r0, #11
 8012e50:	61d0      	str	r0, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012e52:	eba1 0009 	sub.w	r0, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012e56:	9905      	ldr	r1, [sp, #20]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012e58:	12c0      	asrs	r0, r0, #11
 8012e5a:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012e5e:	1908      	adds	r0, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012e60:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012e62:	12c0      	asrs	r0, r0, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012e64:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012e66:	63d0      	str	r0, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012e68:	9904      	ldr	r1, [sp, #16]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012e6a:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012e6e:	eb01 0008 	add.w	r0, r1, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012e72:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012e76:	9906      	ldr	r1, [sp, #24]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012e78:	12c0      	asrs	r0, r0, #11
 8012e7a:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012e7c:	ea4f 20e8 	mov.w	r0, r8, asr #11
 8012e80:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012e84:	1948      	adds	r0, r1, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012e86:	1b4d      	subs	r5, r1, r5
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8012e88:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012e8a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012e8c:	12ed      	asrs	r5, r5, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012e8e:	67d0      	str	r0, [r2, #124]	; 0x7c
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8012e90:	f645 00ad 	movw	r0, #22701	; 0x58ad
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012e94:	f8c2 50bc 	str.w	r5, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8012e98:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8012e9c:	12db      	asrs	r3, r3, #11
 8012e9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ea4:	4553      	cmp	r3, sl
 8012ea6:	f47f af20 	bne.w	8012cea <jpeg_idct_11x11+0x22>
 8012eaa:	9b08      	ldr	r3, [sp, #32]
 8012eac:	3b04      	subs	r3, #4
 8012eae:	9303      	str	r3, [sp, #12]
 8012eb0:	9b08      	ldr	r3, [sp, #32]
 8012eb2:	3328      	adds	r3, #40	; 0x28
 8012eb4:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8012eb6:	ab0c      	add	r3, sp, #48	; 0x30
 8012eb8:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012eba:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012ebc:	f245 1e7e 	movw	lr, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8012ec0:	9a02      	ldr	r2, [sp, #8]
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8012ec2:	f241 5b74 	movw	fp, #5492	; 0x1574
    outptr = output_buf[ctr] + output_col;
 8012ec6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012eca:	f244 2a58 	movw	sl, #16984	; 0x4258
    z2 = (INT32) wsptr[4];
 8012ece:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8012ed0:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8012ed2:	9109      	str	r1, [sp, #36]	; 0x24
 8012ed4:	9303      	str	r3, [sp, #12]
 8012ed6:	460b      	mov	r3, r1
 8012ed8:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012eda:	1bf0      	subs	r0, r6, r7
    z1 = (INT32) wsptr[2];
 8012edc:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 8012ede:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012ee0:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8012ee2:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012ee4:	fb0e fe00 	mul.w	lr, lr, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012ee8:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012eec:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012eee:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012ef2:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012ef4:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012ef6:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 8012efa:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 8012efc:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 8012efe:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012f00:	f642 306c 	movw	r0, #11116	; 0x2b6c
 8012f04:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012f08:	eb0e 000c 	add.w	r0, lr, ip
 8012f0c:	4a5f      	ldr	r2, [pc, #380]	; (801308c <jpeg_idct_11x11+0x3c4>)
 8012f0e:	4418      	add	r0, r3
 8012f10:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012f14:	f244 30b5 	movw	r0, #17333	; 0x43b5
 8012f18:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012f1c:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012f1e:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012f22:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012f24:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8012f26:	4a5a      	ldr	r2, [pc, #360]	; (8013090 <jpeg_idct_11x11+0x3c8>)
 8012f28:	fb02 3e04 	mla	lr, r2, r4, r3
 8012f2c:	eb0e 020c 	add.w	r2, lr, ip
 8012f30:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 8012f32:	4a58      	ldr	r2, [pc, #352]	; (8013094 <jpeg_idct_11x11+0x3cc>)
 8012f34:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012f38:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 8012f3c:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012f40:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012f44:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8012f46:	4a54      	ldr	r2, [pc, #336]	; (8013098 <jpeg_idct_11x11+0x3d0>)
 8012f48:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012f4a:	fb07 4406 	mla	r4, r7, r6, r4
 8012f4e:	1962      	adds	r2, r4, r5
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012f50:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012f54:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 8012f56:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 8012f58:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 8012f5c:	6857      	ldr	r7, [r2, #4]
    z3 = (INT32) wsptr[5];
 8012f5e:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 8012f62:	eb07 040e 	add.w	r4, r7, lr
    z4 = (INT32) wsptr[7];
 8012f66:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012f6a:	4a4c      	ldr	r2, [pc, #304]	; (801309c <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012f6c:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012f70:	eb07 090c 	add.w	r9, r7, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012f74:	4466      	add	r6, ip
 8012f76:	436e      	muls	r6, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8012f78:	f641 456a 	movw	r5, #7274	; 0x1c6a
 8012f7c:	436c      	muls	r4, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8012f7e:	eb07 0508 	add.w	r5, r7, r8
 8012f82:	fb0b fb05 	mul.w	fp, fp, r5
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012f86:	f640 35b8 	movw	r5, #3000	; 0xbb8
 8012f8a:	fb05 6909 	mla	r9, r5, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012f8e:	eb04 050b 	add.w	r5, r4, fp
 8012f92:	444d      	add	r5, r9
 8012f94:	fb02 5707 	mla	r7, r2, r7, r5
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8012f98:	eb0e 0508 	add.w	r5, lr, r8
 8012f9c:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 8012fa0:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012fa4:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012fa6:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012faa:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012fae:	4a3c      	ldr	r2, [pc, #240]	; (80130a0 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012fb0:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012fb2:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012fb6:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012fb8:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012fbc:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012fbe:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8012fc0:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012fc2:	fb0b 440c 	mla	r4, fp, ip, r4
 8012fc6:	44a1      	add	r9, r4
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012fc8:	f242 040b 	movw	r4, #8203	; 0x200b
 8012fcc:	fb04 f808 	mul.w	r8, r4, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012fd0:	4c34      	ldr	r4, [pc, #208]	; (80130a4 <jpeg_idct_11x11+0x3dc>)
 8012fd2:	fb04 880e 	mla	r8, r4, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012fd6:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 8012fda:	fb04 880c 	mla	r8, r4, ip, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012fde:	19d4      	adds	r4, r2, r7
 8012fe0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012fe2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012fe6:	4446      	add	r6, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012fe8:	5d14      	ldrb	r4, [r2, r4]
 8012fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012fec:	5414      	strb	r4, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012fee:	9a05      	ldr	r2, [sp, #20]
 8012ff0:	1bd0      	subs	r0, r2, r7
 8012ff2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012ff4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012ff8:	5c10      	ldrb	r0, [r2, r0]
 8012ffa:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012ffc:	9a04      	ldr	r2, [sp, #16]
 8012ffe:	eb02 000a 	add.w	r0, r2, sl
 8013002:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013004:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013008:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801300a:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801300c:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801300e:	eba2 0a0a 	sub.w	sl, r2, sl
 8013012:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013014:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013018:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801301c:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801301e:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013020:	1950      	adds	r0, r2, r5
 8013022:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013024:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013028:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801302a:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801302c:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801302e:	1b55      	subs	r5, r2, r5
 8013030:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013032:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013036:	5d50      	ldrb	r0, [r2, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013038:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801303a:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801303c:	eb02 0009 	add.w	r0, r2, r9
 8013040:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013042:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013046:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013048:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801304a:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801304c:	eba2 0909 	sub.w	r9, r2, r9
 8013050:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013052:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013056:	f812 0009 	ldrb.w	r0, [r2, r9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801305a:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801305c:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801305e:	1990      	adds	r0, r2, r6
 8013060:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013062:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013066:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013068:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801306a:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801306c:	1b96      	subs	r6, r2, r6
 801306e:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013070:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013074:	5d90      	ldrb	r0, [r2, r6]
 8013076:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8013078:	f645 00ad 	movw	r0, #22701	; 0x58ad
 801307c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801307e:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8013082:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013084:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8013088:	5cd3      	ldrb	r3, [r2, r3]
 801308a:	e00d      	b.n	80130a8 <jpeg_idct_11x11+0x3e0>
 801308c:	ffffc5b4 	.word	0xffffc5b4
 8013090:	ffffcf91 	.word	0xffffcf91
 8013094:	ffffdb05 	.word	0xffffdb05
 8013098:	ffffd37d 	.word	0xffffd37d
 801309c:	ffffe276 	.word	0xffffe276
 80130a0:	ffffc675 	.word	0xffffc675
 80130a4:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 80130a8:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80130aa:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 80130ac:	9b02      	ldr	r3, [sp, #8]
 80130ae:	3320      	adds	r3, #32
 80130b0:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 80130b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130b4:	4293      	cmp	r3, r2
 80130b6:	f47f af00 	bne.w	8012eba <jpeg_idct_11x11+0x1f2>
  }
}
 80130ba:	b065      	add	sp, #404	; 0x194
 80130bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080130c0 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80130c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c4:	b0eb      	sub	sp, #428	; 0x1ac
 80130c6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80130c8:	f1a2 0902 	sub.w	r9, r2, #2
 80130cc:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80130ce:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80130d2:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80130d6:	1f0b      	subs	r3, r1, #4
 80130d8:	9300      	str	r3, [sp, #0]
 80130da:	f102 030e 	add.w	r3, r2, #14
 80130de:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 80130e0:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80130e2:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80130e4:	f641 388d 	movw	r8, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80130e8:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80130ec:	f640 0a5b 	movw	sl, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80130f0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80130f4:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80130f6:	f9b9 0040 	ldrsh.w	r0, [r9, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80130fa:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80130fc:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013100:	f9b9 5020 	ldrsh.w	r5, [r9, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013104:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013106:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801310a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801310c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801310e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013110:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013112:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013116:	f9b9 c060 	ldrsh.w	ip, [r9, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801311a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801311c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013120:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013124:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 8013126:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 8013128:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801312a:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 801312e:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8013132:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8013134:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 8013138:	eb07 010c 	add.w	r1, r7, ip
 801313c:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 801313e:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8013142:	1907      	adds	r7, r0, r4
    tmp12 = z4 - z1 - z2;
 8013144:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 8013148:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 801314a:	19f1      	adds	r1, r6, r7
    tmp12 = z4 - z1 - z2;
 801314c:	1b04      	subs	r4, r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801314e:	f9b9 c030 	ldrsh.w	ip, [r9, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8013152:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8013154:	1bf1      	subs	r1, r6, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013156:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
    tmp25 = tmp10 - tmp12;
 801315a:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 801315c:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 801315e:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013160:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013164:	f9b9 0070 	ldrsh.w	r0, [r9, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 8013168:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801316a:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 801316c:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801316e:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013172:	6a12      	ldr	r2, [r2, #32]
 8013174:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013176:	9a00      	ldr	r2, [sp, #0]
 8013178:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801317a:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801317e:	9a00      	ldr	r2, [sp, #0]
 8013180:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013184:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013188:	49b6      	ldr	r1, [pc, #728]	; (8013464 <jpeg_idct_12x12+0x3a4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801318a:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801318c:	9a00      	ldr	r2, [sp, #0]
 801318e:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8013192:	197e      	adds	r6, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013194:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013196:	fb01 f00c 	mul.w	r0, r1, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801319a:	49b3      	ldr	r1, [pc, #716]	; (8013468 <jpeg_idct_12x12+0x3a8>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801319c:	eb02 0e06 	add.w	lr, r2, r6
 80131a0:	fb08 fe0e 	mul.w	lr, r8, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80131a4:	fb0a ea06 	mla	sl, sl, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80131a8:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80131ac:	eb04 080a 	add.w	r8, r4, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80131b0:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80131b4:	fb06 8807 	mla	r8, r6, r7, r8
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80131b8:	18ae      	adds	r6, r5, r2
 80131ba:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80131bc:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80131be:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80131c0:	49aa      	ldr	r1, [pc, #680]	; (801346c <jpeg_idct_12x12+0x3ac>)
 80131c2:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80131c6:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 80131c8:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80131cc:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80131d0:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80131d2:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 80131d6:	fb0a 4402 	mla	r4, sl, r2, r4
 80131da:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80131dc:	49a4      	ldr	r1, [pc, #656]	; (8013470 <jpeg_idct_12x12+0x3b0>)
 80131de:	fb01 0007 	mla	r0, r1, r7, r0
 80131e2:	49a4      	ldr	r1, [pc, #656]	; (8013474 <jpeg_idct_12x12+0x3b4>)
 80131e4:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 80131e8:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80131ea:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80131ee:	f641 077e 	movw	r7, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80131f2:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80131f4:	eb02 0e05 	add.w	lr, r2, r5
 80131f8:	fb0c fe0e 	mul.w	lr, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80131fc:	fb01 e505 	mla	r5, r1, r5, lr

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013200:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013202:	fb07 e202 	mla	r2, r7, r2, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013206:	eb01 0708 	add.w	r7, r1, r8
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801320a:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801320e:	12ff      	asrs	r7, r7, #11
 8013210:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013214:	ea4f 27e8 	mov.w	r7, r8, asr #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013218:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801321a:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801321e:	188f      	adds	r7, r1, r2
 8013220:	12ff      	asrs	r7, r7, #11
 8013222:	61df      	str	r7, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013224:	1a8f      	subs	r7, r1, r2
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013226:	9a05      	ldr	r2, [sp, #20]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013228:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801322a:	4432      	add	r2, r6
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801322c:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013230:	12d2      	asrs	r2, r2, #11
 8013232:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013234:	9a05      	ldr	r2, [sp, #20]
 8013236:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013238:	9a06      	ldr	r2, [sp, #24]
 801323a:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801323c:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801323e:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013240:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013244:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013246:	9a06      	ldr	r2, [sp, #24]
 8013248:	1b14      	subs	r4, r2, r4
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801324a:	9a02      	ldr	r2, [sp, #8]
 801324c:	442a      	add	r2, r5
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801324e:	12e4      	asrs	r4, r4, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013250:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013252:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013256:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013258:	9a02      	ldr	r2, [sp, #8]
 801325a:	1b55      	subs	r5, r2, r5
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801325c:	9a04      	ldr	r2, [sp, #16]
 801325e:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013260:	12ed      	asrs	r5, r5, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013262:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013264:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013268:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801326c:	9a04      	ldr	r2, [sp, #16]
 801326e:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013270:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013272:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013274:	454a      	cmp	r2, r9
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013276:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801327a:	f47f af32 	bne.w	80130e2 <jpeg_idct_12x12+0x22>
 801327e:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8013280:	aa0a      	add	r2, sp, #40	; 0x28
 8013282:	f1a3 0a04 	sub.w	sl, r3, #4
 8013286:	332c      	adds	r3, #44	; 0x2c
 8013288:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801328a:	f85a 3f04 	ldr.w	r3, [sl, #4]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801328e:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 8013292:	9974      	ldr	r1, [sp, #464]	; 0x1d0
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013294:	3220      	adds	r2, #32
    z2 = (INT32) wsptr[6];
 8013296:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 801329a:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 801329e:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 80132a0:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80132a2:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 80132a6:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 80132a8:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 80132ac:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80132b0:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 80132b2:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80132b4:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80132b8:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80132bc:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80132be:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 80132c2:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 80132c6:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 80132ca:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 80132cc:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 80132d0:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 80132d4:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 80132d8:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 80132dc:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 80132de:	1b0c      	subs	r4, r1, r4
    tmp25 = tmp10 - tmp12;
 80132e0:	eba6 030c 	sub.w	r3, r6, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80132e4:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z3 = (INT32) wsptr[5];
 80132e8:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp25 = tmp10 - tmp12;
 80132ec:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 80132ee:	1903      	adds	r3, r0, r4
    tmp20 = tmp10 + tmp12;
 80132f0:	eb06 070c 	add.w	r7, r6, ip
    tmp22 = tmp11 + tmp12;
 80132f4:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 80132f6:	1b03      	subs	r3, r0, r4
    z4 = (INT32) wsptr[7];
 80132f8:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 80132fc:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80132fe:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013302:	eb05 0904 	add.w	r9, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013306:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801330a:	4956      	ldr	r1, [pc, #344]	; (8013464 <jpeg_idct_12x12+0x3a4>)
 801330c:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 801330e:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8013312:	195e      	adds	r6, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013314:	eb04 0c06 	add.w	ip, r4, r6
 8013318:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801331c:	f640 0e5b 	movw	lr, #2139	; 0x85b
 8013320:	fb0e c806 	mla	r8, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013324:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8013328:	eb00 0e08 	add.w	lr, r0, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801332c:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013330:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013334:	4b4c      	ldr	r3, [pc, #304]	; (8013468 <jpeg_idct_12x12+0x3a8>)
 8013336:	fb03 f909 	mul.w	r9, r3, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801333a:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 801333e:	eb01 0609 	add.w	r6, r1, r9
 8013342:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013346:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801334a:	4446      	add	r6, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801334c:	f243 28c6 	movw	r8, #12998	; 0x32c6
 8013350:	fb08 0004 	mla	r0, r8, r4, r0
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013354:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013358:	4481      	add	r9, r0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801335a:	4845      	ldr	r0, [pc, #276]	; (8013470 <jpeg_idct_12x12+0x3b0>)
 801335c:	fb00 1103 	mla	r1, r0, r3, r1
 8013360:	4b44      	ldr	r3, [pc, #272]	; (8013474 <jpeg_idct_12x12+0x3b4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013362:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013364:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8013368:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 801336c:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 801336e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013372:	4461      	add	r1, ip
    z2 -= z3;
 8013374:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013376:	4b40      	ldr	r3, [pc, #256]	; (8013478 <jpeg_idct_12x12+0x3b8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013378:	eb04 0c05 	add.w	ip, r4, r5
 801337c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013380:	f641 087e 	movw	r8, #6270	; 0x187e
 8013384:	fb08 c404 	mla	r4, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013388:	eb07 080e 	add.w	r8, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801338c:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013390:	fb03 c505 	mla	r5, r3, r5, ip
			     & RANGE_MASK];
 8013394:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013398:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 801339a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801339e:	f81b c008 	ldrb.w	ip, [fp, r8]
 80133a2:	f803 c000 	strb.w	ip, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80133a6:	9b00      	ldr	r3, [sp, #0]
 80133a8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 80133ac:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80133ae:	9b01      	ldr	r3, [sp, #4]
 80133b0:	191f      	adds	r7, r3, r4
 80133b2:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80133b4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80133b8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 80133bc:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80133be:	9b01      	ldr	r3, [sp, #4]
 80133c0:	eba3 0804 	sub.w	r8, r3, r4
			     & RANGE_MASK];
 80133c4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80133c8:	f81b 4008 	ldrb.w	r4, [fp, r8]
 80133cc:	9b00      	ldr	r3, [sp, #0]
 80133ce:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80133d0:	9b04      	ldr	r3, [sp, #16]
 80133d2:	199c      	adds	r4, r3, r6
 80133d4:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80133d6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80133da:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80133de:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80133e0:	9b04      	ldr	r3, [sp, #16]
 80133e2:	1b9e      	subs	r6, r3, r6
 80133e4:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80133e6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80133ea:	f81b 4006 	ldrb.w	r4, [fp, r6]
 80133ee:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80133f0:	9b05      	ldr	r3, [sp, #20]
 80133f2:	eb03 0409 	add.w	r4, r3, r9
 80133f6:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80133f8:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80133fc:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8013400:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013402:	9b05      	ldr	r3, [sp, #20]
 8013404:	eba3 0009 	sub.w	r0, r3, r9
 8013408:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801340a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801340e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8013412:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013414:	9b02      	ldr	r3, [sp, #8]
 8013416:	1958      	adds	r0, r3, r5
 8013418:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801341a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801341e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8013422:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013424:	9b02      	ldr	r3, [sp, #8]
 8013426:	1b5d      	subs	r5, r3, r5
 8013428:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801342a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801342e:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8013432:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013434:	9b03      	ldr	r3, [sp, #12]
 8013436:	1858      	adds	r0, r3, r1
 8013438:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801343a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801343e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8013442:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013444:	9b03      	ldr	r3, [sp, #12]
 8013446:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8013448:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801344c:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8013450:	9b00      	ldr	r3, [sp, #0]
 8013452:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8013454:	9b07      	ldr	r3, [sp, #28]
 8013456:	4553      	cmp	r3, sl
 8013458:	f47f af17 	bne.w	801328a <jpeg_idct_12x12+0x1ca>
  }
}
 801345c:	b06b      	add	sp, #428	; 0x1ac
 801345e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013462:	bf00      	nop
 8013464:	ffffeeaf 	.word	0xffffeeaf
 8013468:	ffffde8b 	.word	0xffffde8b
 801346c:	ffffd0b0 	.word	0xffffd0b0
 8013470:	ffffea5c 	.word	0xffffea5c
 8013474:	ffffc08c 	.word	0xffffc08c
 8013478:	ffffc4df 	.word	0xffffc4df

0801347c <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801347c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013480:	b0f9      	sub	sp, #484	; 0x1e4
 8013482:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 8013484:	f1a2 0b02 	sub.w	fp, r2, #2
 8013488:	930c      	str	r3, [sp, #48]	; 0x30
 801348a:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801348c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013490:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013494:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8013498:	aa10      	add	r2, sp, #64	; 0x40
 801349a:	930f      	str	r3, [sp, #60]	; 0x3c
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801349c:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80134a0:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80134a4:	f857 1f04 	ldr.w	r1, [r7, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80134a8:	f641 6802 	movw	r8, #7682	; 0x1e02
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80134ac:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80134b0:	3204      	adds	r2, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80134b2:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80134b4:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80134b8:	f9bb 0060 	ldrsh.w	r0, [fp, #96]	; 0x60
    z1 <<= CONST_BITS;
 80134bc:	035b      	lsls	r3, r3, #13
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80134be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80134c2:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80134c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134c6:	435c      	muls	r4, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80134c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80134cc:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80134ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80134d2:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 80134d4:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 80134d6:	1a09      	subs	r1, r1, r0
 80134d8:	9104      	str	r1, [sp, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80134da:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80134de:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80134e0:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
 80134e4:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 80134e8:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 80134ec:	fb00 5004 	mla	r0, r0, r4, r5
 80134f0:	4408      	add	r0, r1
 80134f2:	9006      	str	r0, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80134f4:	f241 000c 	movw	r0, #4108	; 0x100c
 80134f8:	4360      	muls	r0, r4
 80134fa:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80134fc:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8013500:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8013502:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8013506:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801350a:	9007      	str	r0, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801350c:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8013510:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8013512:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8013514:	1a2d      	subs	r5, r5, r0
 8013516:	440d      	add	r5, r1
 8013518:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801351a:	4dd0      	ldr	r5, [pc, #832]	; (801385c <jpeg_idct_13x13+0x3e0>)
 801351c:	fb05 0004 	mla	r0, r5, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013520:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8013524:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8013526:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8013528:	9109      	str	r1, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 801352a:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801352e:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8013530:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8013534:	4371      	muls	r1, r6
 8013536:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8013538:	48c9      	ldr	r0, [pc, #804]	; (8013860 <jpeg_idct_13x13+0x3e4>)
 801353a:	4360      	muls	r0, r4
 801353c:	1ac0      	subs	r0, r0, r3
 801353e:	1a40      	subs	r0, r0, r1
 8013540:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8013542:	48c8      	ldr	r0, [pc, #800]	; (8013864 <jpeg_idct_13x13+0x3e8>)
 8013544:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013548:	f9bb 0030 	ldrsh.w	r0, [fp, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801354c:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801354e:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8013552:	930b      	str	r3, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013554:	6a3b      	ldr	r3, [r7, #32]
 8013556:	434b      	muls	r3, r1
 8013558:	9302      	str	r3, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801355a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801355c:	9902      	ldr	r1, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801355e:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013560:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
 8013564:	4368      	muls	r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013566:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801356a:	18ce      	adds	r6, r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801356c:	9001      	str	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801356e:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
 8013572:	4368      	muls	r0, r5
 8013574:	9003      	str	r0, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8013576:	f642 2050 	movw	r0, #10832	; 0x2a50
 801357a:	4370      	muls	r0, r6
 801357c:	4601      	mov	r1, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801357e:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 8013582:	4428      	add	r0, r5
 8013584:	f242 553e 	movw	r5, #9534	; 0x253e
 8013588:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 801358a:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 801358e:	eb01 0e05 	add.w	lr, r1, r5
    tmp15 = z1 + z4;
 8013592:	eb06 0900 	add.w	r9, r6, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8013596:	48b4      	ldr	r0, [pc, #720]	; (8013868 <jpeg_idct_13x13+0x3ec>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8013598:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 801359c:	44d6      	add	lr, sl
 801359e:	fb00 ee06 	mla	lr, r0, r6, lr
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80135a2:	9801      	ldr	r0, [sp, #4]
 80135a4:	4eb1      	ldr	r6, [pc, #708]	; (801386c <jpeg_idct_13x13+0x3f0>)
 80135a6:	1818      	adds	r0, r3, r0
 80135a8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80135aa:	f641 26cb 	movw	r6, #6859	; 0x1acb
 80135ae:	fb06 0603 	mla	r6, r6, r3, r0
 80135b2:	1871      	adds	r1, r6, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80135b4:	4eae      	ldr	r6, [pc, #696]	; (8013870 <jpeg_idct_13x13+0x3f4>)
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80135b6:	910d      	str	r1, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80135b8:	9901      	ldr	r1, [sp, #4]
 80135ba:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
    tmp11 += tmp14;
 80135be:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80135c0:	1941      	adds	r1, r0, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80135c2:	f244 6094 	movw	r0, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80135c6:	910e      	str	r1, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80135c8:	9903      	ldr	r1, [sp, #12]
 80135ca:	185d      	adds	r5, r3, r1
 80135cc:	49a9      	ldr	r1, [pc, #676]	; (8013874 <jpeg_idct_13x13+0x3f8>)
 80135ce:	434d      	muls	r5, r1
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80135d0:	9903      	ldr	r1, [sp, #12]
    tmp11 += tmp14;
 80135d2:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80135d4:	fb00 5501 	mla	r5, r0, r1, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80135d8:	9901      	ldr	r1, [sp, #4]
 80135da:	9803      	ldr	r0, [sp, #12]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80135dc:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80135de:	eb01 0a00 	add.w	sl, r1, r0
 80135e2:	49a5      	ldr	r1, [pc, #660]	; (8013878 <jpeg_idct_13x13+0x3fc>)
    tmp12 += tmp14;
 80135e4:	980e      	ldr	r0, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80135e6:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80135ea:	9902      	ldr	r1, [sp, #8]
    tmp12 += tmp14;
 80135ec:	4450      	add	r0, sl
    tmp13 += tmp14;
 80135ee:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 80135f0:	f640 25d5 	movw	r5, #2773	; 0xad5
 80135f4:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80135f8:	f640 2533 	movw	r5, #2611	; 0xa33
 80135fc:	fb05 9101 	mla	r1, r5, r1, r9
 8013600:	4d9e      	ldr	r5, [pc, #632]	; (801387c <jpeg_idct_13x13+0x400>)
 8013602:	fb05 1103 	mla	r1, r5, r3, r1
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8013606:	9d01      	ldr	r5, [sp, #4]
 8013608:	1aeb      	subs	r3, r5, r3
 801360a:	fb08 f803 	mul.w	r8, r8, r3
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801360e:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8013612:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8013614:	fb03 8805 	mla	r8, r3, r5, r8
 8013618:	9d03      	ldr	r5, [sp, #12]
 801361a:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
 801361e:	fb03 8805 	mla	r8, r3, r5, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013622:	9b06      	ldr	r3, [sp, #24]
 8013624:	4473      	add	r3, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8013626:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013628:	12db      	asrs	r3, r3, #11
 801362a:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801362e:	9b06      	ldr	r3, [sp, #24]
 8013630:	eba3 0e0e 	sub.w	lr, r3, lr
 8013634:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8013638:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801363c:	9b08      	ldr	r3, [sp, #32]
 801363e:	4433      	add	r3, r6
 8013640:	12db      	asrs	r3, r3, #11
 8013642:	61d3      	str	r3, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013644:	9b08      	ldr	r3, [sp, #32]
 8013646:	1b9e      	subs	r6, r3, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013648:	9b07      	ldr	r3, [sp, #28]
 801364a:	4403      	add	r3, r0
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801364c:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801364e:	12db      	asrs	r3, r3, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013650:	f8c2 615c 	str.w	r6, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013654:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013656:	9b07      	ldr	r3, [sp, #28]
 8013658:	1a18      	subs	r0, r3, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801365a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801365c:	4453      	add	r3, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801365e:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013660:	12db      	asrs	r3, r3, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013662:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013666:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801366a:	eba3 0a0a 	sub.w	sl, r3, sl
 801366e:	ea4f 25ea 	mov.w	r5, sl, asr #11
 8013672:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013678:	440b      	add	r3, r1
 801367a:	12db      	asrs	r3, r3, #11
 801367c:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801367e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013680:	1a59      	subs	r1, r3, r1
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013684:	444b      	add	r3, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013686:	12c9      	asrs	r1, r1, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013688:	12db      	asrs	r3, r3, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801368a:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 801368e:	9905      	ldr	r1, [sp, #20]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013690:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013696:	eba3 0909 	sub.w	r9, r3, r9
 801369a:	ea4f 23e9 	mov.w	r3, r9, asr #11
 801369e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80136a2:	9b04      	ldr	r3, [sp, #16]
 80136a4:	1b1c      	subs	r4, r3, r4
 80136a6:	f642 5341 	movw	r3, #11585	; 0x2d41
 80136aa:	fb03 1404 	mla	r4, r3, r4, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80136ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 80136b0:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80136b2:	455b      	cmp	r3, fp
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 80136b4:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80136b8:	f47f aef0 	bne.w	801349c <jpeg_idct_13x13+0x20>
 80136bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 80136be:	ac10      	add	r4, sp, #64	; 0x40
 80136c0:	3b04      	subs	r3, #4
 80136c2:	9303      	str	r3, [sp, #12]
 80136c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136c6:	3330      	adds	r3, #48	; 0x30
 80136c8:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80136ca:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80136cc:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 80136d0:	6920      	ldr	r0, [r4, #16]
    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80136d2:	f642 2b50 	movw	fp, #10832	; 0x2a50
    outptr = output_buf[ctr] + output_col;
 80136d6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80136da:	f641 6802 	movw	r8, #7682	; 0x1e02
    z4 = (INT32) wsptr[6];
 80136de:	69a1      	ldr	r1, [r4, #24]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80136e0:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 80136e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80136e4:	9303      	str	r3, [sp, #12]
 80136e6:	4613      	mov	r3, r2
 80136e8:	9a82      	ldr	r2, [sp, #520]	; 0x208
    z2 = (INT32) wsptr[2];
 80136ea:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 80136ee:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80136f0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80136f4:	3310      	adds	r3, #16
 80136f6:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 80136f8:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 80136fa:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80136fc:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 80136fe:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8013700:	f240 3119 	movw	r1, #793	; 0x319
 8013704:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8013706:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8013708:	4341      	muls	r1, r0
 801370a:	9802      	ldr	r0, [sp, #8]
 801370c:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8013710:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8013714:	fb00 500e 	mla	r0, r0, lr, r5
 8013718:	4408      	add	r0, r1
 801371a:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801371c:	f241 000c 	movw	r0, #4108	; 0x100c
 8013720:	fb00 f00e 	mul.w	r0, r0, lr
 8013724:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8013726:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801372a:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801372c:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8013730:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8013734:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8013736:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801373a:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801373e:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8013740:	1a2d      	subs	r5, r5, r0
 8013742:	440d      	add	r5, r1
 8013744:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8013746:	4d45      	ldr	r5, [pc, #276]	; (801385c <jpeg_idct_13x13+0x3e0>)
 8013748:	fb05 000e 	mla	r0, r5, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801374c:	f242 553e 	movw	r5, #9534	; 0x253e
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8013750:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8013752:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8013754:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8013756:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801375a:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801375c:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8013760:	4371      	muls	r1, r6
 8013762:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8013766:	483e      	ldr	r0, [pc, #248]	; (8013860 <jpeg_idct_13x13+0x3e4>)
 8013768:	fb00 f00e 	mul.w	r0, r0, lr
 801376c:	1ac0      	subs	r0, r0, r3
 801376e:	1a40      	subs	r0, r0, r1
 8013770:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8013772:	483c      	ldr	r0, [pc, #240]	; (8013864 <jpeg_idct_13x13+0x3e8>)
 8013774:	fb00 330e 	mla	r3, r0, lr, r3
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8013778:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801377c:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 801377e:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8013782:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8013784:	1808      	adds	r0, r1, r0
    z2 = (INT32) wsptr[3];
 8013786:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801378a:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 801378c:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8013790:	18ce      	adds	r6, r1, r3
    tmp15 = z1 + z4;
 8013792:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8013796:	4834      	ldr	r0, [pc, #208]	; (8013868 <jpeg_idct_13x13+0x3ec>)
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8013798:	fb0b fb06 	mul.w	fp, fp, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 801379c:	4e33      	ldr	r6, [pc, #204]	; (801386c <jpeg_idct_13x13+0x3f0>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801379e:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 80137a2:	eb0b 0705 	add.w	r7, fp, r5
 80137a6:	4457      	add	r7, sl
 80137a8:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80137ac:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    tmp10 = tmp11 + tmp12 + tmp13 -
 80137b0:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80137b2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 80137b6:	1818      	adds	r0, r3, r0
 80137b8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80137ba:	f641 26cb 	movw	r6, #6859	; 0x1acb
 80137be:	fb06 0603 	mla	r6, r6, r3, r0
 80137c2:	44b3      	add	fp, r6
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80137c4:	4e2a      	ldr	r6, [pc, #168]	; (8013870 <jpeg_idct_13x13+0x3f4>)
 80137c6:	fb06 0007 	mla	r0, r6, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80137ca:	f606 5611 	addw	r6, r6, #3345	; 0xd11
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80137ce:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80137d2:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80137d4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80137d8:	195d      	adds	r5, r3, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80137da:	900c      	str	r0, [sp, #48]	; 0x30
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80137dc:	4375      	muls	r5, r6
    tmp11 += tmp14;
 80137de:	eb0b 0605 	add.w	r6, fp, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80137e2:	f244 6b94 	movw	fp, #18068	; 0x4694
 80137e6:	fb0b 5507 	mla	r5, fp, r7, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80137ea:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 80137ee:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80137f2:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80137f4:	eb07 0a00 	add.w	sl, r7, r0
 80137f8:	481f      	ldr	r0, [pc, #124]	; (8013878 <jpeg_idct_13x13+0x3fc>)
 80137fa:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp14;
 80137fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013800:	4450      	add	r0, sl
    tmp13 += tmp14;
 8013802:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8013804:	f640 25d5 	movw	r5, #2773	; 0xad5
 8013808:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801380c:	f640 2533 	movw	r5, #2611	; 0xa33
 8013810:	fb05 9101 	mla	r1, r5, r1, r9
 8013814:	4d19      	ldr	r5, [pc, #100]	; (801387c <jpeg_idct_13x13+0x400>)
 8013816:	fb05 1103 	mla	r1, r5, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801381a:	1afb      	subs	r3, r7, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801381c:	f854 5c04 	ldr.w	r5, [r4, #-4]
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8013820:	fb08 f803 	mul.w	r8, r8, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8013824:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8013828:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801382a:	fb03 8807 	mla	r8, r3, r7, r8
 801382e:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013832:	9f82      	ldr	r7, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8013834:	fb03 8805 	mla	r8, r3, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013838:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801383a:	9b04      	ldr	r3, [sp, #16]
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801383c:	44c1      	add	r9, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801383e:	442b      	add	r3, r5
 8013840:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			     & RANGE_MASK];
 8013842:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013846:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801384a:	55eb      	strb	r3, [r5, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801384c:	9b04      	ldr	r3, [sp, #16]
 801384e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013850:	1b5f      	subs	r7, r3, r5
			     & RANGE_MASK];
 8013852:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013856:	f81c 3007 	ldrb.w	r3, [ip, r7]
 801385a:	e011      	b.n	8013880 <jpeg_idct_13x13+0x404>
 801385c:	ffffd7ee 	.word	0xffffd7ee
 8013860:	fffffa8c 	.word	0xfffffa8c
 8013864:	ffffe64b 	.word	0xffffe64b
 8013868:	ffffbf5b 	.word	0xffffbf5b
 801386c:	fffff52b 	.word	0xfffff52b
 8013870:	ffffcdb1 	.word	0xffffcdb1
 8013874:	ffffdac2 	.word	0xffffdac2
 8013878:	ffffeaf8 	.word	0xffffeaf8
 801387c:	fffff116 	.word	0xfffff116
 8013880:	7313      	strb	r3, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013882:	9b06      	ldr	r3, [sp, #24]
 8013884:	4433      	add	r3, r6
			     & RANGE_MASK];
 8013886:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801388a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801388e:	7053      	strb	r3, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013890:	9b06      	ldr	r3, [sp, #24]
 8013892:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8013894:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013898:	f81c 3006 	ldrb.w	r3, [ip, r6]
 801389c:	72d3      	strb	r3, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801389e:	9b05      	ldr	r3, [sp, #20]
 80138a0:	4403      	add	r3, r0
			     & RANGE_MASK];
 80138a2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80138a6:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80138aa:	7093      	strb	r3, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80138ac:	9b05      	ldr	r3, [sp, #20]
 80138ae:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 80138b0:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80138b4:	f81c 3000 	ldrb.w	r3, [ip, r0]
 80138b8:	7293      	strb	r3, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138ba:	9b08      	ldr	r3, [sp, #32]
 80138bc:	4453      	add	r3, sl
			     & RANGE_MASK];
 80138be:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138c2:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80138c6:	70d3      	strb	r3, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138c8:	9b08      	ldr	r3, [sp, #32]
 80138ca:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 80138ce:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138d2:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80138d6:	7253      	strb	r3, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80138d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138da:	440b      	add	r3, r1
			     & RANGE_MASK];
 80138dc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80138e0:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80138e4:	7113      	strb	r3, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80138e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138e8:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 80138ea:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80138ee:	f81c 3001 	ldrb.w	r3, [ip, r1]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80138f2:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80138f6:	7213      	strb	r3, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80138f8:	9b07      	ldr	r3, [sp, #28]
 80138fa:	444b      	add	r3, r9
			     & RANGE_MASK];
 80138fc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013900:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013904:	7153      	strb	r3, [r2, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013906:	9b07      	ldr	r3, [sp, #28]
 8013908:	eba3 0909 	sub.w	r9, r3, r9
			     & RANGE_MASK];
 801390c:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013910:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013914:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8013916:	9b01      	ldr	r3, [sp, #4]
 8013918:	eba3 030e 	sub.w	r3, r3, lr
 801391c:	434b      	muls	r3, r1
 801391e:	9902      	ldr	r1, [sp, #8]
 8013920:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8013924:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8013928:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801392c:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 801392e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013930:	9a03      	ldr	r2, [sp, #12]
 8013932:	4293      	cmp	r3, r2
 8013934:	f47f aec9 	bne.w	80136ca <jpeg_idct_13x13+0x24e>
  }
}
 8013938:	b079      	add	sp, #484	; 0x1e4
 801393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801393e:	bf00      	nop

08013940 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013944:	b0ff      	sub	sp, #508	; 0x1fc
 8013946:	f1a2 0a02 	sub.w	sl, r2, #2
 801394a:	930a      	str	r3, [sp, #40]	; 0x28
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801394c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013950:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8013952:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013956:	1f03      	subs	r3, r0, #4
 8013958:	9301      	str	r3, [sp, #4]
 801395a:	f102 030e 	add.w	r3, r2, #14
 801395e:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8013960:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013962:	9901      	ldr	r1, [sp, #4]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013964:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013968:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801396c:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013970:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013974:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013976:	9101      	str	r1, [sp, #4]
 8013978:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801397a:	9a01      	ldr	r2, [sp, #4]
 801397c:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
 8013980:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 8013984:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013986:	9801      	ldr	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013988:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801398a:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801398e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013992:	fb01 f602 	mul.w	r6, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013996:	f640 2112 	movw	r1, #2578	; 0xa12
 801399a:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801399e:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 80139a2:	19a7      	adds	r7, r4, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80139a4:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80139a6:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 80139a8:	eb04 050c 	add.w	r5, r4, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80139ac:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80139b0:	1ab6      	subs	r6, r6, r2
    tmp12 = z1 - z4;
 80139b2:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80139b4:	eba4 0246 	sub.w	r2, r4, r6, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80139b8:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80139bc:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80139c0:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80139c2:	9a01      	ldr	r2, [sp, #4]
 80139c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80139c6:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80139c8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80139cc:	48d2      	ldr	r0, [pc, #840]	; (8013d18 <jpeg_idct_14x14+0x3d8>)
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80139ce:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80139d0:	1916      	adds	r6, r2, r4
 80139d2:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80139d6:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 80139da:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80139de:	fb00 6604 	mla	r6, r0, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80139e2:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 80139e6:	4344      	muls	r4, r0
    tmp20 = tmp10 + tmp13;
 80139e8:	eb07 000c 	add.w	r0, r7, ip
 80139ec:	9002      	str	r0, [sp, #8]
    tmp26 = tmp10 - tmp13;
 80139ee:	eba7 000c 	sub.w	r0, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80139f2:	fb0e 4202 	mla	r2, lr, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139f6:	f9ba 4010 	ldrsh.w	r4, [sl, #16]
    tmp26 = tmp10 - tmp13;
 80139fa:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 80139fc:	19a8      	adds	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80139fe:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8013a02:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8013a04:	1ba8      	subs	r0, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013a06:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8013a0a:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8013a0c:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 8013a0e:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013a10:	f9ba 1070 	ldrsh.w	r1, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 8013a14:	9006      	str	r0, [sp, #24]
    tmp24 = tmp12 - tmp15;
 8013a16:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013a18:	9a01      	ldr	r2, [sp, #4]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013a1a:	48c0      	ldr	r0, [pc, #768]	; (8013d1c <jpeg_idct_14x14+0x3dc>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013a1c:	6a12      	ldr	r2, [r2, #32]
 8013a1e:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013a20:	9a01      	ldr	r2, [sp, #4]
 8013a22:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8013a24:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013a26:	9a01      	ldr	r2, [sp, #4]
 8013a28:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013a2c:	eb04 0907 	add.w	r9, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013a30:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013a32:	9a01      	ldr	r2, [sp, #4]
 8013a34:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp14 = z1 + z3;
 8013a38:	eb04 0c06 	add.w	ip, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013a3c:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013a3e:	f642 21b7 	movw	r1, #10935	; 0x2ab7
 8013a42:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013a46:	f242 6152 	movw	r1, #9810	; 0x2652
 8013a4a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013a4e:	49b4      	ldr	r1, [pc, #720]	; (8013d20 <jpeg_idct_14x14+0x3e0>)
 8013a50:	eb09 0e05 	add.w	lr, r9, r5
 8013a54:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8013a58:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013a5c:	f641 0114 	movw	r1, #6164	; 0x1814
 8013a60:	fb01 f10c 	mul.w	r1, r1, ip
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8013a64:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013a68:	9108      	str	r1, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013a6a:	fb00 1104 	mla	r1, r0, r4, r1
    z1    -= z2;
 8013a6e:	1be4      	subs	r4, r4, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013a70:	48ac      	ldr	r0, [pc, #688]	; (8013d24 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013a72:	fb08 f804 	mul.w	r8, r8, r4
 8013a76:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8013a7a:	4441      	add	r1, r8
 8013a7c:	9109      	str	r1, [sp, #36]	; 0x24
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8013a7e:	19b9      	adds	r1, r7, r6
 8013a80:	fb0c f101 	mul.w	r1, ip, r1
 8013a84:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013a88:	fb00 1c07 	mla	ip, r0, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013a8c:	48a6      	ldr	r0, [pc, #664]	; (8013d28 <jpeg_idct_14x14+0x3e8>)
 8013a8e:	fb00 1106 	mla	r1, r0, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013a92:	44e1      	add	r9, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013a94:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013a98:	48a4      	ldr	r0, [pc, #656]	; (8013d2c <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013a9a:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013a9c:	1bf5      	subs	r5, r6, r7
 8013a9e:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013aa2:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8013aa6:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013aa8:	fb00 cc06 	mla	ip, r0, r6, ip
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 8013aac:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013aae:	9a02      	ldr	r2, [sp, #8]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8013ab0:	00b6      	lsls	r6, r6, #2
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013ab2:	9808      	ldr	r0, [sp, #32]
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013ab4:	4472      	add	r2, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013ab6:	4484      	add	ip, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013ab8:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013abc:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013abe:	fb00 5507 	mla	r5, r0, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013ac2:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013ac6:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013ac8:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013aca:	eba2 0e0e 	sub.w	lr, r2, lr
 8013ace:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8013ad2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013ad6:	9a04      	ldr	r2, [sp, #16]
 8013ad8:	444a      	add	r2, r9
 8013ada:	12d2      	asrs	r2, r2, #11
 8013adc:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013ade:	9a04      	ldr	r2, [sp, #16]
 8013ae0:	eba2 0909 	sub.w	r9, r2, r9
 8013ae4:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8013ae8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013aec:	9a06      	ldr	r2, [sp, #24]
 8013aee:	440a      	add	r2, r1
 8013af0:	12d2      	asrs	r2, r2, #11
 8013af2:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013af4:	9a06      	ldr	r2, [sp, #24]
 8013af6:	1a51      	subs	r1, r2, r1
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8013af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013afa:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013afe:	12c9      	asrs	r1, r1, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8013b00:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8013b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013b04:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8013b08:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013b0c:	9a07      	ldr	r2, [sp, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013b0e:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013b10:	4462      	add	r2, ip
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8013b12:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013b16:	12d2      	asrs	r2, r2, #11
 8013b18:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013b1a:	9a07      	ldr	r2, [sp, #28]
 8013b1c:	eba2 0c0c 	sub.w	ip, r2, ip
 8013b20:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8013b24:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013b28:	9a05      	ldr	r2, [sp, #20]
 8013b2a:	442a      	add	r2, r5
 8013b2c:	12d2      	asrs	r2, r2, #11
 8013b2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013b32:	9a05      	ldr	r2, [sp, #20]
 8013b34:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013b36:	9a03      	ldr	r2, [sp, #12]
 8013b38:	440a      	add	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013b3a:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013b3c:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013b3e:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013b42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013b46:	9a03      	ldr	r2, [sp, #12]
 8013b48:	1a52      	subs	r2, r2, r1
 8013b4a:	12d2      	asrs	r2, r2, #11
 8013b4c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b52:	4552      	cmp	r2, sl
 8013b54:	f47f af05 	bne.w	8013962 <jpeg_idct_14x14+0x22>
 8013b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b5a:	3b04      	subs	r3, #4
 8013b5c:	9302      	str	r3, [sp, #8]
 8013b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b60:	3334      	adds	r3, #52	; 0x34
 8013b62:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8013b64:	ab0e      	add	r3, sp, #56	; 0x38
 8013b66:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013b68:	9b02      	ldr	r3, [sp, #8]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013b6a:	f640 2012 	movw	r0, #2578	; 0xa12
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013b6e:	f641 4437 	movw	r4, #7223	; 0x1c37

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013b72:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8013b76:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8013b7a:	920c      	str	r2, [sp, #48]	; 0x30
 8013b7c:	9302      	str	r3, [sp, #8]
 8013b7e:	4613      	mov	r3, r2
 8013b80:	9a88      	ldr	r2, [sp, #544]	; 0x220
 8013b82:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b84:	9b01      	ldr	r3, [sp, #4]
    z4 = (INT32) wsptr[4];
 8013b86:	691e      	ldr	r6, [r3, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b88:	6819      	ldr	r1, [r3, #0]
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013b8a:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013b8e:	fb00 f706 	mul.w	r7, r0, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013b92:	4861      	ldr	r0, [pc, #388]	; (8013d18 <jpeg_idct_14x14+0x3d8>)
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b94:	3110      	adds	r1, #16
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013b96:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013b98:	4366      	muls	r6, r4
    tmp10 = z1 + z2;
 8013b9a:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013b9e:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 8013ba0:	ebc6 3441 	rsb	r4, r6, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013ba4:	1b9b      	subs	r3, r3, r6
    tmp11 = z1 + z3;
 8013ba6:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013baa:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013bae:	005b      	lsls	r3, r3, #1
 8013bb0:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8013bb4:	9303      	str	r3, [sp, #12]
    z1 = (INT32) wsptr[2];
 8013bb6:	9b01      	ldr	r3, [sp, #4]
 8013bb8:	689e      	ldr	r6, [r3, #8]
    z2 = (INT32) wsptr[6];
 8013bba:	699b      	ldr	r3, [r3, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013bbc:	18f1      	adds	r1, r6, r3
 8013bbe:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8013bc0:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8013bc4:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013bc8:	fb00 1103 	mla	r1, r0, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8013bcc:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8013bd0:	4343      	muls	r3, r0

    tmp20 = tmp10 + tmp13;
    tmp26 = tmp10 - tmp13;
 8013bd2:	ebac 0007 	sub.w	r0, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013bd6:	fb0e 3306 	mla	r3, lr, r6, r3
    tmp20 = tmp10 + tmp13;
 8013bda:	eb0c 0607 	add.w	r6, ip, r7
    tmp26 = tmp10 - tmp13;
 8013bde:	9004      	str	r0, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8013be0:	1868      	adds	r0, r5, r1
    tmp25 = tmp11 - tmp14;
 8013be2:	1a69      	subs	r1, r5, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013be4:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8013be8:	9005      	str	r0, [sp, #20]
    tmp25 = tmp11 - tmp14;
 8013bea:	9106      	str	r1, [sp, #24]
    tmp22 = tmp12 + tmp15;
 8013bec:	18e1      	adds	r1, r4, r3
    tmp24 = tmp12 - tmp15;
 8013bee:	1ae3      	subs	r3, r4, r3
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013bf0:	484a      	ldr	r0, [pc, #296]	; (8013d1c <jpeg_idct_14x14+0x3dc>)
    tmp22 = tmp12 + tmp15;
 8013bf2:	9107      	str	r1, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8013bf4:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[3];
 8013bf6:	9901      	ldr	r1, [sp, #4]
    z1 = (INT32) wsptr[1];
 8013bf8:	9b01      	ldr	r3, [sp, #4]
    z2 = (INT32) wsptr[3];
 8013bfa:	f8d1 800c 	ldr.w	r8, [r1, #12]
    z1 = (INT32) wsptr[1];
 8013bfe:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8013c00:	f8d1 c014 	ldr.w	ip, [r1, #20]
    z4 = (INT32) wsptr[7];
 8013c04:	f8d1 901c 	ldr.w	r9, [r1, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013c08:	eb03 0a08 	add.w	sl, r3, r8
 8013c0c:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8013c10:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013c14:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013c18:	f242 6152 	movw	r1, #9810	; 0x2652
 8013c1c:	fb01 f405 	mul.w	r4, r1, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013c20:	493f      	ldr	r1, [pc, #252]	; (8013d20 <jpeg_idct_14x14+0x3e0>)
 8013c22:	eb0a 0704 	add.w	r7, sl, r4
 8013c26:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8013c2a:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013c2e:	f641 0114 	movw	r1, #6164	; 0x1814
 8013c32:	4369      	muls	r1, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013c34:	f46f 65a2 	mvn.w	r5, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013c38:	9109      	str	r1, [sp, #36]	; 0x24
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013c3a:	fb00 1103 	mla	r1, r0, r3, r1
    z1    -= z2;
 8013c3e:	eba3 0308 	sub.w	r3, r3, r8
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013c42:	4838      	ldr	r0, [pc, #224]	; (8013d24 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013c44:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013c48:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013c4c:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013c50:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 8013c52:	4471      	add	r1, lr
 8013c54:	910a      	str	r1, [sp, #40]	; 0x28
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013c56:	eb08 010c 	add.w	r1, r8, ip
 8013c5a:	4369      	muls	r1, r5
 8013c5c:	eba1 3149 	sub.w	r1, r1, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013c60:	fb00 1508 	mla	r5, r0, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013c64:	4830      	ldr	r0, [pc, #192]	; (8013d28 <jpeg_idct_14x14+0x3e8>)
 8013c66:	fb00 110c 	mla	r1, r0, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013c6a:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013c6c:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013c70:	482e      	ldr	r0, [pc, #184]	; (8013d2c <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013c72:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013c74:	ebac 0408 	sub.w	r4, ip, r8
 8013c78:	436c      	muls	r4, r5
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013c7a:	910b      	str	r1, [sp, #44]	; 0x2c
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013c7c:	f241 5199 	movw	r1, #5529	; 0x1599
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013c80:	eb04 3549 	add.w	r5, r4, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013c84:	eb03 3949 	add.w	r9, r3, r9, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013c88:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013c8a:	fb00 550c 	mla	r5, r0, ip, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013c8e:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013c90:	9809      	ldr	r0, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8013c92:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013c96:	fb01 4408 	mla	r4, r1, r8, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013c9a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013c9e:	4405      	add	r5, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ca0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013ca4:	9988      	ldr	r1, [sp, #544]	; 0x220
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013ca6:	4474      	add	r4, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ca8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013caa:	5443      	strb	r3, [r0, r1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013cac:	f81b 3006 	ldrb.w	r3, [fp, r6]
 8013cb0:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013cb2:	9b05      	ldr	r3, [sp, #20]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013cb6:	4453      	add	r3, sl
			     & RANGE_MASK];
 8013cb8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013cbc:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013cc0:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013cc2:	9b05      	ldr	r3, [sp, #20]
 8013cc4:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8013cc8:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013ccc:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8013cd0:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013cd2:	9b07      	ldr	r3, [sp, #28]
 8013cd4:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013cd6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013cda:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013cde:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013ce0:	9b07      	ldr	r3, [sp, #28]
 8013ce2:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013ce4:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013ce8:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8013cec:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013cee:	9b03      	ldr	r3, [sp, #12]
 8013cf0:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013cf2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013cf6:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013cfa:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013cfc:	9b03      	ldr	r3, [sp, #12]
 8013cfe:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013d02:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013d06:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8013d0a:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013d0c:	9b08      	ldr	r3, [sp, #32]
 8013d0e:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013d10:	f3c3 4389 	ubfx	r3, r3, #18, #10
 8013d14:	e00c      	b.n	8013d30 <jpeg_idct_14x14+0x3f0>
 8013d16:	bf00      	nop
 8013d18:	ffffc8fc 	.word	0xffffc8fc
 8013d1c:	ffffde0b 	.word	0xffffde0b
 8013d20:	ffffdbf0 	.word	0xffffdbf0
 8013d24:	fffff26e 	.word	0xfffff26e
 8013d28:	ffffb409 	.word	0xffffb409
 8013d2c:	ffffc9e6 	.word	0xffffc9e6
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013d30:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013d34:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013d36:	9b08      	ldr	r3, [sp, #32]
 8013d38:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013d3a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013d3e:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8013d42:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013d44:	9b06      	ldr	r3, [sp, #24]
 8013d46:	4423      	add	r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013d48:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013d4c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013d50:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013d52:	9b06      	ldr	r3, [sp, #24]
 8013d54:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013d56:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013d5a:	f81b 3004 	ldrb.w	r3, [fp, r4]
 8013d5e:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013d60:	9b04      	ldr	r3, [sp, #16]
 8013d62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d64:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013d66:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013d6a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013d6e:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013d70:	9b04      	ldr	r3, [sp, #16]
 8013d72:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013d74:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013d78:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8013d7c:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 8013d7e:	9b01      	ldr	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8013d80:	9a02      	ldr	r2, [sp, #8]
    wsptr += 8;		/* advance pointer to next row */
 8013d82:	3320      	adds	r3, #32
 8013d84:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8013d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	f47f aeed 	bne.w	8013b68 <jpeg_idct_14x14+0x228>
  }
}
 8013d8e:	b07f      	add	sp, #508	; 0x1fc
 8013d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013d94 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d98:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8013d9c:	f1a2 0b02 	sub.w	fp, r2, #2
 8013da0:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013da2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013da6:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8013da8:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013dac:	1f03      	subs	r3, r0, #4
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	f102 030e 	add.w	r3, r2, #14
 8013db4:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8013db6:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013db8:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8013dba:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013dbe:	f93b 5f02 	ldrsh.w	r5, [fp, #2]!
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8013dc2:	f241 0971 	movw	r9, #4209	; 0x1071
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013dc6:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013dca:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013dce:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013dd2:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013dd4:	9100      	str	r1, [sp, #0]
 8013dd6:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013dd8:	9a00      	ldr	r2, [sp, #0]
 8013dda:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 8013dde:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8013de0:	036d      	lsls	r5, r5, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013de2:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013de4:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013de6:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013de8:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013dec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013df0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8013df4:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013df6:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8013dfa:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013dfe:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8013e00:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8013e04:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8013e08:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8013e0c:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8013e0e:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8013e12:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8013e14:	eba4 040c 	sub.w	r4, r4, ip
 8013e18:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 8013e1c:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8013e1e:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8013e20:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8013e24:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8013e26:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8013e2a:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 8013e2e:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8013e32:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013e36:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8013e38:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013e3c:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8013e3e:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8013e42:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013e44:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8013e46:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8013e4a:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8013e4e:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8013e50:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8013e52:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013e56:	443c      	add	r4, r7
 8013e58:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8013e5c:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8013e60:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013e64:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8013e66:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8013e68:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8013e6a:	f641 114c 	movw	r1, #6476	; 0x194c
 8013e6e:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8013e70:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8013e74:	4417      	add	r7, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8013e76:	4369      	muls	r1, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 8013e78:	1ab2      	subs	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013e7a:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 8013e7e:	1878      	adds	r0, r7, r1
    tmp24 = tmp13 - tmp10 + tmp11;
 8013e80:	440a      	add	r2, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 8013e82:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8013e84:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8013e86:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 8013e8a:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013e8c:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp11 += tmp11;
 8013e90:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8013e92:	9908      	ldr	r1, [sp, #32]
 8013e94:	9a01      	ldr	r2, [sp, #4]
 8013e96:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013e98:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8013e9c:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013e9e:	9a00      	ldr	r2, [sp, #0]
 8013ea0:	6a12      	ldr	r2, [r2, #32]
 8013ea2:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ea4:	9900      	ldr	r1, [sp, #0]
 8013ea6:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8013ea8:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013eaa:	9900      	ldr	r1, [sp, #0]
 8013eac:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013eb0:	9800      	ldr	r0, [sp, #0]
 8013eb2:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013eb6:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013eb8:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8013ebc:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8013ec0:	48d2      	ldr	r0, [pc, #840]	; (801420c <jpeg_idct_15x15+0x478>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013ec2:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8013ec6:	434e      	muls	r6, r1
    tmp13 = z2 - z4;
 8013ec8:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8013ecc:	1917      	adds	r7, r2, r4
 8013ece:	fb0c f707 	mul.w	r7, ip, r7
    z2 = z1 - z4;
 8013ed2:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8013ed6:	fb09 7902 	mla	r9, r9, r2, r7
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8013eda:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8013ede:	48cc      	ldr	r0, [pc, #816]	; (8014210 <jpeg_idct_15x15+0x47c>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8013ee0:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8013ee4:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8013ee6:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8013eea:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8013eec:	48c9      	ldr	r0, [pc, #804]	; (8014214 <jpeg_idct_15x15+0x480>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013eee:	fb08 480e 	mla	r8, r8, lr, r4
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8013ef2:	fb01 fc0c 	mul.w	ip, r1, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8013ef6:	eb02 010e 	add.w	r1, r2, lr
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8013efa:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013efc:	f200 7071 	addw	r0, r0, #1905	; 0x771
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8013f00:	ebac 0c06 	sub.w	ip, ip, r6
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013f04:	fb00 4402 	mla	r4, r0, r2, r4
 8013f08:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8013f0a:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8013f0e:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8013f10:	f241 2068 	movw	r0, #4712	; 0x1268
 8013f14:	4341      	muls	r1, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8013f16:	f640 7039 	movw	r0, #3897	; 0xf39
 8013f1a:	fb00 1202 	mla	r2, r0, r2, r1
 8013f1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f20:	1b92      	subs	r2, r2, r6
 8013f22:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8013f24:	48bc      	ldr	r0, [pc, #752]	; (8014218 <jpeg_idct_15x15+0x484>)
 8013f26:	fb00 110e 	mla	r1, r0, lr, r1
 8013f2a:	4431      	add	r1, r6
 8013f2c:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013f2e:	9902      	ldr	r1, [sp, #8]
 8013f30:	4441      	add	r1, r8
 8013f32:	12c9      	asrs	r1, r1, #11
 8013f34:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013f38:	9902      	ldr	r1, [sp, #8]
 8013f3a:	eba1 0808 	sub.w	r8, r1, r8
 8013f3e:	ea4f 21e8 	mov.w	r1, r8, asr #11
 8013f42:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013f46:	9906      	ldr	r1, [sp, #24]
 8013f48:	4449      	add	r1, r9
 8013f4a:	12c9      	asrs	r1, r1, #11
 8013f4c:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013f4e:	9906      	ldr	r1, [sp, #24]
 8013f50:	eba1 0909 	sub.w	r9, r1, r9
 8013f54:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8013f58:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f5e:	4461      	add	r1, ip
 8013f60:	12c9      	asrs	r1, r1, #11
 8013f62:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f66:	eba1 0c0c 	sub.w	ip, r1, ip
 8013f6a:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8013f6e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013f72:	9903      	ldr	r1, [sp, #12]
 8013f74:	4411      	add	r1, r2
 8013f76:	12c9      	asrs	r1, r1, #11
 8013f78:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013f7a:	9903      	ldr	r1, [sp, #12]
 8013f7c:	1a8a      	subs	r2, r1, r2
 8013f7e:	12d2      	asrs	r2, r2, #11
 8013f80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013f84:	9a07      	ldr	r2, [sp, #28]
 8013f86:	443a      	add	r2, r7
 8013f88:	12d2      	asrs	r2, r2, #11
 8013f8a:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013f8c:	9a07      	ldr	r2, [sp, #28]
 8013f8e:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013f90:	9a04      	ldr	r2, [sp, #16]
 8013f92:	442a      	add	r2, r5
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013f94:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013f96:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013f98:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013f9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013fa0:	9a04      	ldr	r2, [sp, #16]
 8013fa2:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013fa4:	9a05      	ldr	r2, [sp, #20]
 8013fa6:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013fa8:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013faa:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013fac:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013fb0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013fb4:	9a05      	ldr	r2, [sp, #20]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8013fb6:	9908      	ldr	r1, [sp, #32]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013fb8:	1b14      	subs	r4, r2, r4
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8013fba:	9a01      	ldr	r2, [sp, #4]
 8013fbc:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013fc0:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8013fc2:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013fc4:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8013fc8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013fce:	455a      	cmp	r2, fp
 8013fd0:	f47f aef2 	bne.w	8013db8 <jpeg_idct_15x15+0x24>
 8013fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fd6:	f1a3 0904 	sub.w	r9, r3, #4
 8013fda:	3338      	adds	r3, #56	; 0x38
 8013fdc:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 8013fde:	ab0e      	add	r3, sp, #56	; 0x38
 8013fe0:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013fe2:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8013fe6:	f640 51fc 	movw	r1, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 8013fea:	9a90      	ldr	r2, [sp, #576]	; 0x240
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8013fec:	f44f 74bb 	mov.w	r4, #374	; 0x176
    outptr = output_buf[ctr] + output_col;
 8013ff0:	930c      	str	r3, [sp, #48]	; 0x30
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8013ff2:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8013ff6:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013ff8:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8013ffa:	f241 0871 	movw	r8, #4209	; 0x1071
    z2 = (INT32) wsptr[2];
 8013ffe:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8014000:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014002:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 8014004:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014006:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8014008:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801400c:	f242 419d 	movw	r1, #9373	; 0x249d
 8014010:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 8014012:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 8014016:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801401a:	eba2 020c 	sub.w	r2, r2, ip
 801401e:	0052      	lsls	r2, r2, #1
 8014020:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 8014024:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 8014026:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8014028:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801402c:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801402e:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8014032:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8014036:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8014038:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801403c:	1a8a      	subs	r2, r1, r2
 801403e:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8014040:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8014044:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8014048:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 801404a:	9402      	str	r4, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801404c:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8014050:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8014052:	f241 1282 	movw	r2, #4482	; 0x1182
 8014056:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8014058:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801405c:	440a      	add	r2, r1
 801405e:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8014062:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8014066:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8014068:	9404      	str	r4, [sp, #16]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801406a:	4c68      	ldr	r4, [pc, #416]	; (801420c <jpeg_idct_15x15+0x478>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801406c:	9205      	str	r2, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801406e:	f641 124c 	movw	r2, #6476	; 0x194c
 8014072:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8014074:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8014078:	4401      	add	r1, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801407a:	4372      	muls	r2, r6
    tmp24 = tmp13 - tmp10 + tmp11;
 801407c:	1a38      	subs	r0, r7, r0
    tmp21 = tmp12 + tmp10 + tmp11;
 801407e:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8014080:	1882      	adds	r2, r0, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 8014082:	9106      	str	r1, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8014084:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8014086:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    z2 = (INT32) wsptr[3];
 801408a:	9900      	ldr	r1, [sp, #0]
    tmp11 += tmp11;
 801408c:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801408e:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z2 = (INT32) wsptr[3];
 8014092:	68cf      	ldr	r7, [r1, #12]
    tmp11 += tmp11;
 8014094:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8014096:	9808      	ldr	r0, [sp, #32]
 8014098:	9a01      	ldr	r2, [sp, #4]
 801409a:	eb02 0b00 	add.w	fp, r2, r0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801409e:	6948      	ldr	r0, [r1, #20]
 80140a0:	f242 7131 	movw	r1, #10033	; 0x2731
    z1 = (INT32) wsptr[1];
 80140a4:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80140a6:	fb01 fc00 	mul.w	ip, r1, r0
    z4 = (INT32) wsptr[7];
 80140aa:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 80140ac:	6852      	ldr	r2, [r2, #4]
    z4 = (INT32) wsptr[7];
 80140ae:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 80140b2:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80140b6:	1950      	adds	r0, r2, r5
 80140b8:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80140ba:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80140be:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80140c2:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 80140c6:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80140ca:	4c54      	ldr	r4, [pc, #336]	; (801421c <jpeg_idct_15x15+0x488>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80140cc:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80140ce:	4850      	ldr	r0, [pc, #320]	; (8014210 <jpeg_idct_15x15+0x47c>)
 80140d0:	4378      	muls	r0, r7
 80140d2:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 80140d4:	484f      	ldr	r0, [pc, #316]	; (8014214 <jpeg_idct_15x15+0x480>)
 80140d6:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 80140d8:	f642 5002 	movw	r0, #11522	; 0x2d02
 80140dc:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80140e0:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 80140e2:	f640 7139 	movw	r1, #3897	; 0xf39
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80140e6:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80140ea:	fb04 0002 	mla	r0, r4, r2, r0
 80140ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80140f0:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80140f2:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80140f6:	4420      	add	r0, r4
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80140f8:	f241 2468 	movw	r4, #4712	; 0x1268
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80140fc:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80140fe:	eb02 000e 	add.w	r0, r2, lr
 8014102:	4360      	muls	r0, r4
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8014104:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014106:	fb01 0202 	mla	r2, r1, r2, r0
 801410a:	eba2 020c 	sub.w	r2, r2, ip
 801410e:	4422      	add	r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8014110:	4c41      	ldr	r4, [pc, #260]	; (8014218 <jpeg_idct_15x15+0x484>)
 8014112:	fb04 000e 	mla	r0, r4, lr, r0
 8014116:	4460      	add	r0, ip
 8014118:	4407      	add	r7, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801411a:	9802      	ldr	r0, [sp, #8]
 801411c:	4430      	add	r0, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801411e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014122:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8014126:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014128:	9990      	ldr	r1, [sp, #576]	; 0x240
 801412a:	5460      	strb	r0, [r4, r1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801412c:	9902      	ldr	r1, [sp, #8]
 801412e:	1b8e      	subs	r6, r1, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014130:	9906      	ldr	r1, [sp, #24]
			     & RANGE_MASK];
 8014132:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014136:	f81a 0006 	ldrb.w	r0, [sl, r6]
 801413a:	7398      	strb	r0, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801413c:	eb01 0008 	add.w	r0, r1, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014140:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 8014144:	f3c0 4089 	ubfx	r0, r0, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014148:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801414c:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8014150:	7058      	strb	r0, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014152:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8014156:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014158:	eb0b 0105 	add.w	r1, fp, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801415c:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8014160:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014164:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014168:	f81a 1001 	ldrb.w	r1, [sl, r1]
 801416c:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801416e:	f81a 100b 	ldrb.w	r1, [sl, fp]
 8014172:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014174:	9903      	ldr	r1, [sp, #12]
 8014176:	4411      	add	r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014178:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801417c:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8014180:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014182:	9903      	ldr	r1, [sp, #12]
 8014184:	1a8a      	subs	r2, r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014186:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8014188:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801418c:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8014190:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014192:	9a07      	ldr	r2, [sp, #28]
 8014194:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014196:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801419a:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801419e:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80141a0:	9a07      	ldr	r2, [sp, #28]
 80141a2:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80141a4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80141a8:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80141ac:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80141ae:	9a04      	ldr	r2, [sp, #16]
 80141b0:	443a      	add	r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80141b2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80141b6:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80141ba:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80141bc:	9a04      	ldr	r2, [sp, #16]
 80141be:	1bd7      	subs	r7, r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80141c0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80141c4:	f81a 2007 	ldrb.w	r2, [sl, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80141c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80141ca:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80141cc:	9a05      	ldr	r2, [sp, #20]
 80141ce:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80141d0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80141d4:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80141d8:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80141da:	9a05      	ldr	r2, [sp, #20]
 80141dc:	1a50      	subs	r0, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80141de:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80141e0:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80141e4:	f81a 2000 	ldrb.w	r2, [sl, r0]
 80141e8:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80141ea:	9a01      	ldr	r2, [sp, #4]
 80141ec:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80141f0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 80141f4:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80141f8:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 80141fa:	9b00      	ldr	r3, [sp, #0]
 80141fc:	3320      	adds	r3, #32
 80141fe:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8014200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014202:	454b      	cmp	r3, r9
 8014204:	f47f aeed 	bne.w	8013fe2 <jpeg_idct_15x15+0x24e>
 8014208:	e00a      	b.n	8014220 <jpeg_idct_15x15+0x48c>
 801420a:	bf00      	nop
 801420c:	ffffba5c 	.word	0xffffba5c
 8014210:	ffffe566 	.word	0xffffe566
 8014214:	ffffd4f6 	.word	0xffffd4f6
 8014218:	ffffe42f 	.word	0xffffe42f
 801421c:	ffffdc67 	.word	0xffffdc67
  }
}
 8014220:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8014224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014228 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8014230:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014232:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014236:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801423a:	1e93      	subs	r3, r2, #2
 801423c:	9300      	str	r3, [sp, #0]
 801423e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8014240:	f1a3 0904 	sub.w	r9, r3, #4
 8014244:	f102 030e 	add.w	r3, r2, #14
 8014248:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801424a:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801424c:	9900      	ldr	r1, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801424e:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014252:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8014256:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801425a:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801425e:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014260:	9100      	str	r1, [sp, #0]
 8014262:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8014266:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014268:	9900      	ldr	r1, [sp, #0]
 801426a:	f9b1 0040 	ldrsh.w	r0, [r1, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 801426e:	0352      	lsls	r2, r2, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014270:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8014274:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014278:	4341      	muls	r1, r0
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801427a:	f642 10cf 	movw	r0, #10703	; 0x29cf
 801427e:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8014280:	4361      	muls	r1, r4
    tmp10 = tmp0 + tmp1;
 8014282:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8014284:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8014286:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8014288:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801428c:	9900      	ldr	r1, [sp, #0]
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801428e:	4ad6      	ldr	r2, [pc, #856]	; (80145e8 <jpeg_idct_16x16+0x3c0>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014290:	f9b1 4020 	ldrsh.w	r4, [r1, #32]
 8014294:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8014298:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801429c:	9900      	ldr	r1, [sp, #0]
 801429e:	f9b1 4060 	ldrsh.w	r4, [r1, #96]	; 0x60
 80142a2:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 80142a6:	4361      	muls	r1, r4
    z3 = z1 - z2;
 80142a8:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80142ac:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80142b0:	f642 4563 	movw	r5, #11363	; 0x2c63
 80142b4:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80142b6:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80142ba:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80142be:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80142c2:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80142c6:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80142ca:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 80142ce:	eb07 020c 	add.w	r2, r7, ip
 80142d2:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80142d4:	eba7 020c 	sub.w	r2, r7, ip
 80142d8:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80142da:	1972      	adds	r2, r6, r5
 80142dc:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80142de:	1b72      	subs	r2, r6, r5
 80142e0:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80142e2:	eb0b 0204 	add.w	r2, fp, r4
 80142e6:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 80142e8:	ebab 0204 	sub.w	r2, fp, r4
 80142ec:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80142ee:	1842      	adds	r2, r0, r1
 80142f0:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80142f2:	1a42      	subs	r2, r0, r1
 80142f4:	9208      	str	r2, [sp, #32]

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80142f6:	9a00      	ldr	r2, [sp, #0]
 80142f8:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 80142fc:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8014300:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014302:	9a00      	ldr	r2, [sp, #0]
 8014304:	f9b2 0030 	ldrsh.w	r0, [r2, #48]	; 0x30
 8014308:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 801430c:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801430e:	9800      	ldr	r0, [sp, #0]
 8014310:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8014314:	188e      	adds	r6, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014316:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801431a:	eba1 0b02 	sub.w	fp, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801431e:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014320:	9800      	ldr	r0, [sp, #0]
 8014322:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	; 0x70
    tmp11 = z1 + z3;
 8014326:	194f      	adds	r7, r1, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014328:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0
 801432c:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801432e:	f642 344e 	movw	r4, #11086	; 0x2b4e
 8014332:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8014334:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014338:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801433c:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8014340:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014344:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8014348:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801434c:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8014350:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8014354:	f241 5455 	movw	r4, #5461	; 0x1555
 8014358:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 801435a:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801435e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014360:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014364:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014366:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 801436a:	4ca0      	ldr	r4, [pc, #640]	; (80145ec <jpeg_idct_16x16+0x3c4>)
 801436c:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8014370:	4f9f      	ldr	r7, [pc, #636]	; (80145f0 <jpeg_idct_16x16+0x3c8>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014372:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8014374:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014376:	4464      	add	r4, ip
 8014378:	445c      	add	r4, fp
 801437a:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801437e:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014380:	4f9c      	ldr	r7, [pc, #624]	; (80145f4 <jpeg_idct_16x16+0x3cc>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8014382:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8014384:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8014388:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801438a:	f240 214d 	movw	r1, #589	; 0x24d
 801438e:	fb01 4102 	mla	r1, r1, r2, r4
 8014392:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014394:	4998      	ldr	r1, [pc, #608]	; (80145f8 <jpeg_idct_16x16+0x3d0>)
 8014396:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801439a:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801439c:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801439e:	f642 5a09 	movw	sl, #11529	; 0x2d09
 80143a2:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80143a6:	fb07 1a05 	mla	sl, r7, r5, r1
 80143aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80143ac:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80143ae:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80143b2:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 80143b6:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80143b8:	4990      	ldr	r1, [pc, #576]	; (80145fc <jpeg_idct_16x16+0x3d4>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80143ba:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80143bc:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80143c0:	4351      	muls	r1, r2
    tmp1  += z1;
 80143c2:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80143c4:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80143c8:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80143cc:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80143ce:	498c      	ldr	r1, [pc, #560]	; (8014600 <jpeg_idct_16x16+0x3d8>)
 80143d0:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80143d2:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 80143d6:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80143d8:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80143dc:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80143de:	eb05 0b00 	add.w	fp, r5, r0
 80143e2:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80143e4:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80143e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80143e8:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80143ec:	f640 5123 	movw	r1, #3363	; 0xd23
 80143f0:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80143f2:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 80143f4:	445c      	add	r4, fp
    tmp3  += z2;
 80143f6:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80143f8:	4429      	add	r1, r5
    tmp10 += z2;
 80143fa:	4484      	add	ip, r0
    tmp11 += z2;
 80143fc:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80143fe:	12c9      	asrs	r1, r1, #11
 8014400:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8014404:	9901      	ldr	r1, [sp, #4]
 8014406:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8014408:	9903      	ldr	r1, [sp, #12]
 801440a:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801440c:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801440e:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8014410:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8014414:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8014416:	9903      	ldr	r1, [sp, #12]
 8014418:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801441a:	9905      	ldr	r1, [sp, #20]
 801441c:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801441e:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8014420:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8014422:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8014426:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8014428:	9905      	ldr	r1, [sp, #20]
 801442a:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801442c:	9907      	ldr	r1, [sp, #28]
 801442e:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8014430:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8014432:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8014434:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8014438:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801443a:	9907      	ldr	r1, [sp, #28]
 801443c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014440:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8014444:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8014448:	9908      	ldr	r1, [sp, #32]
 801444a:	4461      	add	r1, ip
 801444c:	12c9      	asrs	r1, r1, #11
 801444e:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8014450:	9908      	ldr	r1, [sp, #32]
 8014452:	eba1 0c0c 	sub.w	ip, r1, ip
 8014456:	ea4f 21ec 	mov.w	r1, ip, asr #11
 801445a:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801445e:	9906      	ldr	r1, [sp, #24]
 8014460:	4401      	add	r1, r0
 8014462:	12c9      	asrs	r1, r1, #11
 8014464:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8014468:	9906      	ldr	r1, [sp, #24]
 801446a:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801446c:	9904      	ldr	r1, [sp, #16]
 801446e:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8014470:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8014472:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8014474:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8014478:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801447c:	9904      	ldr	r1, [sp, #16]
 801447e:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8014480:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8014482:	12d2      	asrs	r2, r2, #11
 8014484:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8014488:	9a02      	ldr	r2, [sp, #8]
 801448a:	440a      	add	r2, r1
 801448c:	12d2      	asrs	r2, r2, #11
 801448e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014492:	9a02      	ldr	r2, [sp, #8]
 8014494:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014498:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801449a:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801449c:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801449e:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80144a2:	f47f aed3 	bne.w	801424c <jpeg_idct_16x16+0x24>
 80144a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 80144a8:	ad0e      	add	r5, sp, #56	; 0x38
 80144aa:	3b04      	subs	r3, #4
 80144ac:	9300      	str	r3, [sp, #0]
 80144ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144b0:	333c      	adds	r3, #60	; 0x3c
 80144b2:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80144b4:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80144b6:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80144ba:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 80144be:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 80144c2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80144c6:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 80144ca:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80144ce:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 80144d2:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80144d4:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 80144d6:	9300      	str	r3, [sp, #0]
 80144d8:	4613      	mov	r3, r2
 80144da:	9a98      	ldr	r2, [sp, #608]	; 0x260
 80144dc:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 80144de:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80144e2:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80144e6:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80144e8:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80144ea:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80144ec:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 80144f0:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80144f4:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 80144f8:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 80144fc:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014500:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8014502:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8014506:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014508:	4a37      	ldr	r2, [pc, #220]	; (80145e8 <jpeg_idct_16x16+0x3c0>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801450a:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801450e:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014512:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014516:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801451a:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801451e:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8014522:	eb0e 0207 	add.w	r2, lr, r7
 8014526:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8014528:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 801452c:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8014530:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8014532:	eb0c 0206 	add.w	r2, ip, r6
 8014536:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8014538:	ebac 0206 	sub.w	r2, ip, r6
 801453c:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 801453e:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8014542:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8014546:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8014548:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801454a:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 801454c:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8014550:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8014552:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8014554:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8014558:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 801455c:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 801455e:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8014562:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014566:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801456a:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801456e:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014570:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8014574:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014576:	4e1d      	ldr	r6, [pc, #116]	; (80145ec <jpeg_idct_16x16+0x3c4>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8014578:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801457a:	f242 74e9 	movw	r4, #10217	; 0x27e9
 801457e:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014582:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8014586:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801458a:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 801458e:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8014592:	f241 5455 	movw	r4, #5461	; 0x1555
 8014596:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801459a:	f640 5423 	movw	r4, #3363	; 0xd23
 801459e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80145a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80145a4:	4454      	add	r4, sl
 80145a6:	4474      	add	r4, lr
 80145a8:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 80145ac:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 80145b0:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80145b2:	eb0c 0409 	add.w	r4, ip, r9
 80145b6:	445c      	add	r4, fp
 80145b8:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80145bc:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80145be:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 80145c0:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80145c2:	f44f 628e 	mov.w	r2, #1136	; 0x470
 80145c6:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80145c8:	f240 224d 	movw	r2, #589	; 0x24d
 80145cc:	fb02 4203 	mla	r2, r2, r3, r4
 80145d0:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80145d2:	4a09      	ldr	r2, [pc, #36]	; (80145f8 <jpeg_idct_16x16+0x3d0>)
 80145d4:	fb02 4407 	mla	r4, r2, r7, r4
 80145d8:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80145dc:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80145e0:	4c04      	ldr	r4, [pc, #16]	; (80145f4 <jpeg_idct_16x16+0x3cc>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80145e2:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80145e4:	1afa      	subs	r2, r7, r3
 80145e6:	e00d      	b.n	8014604 <jpeg_idct_16x16+0x3dc>
 80145e8:	ffffecc2 	.word	0xffffecc2
 80145ec:	ffffb6d6 	.word	0xffffb6d6
 80145f0:	ffffc542 	.word	0xffffc542
 80145f4:	ffffe77a 	.word	0xffffe77a
 80145f8:	ffffdbfa 	.word	0xffffdbfa
 80145fc:	ffffeaab 	.word	0xffffeaab
 8014600:	ffffd817 	.word	0xffffd817
 8014604:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014608:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 801460c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801460e:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014610:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8014614:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8014618:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801461a:	4a4f      	ldr	r2, [pc, #316]	; (8014758 <jpeg_idct_16x16+0x530>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801461c:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801461e:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014622:	435a      	muls	r2, r3
    tmp1  += z1;
 8014624:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014626:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801462a:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801462e:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8014630:	4a4a      	ldr	r2, [pc, #296]	; (801475c <jpeg_idct_16x16+0x534>)
 8014632:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014634:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8014638:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801463a:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801463e:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014640:	eb07 0b00 	add.w	fp, r7, r0
 8014644:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8014646:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8014648:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801464a:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801464e:	f640 5223 	movw	r2, #3363	; 0xd23
 8014652:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8014654:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8014656:	445c      	add	r4, fp
    tmp3  += z2;
 8014658:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801465a:	443a      	add	r2, r7
 801465c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 801465e:	4484      	add	ip, r0
    tmp11 += z2;
 8014660:	4448      	add	r0, r9
			     & RANGE_MASK];
 8014662:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8014666:	f818 2002 	ldrb.w	r2, [r8, r2]
 801466a:	9b98      	ldr	r3, [sp, #608]	; 0x260
 801466c:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801466e:	9b01      	ldr	r3, [sp, #4]
 8014670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014672:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8014674:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8014676:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801467a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801467e:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8014680:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8014682:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8014684:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8014686:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801468a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801468e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014692:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8014694:	f818 2006 	ldrb.w	r2, [r8, r6]
 8014698:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801469a:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801469c:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801469e:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 80146a0:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80146a4:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80146a8:	f818 2002 	ldrb.w	r2, [r8, r2]
 80146ac:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80146ae:	f818 2004 	ldrb.w	r2, [r8, r4]
 80146b2:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80146b4:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80146b8:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80146bc:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 80146be:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80146c2:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80146c6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80146ca:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80146cc:	f818 200e 	ldrb.w	r2, [r8, lr]
 80146d0:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80146d2:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80146d6:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80146da:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80146dc:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80146e0:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80146e4:	f818 2002 	ldrb.w	r2, [r8, r2]
 80146e8:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80146ea:	f818 200c 	ldrb.w	r2, [r8, ip]
 80146ee:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80146f0:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80146f2:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80146f4:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 80146f6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80146fa:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80146fe:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014702:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8014704:	f818 2000 	ldrb.w	r2, [r8, r0]
 8014708:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801470a:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801470e:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8014712:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8014716:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801471a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801471e:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8014720:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8014724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8014726:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8014728:	9b02      	ldr	r3, [sp, #8]
 801472a:	4413      	add	r3, r2
			     & RANGE_MASK];
 801472c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8014730:	f818 3003 	ldrb.w	r3, [r8, r3]
 8014734:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8014736:	9b02      	ldr	r3, [sp, #8]
 8014738:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 801473c:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 801473e:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8014742:	f818 300e 	ldrb.w	r3, [r8, lr]
 8014746:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 8014748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801474a:	4293      	cmp	r3, r2
 801474c:	f47f aeb2 	bne.w	80144b4 <jpeg_idct_16x16+0x28c>
  }
}
 8014750:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8014754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014758:	ffffeaab 	.word	0xffffeaab
 801475c:	ffffd817 	.word	0xffffd817

08014760 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014764:	b0cf      	sub	sp, #316	; 0x13c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014766:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8014768:	3a02      	subs	r2, #2
{
 801476a:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 801476c:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801476e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014772:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8014776:	f105 0320 	add.w	r3, r5, #32
 801477a:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801477c:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8014780:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014782:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8014786:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 801478a:	f9b2 c042 	ldrsh.w	ip, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801478e:	f9b2 7052 	ldrsh.w	r7, [r2, #82]	; 0x52
 8014792:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8014796:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801479a:	f855 3b04 	ldr.w	r3, [r5], #4
 801479e:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80147a2:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80147a4:	ea4a 030b 	orr.w	r3, sl, fp
 80147a8:	ea4e 0303 	orr.w	r3, lr, r3
 80147ac:	ea4c 0303 	orr.w	r3, ip, r3
 80147b0:	433b      	orrs	r3, r7
 80147b2:	4333      	orrs	r3, r6
 80147b4:	ea59 0303 	orrs.w	r3, r9, r3
 80147b8:	f040 8159 	bne.w	8014a6e <jpeg_idct_16x8+0x30e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80147bc:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 80147be:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 80147c2:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 80147c4:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 80147c6:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 80147c8:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 80147ca:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 80147ce:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 80147d2:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80147d6:	9b04      	ldr	r3, [sp, #16]
 80147d8:	42ab      	cmp	r3, r5
 80147da:	d1cf      	bne.n	801477c <jpeg_idct_16x8+0x1c>
 80147dc:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 80147de:	ad0e      	add	r5, sp, #56	; 0x38
 80147e0:	3b04      	subs	r3, #4
 80147e2:	9300      	str	r3, [sp, #0]
 80147e4:	9b03      	ldr	r3, [sp, #12]
 80147e6:	331c      	adds	r3, #28
 80147e8:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80147ea:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80147ec:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80147f0:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 80147f4:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 80147f8:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80147fc:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8014800:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8014804:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8014808:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801480a:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 801480c:	9300      	str	r3, [sp, #0]
 801480e:	4613      	mov	r3, r2
 8014810:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8014812:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8014814:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014818:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801481c:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801481e:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8014820:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014822:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8014826:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 801482a:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 801482e:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8014832:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014836:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8014838:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801483c:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801483e:	4acf      	ldr	r2, [pc, #828]	; (8014b7c <jpeg_idct_16x8+0x41c>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014840:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8014844:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014848:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801484c:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014850:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014854:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8014858:	eb0e 0207 	add.w	r2, lr, r7
 801485c:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 801485e:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8014862:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8014866:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8014868:	eb0c 0206 	add.w	r2, ip, r6
 801486c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 801486e:	ebac 0206 	sub.w	r2, ip, r6
 8014872:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8014874:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8014878:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 801487c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801487e:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8014880:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8014882:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8014886:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8014888:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801488a:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 801488e:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8014892:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8014894:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8014898:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801489c:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80148a0:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80148a4:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80148a6:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80148aa:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 80148ac:	4eb4      	ldr	r6, [pc, #720]	; (8014b80 <jpeg_idct_16x8+0x420>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80148ae:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80148b0:	f242 74e9 	movw	r4, #10217	; 0x27e9
 80148b4:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80148b8:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80148bc:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80148c0:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80148c4:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80148c8:	f241 5455 	movw	r4, #5461	; 0x1555
 80148cc:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80148d0:	f640 5423 	movw	r4, #3363	; 0xd23
 80148d4:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80148d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80148da:	4454      	add	r4, sl
 80148dc:	4474      	add	r4, lr
 80148de:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 80148e2:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 80148e6:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80148e8:	eb0c 0409 	add.w	r4, ip, r9
 80148ec:	445c      	add	r4, fp
 80148ee:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80148f2:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80148f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 80148f6:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80148f8:	f44f 628e 	mov.w	r2, #1136	; 0x470
 80148fc:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80148fe:	f240 224d 	movw	r2, #589	; 0x24d
 8014902:	fb02 4203 	mla	r2, r2, r3, r4
 8014906:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014908:	4a9e      	ldr	r2, [pc, #632]	; (8014b84 <jpeg_idct_16x8+0x424>)
 801490a:	fb02 4407 	mla	r4, r2, r7, r4
 801490e:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014912:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014916:	4c9c      	ldr	r4, [pc, #624]	; (8014b88 <jpeg_idct_16x8+0x428>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014918:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801491a:	1afa      	subs	r2, r7, r3
 801491c:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014920:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8014924:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014926:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014928:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 801492c:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8014930:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014932:	4a96      	ldr	r2, [pc, #600]	; (8014b8c <jpeg_idct_16x8+0x42c>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014934:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014936:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801493a:	435a      	muls	r2, r3
    tmp1  += z1;
 801493c:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801493e:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014942:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014946:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8014948:	4a91      	ldr	r2, [pc, #580]	; (8014b90 <jpeg_idct_16x8+0x430>)
 801494a:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801494c:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8014950:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014952:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014956:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014958:	eb07 0b00 	add.w	fp, r7, r0
 801495c:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801495e:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8014960:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014962:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8014966:	f640 5223 	movw	r2, #3363	; 0xd23
 801496a:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801496c:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 801496e:	445c      	add	r4, fp
    tmp3  += z2;
 8014970:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8014972:	443a      	add	r2, r7
 8014974:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8014976:	4484      	add	ip, r0
    tmp11 += z2;
 8014978:	4448      	add	r0, r9
			     & RANGE_MASK];
 801497a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801497e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014982:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8014984:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8014986:	9b01      	ldr	r3, [sp, #4]
 8014988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801498a:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801498c:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 801498e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8014992:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014996:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8014998:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801499a:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801499c:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 801499e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80149a2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80149a6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80149aa:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80149ac:	f818 2006 	ldrb.w	r2, [r8, r6]
 80149b0:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80149b2:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80149b4:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80149b6:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 80149b8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80149bc:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80149c0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80149c4:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80149c6:	f818 2004 	ldrb.w	r2, [r8, r4]
 80149ca:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80149cc:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80149d0:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80149d4:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 80149d6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80149da:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80149de:	f818 2002 	ldrb.w	r2, [r8, r2]
 80149e2:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80149e4:	f818 200e 	ldrb.w	r2, [r8, lr]
 80149e8:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80149ea:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80149ee:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80149f2:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80149f4:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80149f8:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80149fc:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014a00:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8014a02:	f818 200c 	ldrb.w	r2, [r8, ip]
 8014a06:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8014a08:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8014a0a:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8014a0c:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8014a0e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8014a12:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8014a16:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014a1a:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8014a1c:	f818 2000 	ldrb.w	r2, [r8, r0]
 8014a20:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8014a22:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8014a26:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8014a2a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8014a2e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8014a32:	f818 2002 	ldrb.w	r2, [r8, r2]
 8014a36:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8014a38:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8014a3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8014a3e:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8014a40:	9b02      	ldr	r3, [sp, #8]
 8014a42:	4413      	add	r3, r2
			     & RANGE_MASK];
 8014a44:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8014a48:	f818 3003 	ldrb.w	r3, [r8, r3]
 8014a4c:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8014a4e:	9b02      	ldr	r3, [sp, #8]
 8014a50:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8014a54:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8014a56:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8014a5a:	f818 300e 	ldrb.w	r3, [r8, lr]
 8014a5e:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 8014a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a62:	4293      	cmp	r3, r2
 8014a64:	f47f aec1 	bne.w	80147ea <jpeg_idct_16x8+0x8a>
  }
}
 8014a68:	b04f      	add	sp, #316	; 0x13c
 8014a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a6e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8014a70:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014a74:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8014a78:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014a7a:	f241 1651 	movw	r6, #4433	; 0x1151
 8014a7e:	eb0b 0300 	add.w	r3, fp, r0
 8014a82:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014a84:	f641 067e 	movw	r6, #6270	; 0x187e
 8014a88:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014a8c:	4e41      	ldr	r6, [pc, #260]	; (8014b94 <jpeg_idct_16x8+0x434>)
 8014a8e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8014a92:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a94:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a9a:	fb00 f00c 	mul.w	r0, r0, ip
    tmp0 = z2 + z3;
 8014a9e:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8014aa2:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8014aa6:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 8014aaa:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014aae:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8014ab0:	9000      	str	r0, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8014ab2:	18f0      	adds	r0, r6, r3
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014ab4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8014ab8:	1b9b      	subs	r3, r3, r6
    tmp11 = tmp1 + tmp3;
 8014aba:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014abc:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp12 = tmp1 - tmp3;
 8014ac0:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014ac2:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014ac6:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014aca:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8014ace:	4347      	muls	r7, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014ad0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8014ad2:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8014ad6:	eb07 040a 	add.w	r4, r7, sl
    z2 = tmp0 + tmp2;
 8014ada:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014ade:	1930      	adds	r0, r6, r4
 8014ae0:	4358      	muls	r0, r3
    z2 += z1;
 8014ae2:	4b2d      	ldr	r3, [pc, #180]	; (8014b98 <jpeg_idct_16x8+0x438>)
 8014ae4:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8014ae8:	4b2c      	ldr	r3, [pc, #176]	; (8014b9c <jpeg_idct_16x8+0x43c>)
 8014aea:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014aee:	eb09 040a 	add.w	r4, r9, sl
 8014af2:	4b2b      	ldr	r3, [pc, #172]	; (8014ba0 <jpeg_idct_16x8+0x440>)
 8014af4:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8014af6:	f640 138e 	movw	r3, #2446	; 0x98e
 8014afa:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8014afe:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8014b00:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8014b04:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014b08:	4b26      	ldr	r3, [pc, #152]	; (8014ba4 <jpeg_idct_16x8+0x444>)
    tmp3 += z1 + z3;
 8014b0a:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014b0e:	eb07 0a0e 	add.w	sl, r7, lr
    tmp1 += z1 + z3;
 8014b12:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014b16:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014b1a:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8014b1c:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8014b1e:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8014b20:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8014b24:	fb0b 0007 	mla	r0, fp, r7, r0
    tmp2 += z1 + z2;
 8014b28:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014b2c:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014b30:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014b34:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014b36:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014b38:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014b3c:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014b40:	eb03 040a 	add.w	r4, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014b44:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014b48:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014b4a:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014b4c:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014b50:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014b52:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014b54:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014b56:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014b58:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014b5a:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014b5e:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014b60:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014b62:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014b64:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014b66:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014b6a:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8014b6c:	9b00      	ldr	r3, [sp, #0]
 8014b6e:	eba3 0909 	sub.w	r9, r3, r9
 8014b72:	ea4f 20e9 	mov.w	r0, r9, asr #11
 8014b76:	67c8      	str	r0, [r1, #124]	; 0x7c
    wsptr++;
 8014b78:	e62d      	b.n	80147d6 <jpeg_idct_16x8+0x76>
 8014b7a:	bf00      	nop
 8014b7c:	ffffecc2 	.word	0xffffecc2
 8014b80:	ffffb6d6 	.word	0xffffb6d6
 8014b84:	ffffdbfa 	.word	0xffffdbfa
 8014b88:	ffffe77a 	.word	0xffffe77a
 8014b8c:	ffffeaab 	.word	0xffffeaab
 8014b90:	ffffd817 	.word	0xffffd817
 8014b94:	ffffc4df 	.word	0xffffc4df
 8014b98:	ffffc13b 	.word	0xffffc13b
 8014b9c:	fffff384 	.word	0xfffff384
 8014ba0:	ffffe333 	.word	0xffffe333
 8014ba4:	ffffadfd 	.word	0xffffadfd

08014ba8 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bac:	b0c5      	sub	sp, #276	; 0x114
 8014bae:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8014bb0:	f1a2 0c02 	sub.w	ip, r2, #2
 8014bb4:	320e      	adds	r2, #14
 8014bb6:	9302      	str	r3, [sp, #8]
 8014bb8:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014bba:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014bbe:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8014bc2:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014bc4:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014bc6:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014bca:	f641 4037 	movw	r0, #7223	; 0x1c37
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014bce:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014bd2:	f642 0ac6 	movw	sl, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014bd6:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014bda:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014bde:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014be0:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014be4:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8014be8:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014bea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014bee:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014bf0:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8014bf2:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014bf4:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8014bf8:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014bfc:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8014c00:	434a      	muls	r2, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014c02:	eba8 0102 	sub.w	r1, r8, r2
 8014c06:	fb00 f901 	mul.w	r9, r0, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014c0a:	eba5 0008 	sub.w	r0, r5, r8
 8014c0e:	f640 2112 	movw	r1, #2578	; 0xa12
 8014c12:	fb01 f700 	mul.w	r7, r1, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014c16:	9900      	ldr	r1, [sp, #0]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014c18:	18a8      	adds	r0, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014c1a:	eb09 0407 	add.w	r4, r9, r7
 8014c1e:	440c      	add	r4, r1
 8014c20:	49ba      	ldr	r1, [pc, #744]	; (8014f0c <jpeg_idct_14x7+0x364>)
 8014c22:	fb01 4408 	mla	r4, r1, r8, r4
    tmp10 = z1 + z3;
 8014c26:	18a9      	adds	r1, r5, r2
 8014c28:	9103      	str	r1, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014c2a:	9900      	ldr	r1, [sp, #0]
 8014c2c:	fb0a 1000 	mla	r0, sl, r0, r1
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014c30:	f46f 711f 	mvn.w	r1, #636	; 0x27c
 8014c34:	fb01 0102 	mla	r1, r1, r2, r0
 8014c38:	eb01 0209 	add.w	r2, r1, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014c3c:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014c40:	f641 51ef 	movw	r1, #7663	; 0x1def
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014c44:	9201      	str	r2, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014c46:	4ab2      	ldr	r2, [pc, #712]	; (8014f10 <jpeg_idct_14x7+0x368>)
 8014c48:	fb02 0005 	mla	r0, r2, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014c4c:	f9bc 5010 	ldrsh.w	r5, [ip, #16]
 8014c50:	6a32      	ldr	r2, [r6, #32]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014c52:	4438      	add	r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014c54:	f9bc 7030 	ldrsh.w	r7, [ip, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014c58:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014c5a:	6e35      	ldr	r5, [r6, #96]	; 0x60
 8014c5c:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014c5e:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8014c62:	fb07 f709 	mul.w	r7, r7, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014c66:	eb02 0905 	add.w	r9, r2, r5
 8014c6a:	fb01 fb09 	mul.w	fp, r1, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014c6e:	eba2 0905 	sub.w	r9, r2, r5
 8014c72:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014c76:	443a      	add	r2, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014c78:	443d      	add	r5, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014c7a:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014c7e:	49a5      	ldr	r1, [pc, #660]	; (8014f14 <jpeg_idct_14x7+0x36c>)
    tmp10 = tmp11 - tmp12;
 8014c80:	ebab 0a09 	sub.w	sl, fp, r9
    tmp11 += tmp12;
 8014c84:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014c86:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014c8a:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014c8c:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014c90:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8014c94:	44a9      	add	r9, r5
    tmp10 += z2;
 8014c96:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014c98:	fb0b 2707 	mla	r7, fp, r7, r2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014c9c:	9a01      	ldr	r2, [sp, #4]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014c9e:	443d      	add	r5, r7
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014ca0:	4452      	add	r2, sl
 8014ca2:	12d2      	asrs	r2, r2, #11
 8014ca4:	f84e 2c04 	str.w	r2, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014ca8:	9a01      	ldr	r2, [sp, #4]
 8014caa:	eba2 0a0a 	sub.w	sl, r2, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014cae:	eb04 0209 	add.w	r2, r4, r9
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014cb2:	eba4 0409 	sub.w	r4, r4, r9
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014cb6:	12d2      	asrs	r2, r2, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014cb8:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014cbc:	f8ce 201c 	str.w	r2, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014cc0:	1942      	adds	r2, r0, r5
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014cc2:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014cc6:	1b45      	subs	r5, r0, r5
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014cc8:	12d2      	asrs	r2, r2, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014cca:	9900      	ldr	r1, [sp, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014ccc:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014cce:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014cd2:	12ed      	asrs	r5, r5, #11
    z2 -= tmp10;
 8014cd4:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014cd6:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    z2 -= tmp10;
 8014cda:	eba8 0802 	sub.w	r8, r8, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014cde:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014ce2:	f8ce 507c 	str.w	r5, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014ce6:	fb02 1808 	mla	r8, r2, r8, r1
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8014cea:	ea4f 22e8 	mov.w	r2, r8, asr #11
 8014cee:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014cf2:	9a04      	ldr	r2, [sp, #16]
 8014cf4:	4562      	cmp	r2, ip
 8014cf6:	f47f af66 	bne.w	8014bc6 <jpeg_idct_14x7+0x1e>
 8014cfa:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 8014cfc:	ac0c      	add	r4, sp, #48	; 0x30
 8014cfe:	3a04      	subs	r2, #4
 8014d00:	9200      	str	r2, [sp, #0]
 8014d02:	9a02      	ldr	r2, [sp, #8]
 8014d04:	3218      	adds	r2, #24
 8014d06:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014d08:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014d0a:	f640 2512 	movw	r5, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 8014d0e:	6927      	ldr	r7, [r4, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014d10:	f241 38a3 	movw	r8, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8014d14:	f852 1f04 	ldr.w	r1, [r2, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8014d18:	f641 0b14 	movw	fp, #6164	; 0x1814
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014d1c:	6820      	ldr	r0, [r4, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014d1e:	fb05 fe07 	mul.w	lr, r5, r7
    outptr = output_buf[ctr] + output_col;
 8014d22:	910a      	str	r1, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014d24:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8014d28:	9200      	str	r2, [sp, #0]
 8014d2a:	460a      	mov	r2, r1
 8014d2c:	994e      	ldr	r1, [sp, #312]	; 0x138
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014d2e:	3010      	adds	r0, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8014d30:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8014d32:	1851      	adds	r1, r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014d34:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp11 = z1 + z3;
 8014d38:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014d3c:	437a      	muls	r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014d3e:	436f      	muls	r7, r5
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014d40:	4d75      	ldr	r5, [pc, #468]	; (8014f18 <jpeg_idct_14x7+0x370>)
    tmp10 = z1 + z2;
 8014d42:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014d46:	4472      	add	r2, lr
    z1 = (INT32) wsptr[2];
 8014d48:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 8014d4c:	ebc7 3940 	rsb	r9, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014d50:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014d52:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014d56:	0052      	lsls	r2, r2, #1
 8014d58:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8014d5c:	9201      	str	r2, [sp, #4]
    z2 = (INT32) wsptr[6];
 8014d5e:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014d62:	eb0e 0002 	add.w	r0, lr, r2
 8014d66:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8014d68:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8014d6c:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014d70:	fb05 0002 	mla	r0, r5, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8014d74:	f605 25e5 	addw	r5, r5, #2789	; 0xae5
 8014d78:	436a      	muls	r2, r5
    tmp20 = tmp10 + tmp13;
 8014d7a:	eb0c 0507 	add.w	r5, ip, r7
 8014d7e:	9502      	str	r5, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8014d80:	ebac 0507 	sub.w	r5, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014d84:	fb08 220e 	mla	r2, r8, lr, r2
    z2 = (INT32) wsptr[3];
 8014d88:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp26 = tmp10 - tmp13;
 8014d8c:	9503      	str	r5, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8014d8e:	1835      	adds	r5, r6, r0
    tmp25 = tmp11 - tmp14;
 8014d90:	1a30      	subs	r0, r6, r0
    z3 = (INT32) wsptr[5];
 8014d92:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp21 = tmp11 + tmp14;
 8014d96:	9504      	str	r5, [sp, #16]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8014d98:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 8014d9c:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8014d9e:	eb09 0002 	add.w	r0, r9, r2
    tmp24 = tmp12 - tmp15;
 8014da2:	eba9 0202 	sub.w	r2, r9, r2
    z4 = (INT32) wsptr[7];
 8014da6:	f854 9c04 	ldr.w	r9, [r4, #-4]
    tmp22 = tmp12 + tmp15;
 8014daa:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8014dac:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8014db0:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 8014db2:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8014db6:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = z1 + z3;
 8014dba:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8014dbe:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8014dc2:	f242 6052 	movw	r0, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8014dc6:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8014dca:	fb00 f506 	mul.w	r5, r0, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8014dce:	4853      	ldr	r0, [pc, #332]	; (8014f1c <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8014dd0:	f46f 66a2 	mvn.w	r6, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8014dd4:	eb0a 0705 	add.w	r7, sl, r5
 8014dd8:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8014ddc:	fb00 7702 	mla	r7, r0, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8014de0:	f200 201b 	addw	r0, r0, #539	; 0x21b
 8014de4:	fb00 b002 	mla	r0, r0, r2, fp
    z1    -= z2;
 8014de8:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8014dec:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8014df0:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8014df4:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8014df8:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8014dfa:	4470      	add	r0, lr
 8014dfc:	9008      	str	r0, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8014dfe:	eb08 000c 	add.w	r0, r8, ip
 8014e02:	4370      	muls	r0, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8014e04:	f6a6 0681 	subw	r6, r6, #2177	; 0x881
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8014e08:	eba0 3049 	sub.w	r0, r0, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8014e0c:	fb06 0608 	mla	r6, r6, r8, r0
 8014e10:	44b2      	add	sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8014e12:	4e43      	ldr	r6, [pc, #268]	; (8014f20 <jpeg_idct_14x7+0x378>)
 8014e14:	fb06 000c 	mla	r0, r6, ip, r0
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014e18:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8014e1c:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014e1e:	ebac 0508 	sub.w	r5, ip, r8
 8014e22:	4375      	muls	r5, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8014e24:	9009      	str	r0, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014e26:	eb05 3649 	add.w	r6, r5, r9, lsl #13
 8014e2a:	483e      	ldr	r0, [pc, #248]	; (8014f24 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8014e2c:	eb02 3949 	add.w	r9, r2, r9, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014e30:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014e32:	fb00 660c 	mla	r6, r0, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014e36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e38:	443a      	add	r2, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014e3a:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8014e3c:	f241 5b99 	movw	fp, #5529	; 0x1599
			     & RANGE_MASK];
 8014e40:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8014e44:	fb0b 5508 	mla	r5, fp, r8, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014e48:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8014e4a:	44ae      	add	lr, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014e4c:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 8014e4e:	5542      	strb	r2, [r0, r5]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014e50:	9a02      	ldr	r2, [sp, #8]
 8014e52:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 8014e54:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014e58:	5dda      	ldrb	r2, [r3, r7]
 8014e5a:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014e5c:	9a04      	ldr	r2, [sp, #16]
 8014e5e:	4452      	add	r2, sl
			     & RANGE_MASK];
 8014e60:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014e64:	5c9a      	ldrb	r2, [r3, r2]
 8014e66:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014e68:	9a04      	ldr	r2, [sp, #16]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014e6c:	eba2 0a0a 	sub.w	sl, r2, sl
			     & RANGE_MASK];
 8014e70:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014e74:	f813 200a 	ldrb.w	r2, [r3, sl]
 8014e78:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014e7a:	9a06      	ldr	r2, [sp, #24]
 8014e7c:	4402      	add	r2, r0
			     & RANGE_MASK];
 8014e7e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014e82:	5c9a      	ldrb	r2, [r3, r2]
 8014e84:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014e86:	9a06      	ldr	r2, [sp, #24]
 8014e88:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8014e8a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014e8e:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8014e90:	9808      	ldr	r0, [sp, #32]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014e92:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014e94:	9a01      	ldr	r2, [sp, #4]
 8014e96:	444a      	add	r2, r9
			     & RANGE_MASK];
 8014e98:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014e9c:	5c9a      	ldrb	r2, [r3, r2]
 8014e9e:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014ea0:	9a01      	ldr	r2, [sp, #4]
 8014ea2:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 8014ea6:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014eaa:	f813 2009 	ldrb.w	r2, [r3, r9]
 8014eae:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014eb0:	9a07      	ldr	r2, [sp, #28]
 8014eb2:	4432      	add	r2, r6
			     & RANGE_MASK];
 8014eb4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014eb8:	5c9a      	ldrb	r2, [r3, r2]
 8014eba:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014ebc:	9a07      	ldr	r2, [sp, #28]
 8014ebe:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8014ec0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014ec4:	5d9a      	ldrb	r2, [r3, r6]
 8014ec6:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8014ec8:	9a05      	ldr	r2, [sp, #20]
 8014eca:	4472      	add	r2, lr
			     & RANGE_MASK];
 8014ecc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8014ed0:	5c9a      	ldrb	r2, [r3, r2]
 8014ed2:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8014ed4:	9a05      	ldr	r2, [sp, #20]
 8014ed6:	eba2 050e 	sub.w	r5, r2, lr
			     & RANGE_MASK];
 8014eda:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8014ede:	5d5a      	ldrb	r2, [r3, r5]
 8014ee0:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8014ee2:	9a03      	ldr	r2, [sp, #12]
 8014ee4:	4402      	add	r2, r0
			     & RANGE_MASK];
 8014ee6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8014eea:	5c9a      	ldrb	r2, [r3, r2]
 8014eec:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8014eee:	9a03      	ldr	r2, [sp, #12]
 8014ef0:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8014ef2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8014ef6:	5c1a      	ldrb	r2, [r3, r0]
 8014ef8:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 8014efa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014efc:	9900      	ldr	r1, [sp, #0]
 8014efe:	428a      	cmp	r2, r1
 8014f00:	f47f af02 	bne.w	8014d08 <jpeg_idct_14x7+0x160>
  }
}
 8014f04:	b045      	add	sp, #276	; 0x114
 8014f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f0a:	bf00      	nop
 8014f0c:	ffffc515 	.word	0xffffc515
 8014f10:	ffffb0f1 	.word	0xffffb0f1
 8014f14:	ffffd3e1 	.word	0xffffd3e1
 8014f18:	ffffc8fc 	.word	0xffffc8fc
 8014f1c:	ffffdbf0 	.word	0xffffdbf0
 8014f20:	ffffb409 	.word	0xffffb409
 8014f24:	ffffc9e6 	.word	0xffffc9e6

08014f28 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f2c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014f30:	b0bb      	sub	sp, #236	; 0xec
 8014f32:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8014f34:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f36:	3080      	adds	r0, #128	; 0x80
 8014f38:	320e      	adds	r2, #14
 8014f3a:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014f3c:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f3e:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014f40:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f42:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014f46:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f4a:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014f4e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014f50:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f54:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014f56:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014f5a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014f5e:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8014f60:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014f62:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014f66:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014f6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014f6e:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014f72:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 8014f74:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 8014f76:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014f7a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8014f7c:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014f80:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014f84:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014f86:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 8014f88:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014f8c:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 8014f90:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014f92:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014f96:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014f98:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014f9c:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014fa0:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014fa4:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014fa8:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014fac:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8014fb0:	eba2 0909 	sub.w	r9, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014fb4:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8014fb8:	eba9 0808 	sub.w	r8, r9, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014fbc:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8014fc0:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014fc4:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014fc8:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014fcc:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014fd0:	12d2      	asrs	r2, r2, #11
 8014fd2:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014fd6:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8014fda:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8014fde:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8014fe2:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8014fe6:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014fe8:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014fec:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8014ff0:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014ff2:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014ff4:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014ffa:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014ffc:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014ffe:	42b2      	cmp	r2, r6
 8015000:	d19f      	bne.n	8014f42 <jpeg_idct_12x6+0x1a>
 8015002:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8015006:	aa0a      	add	r2, sp, #40	; 0x28
 8015008:	3314      	adds	r3, #20
 801500a:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801500c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8015010:	f640 0b5b 	movw	fp, #2139	; 0x85b
    outptr = output_buf[ctr] + output_col;
 8015014:	9944      	ldr	r1, [sp, #272]	; 0x110
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8015016:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8015018:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 801501a:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 801501e:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015020:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8015024:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 8015028:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801502a:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 801502e:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8015032:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 8015036:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 801503a:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801503e:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8015040:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 8015044:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8015048:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 801504a:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 801504e:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8015050:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8015054:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 8015058:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 801505c:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8015060:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8015064:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8015066:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 801506a:	1b4d      	subs	r5, r1, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801506c:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 8015070:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8015072:	eba7 000c 	sub.w	r0, r7, ip
    tmp22 = tmp11 + tmp12;
 8015076:	1961      	adds	r1, r4, r5
    tmp10 = z1 + z3;
 8015078:	eb08 0706 	add.w	r7, r8, r6
    tmp25 = tmp10 - tmp12;
 801507c:	9005      	str	r0, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801507e:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp22 = tmp11 + tmp12;
 8015082:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 8015084:	1b61      	subs	r1, r4, r5
    z4 = (INT32) wsptr[7];
 8015086:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 801508a:	9107      	str	r1, [sp, #28]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801508c:	eb05 0c07 	add.w	ip, r5, r7
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8015090:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8015094:	eb06 0905 	add.w	r9, r6, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8015098:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801509c:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80150a0:	484f      	ldr	r0, [pc, #316]	; (80151e0 <jpeg_idct_12x6+0x2b8>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80150a2:	fb0b cb07 	mla	fp, fp, r7, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80150a6:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80150aa:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80150ac:	484d      	ldr	r0, [pc, #308]	; (80151e4 <jpeg_idct_12x6+0x2bc>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80150ae:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80150b2:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80150b6:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80150ba:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80150be:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80150c2:	eb01 0709 	add.w	r7, r1, r9
 80150c6:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80150ca:	4847      	ldr	r0, [pc, #284]	; (80151e8 <jpeg_idct_12x6+0x2c0>)
 80150cc:	fb00 1108 	mla	r1, r0, r8, r1
 80150d0:	4846      	ldr	r0, [pc, #280]	; (80151ec <jpeg_idct_12x6+0x2c4>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80150d2:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80150d4:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80150d8:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 80150dc:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80150e0:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 80150e4:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 80150e8:	1b86      	subs	r6, r0, r6
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80150ea:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80150ee:	444c      	add	r4, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80150f0:	eb01 090c 	add.w	r9, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80150f4:	eb05 0c06 	add.w	ip, r5, r6
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80150f8:	483d      	ldr	r0, [pc, #244]	; (80151f0 <jpeg_idct_12x6+0x2c8>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80150fa:	9901      	ldr	r1, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80150fc:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8015100:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8015104:	fb00 c606 	mla	r6, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015108:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801510a:	fb08 c505 	mla	r5, r8, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801510e:	eb00 080e 	add.w	r8, r0, lr
 8015112:	9808      	ldr	r0, [sp, #32]
			     & RANGE_MASK];
 8015114:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015118:	f811 c008 	ldrb.w	ip, [r1, r8]
 801511c:	9944      	ldr	r1, [sp, #272]	; 0x110
 801511e:	f800 c001 	strb.w	ip, [r0, r1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015122:	9904      	ldr	r1, [sp, #16]
 8015124:	eba1 0e0e 	sub.w	lr, r1, lr
 8015128:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801512a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801512e:	f811 c00e 	ldrb.w	ip, [r1, lr]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015132:	9902      	ldr	r1, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015134:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015138:	eb01 0c05 	add.w	ip, r1, r5
 801513c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801513e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015142:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8015146:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801514a:	9902      	ldr	r1, [sp, #8]
 801514c:	eba1 0805 	sub.w	r8, r1, r5
 8015150:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8015152:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015156:	f811 5008 	ldrb.w	r5, [r1, r8]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801515a:	9906      	ldr	r1, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801515c:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801515e:	19cd      	adds	r5, r1, r7
 8015160:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8015162:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015166:	5d4d      	ldrb	r5, [r1, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015168:	9906      	ldr	r1, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801516a:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801516c:	1bcf      	subs	r7, r1, r7
 801516e:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8015170:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015174:	5dcd      	ldrb	r5, [r1, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8015176:	9907      	ldr	r1, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015178:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801517a:	190d      	adds	r5, r1, r4
 801517c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801517e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8015182:	5d4d      	ldrb	r5, [r1, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015184:	9907      	ldr	r1, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8015186:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015188:	1b0c      	subs	r4, r1, r4
 801518a:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801518c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015190:	5d0c      	ldrb	r4, [r1, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8015192:	9903      	ldr	r1, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015194:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8015196:	198c      	adds	r4, r1, r6
 8015198:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801519a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801519e:	5d0c      	ldrb	r4, [r1, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80151a0:	9903      	ldr	r1, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80151a2:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80151a4:	1b8e      	subs	r6, r1, r6
 80151a6:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80151a8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80151ac:	5d8c      	ldrb	r4, [r1, r6]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80151ae:	9905      	ldr	r1, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80151b0:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80151b2:	eb01 0409 	add.w	r4, r1, r9
 80151b6:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80151b8:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80151bc:	5d0c      	ldrb	r4, [r1, r4]
 80151be:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80151c0:	9905      	ldr	r1, [sp, #20]
 80151c2:	9801      	ldr	r0, [sp, #4]
 80151c4:	eba1 0109 	sub.w	r1, r1, r9
			     & RANGE_MASK];
 80151c8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80151cc:	5c41      	ldrb	r1, [r0, r1]
 80151ce:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 80151d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151d2:	4553      	cmp	r3, sl
 80151d4:	f47f af1a 	bne.w	801500c <jpeg_idct_12x6+0xe4>
  }
}
 80151d8:	b03b      	add	sp, #236	; 0xec
 80151da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151de:	bf00      	nop
 80151e0:	ffffeeaf 	.word	0xffffeeaf
 80151e4:	ffffde8b 	.word	0xffffde8b
 80151e8:	ffffea5c 	.word	0xffffea5c
 80151ec:	ffffc08c 	.word	0xffffc08c
 80151f0:	ffffc4df 	.word	0xffffc4df

080151f4 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80151f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80151f8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80151fc:	b0af      	sub	sp, #188	; 0xbc
 80151fe:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8015200:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015202:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015204:	320e      	adds	r2, #14
 8015206:	3d04      	subs	r5, #4
  wsptr = workspace;
 8015208:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801520a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801520e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 8015212:	9300      	str	r3, [sp, #0]
 8015214:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015216:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801521a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801521c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015220:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015224:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015226:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015228:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801522c:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801522e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015232:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 8015234:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015236:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801523a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801523e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015242:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015246:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801524a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801524e:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015252:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015254:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8015258:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801525c:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 8015260:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015262:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8015266:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801526a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 801526e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015272:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8015276:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015278:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801527c:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8015280:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8015282:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8015286:	4b6c      	ldr	r3, [pc, #432]	; (8015438 <jpeg_idct_10x5+0x244>)
 8015288:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801528c:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015290:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8015292:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8015296:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801529a:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801529e:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80152a2:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80152a4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80152a8:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80152ac:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80152b0:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80152b4:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80152b8:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80152bc:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80152be:	d1aa      	bne.n	8015216 <jpeg_idct_10x5+0x22>
 80152c0:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 80152c2:	a906      	add	r1, sp, #24
 80152c4:	f1a3 0b04 	sub.w	fp, r3, #4
 80152c8:	3310      	adds	r3, #16
 80152ca:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80152cc:	f85b 3f04 	ldr.w	r3, [fp, #4]!
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80152d0:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 80152d2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    z4 = (INT32) wsptr[4];
 80152d4:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 80152d8:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80152da:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 80152de:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80152e0:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80152e4:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80152e8:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[6];
 80152ec:	f851 cc08 	ldr.w	ip, [r1, #-8]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80152f0:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80152f2:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 80152f4:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80152f8:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 80152fa:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80152fe:	f641 279a 	movw	r7, #6810	; 0x1a9a
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8015302:	006d      	lsls	r5, r5, #1
 8015304:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8015308:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801530c:	9300      	str	r3, [sp, #0]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801530e:	eb05 030c 	add.w	r3, r5, ip
 8015312:	437b      	muls	r3, r7
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8015314:	f241 0771 	movw	r7, #4209	; 0x1071
 8015318:	fb07 3505 	mla	r5, r7, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801531c:	4f46      	ldr	r7, [pc, #280]	; (8015438 <jpeg_idct_10x5+0x244>)
 801531e:	fb07 330c 	mla	r3, r7, ip, r3
    tmp20 = tmp10 + tmp12;
 8015322:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8015326:	1b75      	subs	r5, r6, r5
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8015328:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp21 = tmp11 + tmp13;
 801532c:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 801532e:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8015330:	9501      	str	r5, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8015332:	9302      	str	r3, [sp, #8]
    z2 = (INT32) wsptr[3];
 8015334:	f851 5c14 	ldr.w	r5, [r1, #-20]
    z4 = (INT32) wsptr[7];
 8015338:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 801533c:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8015340:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8015344:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8015346:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801534a:	fb06 f809 	mul.w	r8, r6, r9
    z4 = z3 + tmp12;
 801534e:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8015352:	435d      	muls	r5, r3
    z4 = z3 + tmp12;
 8015354:	eb05 3a46 	add.w	sl, r5, r6, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015358:	f642 46b3 	movw	r6, #11443	; 0x2cb3
 801535c:	fb06 8e02 	mla	lr, r6, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015360:	f240 7614 	movw	r6, #1812	; 0x714
 8015364:	4356      	muls	r6, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8015366:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8015368:	eba6 0608 	sub.w	r6, r6, r8
 801536c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801536e:	f241 26cf 	movw	r6, #4815	; 0x12cf
 8015372:	fb06 f909 	mul.w	r9, r6, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8015376:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 801537a:	ebc5 3546 	rsb	r5, r5, r6, lsl #13
 801537e:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8015382:	1ad3      	subs	r3, r2, r3
 8015384:	035b      	lsls	r3, r3, #13
 8015386:	eba3 3846 	sub.w	r8, r3, r6, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801538a:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801538e:	f642 0353 	movw	r3, #10323	; 0x2853
 8015392:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015394:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015396:	9e04      	ldr	r6, [sp, #16]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015398:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801539c:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80153a0:	eb0c 020e 	add.w	r2, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80153a4:	1b5b      	subs	r3, r3, r5
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80153a6:	ebac 0c0e 	sub.w	ip, ip, lr
			    & RANGE_MASK];
 80153aa:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80153ae:	444d      	add	r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80153b0:	9303      	str	r3, [sp, #12]
			    & RANGE_MASK];
 80153b2:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80153b6:	5c82      	ldrb	r2, [r0, r2]
 80153b8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80153ba:	54f2      	strb	r2, [r6, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80153bc:	9b03      	ldr	r3, [sp, #12]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80153be:	f810 200c 	ldrb.w	r2, [r0, ip]
 80153c2:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80153c4:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80153c6:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 80153c8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80153cc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80153d0:	5c82      	ldrb	r2, [r0, r2]
 80153d2:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80153d4:	5dc3      	ldrb	r3, [r0, r7]
 80153d6:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80153d8:	9b00      	ldr	r3, [sp, #0]
 80153da:	4443      	add	r3, r8
			    & RANGE_MASK];
 80153dc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80153e0:	5cc3      	ldrb	r3, [r0, r3]
 80153e2:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80153e4:	9b00      	ldr	r3, [sp, #0]
 80153e6:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 80153ea:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80153ee:	f810 3008 	ldrb.w	r3, [r0, r8]
 80153f2:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80153f4:	9b02      	ldr	r3, [sp, #8]
 80153f6:	442b      	add	r3, r5
			    & RANGE_MASK];
 80153f8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80153fc:	5cc3      	ldrb	r3, [r0, r3]
 80153fe:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015400:	9b02      	ldr	r3, [sp, #8]
 8015402:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8015404:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015408:	5d43      	ldrb	r3, [r0, r5]
 801540a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801540c:	9b01      	ldr	r3, [sp, #4]
 801540e:	4453      	add	r3, sl
			    & RANGE_MASK];
 8015410:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8015414:	5cc3      	ldrb	r3, [r0, r3]
 8015416:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8015418:	9b01      	ldr	r3, [sp, #4]
 801541a:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 801541e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8015422:	f810 300a 	ldrb.w	r3, [r0, sl]
 8015426:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8015428:	9b05      	ldr	r3, [sp, #20]
 801542a:	455b      	cmp	r3, fp
 801542c:	f47f af4e 	bne.w	80152cc <jpeg_idct_10x5+0xd8>
  }
}
 8015430:	b02f      	add	sp, #188	; 0xbc
 8015432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015436:	bf00      	nop
 8015438:	ffffba5c 	.word	0xffffba5c

0801543c <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015440:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8015444:	b0a5      	sub	sp, #148	; 0x94
 8015446:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8015448:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801544a:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801544e:	f102 070e 	add.w	r7, r2, #14
 8015452:	3d04      	subs	r5, #4
  wsptr = workspace;
 8015454:	a804      	add	r0, sp, #16
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8015456:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801545a:	f641 0e7e 	movw	lr, #6270	; 0x187e
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801545e:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015462:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015464:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015468:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801546c:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801546e:	fb02 f404 	mul.w	r4, r2, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015472:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015474:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015478:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801547c:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8015480:	4966      	ldr	r1, [pc, #408]	; (801561c <jpeg_idct_8x4+0x1e0>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8015482:	eb04 0902 	add.w	r9, r4, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8015486:	eba4 0402 	sub.w	r4, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801548a:	6a2a      	ldr	r2, [r5, #32]
 801548c:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015490:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8015492:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8015496:	eb0a 020b 	add.w	r2, sl, fp
 801549a:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801549e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80154a2:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80154a6:	fb01 220b 	mla	r2, r1, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80154aa:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80154ae:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 80154b2:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 80154b6:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 80154ba:	eb02 0984 	add.w	r9, r2, r4, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 80154be:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 80154c2:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 80154c6:	f8c0 a05c 	str.w	sl, [r0, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 80154ca:	f8c0 901c 	str.w	r9, [r0, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 80154ce:	63c2      	str	r2, [r0, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80154d0:	d1c5      	bne.n	801545e <jpeg_idct_8x4+0x22>
 80154d2:	f1a3 0804 	sub.w	r8, r3, #4

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80154d6:	a904      	add	r1, sp, #16
 80154d8:	330c      	adds	r3, #12
 80154da:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80154dc:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80154e0:	f241 1051 	movw	r0, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 80154e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 80154e6:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 80154e8:	9302      	str	r3, [sp, #8]
 80154ea:	189c      	adds	r4, r3, r2
    z3 = (INT32) wsptr[6];
 80154ec:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z2 = (INT32) wsptr[2];
 80154f0:	f851 2c18 	ldr.w	r2, [r1, #-24]
    z3 = (INT32) wsptr[4];
 80154f4:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80154f8:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = (INT32) wsptr[5];
 80154fc:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    tmp3 = (INT32) wsptr[1];
 8015500:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015504:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8015508:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 801550c:	f851 7c04 	ldr.w	r7, [r1, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8015510:	fb00 b202 	mla	r2, r0, r2, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015514:	4841      	ldr	r0, [pc, #260]	; (801561c <jpeg_idct_8x4+0x1e0>)
 8015516:	fb00 bb03 	mla	fp, r0, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801551a:	f851 3c20 	ldr.w	r3, [r1, #-32]
 801551e:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8015520:	1958      	adds	r0, r3, r5
    tmp1 = (z2 - z3) << CONST_BITS;
 8015522:	1b5b      	subs	r3, r3, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015524:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 8015528:	eb02 3640 	add.w	r6, r2, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 801552c:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8015530:	9200      	str	r2, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8015532:	eb0b 3243 	add.w	r2, fp, r3, lsl #13
    tmp12 = tmp1 - tmp3;
 8015536:	ebcb 3b43 	rsb	fp, fp, r3, lsl #13
    z2 = tmp0 + tmp2;
 801553a:	f851 3c14 	ldr.w	r3, [r1, #-20]
    tmp11 = tmp1 + tmp3;
 801553e:	9201      	str	r2, [sp, #4]
    z3 = tmp1 + tmp3;
 8015540:	eb0e 0209 	add.w	r2, lr, r9
    z2 = tmp0 + tmp2;
 8015544:	18f8      	adds	r0, r7, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015546:	1883      	adds	r3, r0, r2
 8015548:	436b      	muls	r3, r5
    z2 += z1;
 801554a:	4d35      	ldr	r5, [pc, #212]	; (8015620 <jpeg_idct_8x4+0x1e4>)
 801554c:	fb05 3000 	mla	r0, r5, r0, r3
    z3 += z1;
 8015550:	4d34      	ldr	r5, [pc, #208]	; (8015624 <jpeg_idct_8x4+0x1e8>)
 8015552:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8015556:	eb07 0209 	add.w	r2, r7, r9
 801555a:	4d33      	ldr	r5, [pc, #204]	; (8015628 <jpeg_idct_8x4+0x1ec>)
 801555c:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 801555e:	f640 158e 	movw	r5, #2446	; 0x98e
 8015562:	eb00 0a02 	add.w	sl, r0, r2
    tmp3 += z1 + z3;
 8015566:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8015568:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801556c:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 8015570:	f243 0a0b 	movw	sl, #12299	; 0x300b
 8015574:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015578:	eb0e 0905 	add.w	r9, lr, r5
 801557c:	4d2b      	ldr	r5, [pc, #172]	; (801562c <jpeg_idct_8x4+0x1f0>)
    tmp1 += z1 + z3;
 801557e:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015582:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 8015586:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 801558a:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 801558c:	4448      	add	r0, r9
 801558e:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 8015592:	fb0a 3a0e 	mla	sl, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015596:	eb06 0e02 	add.w	lr, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801559a:	1ab6      	subs	r6, r6, r2
    tmp2 += z1 + z2;
 801559c:	fb09 0005 	mla	r0, r9, r5, r0
			    & RANGE_MASK];
 80155a0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80155a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155a6:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 80155a8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80155ac:	f81c e00e 	ldrb.w	lr, [ip, lr]
 80155b0:	f805 e003 	strb.w	lr, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80155b4:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80155b6:	f81c 2006 	ldrb.w	r2, [ip, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80155ba:	eba3 0900 	sub.w	r9, r3, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80155be:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80155c0:	181a      	adds	r2, r3, r0
			    & RANGE_MASK];
 80155c2:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80155c6:	ebab 030a 	sub.w	r3, fp, sl
			    & RANGE_MASK];
 80155ca:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80155ce:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80155d2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80155d6:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80155d8:	f81c 2009 	ldrb.w	r2, [ip, r9]
 80155dc:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80155de:	eb0b 020a 	add.w	r2, fp, sl
			    & RANGE_MASK];
 80155e2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80155e6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80155ea:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80155ec:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80155f0:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80155f2:	9b00      	ldr	r3, [sp, #0]
 80155f4:	443b      	add	r3, r7
			    & RANGE_MASK];
 80155f6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80155fa:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80155fe:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8015600:	9b00      	ldr	r3, [sp, #0]
 8015602:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8015604:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8015608:	f81c 3007 	ldrb.w	r3, [ip, r7]
 801560c:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 801560e:	9b03      	ldr	r3, [sp, #12]
 8015610:	4543      	cmp	r3, r8
 8015612:	f47f af63 	bne.w	80154dc <jpeg_idct_8x4+0xa0>
  }
}
 8015616:	b025      	add	sp, #148	; 0x94
 8015618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801561c:	ffffc4df 	.word	0xffffc4df
 8015620:	ffffc13b 	.word	0xffffc13b
 8015624:	fffff384 	.word	0xfffff384
 8015628:	ffffe333 	.word	0xffffe333
 801562c:	ffffadfd 	.word	0xffffadfd

08015630 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015634:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015636:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801563a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801563c:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8015640:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015642:	3080      	adds	r0, #128	; 0x80
 8015644:	f102 040a 	add.w	r4, r2, #10
 8015648:	f1a1 0c04 	sub.w	ip, r1, #4
 801564c:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801564e:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015652:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015656:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015658:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801565c:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801565e:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015662:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8015666:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015668:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801566c:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015670:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015674:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 <<= CONST_BITS;
 8015678:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801567c:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015680:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8015684:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015688:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 801568c:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8015690:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015694:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8015698:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801569c:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80156a0:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80156a4:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80156a6:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80156aa:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80156ae:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80156b2:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80156b4:	d1d0      	bne.n	8015658 <jpeg_idct_6x3+0x28>
 80156b6:	f1a3 0e04 	sub.w	lr, r3, #4
 80156ba:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80156be:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80156c2:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 80156c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80156c8:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80156ca:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 80156ce:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 80156d0:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80156d4:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80156d8:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80156dc:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80156e0:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 80156e4:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80156e8:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 80156ec:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 80156f0:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 80156f4:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80156f8:	f242 7131 	movw	r1, #10033	; 0x2731
 80156fc:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8015700:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 8015704:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 8015708:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801570c:	eb04 0508 	add.w	r5, r4, r8
 8015710:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8015714:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8015718:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 801571c:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8015720:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015724:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8015726:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 801572a:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801572e:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015732:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015736:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 801573a:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 801573e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015742:	5d04      	ldrb	r4, [r0, r4]
 8015744:	981e      	ldr	r0, [sp, #120]	; 0x78
 8015746:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801574a:	9801      	ldr	r0, [sp, #4]
 801574c:	5d84      	ldrb	r4, [r0, r6]
 801574e:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8015750:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8015754:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8015758:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 801575c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8015760:	5d04      	ldrb	r4, [r0, r4]
 8015762:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8015764:	f810 3008 	ldrb.w	r3, [r0, r8]
 8015768:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801576a:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801576e:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 8015772:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8015776:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801577a:	5cc3      	ldrb	r3, [r0, r3]
 801577c:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801577e:	5d43      	ldrb	r3, [r0, r5]
 8015780:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8015782:	d19c      	bne.n	80156be <jpeg_idct_6x3+0x8e>
  }
}
 8015784:	b015      	add	sp, #84	; 0x54
 8015786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801578c <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015790:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015792:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8015796:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8015798:	1e96      	subs	r6, r2, #2
 801579a:	f10d 0c08 	add.w	ip, sp, #8
 801579e:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80157a0:	3c04      	subs	r4, #4
 80157a2:	f102 0e06 	add.w	lr, r2, #6
 80157a6:	4660      	mov	r0, ip
{
 80157a8:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80157aa:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 80157ae:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80157b2:	45b6      	cmp	lr, r6
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80157b4:	fb01 f202 	mul.w	r2, r1, r2

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80157b8:	6a27      	ldr	r7, [r4, #32]
 80157ba:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 80157be:	fb07 f101 	mul.w	r1, r7, r1

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 80157c2:	eb02 0701 	add.w	r7, r2, r1
    wsptr[4*1] = tmp10 - tmp0;
 80157c6:	eba2 0201 	sub.w	r2, r2, r1
    wsptr[4*0] = tmp10 + tmp0;
 80157ca:	f84c 7b04 	str.w	r7, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 80157ce:	f8cc 200c 	str.w	r2, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80157d2:	d1ea      	bne.n	80157aa <jpeg_idct_4x2+0x1e>
 80157d4:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80157d6:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80157da:	f641 097e 	movw	r9, #6270	; 0x187e
 80157de:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 80157e2:	46e0      	mov	r8, ip
 80157e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80157e6:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 80157ea:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 80157ec:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 80157f0:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 80157f4:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 80157f8:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 80157fc:	3404      	adds	r4, #4
    z2 = wsptr[1];
 80157fe:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8015802:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8015806:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8015808:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801580a:	4b13      	ldr	r3, [pc, #76]	; (8015858 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801580c:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8015810:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015814:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015818:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801581a:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801581e:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8015822:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8015826:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801582a:	5def      	ldrb	r7, [r5, r7]
 801582c:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015830:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8015832:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015834:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8015836:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801583a:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 801583e:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8015840:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8015844:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8015848:	5c69      	ldrb	r1, [r5, r1]
 801584a:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801584c:	5caa      	ldrb	r2, [r5, r2]
 801584e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8015850:	d1c7      	bne.n	80157e2 <jpeg_idct_4x2+0x56>
  }
}
 8015852:	b00b      	add	sp, #44	; 0x2c
 8015854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015858:	ffffc4df 	.word	0xffffc4df

0801585c <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801585c:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801585e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8015862:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8015864:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015866:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8015868:	f9b2 3000 	ldrsh.w	r3, [r2]
 801586c:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801586e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015872:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8015874:	437b      	muls	r3, r7
{
 8015876:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8015878:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801587a:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 801587c:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801587e:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8015880:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8015882:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8015886:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801588a:	5c41      	ldrb	r1, [r0, r1]
 801588c:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 801588e:	5cc3      	ldrb	r3, [r0, r3]
 8015890:	7073      	strb	r3, [r6, #1]
}
 8015892:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015894 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015898:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 801589c:	f1a2 0802 	sub.w	r8, r2, #2
 80158a0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80158a2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80158a6:	3380      	adds	r3, #128	; 0x80
 80158a8:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80158aa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80158ac:	f1a3 0904 	sub.w	r9, r3, #4
 80158b0:	f102 030e 	add.w	r3, r2, #14
 80158b4:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 80158b6:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80158b8:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80158bc:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80158c0:	f859 1f04 	ldr.w	r1, [r9, #4]!
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80158c4:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80158c8:	f9b8 0040 	ldrsh.w	r0, [r8, #64]	; 0x40
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80158cc:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80158d0:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80158d2:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80158d6:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80158d8:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 80158da:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80158dc:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80158e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80158e4:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80158e6:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80158e8:	f9b8 4020 	ldrsh.w	r4, [r8, #32]
    tmp10 = tmp0 + tmp1;
 80158ec:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 80158ee:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 80158f0:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 80158f2:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80158f6:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80158fa:	4ad3      	ldr	r2, [pc, #844]	; (8015c48 <jpeg_idct_8x16+0x3b4>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80158fc:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015900:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
 8015904:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8015908:	4361      	muls	r1, r4
    z3 = z1 - z2;
 801590a:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801590e:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8015912:	f642 4563 	movw	r5, #11363	; 0x2c63
 8015916:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8015918:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801591c:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8015920:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8015924:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8015928:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801592c:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 8015930:	eb07 020c 	add.w	r2, r7, ip
 8015934:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8015936:	eba7 020c 	sub.w	r2, r7, ip
 801593a:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801593c:	1972      	adds	r2, r6, r5
 801593e:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8015940:	1b72      	subs	r2, r6, r5

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015942:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8015946:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8015948:	eb0b 0204 	add.w	r2, fp, r4
 801594c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801594e:	ebab 0204 	sub.w	r2, fp, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015952:	f9b8 4070 	ldrsh.w	r4, [r8, #112]	; 0x70
    tmp25 = tmp13 - tmp2;
 8015956:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8015958:	1842      	adds	r2, r0, r1
 801595a:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 801595c:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801595e:	f9b8 1010 	ldrsh.w	r1, [r8, #16]
    tmp24 = tmp11 - tmp3;
 8015962:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015964:	f8d9 2020 	ldr.w	r2, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015968:	f9b8 0030 	ldrsh.w	r0, [r8, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801596c:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801596e:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 8015972:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015974:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8015978:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801597a:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801597e:	188e      	adds	r6, r1, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8015980:	eba1 0b02 	sub.w	fp, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015984:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8015986:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 801598a:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801598c:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801598e:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8015992:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8015996:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801599a:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801599e:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80159a2:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80159a6:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80159aa:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80159ae:	f241 5455 	movw	r4, #5461	; 0x1555
 80159b2:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 80159b4:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80159b8:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80159ba:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 80159be:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80159c0:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80159c4:	4ca1      	ldr	r4, [pc, #644]	; (8015c4c <jpeg_idct_8x16+0x3b8>)
 80159c6:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 80159ca:	4fa1      	ldr	r7, [pc, #644]	; (8015c50 <jpeg_idct_8x16+0x3bc>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 80159cc:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80159ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80159d0:	4464      	add	r4, ip
 80159d2:	445c      	add	r4, fp
 80159d4:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80159d8:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80159da:	4f9e      	ldr	r7, [pc, #632]	; (8015c54 <jpeg_idct_8x16+0x3c0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80159dc:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80159de:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80159e2:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80159e4:	f240 214d 	movw	r1, #589	; 0x24d
 80159e8:	fb01 4102 	mla	r1, r1, r2, r4
 80159ec:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80159ee:	499a      	ldr	r1, [pc, #616]	; (8015c58 <jpeg_idct_8x16+0x3c4>)
 80159f0:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80159f4:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80159f6:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80159f8:	f642 5a09 	movw	sl, #11529	; 0x2d09
 80159fc:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8015a00:	fb07 1a05 	mla	sl, r7, r5, r1
 8015a04:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015a06:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8015a08:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8015a0c:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8015a10:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8015a12:	4992      	ldr	r1, [pc, #584]	; (8015c5c <jpeg_idct_8x16+0x3c8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8015a14:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8015a16:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8015a1a:	4351      	muls	r1, r2
    tmp1  += z1;
 8015a1c:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8015a1e:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8015a22:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8015a26:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8015a28:	498d      	ldr	r1, [pc, #564]	; (8015c60 <jpeg_idct_8x16+0x3cc>)
 8015a2a:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8015a2c:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8015a30:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8015a32:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8015a36:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8015a38:	eb05 0b00 	add.w	fp, r5, r0
 8015a3c:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8015a3e:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8015a40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8015a42:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8015a46:	f640 5123 	movw	r1, #3363	; 0xd23
 8015a4a:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8015a4c:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8015a4e:	445c      	add	r4, fp
    tmp3  += z2;
 8015a50:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8015a52:	4429      	add	r1, r5
    tmp10 += z2;
 8015a54:	4484      	add	ip, r0
    tmp11 += z2;
 8015a56:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8015a58:	12c9      	asrs	r1, r1, #11
 8015a5a:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8015a5e:	9901      	ldr	r1, [sp, #4]
 8015a60:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8015a62:	9903      	ldr	r1, [sp, #12]
 8015a64:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8015a66:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8015a68:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8015a6a:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8015a6e:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8015a70:	9903      	ldr	r1, [sp, #12]
 8015a72:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8015a74:	9905      	ldr	r1, [sp, #20]
 8015a76:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8015a78:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8015a7a:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8015a7c:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8015a80:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8015a82:	9905      	ldr	r1, [sp, #20]
 8015a84:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8015a86:	9907      	ldr	r1, [sp, #28]
 8015a88:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8015a8a:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8015a8c:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8015a8e:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8015a92:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8015a94:	9907      	ldr	r1, [sp, #28]
 8015a96:	eba1 0e0e 	sub.w	lr, r1, lr
 8015a9a:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8015a9e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8015aa2:	9908      	ldr	r1, [sp, #32]
 8015aa4:	4461      	add	r1, ip
 8015aa6:	12c9      	asrs	r1, r1, #11
 8015aa8:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8015aaa:	9908      	ldr	r1, [sp, #32]
 8015aac:	eba1 0c0c 	sub.w	ip, r1, ip
 8015ab0:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8015ab4:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8015ab8:	9906      	ldr	r1, [sp, #24]
 8015aba:	4401      	add	r1, r0
 8015abc:	12c9      	asrs	r1, r1, #11
 8015abe:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8015ac2:	9906      	ldr	r1, [sp, #24]
 8015ac4:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8015ac6:	9904      	ldr	r1, [sp, #16]
 8015ac8:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8015aca:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8015acc:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8015ace:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8015ad2:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8015ad6:	9904      	ldr	r1, [sp, #16]
 8015ad8:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8015ada:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8015adc:	12d2      	asrs	r2, r2, #11
 8015ade:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8015ae2:	9a02      	ldr	r2, [sp, #8]
 8015ae4:	440a      	add	r2, r1
 8015ae6:	12d2      	asrs	r2, r2, #11
 8015ae8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8015aec:	9a02      	ldr	r2, [sp, #8]
 8015aee:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8015af2:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015af4:	4542      	cmp	r2, r8
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8015af6:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015afa:	f47f aedd 	bne.w	80158b8 <jpeg_idct_8x16+0x24>
 8015afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8015b00:	a80e      	add	r0, sp, #56	; 0x38
 8015b02:	f1a3 0904 	sub.w	r9, r3, #4
 8015b06:	333c      	adds	r3, #60	; 0x3c
 8015b08:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8015b0a:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015b0e:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8015b12:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8015b14:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8015b16:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8015b1a:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 8015b1c:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8015b20:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015b22:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8015b24:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp1 = (INT32) wsptr[5];
 8015b28:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015b2c:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8015b2e:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp2 = (INT32) wsptr[3];
 8015b32:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8015b36:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015b3a:	4c4a      	ldr	r4, [pc, #296]	; (8015c64 <jpeg_idct_8x16+0x3d0>)
    tmp3 = (INT32) wsptr[1];
 8015b3c:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015b40:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015b44:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp0 = (INT32) wsptr[7];
 8015b48:	f850 cc04 	ldr.w	ip, [r0, #-4]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015b4c:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8015b4e:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8015b50:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8015b52:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8015b56:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 8015b5a:	eb0c 040e 	add.w	r4, ip, lr
    tmp11 = tmp1 + tmp3;
 8015b5e:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8015b62:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8015b64:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 8015b68:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 8015b6c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015b6e:	f242 53a1 	movw	r3, #9633	; 0x25a1
 8015b72:	1862      	adds	r2, r4, r1
 8015b74:	435a      	muls	r2, r3
    z2 += z1;
 8015b76:	4b3c      	ldr	r3, [pc, #240]	; (8015c68 <jpeg_idct_8x16+0x3d4>)
 8015b78:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 8015b7c:	4b3b      	ldr	r3, [pc, #236]	; (8015c6c <jpeg_idct_8x16+0x3d8>)
 8015b7e:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8015b82:	eb0c 010a 	add.w	r1, ip, sl
 8015b86:	4b3a      	ldr	r3, [pc, #232]	; (8015c70 <jpeg_idct_8x16+0x3dc>)
 8015b88:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 8015b8a:	f640 138e 	movw	r3, #2446	; 0x98e
 8015b8e:	eb04 0b01 	add.w	fp, r4, r1
    tmp3 += z1 + z3;
 8015b92:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 8015b94:	fb03 bc0c 	mla	ip, r3, ip, fp
    tmp3 += z1 + z3;
 8015b98:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015b9c:	4b35      	ldr	r3, [pc, #212]	; (8015c74 <jpeg_idct_8x16+0x3e0>)
    tmp3 += z1 + z3;
 8015b9e:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015ba2:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8015ba6:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015baa:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015bae:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8015bb0:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8015bb2:	4454      	add	r4, sl
 8015bb4:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8015bb8:	fb0b 2b08 	mla	fp, fp, r8, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015bbc:	eb07 0801 	add.w	r8, r7, r1
    tmp2 += z1 + z2;
 8015bc0:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015bc4:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
 8015bc6:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8015bca:	1a7f      	subs	r7, r7, r1
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8015bcc:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015bd0:	f813 e008 	ldrb.w	lr, [r3, r8]
			    & RANGE_MASK];
 8015bd4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015bd8:	9b03      	ldr	r3, [sp, #12]
			    & RANGE_MASK];
 8015bda:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015bde:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8015be2:	9b00      	ldr	r3, [sp, #0]
 8015be4:	5dd9      	ldrb	r1, [r3, r7]
 8015be6:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8015be8:	1931      	adds	r1, r6, r4
			    & RANGE_MASK];
 8015bea:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8015bee:	5c59      	ldrb	r1, [r3, r1]
 8015bf0:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8015bf2:	f813 100a 	ldrb.w	r1, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8015bf6:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8015bf8:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8015bfa:	eb03 010b 	add.w	r1, r3, fp
 8015bfe:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015c00:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8015c04:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8015c06:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8015c08:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8015c0a:	eba3 020b 	sub.w	r2, r3, fp
 8015c0e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015c10:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8015c14:	5c9b      	ldrb	r3, [r3, r2]
 8015c16:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8015c18:	9b01      	ldr	r3, [sp, #4]
 8015c1a:	9a00      	ldr	r2, [sp, #0]
 8015c1c:	4463      	add	r3, ip
			    & RANGE_MASK];
 8015c1e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8015c22:	5cd3      	ldrb	r3, [r2, r3]
 8015c24:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8015c26:	9b01      	ldr	r3, [sp, #4]
 8015c28:	eba3 0c0c 	sub.w	ip, r3, ip
			    & RANGE_MASK];
 8015c2c:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8015c30:	f812 300c 	ldrb.w	r3, [r2, ip]
 8015c34:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8015c36:	9b04      	ldr	r3, [sp, #16]
 8015c38:	454b      	cmp	r3, r9
 8015c3a:	f47f af66 	bne.w	8015b0a <jpeg_idct_8x16+0x276>
  }
}
 8015c3e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8015c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c46:	bf00      	nop
 8015c48:	ffffecc2 	.word	0xffffecc2
 8015c4c:	ffffb6d6 	.word	0xffffb6d6
 8015c50:	ffffc542 	.word	0xffffc542
 8015c54:	ffffe77a 	.word	0xffffe77a
 8015c58:	ffffdbfa 	.word	0xffffdbfa
 8015c5c:	ffffeaab 	.word	0xffffeaab
 8015c60:	ffffd817 	.word	0xffffd817
 8015c64:	ffffc4df 	.word	0xffffc4df
 8015c68:	ffffc13b 	.word	0xffffc13b
 8015c6c:	fffff384 	.word	0xfffff384
 8015c70:	ffffe333 	.word	0xffffe333
 8015c74:	ffffadfd 	.word	0xffffadfd

08015c78 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c7c:	b0ef      	sub	sp, #444	; 0x1bc
 8015c7e:	f1a2 0e02 	sub.w	lr, r2, #2
 8015c82:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015c84:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015c88:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8015c8a:	3380      	adds	r3, #128	; 0x80
 8015c8c:	3804      	subs	r0, #4
 8015c8e:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8015c90:	f102 030c 	add.w	r3, r2, #12
 8015c94:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8015c96:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015c98:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8015c9c:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015ca0:	f850 1f04 	ldr.w	r1, [r0, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8015ca4:	f641 0b14 	movw	fp, #6164	; 0x1814
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015ca8:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8015cac:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015cae:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015cb0:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8015cb4:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8015cb6:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 8015cba:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8015cbc:	fb01 f604 	mul.w	r6, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8015cc0:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015cc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8015cc8:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8015ccc:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8015cd0:	1997      	adds	r7, r2, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8015cd2:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8015cd4:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8015cd6:	eb02 050c 	add.w	r5, r2, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8015cda:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8015cde:	1b36      	subs	r6, r6, r4
    tmp12 = z1 - z4;
 8015ce0:	eba2 0904 	sub.w	r9, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015ce4:	f9be 4020 	ldrsh.w	r4, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8015ce8:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015cec:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8015cf0:	49b7      	ldr	r1, [pc, #732]	; (8015fd0 <jpeg_idct_7x14+0x358>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8015cf2:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015cf4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8015cf6:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015cf8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8015cfc:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8015cfe:	1916      	adds	r6, r2, r4
 8015d00:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8015d04:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8015d08:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8015d0c:	fb01 6604 	mla	r6, r1, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8015d10:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 8015d14:	434c      	muls	r4, r1
    tmp20 = tmp10 + tmp13;
 8015d16:	eb07 010c 	add.w	r1, r7, ip
 8015d1a:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8015d1c:	eba7 010c 	sub.w	r1, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8015d20:	fb08 4202 	mla	r2, r8, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015d24:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp26 = tmp10 - tmp13;
 8015d28:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 8015d2a:	19a9      	adds	r1, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015d2c:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8015d30:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8015d32:	1ba9      	subs	r1, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015d34:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8015d38:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8015d3a:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 8015d3e:	eba9 0202 	sub.w	r2, r9, r2
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8015d42:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 8015d46:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8015d48:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015d4a:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015d4c:	f9be 1070 	ldrsh.w	r1, [lr, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015d50:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015d52:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8015d54:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015d56:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8015d5a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015d5c:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8015d60:	eb04 0a07 	add.w	sl, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015d64:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8015d66:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8015d6a:	eb04 0c06 	add.w	ip, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8015d6e:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8015d72:	f242 6152 	movw	r1, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8015d76:	fb0b fb0c 	mul.w	fp, fp, ip
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8015d7a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8015d7e:	4995      	ldr	r1, [pc, #596]	; (8015fd4 <jpeg_idct_7x14+0x35c>)
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8015d80:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8015d84:	eb0a 0805 	add.w	r8, sl, r5
 8015d88:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 8015d8c:	fb01 8804 	mla	r8, r1, r4, r8
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8015d90:	f201 211b 	addw	r1, r1, #539	; 0x21b
 8015d94:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 8015d98:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8015d9a:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 8015d9e:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8015da0:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8015da4:	4c8c      	ldr	r4, [pc, #560]	; (8015fd8 <jpeg_idct_7x14+0x360>)
    tmp16 += tmp15;
 8015da6:	4449      	add	r1, r9
 8015da8:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8015daa:	19b9      	adds	r1, r7, r6
 8015dac:	fb0c f101 	mul.w	r1, ip, r1
 8015db0:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8015db4:	fb04 1c07 	mla	ip, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8015db8:	4c88      	ldr	r4, [pc, #544]	; (8015fdc <jpeg_idct_7x14+0x364>)
 8015dba:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8015dbe:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8015dc0:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8015dc4:	4c86      	ldr	r4, [pc, #536]	; (8015fe0 <jpeg_idct_7x14+0x368>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8015dc6:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8015dc8:	1bf5      	subs	r5, r6, r7
 8015dca:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8015dce:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8015dd2:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8015dd6:	9c07      	ldr	r4, [sp, #28]
 8015dd8:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8015dda:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8015ddc:	f241 5b99 	movw	fp, #5529	; 0x1599

    tmp13 = (z1 - z3) << PASS1_BITS;
 8015de0:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015de2:	9a01      	ldr	r2, [sp, #4]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8015de4:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015de8:	4442      	add	r2, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 8015dea:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8015dec:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015dee:	12d2      	asrs	r2, r2, #11
 8015df0:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015df4:	9a01      	ldr	r2, [sp, #4]
 8015df6:	eba2 0208 	sub.w	r2, r2, r8
 8015dfa:	12d2      	asrs	r2, r2, #11
 8015dfc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015e00:	9a03      	ldr	r2, [sp, #12]
 8015e02:	4452      	add	r2, sl
 8015e04:	12d2      	asrs	r2, r2, #11
 8015e06:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015e08:	9a03      	ldr	r2, [sp, #12]
 8015e0a:	eba2 0a0a 	sub.w	sl, r2, sl
 8015e0e:	ea4f 22ea 	mov.w	r2, sl, asr #11
 8015e12:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8015e16:	9a05      	ldr	r2, [sp, #20]
 8015e18:	440a      	add	r2, r1
 8015e1a:	12d2      	asrs	r2, r2, #11
 8015e1c:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015e1e:	9a05      	ldr	r2, [sp, #20]
 8015e20:	1a51      	subs	r1, r2, r1
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8015e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e24:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015e28:	12c9      	asrs	r1, r1, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8015e2a:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8015e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015e2e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8015e32:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015e36:	9a06      	ldr	r2, [sp, #24]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8015e38:	9908      	ldr	r1, [sp, #32]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015e3a:	4462      	add	r2, ip
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8015e3c:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015e40:	12d2      	asrs	r2, r2, #11
 8015e42:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015e44:	9a06      	ldr	r2, [sp, #24]
 8015e46:	eba2 0c0c 	sub.w	ip, r2, ip
 8015e4a:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8015e4e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8015e52:	9a04      	ldr	r2, [sp, #16]
 8015e54:	442a      	add	r2, r5
 8015e56:	12d2      	asrs	r2, r2, #11
 8015e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015e5c:	9a04      	ldr	r2, [sp, #16]
 8015e5e:	1b55      	subs	r5, r2, r5
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8015e60:	9a02      	ldr	r2, [sp, #8]
 8015e62:	440a      	add	r2, r1
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015e64:	12ed      	asrs	r5, r5, #11
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8015e66:	12d2      	asrs	r2, r2, #11
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015e68:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8015e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8015e70:	9a02      	ldr	r2, [sp, #8]
 8015e72:	1a52      	subs	r2, r2, r1
 8015e74:	12d2      	asrs	r2, r2, #11
 8015e76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8015e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e7c:	4572      	cmp	r2, lr
 8015e7e:	f47f af0b 	bne.w	8015c98 <jpeg_idct_7x14+0x20>
 8015e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8015e84:	ac0c      	add	r4, sp, #48	; 0x30
 8015e86:	f1a3 0904 	sub.w	r9, r3, #4
 8015e8a:	3334      	adds	r3, #52	; 0x34
 8015e8c:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8015e8e:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8015e92:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 8015e94:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 8015e96:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8015e9a:	189e      	adds	r6, r3, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8015e9c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 8015ea0:	9303      	str	r3, [sp, #12]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8015ea2:	1b51      	subs	r1, r2, r5
 8015ea4:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8015ea8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8015eac:	fb02 fe01 	mul.w	lr, r2, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8015eb0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015eb4:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp10 = z1 + z3;
 8015eb8:	eb03 0805 	add.w	r8, r3, r5
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8015ebc:	eba3 0c02 	sub.w	ip, r3, r2
 8015ec0:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015ec4:	3710      	adds	r7, #16
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8015ec6:	4947      	ldr	r1, [pc, #284]	; (8015fe4 <jpeg_idct_7x14+0x36c>)
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8015ec8:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8015ecc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8015ed0:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8015ed4:	eb0e 000c 	add.w	r0, lr, ip
 8015ed8:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8015edc:	fb01 0002 	mla	r0, r1, r2, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8015ee0:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8015ee4:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8015ee8:	fb02 f208 	mul.w	r2, r2, r8
 8015eec:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8015ef0:	fb01 2105 	mla	r1, r1, r5, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8015ef4:	4d3c      	ldr	r5, [pc, #240]	; (8015fe8 <jpeg_idct_7x14+0x370>)
 8015ef6:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 8015efa:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8015efe:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 8015f00:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8015f04:	4463      	add	r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8015f06:	eb02 050a 	add.w	r5, r2, sl
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8015f0a:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8015f0c:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8015f0e:	f641 53ef 	movw	r3, #7663	; 0x1def
 8015f12:	fb03 fb05 	mul.w	fp, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8015f16:	eba2 050a 	sub.w	r5, r2, sl
 8015f1a:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8015f1e:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8015f20:	44f2      	add	sl, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8015f22:	435d      	muls	r5, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8015f24:	4b31      	ldr	r3, [pc, #196]	; (8015fec <jpeg_idct_7x14+0x374>)
    tmp10 = tmp11 - tmp12;
 8015f26:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 8015f2a:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8015f2c:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8015f30:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015f34:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8015f36:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8015f3a:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8015f3e:	4455      	add	r5, sl
    tmp10 += z2;
 8015f40:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8015f42:	fb0b 220e 	mla	r2, fp, lr, r2
 8015f46:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015f48:	eb01 020c 	add.w	r2, r1, ip
 8015f4c:	9978      	ldr	r1, [sp, #480]	; 0x1e0
			    & RANGE_MASK];
 8015f4e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015f52:	5c9a      	ldrb	r2, [r3, r2]
 8015f54:	9b03      	ldr	r3, [sp, #12]
 8015f56:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015f58:	9b01      	ldr	r3, [sp, #4]
 8015f5a:	eba3 0c0c 	sub.w	ip, r3, ip
 8015f5e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015f60:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015f64:	f813 200c 	ldrb.w	r2, [r3, ip]
 8015f68:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015f6a:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015f6c:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8015f6e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8015f72:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015f76:	5c9a      	ldrb	r2, [r3, r2]
 8015f78:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015f7a:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015f7c:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015f7e:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015f80:	eb03 020a 	add.w	r2, r3, sl
 8015f84:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015f86:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015f8a:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015f8c:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015f8e:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015f90:	eba3 0a0a 	sub.w	sl, r3, sl
 8015f94:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8015f96:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015f9a:	f813 300a 	ldrb.w	r3, [r3, sl]
 8015f9e:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8015fa0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8015fa4:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8015fa8:	f642 5341 	movw	r3, #11585	; 0x2d41
 8015fac:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8015fb0:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8015fb2:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8015fb6:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8015fba:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015fbe:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8015fc0:	9b04      	ldr	r3, [sp, #16]
 8015fc2:	454b      	cmp	r3, r9
 8015fc4:	f47f af63 	bne.w	8015e8e <jpeg_idct_7x14+0x216>
  }
}
 8015fc8:	b06f      	add	sp, #444	; 0x1bc
 8015fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fce:	bf00      	nop
 8015fd0:	ffffc8fc 	.word	0xffffc8fc
 8015fd4:	ffffdbf0 	.word	0xffffdbf0
 8015fd8:	fffff26e 	.word	0xfffff26e
 8015fdc:	ffffb409 	.word	0xffffb409
 8015fe0:	ffffc9e6 	.word	0xffffc9e6
 8015fe4:	ffffc515 	.word	0xffffc515
 8015fe8:	ffffb0f1 	.word	0xffffb0f1
 8015fec:	ffffd3e1 	.word	0xffffd3e1

08015ff0 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff4:	b0d3      	sub	sp, #332	; 0x14c
 8015ff6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8015ff8:	f1a2 0a02 	sub.w	sl, r2, #2
 8015ffc:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015ffe:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8016002:	3380      	adds	r3, #128	; 0x80
 8016004:	9301      	str	r3, [sp, #4]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8016006:	1f0b      	subs	r3, r1, #4
 8016008:	9300      	str	r3, [sp, #0]
 801600a:	f102 030a 	add.w	r3, r2, #10
 801600e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8016010:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016012:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8016014:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016018:	f93a 7f02 	ldrsh.w	r7, [sl, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801601c:	f640 0b5b 	movw	fp, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016020:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8016024:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8016026:	f9ba 0040 	ldrsh.w	r0, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801602a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801602c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016030:	f9ba 5020 	ldrsh.w	r5, [sl, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8016034:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8016036:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801603a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801603c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801603e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016040:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8016042:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8016046:	f9ba c060 	ldrsh.w	ip, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801604a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801604c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016050:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8016054:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8016058:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 801605a:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 801605c:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801605e:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 8016062:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8016066:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8016068:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 801606c:	eb07 010c 	add.w	r1, r7, ip
 8016070:	9102      	str	r1, [sp, #8]
    tmp24 = z3 - tmp12;
 8016072:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8016076:	eb00 0c04 	add.w	ip, r0, r4
    tmp12 = z4 - z1 - z2;
 801607a:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 801607e:	9103      	str	r1, [sp, #12]
    tmp12 = z4 - z1 - z2;
 8016080:	1b04      	subs	r4, r0, r4
    tmp25 = tmp10 - tmp12;
 8016082:	eba6 010c 	sub.w	r1, r6, ip
    tmp20 = tmp10 + tmp12;
 8016086:	eb06 070c 	add.w	r7, r6, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801608a:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp25 = tmp10 - tmp12;
 801608e:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8016090:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 8016092:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8016094:	f9ba 5050 	ldrsh.w	r5, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8016098:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 801609c:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801609e:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 80160a0:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80160a2:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80160a6:	6a12      	ldr	r2, [r2, #32]
 80160a8:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80160ac:	9a00      	ldr	r2, [sp, #0]
 80160ae:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80160b0:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80160b4:	9a00      	ldr	r2, [sp, #0]
 80160b6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80160ba:	fb01 f40e 	mul.w	r4, r1, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80160be:	4977      	ldr	r1, [pc, #476]	; (801629c <jpeg_idct_6x12+0x2ac>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80160c0:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80160c2:	9a00      	ldr	r2, [sp, #0]
 80160c4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 80160c8:	eb0c 0605 	add.w	r6, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80160cc:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80160ce:	fb01 f00e 	mul.w	r0, r1, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80160d2:	4973      	ldr	r1, [pc, #460]	; (80162a0 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80160d4:	eb02 0806 	add.w	r8, r2, r6
 80160d8:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80160dc:	fb0b 8b06 	mla	fp, fp, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80160e0:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80160e4:	eb04 090b 	add.w	r9, r4, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80160e8:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80160ec:	fb06 990c 	mla	r9, r6, ip, r9
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80160f0:	18ae      	adds	r6, r5, r2
 80160f2:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80160f4:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80160f6:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80160f8:	496a      	ldr	r1, [pc, #424]	; (80162a4 <jpeg_idct_6x12+0x2b4>)
 80160fa:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80160fe:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8016100:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8016104:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8016108:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801610a:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 801610e:	fb0b 4402 	mla	r4, fp, r2, r4
 8016112:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8016114:	4964      	ldr	r1, [pc, #400]	; (80162a8 <jpeg_idct_6x12+0x2b8>)
 8016116:	fb01 000c 	mla	r0, r1, ip, r0
 801611a:	4964      	ldr	r1, [pc, #400]	; (80162ac <jpeg_idct_6x12+0x2bc>)
 801611c:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8016120:	ebac 0202 	sub.w	r2, ip, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8016124:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8016128:	f641 0c7e 	movw	ip, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801612c:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801612e:	eb02 0805 	add.w	r8, r2, r5
 8016132:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8016136:	fb01 8e05 	mla	lr, r1, r5, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801613a:	eb07 0509 	add.w	r5, r7, r9
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801613e:	eba7 0709 	sub.w	r7, r7, r9
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8016142:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8016146:	12ed      	asrs	r5, r5, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8016148:	12ff      	asrs	r7, r7, #11
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801614a:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801614e:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8016152:	9902      	ldr	r1, [sp, #8]
 8016154:	188d      	adds	r5, r1, r2
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8016156:	1a8a      	subs	r2, r1, r2
 8016158:	12d2      	asrs	r2, r2, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801615a:	12ed      	asrs	r5, r5, #11
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801615c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8016160:	9a05      	ldr	r2, [sp, #20]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8016162:	615d      	str	r5, [r3, #20]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8016164:	4432      	add	r2, r6
 8016166:	12d2      	asrs	r2, r2, #11
 8016168:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801616a:	9a05      	ldr	r2, [sp, #20]
 801616c:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801616e:	9a06      	ldr	r2, [sp, #24]
 8016170:	4422      	add	r2, r4
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8016172:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8016174:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8016176:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801617a:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801617c:	9a06      	ldr	r2, [sp, #24]
 801617e:	1b14      	subs	r4, r2, r4
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8016180:	9a03      	ldr	r2, [sp, #12]
 8016182:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8016184:	12e4      	asrs	r4, r4, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8016186:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8016188:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801618c:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801618e:	9a03      	ldr	r2, [sp, #12]
 8016190:	eba2 050e 	sub.w	r5, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8016194:	9a04      	ldr	r2, [sp, #16]
 8016196:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8016198:	12ed      	asrs	r5, r5, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801619a:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801619c:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80161a0:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80161a2:	9a04      	ldr	r2, [sp, #16]
 80161a4:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80161a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80161a8:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80161aa:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80161ac:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80161b0:	f47f af2f 	bne.w	8016012 <jpeg_idct_6x12+0x22>
 80161b4:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 80161b6:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80161b8:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 80161bc:	f1a3 0c04 	sub.w	ip, r3, #4
 80161c0:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 80161c4:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80161c8:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 80161cc:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80161ce:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80161d0:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 80161d4:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 80161d6:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80161da:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80161de:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80161e2:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80161e6:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 80161ea:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 80161ee:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 80161f2:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 80161f6:	eba3 0302 	sub.w	r3, r3, r2
 80161fa:	9300      	str	r3, [sp, #0]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80161fc:	f242 7331 	movw	r3, #10033	; 0x2731
 8016200:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 8016204:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8016208:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 801620c:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 8016210:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8016214:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8016218:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801621c:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8016220:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8016224:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8016226:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801622a:	9b01      	ldr	r3, [sp, #4]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801622c:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8016230:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8016234:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8016238:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801623c:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8016240:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8016244:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8016248:	5c18      	ldrb	r0, [r3, r0]
 801624a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801624c:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8016250:	9b01      	ldr	r3, [sp, #4]
 8016252:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8016254:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8016256:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8016258:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 801625c:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801625e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8016262:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8016264:	9b00      	ldr	r3, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8016266:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8016268:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 801626c:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801626e:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8016270:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8016274:	f813 300e 	ldrb.w	r3, [r3, lr]
 8016278:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801627a:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801627e:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 8016282:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8016286:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801628a:	5cc3      	ldrb	r3, [r0, r3]
 801628c:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801628e:	5d03      	ldrb	r3, [r0, r4]
 8016290:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8016292:	d197      	bne.n	80161c4 <jpeg_idct_6x12+0x1d4>
  }
}
 8016294:	b053      	add	sp, #332	; 0x14c
 8016296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801629a:	bf00      	nop
 801629c:	ffffeeaf 	.word	0xffffeeaf
 80162a0:	ffffde8b 	.word	0xffffde8b
 80162a4:	ffffd0b0 	.word	0xffffd0b0
 80162a8:	ffffea5c 	.word	0xffffea5c
 80162ac:	ffffc08c 	.word	0xffffc08c

080162b0 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80162b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	b0b9      	sub	sp, #228	; 0xe4
 80162b6:	1e94      	subs	r4, r2, #2
 80162b8:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80162ba:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80162be:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80162c0:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80162c2:	3380      	adds	r3, #128	; 0x80
 80162c4:	3804      	subs	r0, #4
 80162c6:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80162c8:	f102 0308 	add.w	r3, r2, #8
 80162cc:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80162ce:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80162d2:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80162d4:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80162d8:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80162dc:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80162de:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80162e2:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80162e4:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 80162e8:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80162ea:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80162ee:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80162f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80162f6:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80162f8:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 80162fc:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 80162fe:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8016302:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8016304:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8016308:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801630c:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8016310:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016312:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016314:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8016316:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 801631a:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801631c:	19f3      	adds	r3, r6, r7
 801631e:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8016320:	f241 0271 	movw	r2, #4209	; 0x1071
 8016324:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8016328:	4a6d      	ldr	r2, [pc, #436]	; (80164e0 <jpeg_idct_5x10+0x230>)
 801632a:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 801632e:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8016330:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016334:	f9b4 5030 	ldrsh.w	r5, [r4, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8016338:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 801633c:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8016340:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8016342:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016344:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8016348:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801634a:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801634e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016350:	6e03      	ldr	r3, [r0, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8016352:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016356:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8016358:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 801635c:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8016360:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 8016364:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8016366:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 801636a:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 801636e:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8016370:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8016374:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8016378:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801637c:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801637e:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8016382:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 8016386:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801638a:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801638c:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8016390:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8016392:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8016396:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801639a:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801639c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801639e:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80163a2:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80163a6:	f642 0353 	movw	r3, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80163aa:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80163ae:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80163b2:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80163b4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80163b8:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80163ba:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80163be:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80163c2:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80163c6:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80163ca:	1b5b      	subs	r3, r3, r5
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80163cc:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80163ce:	444d      	add	r5, r9
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80163d0:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80163d4:	ea4f 22ec 	mov.w	r2, ip, asr #11
 80163d8:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80163dc:	18fa      	adds	r2, r7, r3
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80163de:	1aff      	subs	r7, r7, r3
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80163e0:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80163e2:	12d2      	asrs	r2, r2, #11
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80163e4:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80163e8:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80163ea:	610a      	str	r2, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80163ec:	624b      	str	r3, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 80163ee:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80163f0:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*7] = (int) (tmp22 - tmp12);
 80163f4:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 80163f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80163fc:	9b02      	ldr	r3, [sp, #8]
 80163fe:	442b      	add	r3, r5
 8016400:	12db      	asrs	r3, r3, #11
 8016402:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8016404:	9b02      	ldr	r3, [sp, #8]
 8016406:	1b5d      	subs	r5, r3, r5
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8016408:	9b01      	ldr	r3, [sp, #4]
 801640a:	4453      	add	r3, sl
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801640c:	12ed      	asrs	r5, r5, #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801640e:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8016410:	674d      	str	r5, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8016412:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8016414:	9b01      	ldr	r3, [sp, #4]
 8016416:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801641a:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801641c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8016420:	42a3      	cmp	r3, r4
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8016422:	660e      	str	r6, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8016424:	f47f af53 	bne.w	80162ce <jpeg_idct_5x10+0x1e>
 8016428:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 801642a:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801642c:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8016430:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8016434:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8016438:	f641 289a 	movw	r8, #6810	; 0x1a9a
 801643c:	3324      	adds	r3, #36	; 0x24
 801643e:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8016440:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8016444:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8016446:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8016448:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 801644c:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8016450:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016454:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8016458:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801645a:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801645c:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 801645e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8016462:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8016466:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801646a:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 801646e:	eb03 3047 	add.w	r0, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8016472:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8016474:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8016478:	1814      	adds	r4, r2, r0
    tmp11 = z3 - z1;
 801647a:	1a82      	subs	r2, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801647c:	eb05 000b 	add.w	r0, r5, fp
 8016480:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8016484:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8016488:	4b15      	ldr	r3, [pc, #84]	; (80164e0 <jpeg_idct_5x10+0x230>)
 801648a:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801648e:	eb04 0b05 	add.w	fp, r4, r5
 8016492:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8016494:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 8016496:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 801649a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801649e:	f813 b00b 	ldrb.w	fp, [r3, fp]
 80164a2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80164a4:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 80164a8:	9b00      	ldr	r3, [sp, #0]
 80164aa:	5d1c      	ldrb	r4, [r3, r4]
 80164ac:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80164ae:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80164b0:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 80164b2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80164b6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80164ba:	5d1c      	ldrb	r4, [r3, r4]
 80164bc:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80164be:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 80164c0:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 80164c2:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 80164c4:	009b      	lsls	r3, r3, #2
 80164c6:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80164ca:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80164cc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80164d0:	5ddb      	ldrb	r3, [r3, r7]
 80164d2:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 80164d4:	9b02      	ldr	r3, [sp, #8]
 80164d6:	4563      	cmp	r3, ip
 80164d8:	d1b2      	bne.n	8016440 <jpeg_idct_5x10+0x190>
  }
}
 80164da:	b039      	add	sp, #228	; 0xe4
 80164dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164e0:	ffffba5c 	.word	0xffffba5c

080164e4 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80164e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e8:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80164ea:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80164ec:	3a02      	subs	r2, #2
{
 80164ee:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 80164f0:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80164f2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80164f6:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  for (ctr = 4; ctr > 0; ctr--) {
 80164fa:	f105 0310 	add.w	r3, r5, #16
 80164fe:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8016500:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8016504:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8016506:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801650a:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 801650e:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8016512:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 8016516:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 801651a:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801651e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016522:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8016526:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8016528:	ea4a 030b 	orr.w	r3, sl, fp
 801652c:	ea4e 0303 	orr.w	r3, lr, r3
 8016530:	433b      	orrs	r3, r7
 8016532:	ea48 0303 	orr.w	r3, r8, r3
 8016536:	4333      	orrs	r3, r6
 8016538:	ea59 0303 	orrs.w	r3, r9, r3
 801653c:	d154      	bne.n	80165e8 <jpeg_idct_4x8+0x104>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801653e:	00a4      	lsls	r4, r4, #2
      wsptr[4*0] = dcval;
 8016540:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[4*1] = dcval;
 8016544:	60cc      	str	r4, [r1, #12]
      wsptr[4*2] = dcval;
 8016546:	61cc      	str	r4, [r1, #28]
      wsptr[4*3] = dcval;
 8016548:	62cc      	str	r4, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 801654a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 801654c:	64cc      	str	r4, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 801654e:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8016550:	66cc      	str	r4, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8016552:	9b05      	ldr	r3, [sp, #20]
 8016554:	42ab      	cmp	r3, r5
 8016556:	d1d3      	bne.n	8016500 <jpeg_idct_4x8+0x1c>
 8016558:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801655a:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801655c:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8016560:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8016564:	1f1d      	subs	r5, r3, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8016566:	f8df b184 	ldr.w	fp, [pc, #388]	; 80166ec <jpeg_idct_4x8+0x208>
 801656a:	331c      	adds	r3, #28
 801656c:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 801656e:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8016572:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8016574:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016576:	f854 0c10 	ldr.w	r0, [r4, #-16]
    outptr = output_buf[ctr] + output_col;
 801657a:	18be      	adds	r6, r7, r2
    z3 = (INT32) wsptr[3];
 801657c:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8016580:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016584:	3010      	adds	r0, #16
    z2 = (INT32) wsptr[1];
 8016586:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801658a:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801658e:	1a80      	subs	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8016590:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016594:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8016596:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801659a:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801659e:	fb0b 220a 	mla	r2, fp, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80165a2:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80165a6:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 80165aa:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80165ae:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80165b2:	f81c a00a 	ldrb.w	sl, [ip, sl]
 80165b6:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80165ba:	f81c 1001 	ldrb.w	r1, [ip, r1]
  for (ctr = 0; ctr < 8; ctr++) {
 80165be:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80165c0:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80165c2:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80165c6:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
  for (ctr = 0; ctr < 8; ctr++) {
 80165ca:	42ab      	cmp	r3, r5
			    & RANGE_MASK];
 80165cc:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 80165d0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80165d4:	f81c 1001 	ldrb.w	r1, [ip, r1]
 80165d8:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80165da:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80165de:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 80165e0:	d1c5      	bne.n	801656e <jpeg_idct_4x8+0x8a>
  }
}
 80165e2:	b027      	add	sp, #156	; 0x9c
 80165e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80165e8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80165ea:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80165ee:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 80165f2:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80165f4:	f241 1651 	movw	r6, #4433	; 0x1151
 80165f8:	eb0b 0300 	add.w	r3, fp, r0
 80165fc:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80165fe:	f641 067e 	movw	r6, #6270	; 0x187e
 8016602:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8016606:	4e39      	ldr	r6, [pc, #228]	; (80166ec <jpeg_idct_4x8+0x208>)
 8016608:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 801660c:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801660e:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8016610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8016614:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 8016616:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 801661a:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp10 = tmp0 + tmp2;
 801661e:	eb0b 0004 	add.w	r0, fp, r4
    tmp11 = tmp1 + tmp3;
 8016622:	18f7      	adds	r7, r6, r3
    tmp12 = tmp1 - tmp3;
 8016624:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8016626:	9001      	str	r0, [sp, #4]
    tmp13 = tmp0 - tmp2;
 8016628:	eba4 000b 	sub.w	r0, r4, fp
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801662c:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 801662e:	9002      	str	r0, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8016630:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016634:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8016638:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801663a:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801663e:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8016642:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8016646:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801664a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 801664c:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8016650:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8016654:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8016658:	1930      	adds	r0, r6, r4
 801665a:	4358      	muls	r0, r3
    z2 += z1;
 801665c:	4b24      	ldr	r3, [pc, #144]	; (80166f0 <jpeg_idct_4x8+0x20c>)
 801665e:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8016662:	4b24      	ldr	r3, [pc, #144]	; (80166f4 <jpeg_idct_4x8+0x210>)
 8016664:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8016668:	eb09 040a 	add.w	r4, r9, sl
 801666c:	4b22      	ldr	r3, [pc, #136]	; (80166f8 <jpeg_idct_4x8+0x214>)
 801666e:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8016670:	f640 138e 	movw	r3, #2446	; 0x98e
 8016674:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8016678:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801667a:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 801667e:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8016682:	4b1e      	ldr	r3, [pc, #120]	; (80166fc <jpeg_idct_4x8+0x218>)
    tmp3 += z1 + z3;
 8016684:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8016688:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 801668c:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8016690:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8016694:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8016696:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8016698:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 801669a:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 801669e:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 80166a2:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80166a6:	191e      	adds	r6, r3, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80166a8:	1b1c      	subs	r4, r3, r4
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80166aa:	9b03      	ldr	r3, [sp, #12]
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80166ac:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80166ae:	12e4      	asrs	r4, r4, #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80166b0:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80166b4:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80166b6:	eb07 040a 	add.w	r4, r7, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80166ba:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80166be:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80166c0:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80166c4:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80166c6:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80166c8:	1a18      	subs	r0, r3, r0
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80166ca:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80166cc:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80166ce:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80166d0:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80166d2:	12c0      	asrs	r0, r0, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80166d4:	61cc      	str	r4, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80166d6:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80166d8:	64c8      	str	r0, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80166da:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80166dc:	9b02      	ldr	r3, [sp, #8]
 80166de:	eba3 0909 	sub.w	r9, r3, r9
 80166e2:	ea4f 23e9 	mov.w	r3, r9, asr #11
 80166e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 80166e8:	e733      	b.n	8016552 <jpeg_idct_4x8+0x6e>
 80166ea:	bf00      	nop
 80166ec:	ffffc4df 	.word	0xffffc4df
 80166f0:	ffffc13b 	.word	0xffffc13b
 80166f4:	fffff384 	.word	0xfffff384
 80166f8:	ffffe333 	.word	0xffffe333
 80166fc:	ffffadfd 	.word	0xffffadfd

08016700 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016704:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8016708:	b095      	sub	sp, #84	; 0x54
 801670a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801670c:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801670e:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8016712:	3204      	adds	r2, #4
 8016714:	3c04      	subs	r4, #4
  wsptr = workspace;
 8016716:	ae02      	add	r6, sp, #8
{
 8016718:	9300      	str	r3, [sp, #0]
 801671a:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801671c:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8016720:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016724:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8016728:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801672a:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801672e:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8016730:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016734:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8016738:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 801673a:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801673c:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016740:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8016744:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8016748:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801674c:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 801674e:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8016750:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016754:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016756:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8016758:	f242 7731 	movw	r7, #10033	; 0x2731
 801675c:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801675e:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 8016762:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8016766:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016768:	6a22      	ldr	r2, [r4, #32]
 801676a:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801676c:	6e27      	ldr	r7, [r4, #96]	; 0x60
 801676e:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8016772:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8016776:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801677a:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801677e:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8016782:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8016786:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8016788:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801678a:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801678e:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8016790:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8016794:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8016798:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801679c:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80167a0:	eba7 0708 	sub.w	r7, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80167a4:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80167a8:	ea4f 0887 	mov.w	r8, r7, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80167ac:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80167b0:	ea4f 22ec 	mov.w	r2, ip, asr #11
 80167b4:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 80167b6:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 80167ba:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 80167be:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80167c0:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80167c4:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 80167c8:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80167ca:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80167ce:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80167d2:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80167d4:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80167d6:	d1a1      	bne.n	801671c <jpeg_idct_3x6+0x1c>
 80167d8:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 80167da:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80167dc:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80167e0:	f242 7b31 	movw	fp, #10033	; 0x2731
 80167e4:	1f1d      	subs	r5, r3, #4
 80167e6:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 80167e8:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 80167ec:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 80167ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80167f0:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 80167f4:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 80167f6:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80167fa:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80167fe:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8016802:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016806:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801680a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801680c:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8016810:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8016814:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016818:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801681c:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8016820:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8016824:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8016828:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 801682c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016830:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8016834:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8016838:	f81e 4008 	ldrb.w	r4, [lr, r8]
 801683c:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801683e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8016842:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8016844:	d1d0      	bne.n	80167e8 <jpeg_idct_3x6+0xe8>
  }
}
 8016846:	b015      	add	sp, #84	; 0x54
 8016848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801684c <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016850:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8016854:	b08b      	sub	sp, #44	; 0x2c
 8016856:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8016858:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801685a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801685e:	ad02      	add	r5, sp, #8
 8016860:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8016862:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8016866:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801686a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801686c:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8016870:	46b4      	mov	ip, r6
 8016872:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8016876:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8016878:	4f29      	ldr	r7, [pc, #164]	; (8016920 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801687a:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801687c:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016880:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8016884:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016886:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801688a:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801688e:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8016892:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8016896:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801689a:	6a21      	ldr	r1, [r4, #32]
 801689c:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80168a0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80168a2:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80168a6:	eb0a 010b 	add.w	r1, sl, fp
 80168aa:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80168ae:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80168b2:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 80168b6:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 80168ba:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 80168be:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 80168c2:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 80168c6:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 80168ca:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 80168ce:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 80168d2:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 80168d4:	d1ca      	bne.n	801686c <jpeg_idct_2x4+0x20>
 80168d6:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 80168d8:	a902      	add	r1, sp, #8
 80168da:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80168dc:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 80168e0:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 80168e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 80168e4:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 80168e8:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 80168ea:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 80168ee:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80168f2:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 80168f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80168f8:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 80168fc:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8016900:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8016904:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8016908:	5d3c      	ldrb	r4, [r7, r4]
 801690a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801690c:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801690e:	9c01      	ldr	r4, [sp, #4]
 8016910:	5ca2      	ldrb	r2, [r4, r2]
 8016912:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8016916:	d1e1      	bne.n	80168dc <jpeg_idct_2x4+0x90>
  }
}
 8016918:	b00b      	add	sp, #44	; 0x2c
 801691a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801691e:	bf00      	nop
 8016920:	ffffc4df 	.word	0xffffc4df

08016924 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016924:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016926:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016928:	f9b2 1000 	ldrsh.w	r1, [r2]
 801692c:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801692e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8016932:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016934:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016936:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801693a:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 801693c:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801693e:	3080      	adds	r0, #128	; 0x80
{
 8016940:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8016942:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8016944:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8016946:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 801694a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801694e:	5d06      	ldrb	r6, [r0, r4]
 8016950:	681c      	ldr	r4, [r3, #0]
 8016952:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8016954:	5c42      	ldrb	r2, [r0, r1]
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	555a      	strb	r2, [r3, r5]
}
 801695a:	bd70      	pop	{r4, r5, r6, pc}

0801695c <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 801695c:	6803      	ldr	r3, [r0, #0]
 801695e:	2238      	movs	r2, #56	; 0x38
 8016960:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	4718      	bx	r3

08016968 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8016968:	688b      	ldr	r3, [r1, #8]
{
 801696a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801696e:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8016972:	698b      	ldr	r3, [r1, #24]
{
 8016974:	b085      	sub	sp, #20
 8016976:	4681      	mov	r9, r0
 8016978:	460c      	mov	r4, r1
 801697a:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 801697c:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016980:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8016982:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016986:	6922      	ldr	r2, [r4, #16]
 8016988:	42b2      	cmp	r2, r6
 801698a:	dc02      	bgt.n	8016992 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 801698c:	b005      	add	sp, #20
 801698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016992:	1b92      	subs	r2, r2, r6
 8016994:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8016996:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8016998:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801699a:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 801699c:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80169a0:	bfa8      	it	ge
 80169a2:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80169a4:	69e1      	ldr	r1, [r4, #28]
 80169a6:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80169a8:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80169aa:	428a      	cmp	r2, r1
 80169ac:	bfa8      	it	ge
 80169ae:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80169b0:	42aa      	cmp	r2, r5
 80169b2:	bfa8      	it	ge
 80169b4:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 80169b6:	2a00      	cmp	r2, #0
 80169b8:	dde8      	ble.n	801698c <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 80169ba:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80169be:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 80169c0:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80169c2:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 80169c6:	f1ba 0f00 	cmp.w	sl, #0
 80169ca:	d00a      	beq.n	80169e2 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80169cc:	9300      	str	r3, [sp, #0]
 80169ce:	4659      	mov	r1, fp
 80169d0:	463b      	mov	r3, r7
 80169d2:	4648      	mov	r0, r9
 80169d4:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80169d6:	47a8      	blx	r5
    file_offset += byte_count;
 80169d8:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80169da:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80169dc:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80169de:	4416      	add	r6, r2
 80169e0:	e7d1      	b.n	8016986 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80169e2:	9b03      	ldr	r3, [sp, #12]
 80169e4:	4659      	mov	r1, fp
 80169e6:	4648      	mov	r0, r9
 80169e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	463b      	mov	r3, r7
 80169ee:	e7f2      	b.n	80169d6 <do_barray_io+0x6e>

080169f0 <alloc_small>:
{
 80169f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80169f4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80169f8:	4606      	mov	r6, r0
 80169fa:	460d      	mov	r5, r1
 80169fc:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80169fe:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016a00:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8016a02:	d902      	bls.n	8016a0a <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8016a04:	2101      	movs	r1, #1
 8016a06:	f7ff ffa9 	bl	801695c <out_of_memory>
  if (odd_bytes > 0)
 8016a0a:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8016a0e:	bf1c      	itt	ne
 8016a10:	3408      	addne	r4, #8
 8016a12:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8016a14:	2d01      	cmp	r5, #1
 8016a16:	d906      	bls.n	8016a26 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016a18:	6833      	ldr	r3, [r6, #0]
 8016a1a:	220f      	movs	r2, #15
 8016a1c:	4630      	mov	r0, r6
 8016a1e:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8016a26:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 8016a2a:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 8016a2e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 8016a32:	b9e8      	cbnz	r0, 8016a70 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8016a34:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8016a38:	f1ba 0f00 	cmp.w	sl, #0
 8016a3c:	d11e      	bne.n	8016a7c <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 8016a3e:	4b1d      	ldr	r3, [pc, #116]	; (8016ab4 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8016a40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8016a44:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 8016a48:	429d      	cmp	r5, r3
 8016a4a:	bf28      	it	cs
 8016a4c:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8016a4e:	eb05 0b09 	add.w	fp, r5, r9
 8016a52:	4630      	mov	r0, r6
 8016a54:	4659      	mov	r1, fp
 8016a56:	f000 fbcf 	bl	80171f8 <jpeg_get_small>
      if (hdr_ptr != NULL)
 8016a5a:	b988      	cbnz	r0, 8016a80 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8016a5c:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 8016a5e:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8016a62:	d803      	bhi.n	8016a6c <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8016a64:	2102      	movs	r1, #2
 8016a66:	4630      	mov	r0, r6
 8016a68:	f7ff ff78 	bl	801695c <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8016a6c:	465d      	mov	r5, fp
 8016a6e:	e7ee      	b.n	8016a4e <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8016a70:	6883      	ldr	r3, [r0, #8]
 8016a72:	42a3      	cmp	r3, r4
 8016a74:	d211      	bcs.n	8016a9a <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8016a76:	4682      	mov	sl, r0
 8016a78:	6800      	ldr	r0, [r0, #0]
 8016a7a:	e7da      	b.n	8016a32 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8016a7c:	4b0e      	ldr	r3, [pc, #56]	; (8016ab8 <alloc_small+0xc8>)
 8016a7e:	e7df      	b.n	8016a40 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8016a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8016a82:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8016a84:	445b      	add	r3, fp
 8016a86:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 8016a88:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8016a8a:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8016a8c:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8016a90:	f1ba 0f00 	cmp.w	sl, #0
 8016a94:	d10b      	bne.n	8016aae <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8016a96:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8016a9a:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8016a9c:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8016a9e:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8016aa0:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8016aa2:	6882      	ldr	r2, [r0, #8]
 8016aa4:	1b12      	subs	r2, r2, r4
 8016aa6:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8016aa8:	4418      	add	r0, r3
}
 8016aaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8016aae:	f8ca 0000 	str.w	r0, [sl]
 8016ab2:	e7f2      	b.n	8016a9a <alloc_small+0xaa>
 8016ab4:	0802fec4 	.word	0x0802fec4
 8016ab8:	0802febc 	.word	0x0802febc

08016abc <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8016abc:	2901      	cmp	r1, #1
{
 8016abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ac2:	4604      	mov	r4, r0
 8016ac4:	460d      	mov	r5, r1
 8016ac6:	4616      	mov	r6, r2
 8016ac8:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016aca:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8016ace:	d005      	beq.n	8016adc <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016ad0:	6803      	ldr	r3, [r0, #0]
 8016ad2:	220f      	movs	r2, #15
 8016ad4:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8016adc:	223c      	movs	r2, #60	; 0x3c
 8016ade:	4629      	mov	r1, r5
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	f7ff ff85 	bl	80169f0 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8016ae6:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8016ae8:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8016aea:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8016aec:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8016aee:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8016af2:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8016af4:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 8016af6:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8016afa:	9a07      	ldr	r2, [sp, #28]
 8016afc:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 8016afe:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8016b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b06 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8016b06:	2901      	cmp	r1, #1
{
 8016b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b0c:	4604      	mov	r4, r0
 8016b0e:	460d      	mov	r5, r1
 8016b10:	4616      	mov	r6, r2
 8016b12:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016b14:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8016b18:	d005      	beq.n	8016b26 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016b1a:	6803      	ldr	r3, [r0, #0]
 8016b1c:	220f      	movs	r2, #15
 8016b1e:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8016b26:	223c      	movs	r2, #60	; 0x3c
 8016b28:	4629      	mov	r1, r5
 8016b2a:	4620      	mov	r0, r4
 8016b2c:	f7ff ff60 	bl	80169f0 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8016b30:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8016b32:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8016b34:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8016b36:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8016b38:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 8016b3c:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8016b3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8016b40:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8016b44:	9a07      	ldr	r2, [sp, #28]
 8016b46:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8016b48:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 8016b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b50 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8016b50:	2901      	cmp	r1, #1
{
 8016b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b56:	4606      	mov	r6, r0
 8016b58:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016b5a:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8016b5c:	d910      	bls.n	8016b80 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016b5e:	6803      	ldr	r3, [r0, #0]
 8016b60:	220f      	movs	r2, #15
 8016b62:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 8016b6a:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 8016b6e:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8016b70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 8016b72:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8016b74:	bb0b      	cbnz	r3, 8016bba <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 8016b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 8016b78:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 8016b7a:	bb69      	cbnz	r1, 8016bd8 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8016b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8016b80:	d1f3      	bne.n	8016b6a <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016b82:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8016b84:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016b86:	b924      	cbnz	r4, 8016b92 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016b88:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 8016b8a:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016b8c:	b95f      	cbnz	r7, 8016ba6 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 8016b8e:	64af      	str	r7, [r5, #72]	; 0x48
 8016b90:	e7eb      	b.n	8016b6a <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8016b92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016b94:	b12b      	cbz	r3, 8016ba2 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8016b96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016b98:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016b9c:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8016b9e:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8016ba0:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016ba2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8016ba4:	e7ef      	b.n	8016b86 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 8016ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ba8:	b12b      	cbz	r3, 8016bb6 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8016baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bac:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016bb0:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8016bb2:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8016bb4:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016bb6:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8016bb8:	e7e8      	b.n	8016b8c <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 8016bba:	e9d3 8700 	ldrd	r8, r7, [r3]
 8016bbe:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8016bc0:	4619      	mov	r1, r3
 8016bc2:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8016bc4:	4417      	add	r7, r2
 8016bc6:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8016bc8:	463a      	mov	r2, r7
 8016bca:	f000 fb1e 	bl	801720a <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8016bce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016bd0:	1bdb      	subs	r3, r3, r7
 8016bd2:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8016bd4:	4643      	mov	r3, r8
 8016bd6:	e7cd      	b.n	8016b74 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8016bd8:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8016bda:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8016bdc:	e9d1 7400 	ldrd	r7, r4, [r1]
 8016be0:	4414      	add	r4, r2
 8016be2:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8016be4:	4622      	mov	r2, r4
 8016be6:	f000 fb0a 	bl	80171fe <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 8016bea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8016bec:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 8016bee:	1b1b      	subs	r3, r3, r4
 8016bf0:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8016bf2:	e7c2      	b.n	8016b7a <free_pool+0x2a>

08016bf4 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8016bf4:	b510      	push	{r4, lr}
 8016bf6:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8016bf8:	2101      	movs	r1, #1
 8016bfa:	f7ff ffa9 	bl	8016b50 <free_pool>
 8016bfe:	2100      	movs	r1, #0
 8016c00:	4620      	mov	r0, r4
 8016c02:	f7ff ffa5 	bl	8016b50 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8016c06:	4620      	mov	r0, r4
 8016c08:	6861      	ldr	r1, [r4, #4]
 8016c0a:	2254      	movs	r2, #84	; 0x54
 8016c0c:	f000 faf7 	bl	80171fe <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8016c10:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8016c12:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8016c14:	6063      	str	r3, [r4, #4]
}
 8016c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8016c1a:	f000 bb02 	b.w	8017222 <jpeg_mem_term>

08016c1e <access_virt_barray>:
{
 8016c1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8016c22:	18d7      	adds	r7, r2, r3
{
 8016c24:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016c26:	684a      	ldr	r2, [r1, #4]
{
 8016c28:	460c      	mov	r4, r1
 8016c2a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016c2e:	42ba      	cmp	r2, r7
 8016c30:	d304      	bcc.n	8016c3c <access_virt_barray+0x1e>
 8016c32:	68ca      	ldr	r2, [r1, #12]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d301      	bcc.n	8016c3c <access_virt_barray+0x1e>
 8016c38:	680b      	ldr	r3, [r1, #0]
 8016c3a:	b933      	cbnz	r3, 8016c4a <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016c3c:	6803      	ldr	r3, [r0, #0]
 8016c3e:	2217      	movs	r2, #23
 8016c40:	9001      	str	r0, [sp, #4]
 8016c42:	615a      	str	r2, [r3, #20]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	4798      	blx	r3
 8016c48:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 8016c4a:	69a3      	ldr	r3, [r4, #24]
 8016c4c:	42ab      	cmp	r3, r5
 8016c4e:	d803      	bhi.n	8016c58 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8016c50:	6922      	ldr	r2, [r4, #16]
 8016c52:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8016c54:	42bb      	cmp	r3, r7
 8016c56:	d221      	bcs.n	8016c9c <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8016c58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016c5a:	b933      	cbnz	r3, 8016c6a <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8016c5c:	6803      	ldr	r3, [r0, #0]
 8016c5e:	2247      	movs	r2, #71	; 0x47
 8016c60:	9001      	str	r0, [sp, #4]
 8016c62:	615a      	str	r2, [r3, #20]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	4798      	blx	r3
 8016c68:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 8016c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c6c:	b13b      	cbz	r3, 8016c7e <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 8016c6e:	2201      	movs	r2, #1
 8016c70:	4621      	mov	r1, r4
 8016c72:	9001      	str	r0, [sp, #4]
 8016c74:	f7ff fe78 	bl	8016968 <do_barray_io>
      ptr->dirty = FALSE;
 8016c78:	2300      	movs	r3, #0
 8016c7a:	9801      	ldr	r0, [sp, #4]
 8016c7c:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8016c7e:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8016c80:	2200      	movs	r2, #0
 8016c82:	4621      	mov	r1, r4
 8016c84:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 8016c86:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8016c88:	bf29      	itett	cs
 8016c8a:	6923      	ldrcs	r3, [r4, #16]
 8016c8c:	462b      	movcc	r3, r5
 8016c8e:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8016c90:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8016c94:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8016c96:	f7ff fe67 	bl	8016968 <do_barray_io>
 8016c9a:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 8016c9c:	69e6      	ldr	r6, [r4, #28]
 8016c9e:	42be      	cmp	r6, r7
 8016ca0:	d21c      	bcs.n	8016cdc <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 8016ca2:	42ae      	cmp	r6, r5
 8016ca4:	d20c      	bcs.n	8016cc0 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 8016ca6:	f1b8 0f00 	cmp.w	r8, #0
 8016caa:	d01b      	beq.n	8016ce4 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016cac:	6803      	ldr	r3, [r0, #0]
 8016cae:	2217      	movs	r2, #23
 8016cb0:	9001      	str	r0, [sp, #4]
 8016cb2:	462e      	mov	r6, r5
 8016cb4:	615a      	str	r2, [r3, #20]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	4798      	blx	r3
    if (writable)
 8016cba:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 8016cbc:	61e7      	str	r7, [r4, #28]
 8016cbe:	e002      	b.n	8016cc6 <access_virt_barray+0xa8>
    if (writable)
 8016cc0:	f1b8 0f00 	cmp.w	r8, #0
 8016cc4:	d1fa      	bne.n	8016cbc <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8016cc6:	6a22      	ldr	r2, [r4, #32]
 8016cc8:	b1b2      	cbz	r2, 8016cf8 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 8016cca:	68a2      	ldr	r2, [r4, #8]
 8016ccc:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8016cd0:	69a2      	ldr	r2, [r4, #24]
 8016cd2:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8016cd4:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8016cd6:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8016cd8:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8016cda:	d305      	bcc.n	8016ce8 <access_virt_barray+0xca>
  if (writable)
 8016cdc:	f1b8 0f00 	cmp.w	r8, #0
 8016ce0:	d10d      	bne.n	8016cfe <access_virt_barray+0xe0>
 8016ce2:	e00e      	b.n	8016d02 <access_virt_barray+0xe4>
 8016ce4:	462e      	mov	r6, r5
 8016ce6:	e7ee      	b.n	8016cc6 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8016ce8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016cec:	464a      	mov	r2, r9
 8016cee:	2100      	movs	r1, #0
	undef_row++;
 8016cf0:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8016cf2:	f013 fffd 	bl	802acf0 <memset>
	undef_row++;
 8016cf6:	e7ee      	b.n	8016cd6 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8016cf8:	f1b8 0f00 	cmp.w	r8, #0
 8016cfc:	d009      	beq.n	8016d12 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 8016cfe:	2301      	movs	r3, #1
 8016d00:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8016d02:	69a0      	ldr	r0, [r4, #24]
 8016d04:	1a2d      	subs	r5, r5, r0
 8016d06:	6820      	ldr	r0, [r4, #0]
}
 8016d08:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8016d0c:	b003      	add	sp, #12
 8016d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016d12:	6803      	ldr	r3, [r0, #0]
 8016d14:	2217      	movs	r2, #23
 8016d16:	615a      	str	r2, [r3, #20]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	4798      	blx	r3
  if (writable)
 8016d1c:	e7f1      	b.n	8016d02 <access_virt_barray+0xe4>

08016d1e <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8016d1e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8016d22:	429a      	cmp	r2, r3
{
 8016d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d28:	4606      	mov	r6, r0
 8016d2a:	4688      	mov	r8, r1
 8016d2c:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016d2e:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8016d30:	d902      	bls.n	8016d38 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8016d32:	2103      	movs	r1, #3
 8016d34:	f7ff fe12 	bl	801695c <out_of_memory>
  if (odd_bytes > 0)
 8016d38:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8016d3c:	bf1c      	itt	ne
 8016d3e:	3408      	addne	r4, #8
 8016d40:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8016d42:	f1b8 0f01 	cmp.w	r8, #1
 8016d46:	d906      	bls.n	8016d56 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8016d48:	6833      	ldr	r3, [r6, #0]
 8016d4a:	220f      	movs	r2, #15
 8016d4c:	4630      	mov	r0, r6
 8016d4e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8016d56:	f104 0110 	add.w	r1, r4, #16
 8016d5a:	4630      	mov	r0, r6
 8016d5c:	f000 fa52 	bl	8017204 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8016d60:	4605      	mov	r5, r0
 8016d62:	b918      	cbnz	r0, 8016d6c <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8016d64:	2104      	movs	r1, #4
 8016d66:	4630      	mov	r0, r6
 8016d68:	f7ff fdf8 	bl	801695c <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8016d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016d6e:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8016d72:	3310      	adds	r3, #16
 8016d74:	4423      	add	r3, r4
 8016d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 8016d78:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8016d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 8016d7e:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8016d82:	2300      	movs	r3, #0
 8016d84:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8016d86:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 8016d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d8c <alloc_barray>:
{
 8016d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8016d90:	01d7      	lsls	r7, r2, #7
{
 8016d92:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8016d94:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8016d98:	4680      	mov	r8, r0
 8016d9a:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016d9c:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 8016d9e:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8016da0:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8016da4:	d904      	bls.n	8016db0 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8016da6:	6803      	ldr	r3, [r0, #0]
 8016da8:	2248      	movs	r2, #72	; 0x48
 8016daa:	615a      	str	r2, [r3, #20]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8016db0:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8016db2:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8016db6:	4651      	mov	r1, sl
 8016db8:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 8016dba:	bfa8      	it	ge
 8016dbc:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8016dbe:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8016dc0:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8016dc2:	f7ff fe15 	bl	80169f0 <alloc_small>
 8016dc6:	4681      	mov	r9, r0
  while (currow < numrows) {
 8016dc8:	42ae      	cmp	r6, r5
 8016dca:	d302      	bcc.n	8016dd2 <alloc_barray+0x46>
}
 8016dcc:	4648      	mov	r0, r9
 8016dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016dd2:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8016dd4:	4651      	mov	r1, sl
 8016dd6:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016dd8:	429c      	cmp	r4, r3
 8016dda:	bf28      	it	cs
 8016ddc:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8016dde:	fb04 f207 	mul.w	r2, r4, r7
 8016de2:	f7ff ff9c 	bl	8016d1e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8016de6:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8016dea:	4426      	add	r6, r4
 8016dec:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8016df0:	4293      	cmp	r3, r2
 8016df2:	d0e9      	beq.n	8016dc8 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8016df4:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8016df8:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 8016dfa:	e7f9      	b.n	8016df0 <alloc_barray+0x64>

08016dfc <alloc_sarray>:
{
 8016dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e00:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8016e02:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8016e06:	4607      	mov	r7, r0
 8016e08:	468a      	mov	sl, r1
  if (ltemp <= 0)
 8016e0a:	429a      	cmp	r2, r3
{
 8016e0c:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016e0e:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8016e10:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8016e14:	d904      	bls.n	8016e20 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8016e16:	6803      	ldr	r3, [r0, #0]
 8016e18:	2248      	movs	r2, #72	; 0x48
 8016e1a:	615a      	str	r2, [r3, #20]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8016e20:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8016e22:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8016e26:	4651      	mov	r1, sl
 8016e28:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 8016e2a:	bfa8      	it	ge
 8016e2c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8016e2e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8016e30:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8016e32:	f7ff fddd 	bl	80169f0 <alloc_small>
 8016e36:	4681      	mov	r9, r0
  while (currow < numrows) {
 8016e38:	42ae      	cmp	r6, r5
 8016e3a:	d302      	bcc.n	8016e42 <alloc_sarray+0x46>
}
 8016e3c:	4648      	mov	r0, r9
 8016e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016e42:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8016e44:	4651      	mov	r1, sl
 8016e46:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8016e48:	429c      	cmp	r4, r3
 8016e4a:	bf28      	it	cs
 8016e4c:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8016e4e:	fb04 f208 	mul.w	r2, r4, r8
 8016e52:	f7ff ff64 	bl	8016d1e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8016e56:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8016e5a:	4426      	add	r6, r4
 8016e5c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d0e9      	beq.n	8016e38 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8016e64:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8016e68:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 8016e6a:	e7f9      	b.n	8016e60 <alloc_sarray+0x64>

08016e6c <realize_virt_arrays>:
{
 8016e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8016e70:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8016e74:	2500      	movs	r5, #0
{
 8016e76:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016e78:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 8016e7c:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016e7e:	bb03      	cbnz	r3, 8016ec2 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016e80:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8016e84:	bb43      	cbnz	r3, 8016ed8 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 8016e86:	2e00      	cmp	r6, #0
 8016e88:	dd19      	ble.n	8016ebe <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8016e8a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8016e8e:	462a      	mov	r2, r5
 8016e90:	4631      	mov	r1, r6
 8016e92:	4638      	mov	r0, r7
 8016e94:	f000 f9bc 	bl	8017210 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8016e98:	4285      	cmp	r5, r0
 8016e9a:	dd2a      	ble.n	8016ef2 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 8016e9c:	fb90 f6f6 	sdiv	r6, r0, r6
 8016ea0:	2e01      	cmp	r6, #1
 8016ea2:	bfb8      	it	lt
 8016ea4:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016ea6:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8016eaa:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 8016eae:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016eb0:	bb0c      	cbnz	r4, 8016ef6 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016eb2:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8016eb6:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016eba:	2d00      	cmp	r5, #0
 8016ebc:	d141      	bne.n	8016f42 <realize_virt_arrays+0xd6>
}
 8016ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	b932      	cbnz	r2, 8016ed4 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8016ec6:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8016eca:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 8016ece:	6859      	ldr	r1, [r3, #4]
 8016ed0:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ed6:	e7d2      	b.n	8016e7e <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8016ed8:	681a      	ldr	r2, [r3, #0]
 8016eda:	b942      	cbnz	r2, 8016eee <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 8016edc:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8016ee0:	4351      	muls	r1, r2
 8016ee2:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8016ee6:	6859      	ldr	r1, [r3, #4]
 8016ee8:	434a      	muls	r2, r1
 8016eea:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ef0:	e7c8      	b.n	8016e84 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8016ef2:	4e27      	ldr	r6, [pc, #156]	; (8016f90 <realize_virt_arrays+0x124>)
 8016ef4:	e7d7      	b.n	8016ea6 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8016ef6:	6823      	ldr	r3, [r4, #0]
 8016ef8:	b9ab      	cbnz	r3, 8016f26 <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8016efa:	6862      	ldr	r2, [r4, #4]
 8016efc:	68e1      	ldr	r1, [r4, #12]
 8016efe:	1e53      	subs	r3, r2, #1
 8016f00:	fbb3 f3f1 	udiv	r3, r3, r1
 8016f04:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8016f06:	429e      	cmp	r6, r3
 8016f08:	db0f      	blt.n	8016f2a <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 8016f0a:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8016f0c:	6923      	ldr	r3, [r4, #16]
 8016f0e:	2101      	movs	r1, #1
 8016f10:	68a2      	ldr	r2, [r4, #8]
 8016f12:	4638      	mov	r0, r7
 8016f14:	f7ff ff72 	bl	8016dfc <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8016f18:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8016f1c:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 8016f1e:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8016f20:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 8016f22:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8016f26:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8016f28:	e7c2      	b.n	8016eb0 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 8016f2a:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8016f2c:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8016f2e:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8016f30:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8016f32:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016f36:	435a      	muls	r2, r3
 8016f38:	f000 f96c 	bl	8017214 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 8016f3c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8016f40:	e7e4      	b.n	8016f0c <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8016f42:	682b      	ldr	r3, [r5, #0]
 8016f44:	b9ab      	cbnz	r3, 8016f72 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8016f46:	6868      	ldr	r0, [r5, #4]
 8016f48:	68e9      	ldr	r1, [r5, #12]
 8016f4a:	1e43      	subs	r3, r0, #1
 8016f4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8016f50:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8016f52:	429e      	cmp	r6, r3
 8016f54:	db0f      	blt.n	8016f76 <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 8016f56:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8016f58:	692b      	ldr	r3, [r5, #16]
 8016f5a:	2101      	movs	r1, #1
 8016f5c:	68aa      	ldr	r2, [r5, #8]
 8016f5e:	4638      	mov	r0, r7
 8016f60:	f7ff ff14 	bl	8016d8c <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8016f64:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8016f68:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 8016f6a:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 8016f6c:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 8016f6e:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8016f72:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8016f74:	e7a1      	b.n	8016eba <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 8016f76:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8016f78:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 8016f7a:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8016f7c:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8016f7e:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8016f80:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8016f84:	01d2      	lsls	r2, r2, #7
 8016f86:	f000 f945 	bl	8017214 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 8016f8a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8016f8e:	e7e3      	b.n	8016f58 <realize_virt_arrays+0xec>
 8016f90:	3b9aca00 	.word	0x3b9aca00

08016f94 <access_virt_sarray>:
{
 8016f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8016f98:	eb02 0803 	add.w	r8, r2, r3
{
 8016f9c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016f9e:	684a      	ldr	r2, [r1, #4]
{
 8016fa0:	b087      	sub	sp, #28
 8016fa2:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016fa4:	4542      	cmp	r2, r8
{
 8016fa6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8016faa:	d304      	bcc.n	8016fb6 <access_virt_sarray+0x22>
 8016fac:	68ca      	ldr	r2, [r1, #12]
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d301      	bcc.n	8016fb6 <access_virt_sarray+0x22>
 8016fb2:	680b      	ldr	r3, [r1, #0]
 8016fb4:	b933      	cbnz	r3, 8016fc4 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8016fb6:	6803      	ldr	r3, [r0, #0]
 8016fb8:	2217      	movs	r2, #23
 8016fba:	9003      	str	r0, [sp, #12]
 8016fbc:	615a      	str	r2, [r3, #20]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	4798      	blx	r3
 8016fc2:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8016fc4:	69a3      	ldr	r3, [r4, #24]
 8016fc6:	42ab      	cmp	r3, r5
 8016fc8:	d80c      	bhi.n	8016fe4 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8016fca:	6922      	ldr	r2, [r4, #16]
 8016fcc:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8016fce:	4543      	cmp	r3, r8
 8016fd0:	d308      	bcc.n	8016fe4 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8016fd2:	69e6      	ldr	r6, [r4, #28]
 8016fd4:	4546      	cmp	r6, r8
 8016fd6:	f0c0 8081 	bcc.w	80170dc <access_virt_sarray+0x148>
  if (writable)
 8016fda:	f1ba 0f00 	cmp.w	sl, #0
 8016fde:	f040 80a8 	bne.w	8017132 <access_virt_sarray+0x19e>
 8016fe2:	e0a8      	b.n	8017136 <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 8016fe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016fe6:	b933      	cbnz	r3, 8016ff6 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8016fe8:	6803      	ldr	r3, [r0, #0]
 8016fea:	2247      	movs	r2, #71	; 0x47
 8016fec:	9003      	str	r0, [sp, #12]
 8016fee:	615a      	str	r2, [r3, #20]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	4798      	blx	r3
 8016ff4:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 8016ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ff8:	b17b      	cbz	r3, 801701a <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8016ffa:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8016ffe:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8017002:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8017004:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8017008:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801700c:	6922      	ldr	r2, [r4, #16]
 801700e:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8017010:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8017014:	dc3c      	bgt.n	8017090 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 8017016:	2300      	movs	r3, #0
 8017018:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 801701a:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801701c:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8017020:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8017022:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 8017026:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8017028:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801702c:	bf2a      	itet	cs
 801702e:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8017032:	462b      	movcc	r3, r5
 8017034:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8017038:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 801703a:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801703e:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8017040:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8017042:	454a      	cmp	r2, r9
 8017044:	ddc5      	ble.n	8016fd2 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8017046:	eba2 0209 	sub.w	r2, r2, r9
 801704a:	6967      	ldr	r7, [r4, #20]
 801704c:	42ba      	cmp	r2, r7
 801704e:	bfa8      	it	ge
 8017050:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8017052:	69a7      	ldr	r7, [r4, #24]
 8017054:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8017056:	1bf6      	subs	r6, r6, r7
 8017058:	42b2      	cmp	r2, r6
 801705a:	bfa8      	it	ge
 801705c:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801705e:	6866      	ldr	r6, [r4, #4]
 8017060:	1bf6      	subs	r6, r6, r7
 8017062:	42b2      	cmp	r2, r6
 8017064:	bfa8      	it	ge
 8017066:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8017068:	2a00      	cmp	r2, #0
 801706a:	ddb2      	ble.n	8016fd2 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 801706c:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8017070:	6822      	ldr	r2, [r4, #0]
 8017072:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8017074:	9600      	str	r6, [sp, #0]
 8017076:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 801707a:	9305      	str	r3, [sp, #20]
 801707c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8017080:	47b8      	blx	r7
    file_offset += byte_count;
 8017082:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8017084:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8017086:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8017088:	4491      	add	r9, r2
 801708a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801708e:	e7d6      	b.n	801703e <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8017090:	eba2 0209 	sub.w	r2, r2, r9
 8017094:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8017096:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8017098:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801709a:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801709e:	bfa8      	it	ge
 80170a0:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80170a2:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80170a4:	42ba      	cmp	r2, r7
 80170a6:	bfa8      	it	ge
 80170a8:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80170aa:	eba6 070c 	sub.w	r7, r6, ip
 80170ae:	42ba      	cmp	r2, r7
 80170b0:	bfa8      	it	ge
 80170b2:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 80170b4:	2a00      	cmp	r2, #0
 80170b6:	ddae      	ble.n	8017016 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 80170b8:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80170bc:	6822      	ldr	r2, [r4, #0]
 80170be:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80170c0:	9700      	str	r7, [sp, #0]
 80170c2:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80170c6:	9305      	str	r3, [sp, #20]
 80170c8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80170cc:	47b0      	blx	r6
    file_offset += byte_count;
 80170ce:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80170d0:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80170d2:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80170d4:	4491      	add	r9, r2
 80170d6:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 80170da:	e797      	b.n	801700c <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 80170dc:	42ae      	cmp	r6, r5
 80170de:	d20d      	bcs.n	80170fc <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 80170e0:	f1ba 0f00 	cmp.w	sl, #0
 80170e4:	d020      	beq.n	8017128 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80170e6:	6803      	ldr	r3, [r0, #0]
 80170e8:	2217      	movs	r2, #23
 80170ea:	9003      	str	r0, [sp, #12]
 80170ec:	462e      	mov	r6, r5
 80170ee:	615a      	str	r2, [r3, #20]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	4798      	blx	r3
    if (writable)
 80170f4:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 80170f6:	f8c4 801c 	str.w	r8, [r4, #28]
 80170fa:	e002      	b.n	8017102 <access_virt_sarray+0x16e>
    if (writable)
 80170fc:	f1ba 0f00 	cmp.w	sl, #0
 8017100:	d1f9      	bne.n	80170f6 <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 8017102:	6a22      	ldr	r2, [r4, #32]
 8017104:	b192      	cbz	r2, 801712c <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8017106:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8017108:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801710a:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 801710c:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 8017110:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8017112:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8017114:	f4bf af61 	bcs.w	8016fda <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8017118:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801711c:	463a      	mov	r2, r7
 801711e:	2100      	movs	r1, #0
	undef_row++;
 8017120:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8017122:	f013 fde5 	bl	802acf0 <memset>
	undef_row++;
 8017126:	e7f3      	b.n	8017110 <access_virt_sarray+0x17c>
 8017128:	462e      	mov	r6, r5
 801712a:	e7ea      	b.n	8017102 <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 801712c:	f1ba 0f00 	cmp.w	sl, #0
 8017130:	d009      	beq.n	8017146 <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 8017132:	2301      	movs	r3, #1
 8017134:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8017136:	69a0      	ldr	r0, [r4, #24]
 8017138:	1a2d      	subs	r5, r5, r0
 801713a:	6820      	ldr	r0, [r4, #0]
}
 801713c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8017140:	b007      	add	sp, #28
 8017142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8017146:	6803      	ldr	r3, [r0, #0]
 8017148:	2217      	movs	r2, #23
 801714a:	615a      	str	r2, [r3, #20]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	4798      	blx	r3
  if (writable)
 8017150:	e7f1      	b.n	8017136 <access_virt_sarray+0x1a2>
	...

08017154 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8017154:	2300      	movs	r3, #0
{
 8017156:	b570      	push	{r4, r5, r6, lr}
 8017158:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 801715a:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801715c:	f000 f85f 	bl	801721e <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8017160:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8017162:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8017164:	4628      	mov	r0, r5
 8017166:	f000 f847 	bl	80171f8 <jpeg_get_small>

  if (mem == NULL) {
 801716a:	4604      	mov	r4, r0
 801716c:	b948      	cbnz	r0, 8017182 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801716e:	4628      	mov	r0, r5
 8017170:	f000 f857 	bl	8017222 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8017174:	682b      	ldr	r3, [r5, #0]
 8017176:	2238      	movs	r2, #56	; 0x38
 8017178:	4628      	mov	r0, r5
 801717a:	e9c3 2405 	strd	r2, r4, [r3, #20]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 8017182:	4b12      	ldr	r3, [pc, #72]	; (80171cc <jinit_memory_mgr+0x78>)
 8017184:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 8017186:	4b12      	ldr	r3, [pc, #72]	; (80171d0 <jinit_memory_mgr+0x7c>)
 8017188:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 801718a:	4b12      	ldr	r3, [pc, #72]	; (80171d4 <jinit_memory_mgr+0x80>)
 801718c:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 801718e:	4b12      	ldr	r3, [pc, #72]	; (80171d8 <jinit_memory_mgr+0x84>)
 8017190:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8017192:	4b12      	ldr	r3, [pc, #72]	; (80171dc <jinit_memory_mgr+0x88>)
 8017194:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8017196:	4b12      	ldr	r3, [pc, #72]	; (80171e0 <jinit_memory_mgr+0x8c>)
 8017198:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 801719a:	4b12      	ldr	r3, [pc, #72]	; (80171e4 <jinit_memory_mgr+0x90>)
 801719c:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 801719e:	4b12      	ldr	r3, [pc, #72]	; (80171e8 <jinit_memory_mgr+0x94>)
 80171a0:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 80171a2:	4b12      	ldr	r3, [pc, #72]	; (80171ec <jinit_memory_mgr+0x98>)
 80171a4:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 80171a6:	4b12      	ldr	r3, [pc, #72]	; (80171f0 <jinit_memory_mgr+0x9c>)
 80171a8:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 80171aa:	4b12      	ldr	r3, [pc, #72]	; (80171f4 <jinit_memory_mgr+0xa0>)
 80171ac:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 80171ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 80171b2:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 80171b6:	2300      	movs	r3, #0
 80171b8:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 80171ba:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 80171bc:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 80171be:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 80171c0:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 80171c4:	2354      	movs	r3, #84	; 0x54
 80171c6:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 80171c8:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 80171ca:	bd70      	pop	{r4, r5, r6, pc}
 80171cc:	080169f1 	.word	0x080169f1
 80171d0:	08016d1f 	.word	0x08016d1f
 80171d4:	08016dfd 	.word	0x08016dfd
 80171d8:	08016d8d 	.word	0x08016d8d
 80171dc:	08016b07 	.word	0x08016b07
 80171e0:	08016abd 	.word	0x08016abd
 80171e4:	08016e6d 	.word	0x08016e6d
 80171e8:	08016f95 	.word	0x08016f95
 80171ec:	08016c1f 	.word	0x08016c1f
 80171f0:	08016b51 	.word	0x08016b51
 80171f4:	08016bf5 	.word	0x08016bf5

080171f8 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 80171f8:	4608      	mov	r0, r1
 80171fa:	f7f2 b887 	b.w	800930c <pvPortMalloc>

080171fe <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 80171fe:	4608      	mov	r0, r1
 8017200:	f7f2 b91a 	b.w	8009438 <vPortFree>

08017204 <jpeg_get_large>:
 8017204:	4608      	mov	r0, r1
 8017206:	f7f2 b881 	b.w	800930c <pvPortMalloc>

0801720a <jpeg_free_large>:
 801720a:	4608      	mov	r0, r1
 801720c:	f7f2 b914 	b.w	8009438 <vPortFree>

08017210 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 8017210:	4610      	mov	r0, r2
 8017212:	4770      	bx	lr

08017214 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8017214:	6803      	ldr	r3, [r0, #0]
 8017216:	2233      	movs	r2, #51	; 0x33
 8017218:	615a      	str	r2, [r3, #20]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	4718      	bx	r3

0801721e <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 801721e:	2000      	movs	r0, #0
 8017220:	4770      	bx	lr

08017222 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 8017222:	4770      	bx	lr

08017224 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8017224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8017228:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801722c:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801722e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8017232:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8017234:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8017236:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 801723a:	bf16      	itet	ne
 801723c:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 801723e:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 8017242:	461e      	movne	r6, r3
 8017244:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8017246:	6843      	ldr	r3, [r0, #4]
 8017248:	f506 7280 	add.w	r2, r6, #256	; 0x100
 801724c:	689f      	ldr	r7, [r3, #8]
 801724e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8017250:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8017252:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8017256:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 801725a:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801725c:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801725e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8017260:	429a      	cmp	r2, r3
 8017262:	dc01      	bgt.n	8017268 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8017264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8017268:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 801726c:	009f      	lsls	r7, r3, #2
 801726e:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 8017270:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8017274:	b126      	cbz	r6, 8017280 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8017276:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801727a:	32ff      	adds	r2, #255	; 0xff
 801727c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8017280:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8017284:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 8017288:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 801728a:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 801728c:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8017290:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8017292:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8017296:	428f      	cmp	r7, r1
 8017298:	db0a      	blt.n	80172b0 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 801729a:	fb10 fb0c 	smulbb	fp, r0, ip
 801729e:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80172a2:	3101      	adds	r1, #1
 80172a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80172a8:	d1f5      	bne.n	8017296 <create_colorindex+0x72>
    if (pad)
 80172aa:	b93e      	cbnz	r6, 80172bc <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80172ac:	3301      	adds	r3, #1
 80172ae:	e7d6      	b.n	801725e <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 80172b0:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80172b2:	fb08 a700 	mla	r7, r8, r0, sl
 80172b6:	fb97 f7f9 	sdiv	r7, r7, r9
 80172ba:	e7ec      	b.n	8017296 <create_colorindex+0x72>
 80172bc:	4611      	mov	r1, r2
 80172be:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 80172c2:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 80172c6:	f892 9000 	ldrb.w	r9, [r2]
 80172ca:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 80172ce:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 80172d0:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 80172d4:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 80172d8:	d1f5      	bne.n	80172c6 <create_colorindex+0xa2>
 80172da:	e7e7      	b.n	80172ac <create_colorindex+0x88>

080172dc <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 80172dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 80172e0:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 80172e4:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 80172e6:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80172ea:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 80172ee:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 80172f2:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 80172f4:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 80172f6:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80172f8:	4540      	cmp	r0, r8
 80172fa:	db02      	blt.n	8017302 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 80172fc:	b003      	add	sp, #12
 80172fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8017302:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8017306:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8017308:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801730c:	eb04 0a03 	add.w	sl, r4, r3
 8017310:	4554      	cmp	r4, sl
 8017312:	d10f      	bne.n	8017334 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8017314:	3001      	adds	r0, #1
 8017316:	e7ef      	b.n	80172f8 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8017318:	f815 b003 	ldrb.w	fp, [r5, r3]
 801731c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8017320:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8017322:	f817 700b 	ldrb.w	r7, [r7, fp]
 8017326:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8017328:	4563      	cmp	r3, ip
 801732a:	dbf5      	blt.n	8017318 <color_quantize+0x3c>
 801732c:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 801732e:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8017332:	e7ed      	b.n	8017310 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8017334:	2300      	movs	r3, #0
      pixcode = 0;
 8017336:	461e      	mov	r6, r3
 8017338:	e7f6      	b.n	8017328 <color_quantize+0x4c>

0801733a <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 801733a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801733e:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8017342:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8017346:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8017348:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801734a:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801734e:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8017352:	4298      	cmp	r0, r3
 8017354:	db01      	blt.n	801735a <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8017356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 801735a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801735e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8017362:	eb05 0a09 	add.w	sl, r5, r9
 8017366:	4555      	cmp	r5, sl
 8017368:	f104 0403 	add.w	r4, r4, #3
 801736c:	d101      	bne.n	8017372 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 801736e:	3001      	adds	r0, #1
 8017370:	e7ef      	b.n	8017352 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8017372:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8017376:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 801737a:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 801737e:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8017382:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8017384:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8017388:	f818 6006 	ldrb.w	r6, [r8, r6]
 801738c:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 801738e:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8017392:	e7e8      	b.n	8017366 <color_quantize3+0x2c>

08017394 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8017394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017398:	469a      	mov	sl, r3
 801739a:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801739c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80173a0:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80173a4:	699a      	ldr	r2, [r3, #24]
 80173a6:	6811      	ldr	r1, [r2, #0]
 80173a8:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80173aa:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80173ac:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80173ae:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 80173b0:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80173b2:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 80173b4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80173b6:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 80173b8:	4551      	cmp	r1, sl
 80173ba:	db02      	blt.n	80173c2 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 80173bc:	b00b      	add	sp, #44	; 0x2c
 80173be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 80173c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 80173c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173c6:	9c07      	ldr	r4, [sp, #28]
 80173c8:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 80173cc:	0190      	lsls	r0, r2, #6
 80173ce:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80173d2:	9002      	str	r0, [sp, #8]
 80173d4:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 80173d8:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 80173da:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 80173dc:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 80173e0:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 80173e2:	9808      	ldr	r0, [sp, #32]
 80173e4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80173e8:	4575      	cmp	r5, lr
 80173ea:	f100 0003 	add.w	r0, r0, #3
 80173ee:	d106      	bne.n	80173fe <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 80173f0:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80173f2:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80173f4:	3201      	adds	r2, #1
 80173f6:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 80173fa:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 80173fc:	e7dc      	b.n	80173b8 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80173fe:	9e02      	ldr	r6, [sp, #8]
 8017400:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8017404:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8017408:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 801740a:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801740c:	f858 7006 	ldr.w	r7, [r8, r6]
 8017410:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8017412:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8017414:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8017418:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801741c:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8017420:	f859 7006 	ldr.w	r7, [r9, r6]
 8017424:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8017426:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8017428:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 801742c:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801742e:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8017430:	9a06      	ldr	r2, [sp, #24]
 8017432:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8017436:	4417      	add	r7, r2
 8017438:	5dbe      	ldrb	r6, [r7, r6]
 801743a:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 801743c:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 8017440:	e7d2      	b.n	80173e8 <quantize3_ord_dither+0x54>

08017442 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8017442:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8017444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8017446:	3202      	adds	r2, #2
 8017448:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 801744c:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 801744e:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8017450:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8017452:	3644      	adds	r6, #68	; 0x44
 8017454:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8017456:	42bb      	cmp	r3, r7
 8017458:	dc00      	bgt.n	801745c <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 801745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801745c:	6863      	ldr	r3, [r4, #4]
 801745e:	462a      	mov	r2, r5
 8017460:	2101      	movs	r1, #1
 8017462:	4620      	mov	r0, r4
 8017464:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8017466:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8017468:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 801746a:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 801746e:	e7f1      	b.n	8017454 <alloc_fs_workspace+0x12>

08017470 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8017470:	4770      	bx	lr

08017472 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8017472:	6803      	ldr	r3, [r0, #0]
 8017474:	222f      	movs	r2, #47	; 0x2f
 8017476:	615a      	str	r2, [r3, #20]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	4718      	bx	r3

0801747c <start_pass_1_quant>:
{
 801747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017480:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8017484:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8017486:	692b      	ldr	r3, [r5, #16]
 8017488:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 801748c:	696b      	ldr	r3, [r5, #20]
 801748e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8017492:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8017496:	2b01      	cmp	r3, #1
 8017498:	d00b      	beq.n	80174b2 <start_pass_1_quant+0x36>
 801749a:	2b02      	cmp	r3, #2
 801749c:	d05e      	beq.n	801755c <start_pass_1_quant+0xe0>
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d174      	bne.n	801758c <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 80174a2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80174a4:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 80174a6:	bf0c      	ite	eq
 80174a8:	4b3c      	ldreq	r3, [pc, #240]	; (801759c <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 80174aa:	4b3d      	ldrne	r3, [pc, #244]	; (80175a0 <start_pass_1_quant+0x124>)
 80174ac:	606b      	str	r3, [r5, #4]
}
 80174ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 80174b2:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 80174b4:	4b3b      	ldr	r3, [pc, #236]	; (80175a4 <start_pass_1_quant+0x128>)
 80174b6:	4a3c      	ldr	r2, [pc, #240]	; (80175a8 <start_pass_1_quant+0x12c>)
 80174b8:	2903      	cmp	r1, #3
 80174ba:	bf18      	it	ne
 80174bc:	4613      	movne	r3, r2
 80174be:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 80174c0:	2300      	movs	r3, #0
 80174c2:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 80174c4:	69eb      	ldr	r3, [r5, #28]
 80174c6:	b90b      	cbnz	r3, 80174cc <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 80174c8:	f7ff feac 	bl	8017224 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 80174cc:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80174ce:	2d00      	cmp	r5, #0
 80174d0:	d1ed      	bne.n	80174ae <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80174d2:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 80174d6:	f107 0820 	add.w	r8, r7, #32
 80174da:	4646      	mov	r6, r8
 80174dc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80174de:	429d      	cmp	r5, r3
 80174e0:	dae5      	bge.n	80174ae <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80174e2:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 80174e6:	4642      	mov	r2, r8
 80174e8:	2300      	movs	r3, #0
 80174ea:	429d      	cmp	r5, r3
 80174ec:	d007      	beq.n	80174fe <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 80174ee:	f852 1b04 	ldr.w	r1, [r2], #4
 80174f2:	4589      	cmp	r9, r1
 80174f4:	d130      	bne.n	8017558 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 80174f6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80174fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 80174fc:	bb48      	cbnz	r0, 8017552 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80174fe:	6863      	ldr	r3, [r4, #4]
 8017500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017504:	2101      	movs	r1, #1
 8017506:	4620      	mov	r0, r4
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 801750c:	f109 32ff 	add.w	r2, r9, #4294967295
 8017510:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8017514:	f8df c098 	ldr.w	ip, [pc, #152]	; 80175b0 <start_pass_1_quant+0x134>
 8017518:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 801751a:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 801751e:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8017522:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8017524:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017528:	005b      	lsls	r3, r3, #1
 801752a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 801752e:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8017532:	bf45      	ittet	mi
 8017534:	425b      	negmi	r3, r3
 8017536:	fb93 f3f2 	sdivmi	r3, r3, r2
 801753a:	fb93 f3f2 	sdivpl	r3, r3, r2
 801753e:	425b      	negmi	r3, r3
 8017540:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8017544:	458e      	cmp	lr, r1
 8017546:	d1ed      	bne.n	8017524 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8017548:	3140      	adds	r1, #64	; 0x40
 801754a:	f10c 0c10 	add.w	ip, ip, #16
 801754e:	458a      	cmp	sl, r1
 8017550:	d1e5      	bne.n	801751e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8017552:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8017554:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8017556:	e7c1      	b.n	80174dc <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8017558:	3301      	adds	r3, #1
 801755a:	e7c6      	b.n	80174ea <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 801755c:	4b13      	ldr	r3, [pc, #76]	; (80175ac <start_pass_1_quant+0x130>)
 801755e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8017560:	2300      	movs	r3, #0
 8017562:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8017564:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8017566:	b90b      	cbnz	r3, 801756c <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8017568:	f7ff ff6b 	bl	8017442 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801756c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801756e:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 8017570:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8017572:	3202      	adds	r2, #2
 8017574:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8017576:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8017578:	42bb      	cmp	r3, r7
 801757a:	dd98      	ble.n	80174ae <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 801757c:	4632      	mov	r2, r6
 801757e:	2100      	movs	r1, #0
 8017580:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 8017584:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8017586:	f013 fbb3 	bl	802acf0 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 801758a:	e7f4      	b.n	8017576 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 801758c:	6803      	ldr	r3, [r0, #0]
 801758e:	2231      	movs	r2, #49	; 0x31
}
 8017590:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8017594:	615a      	str	r2, [r3, #20]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	4718      	bx	r3
 801759a:	bf00      	nop
 801759c:	0801733b 	.word	0x0801733b
 80175a0:	080172dd 	.word	0x080172dd
 80175a4:	08017395 	.word	0x08017395
 80175a8:	080176ed 	.word	0x080176ed
 80175ac:	080175b5 	.word	0x080175b5
 80175b0:	0802fed8 	.word	0x0802fed8

080175b4 <quantize_fs_dither>:
{
 80175b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b8:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 80175ba:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 80175bc:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 80175c0:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80175c4:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 80175c8:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 80175cc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80175d0:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 80175d2:	1e6b      	subs	r3, r5, #1
 80175d4:	9304      	str	r3, [sp, #16]
 80175d6:	fb03 f309 	mul.w	r3, r3, r9
 80175da:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80175dc:	1c6b      	adds	r3, r5, #1
 80175de:	005b      	lsls	r3, r3, #1
 80175e0:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 80175e2:	2300      	movs	r3, #0
 80175e4:	9300      	str	r3, [sp, #0]
 80175e6:	9a00      	ldr	r2, [sp, #0]
 80175e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175ea:	429a      	cmp	r2, r3
 80175ec:	db02      	blt.n	80175f4 <quantize_fs_dither+0x40>
}
 80175ee:	b011      	add	sp, #68	; 0x44
 80175f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80175f4:	2100      	movs	r1, #0
 80175f6:	462a      	mov	r2, r5
 80175f8:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 80175fc:	f013 fb78 	bl	802acf0 <memset>
    for (ci = 0; ci < nc; ci++) {
 8017600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017604:	2100      	movs	r1, #0
 8017606:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 8017608:	f1c9 0300 	rsb	r3, r9, #0
 801760c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 801760e:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8017610:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 8017612:	db06      	blt.n	8017622 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8017614:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8017618:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801761a:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 801761c:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801761e:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8017620:	e7e0      	b.n	80175e4 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8017622:	9800      	ldr	r0, [sp, #0]
 8017624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017626:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 801762a:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 801762e:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8017632:	9b05      	ldr	r3, [sp, #20]
 8017634:	f853 cb04 	ldr.w	ip, [r3], #4
 8017638:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 801763a:	b312      	cbz	r2, 8017682 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 801763c:	9b08      	ldr	r3, [sp, #32]
 801763e:	449e      	add	lr, r3
	output_ptr += width-1;
 8017640:	9b04      	ldr	r3, [sp, #16]
 8017642:	4418      	add	r0, r3
	dirnc = -nc;
 8017644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017646:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8017648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801764a:	449c      	add	ip, r3
	dir = -1;
 801764c:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8017650:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8017652:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8017654:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8017656:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8017658:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801765c:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 801765e:	6923      	ldr	r3, [r4, #16]
 8017660:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017664:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8017666:	9b02      	ldr	r3, [sp, #8]
 8017668:	005b      	lsls	r3, r3, #1
 801766a:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 801766c:	2300      	movs	r3, #0
      cur = 0;
 801766e:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8017670:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8017672:	9a03      	ldr	r2, [sp, #12]
 8017674:	b94a      	cbnz	r2, 801768a <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8017676:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8017678:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 801767a:	436a      	muls	r2, r5
 801767c:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8017680:	e7c5      	b.n	801760e <quantize_fs_dither+0x5a>
	dir = 1;
 8017682:	2301      	movs	r3, #1
 8017684:	f8cd 901c 	str.w	r9, [sp, #28]
 8017688:	e7e2      	b.n	8017650 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801768a:	9a01      	ldr	r2, [sp, #4]
 801768c:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8017690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8017692:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8017694:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8017698:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 801769c:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80176a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 80176a2:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 80176a6:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80176aa:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 80176ae:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80176b0:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80176b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 80176b4:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80176b8:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 80176bc:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80176be:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 80176c2:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 80176c4:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 80176c6:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 80176ca:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 80176cc:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 80176ce:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 80176d0:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 80176d4:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 80176d6:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 80176d8:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 80176da:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 80176dc:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 80176de:	4443      	add	r3, r8
	belowerr = bnexterr;
 80176e0:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 80176e4:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 80176e8:	4417      	add	r7, r2
 80176ea:	e7c2      	b.n	8017672 <quantize_fs_dither+0xbe>

080176ec <quantize_ord_dither>:
{
 80176ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176f0:	b089      	sub	sp, #36	; 0x24
 80176f2:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80176f4:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 80176f8:	1f14      	subs	r4, r2, #4
{
 80176fa:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 80176fc:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 80176fe:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 8017700:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8017704:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8017706:	9b07      	ldr	r3, [sp, #28]
 8017708:	429f      	cmp	r7, r3
 801770a:	db02      	blt.n	8017712 <quantize_ord_dither+0x26>
}
 801770c:	b009      	add	sp, #36	; 0x24
 801770e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8017712:	4652      	mov	r2, sl
 8017714:	2100      	movs	r1, #0
 8017716:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801771a:	f013 fae9 	bl	802acf0 <memset>
    row_index = cquantize->row_index;
 801771e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 8017722:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 8017726:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 8017728:	019a      	lsls	r2, r3, #6
 801772a:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 801772c:	9a01      	ldr	r2, [sp, #4]
 801772e:	4290      	cmp	r0, r2
 8017730:	db06      	blt.n	8017740 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 8017732:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8017734:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8017736:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 801773a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801773e:	e7e2      	b.n	8017706 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 8017740:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 8017744:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8017746:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 801774a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801774e:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8017750:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 8017752:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8017754:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017758:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 801775a:	eb0a 0205 	add.w	r2, sl, r5
 801775e:	9206      	str	r2, [sp, #24]
 8017760:	9a06      	ldr	r2, [sp, #24]
 8017762:	4295      	cmp	r5, r2
 8017764:	d101      	bne.n	801776a <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8017766:	3001      	adds	r0, #1
 8017768:	e7e0      	b.n	801772c <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801776a:	782a      	ldrb	r2, [r5, #0]
 801776c:	f891 e000 	ldrb.w	lr, [r1]
 8017770:	9204      	str	r2, [sp, #16]
 8017772:	9a02      	ldr	r2, [sp, #8]
 8017774:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8017778:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 801777a:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801777c:	f85b b002 	ldr.w	fp, [fp, r2]
 8017780:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8017782:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8017786:	4496      	add	lr, r2
 8017788:	9a04      	ldr	r2, [sp, #16]
 801778a:	f81e e00b 	ldrb.w	lr, [lr, fp]
 801778e:	4472      	add	r2, lr
 8017790:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8017794:	9a01      	ldr	r2, [sp, #4]
 8017796:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 8017798:	e7e2      	b.n	8017760 <quantize_ord_dither+0x74>
	...

0801779c <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801779c:	6843      	ldr	r3, [r0, #4]
 801779e:	2258      	movs	r2, #88	; 0x58
 80177a0:	2101      	movs	r1, #1
 80177a2:	681b      	ldr	r3, [r3, #0]
{
 80177a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a8:	b085      	sub	sp, #20
 80177aa:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80177ac:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 80177ae:	4b67      	ldr	r3, [pc, #412]	; (801794c <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80177b0:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 80177b4:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 80177b6:	4b66      	ldr	r3, [pc, #408]	; (8017950 <jinit_1pass_quantizer+0x1b4>)
 80177b8:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 80177ba:	4b66      	ldr	r3, [pc, #408]	; (8017954 <jinit_1pass_quantizer+0x1b8>)
 80177bc:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 80177be:	2300      	movs	r3, #0
 80177c0:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 80177c2:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 80177c4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80177c6:	2b04      	cmp	r3, #4
 80177c8:	dd07      	ble.n	80177da <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 80177ca:	6823      	ldr	r3, [r4, #0]
 80177cc:	2039      	movs	r0, #57	; 0x39
 80177ce:	2204      	movs	r2, #4
 80177d0:	e9c3 0205 	strd	r0, r2, [r3, #20]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	4620      	mov	r0, r4
 80177d8:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 80177da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80177dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80177e0:	dd08      	ble.n	80177f4 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 80177e2:	6823      	ldr	r3, [r4, #0]
 80177e4:	213b      	movs	r1, #59	; 0x3b
 80177e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80177ea:	4620      	mov	r0, r4
 80177ec:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80177f4:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 80177f8:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 80177fa:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 80177fe:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8017802:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 8017806:	469a      	mov	sl, r3
 8017808:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 801780a:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 801780c:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 801780e:	4588      	cmp	r8, r1
 8017810:	dc47      	bgt.n	80178a2 <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8017812:	4591      	cmp	r9, r2
 8017814:	daf7      	bge.n	8017806 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8017816:	f1ba 0f01 	cmp.w	sl, #1
 801781a:	d106      	bne.n	801782a <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 801781c:	6823      	ldr	r3, [r4, #0]
 801781e:	213a      	movs	r1, #58	; 0x3a
 8017820:	4620      	mov	r0, r4
 8017822:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 801782a:	463a      	mov	r2, r7
 801782c:	2300      	movs	r3, #0
 801782e:	2501      	movs	r5, #1
 8017830:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 8017832:	4598      	cmp	r8, r3
 8017834:	dc38      	bgt.n	80178a8 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8017836:	f8df c120 	ldr.w	ip, [pc, #288]	; 8017958 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 801783a:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 801783c:	460b      	mov	r3, r1
 801783e:	4598      	cmp	r8, r3
 8017840:	dc38      	bgt.n	80178b4 <jinit_1pass_quantizer+0x118>
  } while (changed);
 8017842:	2900      	cmp	r1, #0
 8017844:	d1f9      	bne.n	801783a <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 8017846:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8017848:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 801784a:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 801784c:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 801784e:	d148      	bne.n	80178e2 <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8017850:	619d      	str	r5, [r3, #24]
 8017852:	6a31      	ldr	r1, [r6, #32]
 8017854:	61d9      	str	r1, [r3, #28]
 8017856:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8017858:	6219      	str	r1, [r3, #32]
 801785a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 801785c:	6259      	str	r1, [r3, #36]	; 0x24
 801785e:	2160      	movs	r1, #96	; 0x60
 8017860:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8017862:	2101      	movs	r1, #1
 8017864:	4620      	mov	r0, r4
 8017866:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8017868:	6863      	ldr	r3, [r4, #4]
 801786a:	462a      	mov	r2, r5
 801786c:	2101      	movs	r1, #1
 801786e:	689f      	ldr	r7, [r3, #8]
 8017870:	4620      	mov	r0, r4
 8017872:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8017874:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 8017876:	46ae      	mov	lr, r5
 8017878:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 801787a:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801787c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801787e:	429a      	cmp	r2, r3
 8017880:	db33      	blt.n	80178ea <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 8017882:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8017884:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8017886:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 801788a:	f7ff fccb 	bl	8017224 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 801788e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8017892:	2b02      	cmp	r3, #2
 8017894:	d156      	bne.n	8017944 <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 8017896:	4620      	mov	r0, r4
}
 8017898:	b005      	add	sp, #20
 801789a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 801789e:	f7ff bdd0 	b.w	8017442 <alloc_fs_workspace>
      temp *= iroot;
 80178a2:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 80178a4:	3101      	adds	r1, #1
 80178a6:	e7b2      	b.n	801780e <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 80178a8:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 80178ac:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 80178ae:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 80178b2:	e7be      	b.n	8017832 <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 80178b4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80178b8:	2a02      	cmp	r2, #2
 80178ba:	bf0c      	ite	eq
 80178bc:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 80178c0:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 80178c2:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 80178c6:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 80178ca:	fb0a 2202 	mla	r2, sl, r2, r2
 80178ce:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 80178d2:	4591      	cmp	r9, r2
 80178d4:	dbb5      	blt.n	8017842 <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 80178d6:	3301      	adds	r3, #1
 80178d8:	4615      	mov	r5, r2
      changed = TRUE;
 80178da:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 80178dc:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 80178e0:	e7ad      	b.n	801783e <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 80178e2:	2161      	movs	r1, #97	; 0x61
 80178e4:	e9c3 1505 	strd	r1, r5, [r3, #20]
 80178e8:	e7bb      	b.n	8017862 <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80178ea:	9b01      	ldr	r3, [sp, #4]
 80178ec:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 80178f0:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80178f4:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80178f6:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 80178fa:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80178fe:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8017900:	2300      	movs	r3, #0
 8017902:	469a      	mov	sl, r3
 8017904:	4599      	cmp	r9, r3
 8017906:	dc02      	bgt.n	801790e <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8017908:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 801790a:	46c6      	mov	lr, r8
 801790c:	e7b6      	b.n	801787c <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801790e:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8017912:	9f03      	ldr	r7, [sp, #12]
 8017914:	4439      	add	r1, r7
 8017916:	fb91 f1fb 	sdiv	r1, r1, fp
 801791a:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801791c:	4651      	mov	r1, sl
 801791e:	42a9      	cmp	r1, r5
 8017920:	db0d      	blt.n	801793e <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 8017922:	3301      	adds	r3, #1
 8017924:	44c2      	add	sl, r8
 8017926:	e7ed      	b.n	8017904 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8017928:	9f02      	ldr	r7, [sp, #8]
 801792a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801792e:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 8017930:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8017934:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 8017936:	45e0      	cmp	r8, ip
 8017938:	dcf6      	bgt.n	8017928 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801793a:	4471      	add	r1, lr
 801793c:	e7ef      	b.n	801791e <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 801793e:	f04f 0c00 	mov.w	ip, #0
 8017942:	e7f8      	b.n	8017936 <jinit_1pass_quantizer+0x19a>
}
 8017944:	b005      	add	sp, #20
 8017946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801794a:	bf00      	nop
 801794c:	0801747d 	.word	0x0801747d
 8017950:	08017471 	.word	0x08017471
 8017954:	08017473 	.word	0x08017473
 8017958:	0802fecc 	.word	0x0802fecc

0801795c <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 801795c:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 8017960:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 8017962:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8017966:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8017968:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 801796c:	429c      	cmp	r4, r3
 801796e:	db00      	blt.n	8017972 <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 8017970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 8017972:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8017976:	4677      	mov	r7, lr
 8017978:	3203      	adds	r2, #3
 801797a:	b90f      	cbnz	r7, 8017980 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 801797c:	3401      	adds	r4, #1
 801797e:	e7f5      	b.n	801796c <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8017980:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8017984:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8017988:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 801798a:	08a8      	lsrs	r0, r5, #2
 801798c:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8017990:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8017994:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8017998:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 801799a:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 801799e:	3001      	adds	r0, #1
 80179a0:	b280      	uxth	r0, r0
 80179a2:	b108      	cbz	r0, 80179a8 <prescan_quantize+0x4c>
 80179a4:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 80179a8:	3f01      	subs	r7, #1
 80179aa:	3203      	adds	r2, #3
 80179ac:	e7e5      	b.n	801797a <prescan_quantize+0x1e>

080179ae <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 80179ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179b2:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 80179b6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 80179ba:	2500      	movs	r5, #0
{
 80179bc:	930a      	str	r3, [sp, #40]	; 0x28
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 80179be:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80179c2:	9000      	str	r0, [sp, #0]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 80179c4:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 80179c6:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80179c8:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 80179ca:	9305      	str	r3, [sp, #20]
  c2 >>= BOX_C2_LOG;
 80179cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80179ce:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 80179d2:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 80179d4:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 80179d6:	9b00      	ldr	r3, [sp, #0]
  centerc1 = (minc1 + maxc1) >> 1;
 80179d8:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 80179dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 80179e0:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 80179e2:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 80179e6:	9301      	str	r3, [sp, #4]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 80179e8:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 80179ec:	341c      	adds	r4, #28
{
 80179ee:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 80179f2:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 80179f4:	0149      	lsls	r1, r1, #5
 80179f6:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 80179fa:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 80179fc:	eb09 0301 	add.w	r3, r9, r1
 8017a00:	105b      	asrs	r3, r3, #1
 8017a02:	9302      	str	r3, [sp, #8]
  centerc2 = (minc2 + maxc2) >> 1;
 8017a04:	eb08 0304 	add.w	r3, r8, r4
 8017a08:	105b      	asrs	r3, r3, #1
 8017a0a:	9303      	str	r3, [sp, #12]
  for (i = 0; i < numcolors; i++) {
 8017a0c:	9b01      	ldr	r3, [sp, #4]
 8017a0e:	42ab      	cmp	r3, r5
 8017a10:	dc43      	bgt.n	8017a9a <fill_inverse_cmap+0xec>
  ncolors = 0;
 8017a12:	2200      	movs	r2, #0
 8017a14:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 8017a16:	a830      	add	r0, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8017a18:	4613      	mov	r3, r2
 8017a1a:	9c01      	ldr	r4, [sp, #4]
 8017a1c:	429c      	cmp	r4, r3
 8017a1e:	f300 809c 	bgt.w	8017b5a <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8017a22:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 8017a24:	a970      	add	r1, sp, #448	; 0x1c0
    *bptr++ = 0x7FFFFFFFL;
 8017a26:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8017a2a:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8017a2c:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8017a30:	d1fb      	bne.n	8017a2a <fill_inverse_cmap+0x7c>
 8017a32:	a930      	add	r1, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8017a34:	469b      	mov	fp, r3
 8017a36:	9107      	str	r1, [sp, #28]
 8017a38:	4593      	cmp	fp, r2
 8017a3a:	f040 8096 	bne.w	8017b6a <fill_inverse_cmap+0x1bc>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 8017a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  cptr = bestcolor;
 8017a40:	aa10      	add	r2, sp, #64	; 0x40
  c2 <<= BOX_C2_LOG;
 8017a42:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8017a46:	9b08      	ldr	r3, [sp, #32]
 8017a48:	f023 0103 	bic.w	r1, r3, #3
 8017a4c:	9b05      	ldr	r3, [sp, #20]
 8017a4e:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 8017a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a54:	f023 0307 	bic.w	r3, r3, #7
 8017a58:	4629      	mov	r1, r5
 8017a5a:	019b      	lsls	r3, r3, #6
 8017a5c:	3110      	adds	r1, #16
 8017a5e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8017a62:	f855 4b04 	ldr.w	r4, [r5], #4
 8017a66:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8017a68:	f102 0720 	add.w	r7, r2, #32
 8017a6c:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8017a6e:	4626      	mov	r6, r4
 8017a70:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8017a72:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8017a76:	f812 0b01 	ldrb.w	r0, [r2], #1
 8017a7a:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8017a7c:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8017a7e:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8017a82:	d1f8      	bne.n	8017a76 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8017a84:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8017a86:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8017a88:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8017a8c:	d1ef      	bne.n	8017a6e <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8017a8e:	428d      	cmp	r5, r1
 8017a90:	d1e7      	bne.n	8017a62 <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 8017a92:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 8017a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8017a9a:	9b00      	ldr	r3, [sp, #0]
 8017a9c:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8017aa4:	4591      	cmp	r9, r2
 8017aa6:	dd2a      	ble.n	8017afe <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 8017aa8:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8017aac:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8017aae:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8017ab2:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8017ab8:	459a      	cmp	sl, r3
 8017aba:	dd33      	ble.n	8017b24 <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 8017abc:	eba3 0e0a 	sub.w	lr, r3, sl
 8017ac0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8017ac4:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8017ac8:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 8017aca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8017ace:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8017ad2:	68bb      	ldr	r3, [r7, #8]
 8017ad4:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8017ad6:	4598      	cmp	r8, r3
 8017ad8:	dd32      	ble.n	8017b40 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 8017ada:	eba3 0708 	sub.w	r7, r3, r8
 8017ade:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8017ae0:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8017ae4:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8017ae6:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8017ae8:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 8017aec:	aa70      	add	r2, sp, #448	; 0x1c0
 8017aee:	429e      	cmp	r6, r3
 8017af0:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8017af4:	f105 0501 	add.w	r5, r5, #1
 8017af8:	bfa8      	it	ge
 8017afa:	461e      	movge	r6, r3
 8017afc:	e786      	b.n	8017a0c <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8017afe:	4291      	cmp	r1, r2
 8017b00:	da06      	bge.n	8017b10 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8017b02:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8017b06:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8017b0a:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8017b0e:	e7d0      	b.n	8017ab2 <fill_inverse_cmap+0x104>
      if (x <= centerc0) {
 8017b10:	9b02      	ldr	r3, [sp, #8]
      min_dist = 0;
 8017b12:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8017b16:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8017b18:	bfac      	ite	ge
 8017b1a:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8017b1c:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8017b20:	4352      	muls	r2, r2
 8017b22:	e7c7      	b.n	8017ab4 <fill_inverse_cmap+0x106>
    } else if (x > maxc1) {
 8017b24:	4298      	cmp	r0, r3
 8017b26:	da08      	bge.n	8017b3a <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 8017b28:	eba3 0e00 	sub.w	lr, r3, r0
 8017b2c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8017b30:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8017b34:	eba3 030a 	sub.w	r3, r3, sl
 8017b38:	e7c7      	b.n	8017aca <fill_inverse_cmap+0x11c>
      if (x <= centerc1) {
 8017b3a:	459b      	cmp	fp, r3
 8017b3c:	dbfa      	blt.n	8017b34 <fill_inverse_cmap+0x186>
 8017b3e:	e7c3      	b.n	8017ac8 <fill_inverse_cmap+0x11a>
    } else if (x > maxc2) {
 8017b40:	429c      	cmp	r4, r3
 8017b42:	da06      	bge.n	8017b52 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 8017b44:	1b1f      	subs	r7, r3, r4
 8017b46:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8017b48:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8017b4c:	eba3 0308 	sub.w	r3, r3, r8
 8017b50:	e7c9      	b.n	8017ae6 <fill_inverse_cmap+0x138>
      if (x <= centerc2) {
 8017b52:	9f03      	ldr	r7, [sp, #12]
 8017b54:	429f      	cmp	r7, r3
 8017b56:	dbf9      	blt.n	8017b4c <fill_inverse_cmap+0x19e>
 8017b58:	e7c4      	b.n	8017ae4 <fill_inverse_cmap+0x136>
    if (mindist[i] <= minmaxdist)
 8017b5a:	f851 4b04 	ldr.w	r4, [r1], #4
 8017b5e:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 8017b60:	bfa4      	itt	ge
 8017b62:	5483      	strbge	r3, [r0, r2]
 8017b64:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8017b66:	3301      	adds	r3, #1
 8017b68:	e757      	b.n	8017a1a <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8017b6a:	9b07      	ldr	r3, [sp, #28]
 8017b6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017b70:	9307      	str	r3, [sp, #28]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8017b72:	9b00      	ldr	r3, [sp, #0]
 8017b74:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8017b78:	680b      	ldr	r3, [r1, #0]
 8017b7a:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8017b7c:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8017b7e:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8017b80:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8017b84:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8017b86:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8017b88:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8017b8c:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8017b90:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8017b94:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8017b96:	4364      	muls	r4, r4
 8017b98:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8017b9c:	3004      	adds	r0, #4
 8017b9e:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 8017ba0:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8017ba4:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8017ba6:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8017ba8:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8017baa:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 8017bac:	9402      	str	r4, [sp, #8]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8017bae:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8017bb0:	9106      	str	r1, [sp, #24]
 8017bb2:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8017bb4:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8017bb8:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8017bbc:	930e      	str	r3, [sp, #56]	; 0x38
 8017bbe:	9b06      	ldr	r3, [sp, #24]
 8017bc0:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 8017bc2:	a810      	add	r0, sp, #64	; 0x40
 8017bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017bc8:	9003      	str	r0, [sp, #12]
 8017bca:	930d      	str	r3, [sp, #52]	; 0x34
 8017bcc:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 8017bce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017bd0:	eb03 0c01 	add.w	ip, r3, r1
 8017bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bd6:	440b      	add	r3, r1
 8017bd8:	930f      	str	r3, [sp, #60]	; 0x3c
	xx2 = inc2;
 8017bda:	9b03      	ldr	r3, [sp, #12]
 8017bdc:	9304      	str	r3, [sp, #16]
      xx1 = inc1;
 8017bde:	9b02      	ldr	r3, [sp, #8]
 8017be0:	9301      	str	r3, [sp, #4]
 8017be2:	e01c      	b.n	8017c1e <fill_inverse_cmap+0x270>
	  if (dist2 < *bptr) {
 8017be4:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8017be8:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 8017bec:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8017bee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	    *bptr = dist2;
 8017bf0:	bfc8      	it	gt
 8017bf2:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 8017bf4:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8017bf6:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 8017bfa:	bfc8      	it	gt
 8017bfc:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8017c00:	42af      	cmp	r7, r5
 8017c02:	d1ef      	bne.n	8017be4 <fill_inverse_cmap+0x236>
	  cptr++;
 8017c04:	9b04      	ldr	r3, [sp, #16]
	  bptr++;
 8017c06:	f10c 0c10 	add.w	ip, ip, #16
	  cptr++;
 8017c0a:	3304      	adds	r3, #4
 8017c0c:	9304      	str	r3, [sp, #16]
	dist1 += xx1;
 8017c0e:	9b01      	ldr	r3, [sp, #4]
 8017c10:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8017c12:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8017c16:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8017c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c1a:	4298      	cmp	r0, r3
 8017c1c:	d006      	beq.n	8017c2c <fill_inverse_cmap+0x27e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8017c1e:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 8017c22:	9d06      	ldr	r5, [sp, #24]
 8017c24:	f8dd e010 	ldr.w	lr, [sp, #16]
 8017c28:	9c01      	ldr	r4, [sp, #4]
 8017c2a:	e7db      	b.n	8017be4 <fill_inverse_cmap+0x236>
	  cptr++;
 8017c2c:	9b03      	ldr	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8017c2e:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8017c30:	980f      	ldr	r0, [sp, #60]	; 0x3c
	  cptr++;
 8017c32:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8017c34:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	  cptr++;
 8017c38:	9303      	str	r3, [sp, #12]
      dist0 += xx0;
 8017c3a:	9b02      	ldr	r3, [sp, #8]
 8017c3c:	4403      	add	r3, r0
 8017c3e:	9302      	str	r3, [sp, #8]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8017c40:	d1c4      	bne.n	8017bcc <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 8017c42:	f10b 0b01 	add.w	fp, fp, #1
 8017c46:	e6f7      	b.n	8017a38 <fill_inverse_cmap+0x8a>

08017c48 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8017c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c4c:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8017c4e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8017c52:	b085      	sub	sp, #20
 8017c54:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8017c56:	699b      	ldr	r3, [r3, #24]
{
 8017c58:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8017c5a:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 8017c5c:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 8017c5e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8017c60:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8017c62:	4555      	cmp	r5, sl
 8017c64:	db02      	blt.n	8017c6c <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 8017c66:	b005      	add	sp, #20
 8017c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 8017c6c:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 8017c70:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 8017c74:	9b01      	ldr	r3, [sp, #4]
 8017c76:	3403      	adds	r4, #3
 8017c78:	eb06 0b03 	add.w	fp, r6, r3
 8017c7c:	455e      	cmp	r6, fp
 8017c7e:	d101      	bne.n	8017c84 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 8017c80:	3501      	adds	r5, #1
 8017c82:	e7ee      	b.n	8017c62 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8017c84:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8017c88:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8017c8c:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 8017c90:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8017c92:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8017c96:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 8017c9a:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8017c9e:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 8017ca0:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 8017ca4:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8017ca8:	f1bc 0f00 	cmp.w	ip, #0
 8017cac:	d106      	bne.n	8017cbc <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 8017cae:	4672      	mov	r2, lr
 8017cb0:	9303      	str	r3, [sp, #12]
 8017cb2:	9002      	str	r0, [sp, #8]
 8017cb4:	f7ff fe7b 	bl	80179ae <fill_inverse_cmap>
 8017cb8:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 8017cbc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017cc0:	3403      	adds	r4, #3
 8017cc2:	3b01      	subs	r3, #1
 8017cc4:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 8017cc8:	e7d8      	b.n	8017c7c <pass2_no_dither+0x34>

08017cca <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 8017cca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017cce:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 8017cd2:	b09f      	sub	sp, #124	; 0x7c
 8017cd4:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8017cd6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8017cda:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8017cdc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8017cde:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8017ce0:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8017ce4:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8017ce6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8017cea:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 8017cec:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8017cf0:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 8017cf4:	681a      	ldr	r2, [r3, #0]
 8017cf6:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8017cf8:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 8017cfa:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 8017cfc:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 8017cfe:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8017d00:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017d02:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8017d04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017d08:	3b03      	subs	r3, #3
 8017d0a:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017d0c:	2306      	movs	r3, #6
 8017d0e:	fb02 3303 	mla	r3, r2, r3, r3
 8017d12:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8017d14:	2300      	movs	r3, #0
 8017d16:	9304      	str	r3, [sp, #16]
 8017d18:	9b04      	ldr	r3, [sp, #16]
 8017d1a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017d1c:	4293      	cmp	r3, r2
 8017d1e:	db02      	blt.n	8017d26 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8017d20:	b01f      	add	sp, #124	; 0x7c
 8017d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8017d26:	9a04      	ldr	r2, [sp, #16]
 8017d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d2e:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8017d30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d36:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017d38:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8017d3c:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 8017d3e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d036      	beq.n	8017db4 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8017d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d48:	9a01      	ldr	r2, [sp, #4]
 8017d4a:	441a      	add	r2, r3
      outptr += width-1;
 8017d4c:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8017d4e:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8017d50:	3b01      	subs	r3, #1
 8017d52:	9a03      	ldr	r2, [sp, #12]
 8017d54:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017d56:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8017d58:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017d5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d5c:	4413      	add	r3, r2
      dir3 = -3;
 8017d5e:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8017d62:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8017d64:	2300      	movs	r3, #0
      dir3 = -3;
 8017d66:	9208      	str	r2, [sp, #32]
      dir = -1;
 8017d68:	f04f 32ff 	mov.w	r2, #4294967295
 8017d6c:	920f      	str	r2, [sp, #60]	; 0x3c
 8017d6e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8017d72:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8017d74:	9b08      	ldr	r3, [sp, #32]
 8017d76:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 8017d78:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8017d7a:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 8017d7c:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 8017d7e:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8017d80:	1cab      	adds	r3, r5, #2
 8017d82:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017d84:	1d2b      	adds	r3, r5, #4
 8017d86:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 8017d88:	9b05      	ldr	r3, [sp, #20]
 8017d8a:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 8017d8c:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8017d8e:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8017d92:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8017d96:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017d98:	b98f      	cbnz	r7, 8017dbe <pass2_fs_dither+0xf4>
 8017d9a:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8017d9c:	9a02      	ldr	r2, [sp, #8]
 8017d9e:	435d      	muls	r5, r3
 8017da0:	9906      	ldr	r1, [sp, #24]
 8017da2:	9b02      	ldr	r3, [sp, #8]
 8017da4:	5351      	strh	r1, [r2, r5]
 8017da6:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 8017da8:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 8017daa:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 8017dac:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 8017dae:	9b04      	ldr	r3, [sp, #16]
 8017db0:	3301      	adds	r3, #1
 8017db2:	e7b0      	b.n	8017d16 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8017db4:	2301      	movs	r3, #1
      dir3 = 3;
 8017db6:	2203      	movs	r2, #3
      dir = 1;
 8017db8:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 8017dba:	9208      	str	r2, [sp, #32]
 8017dbc:	e7d7      	b.n	8017d6e <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8017dbe:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8017dc2:	1977      	adds	r7, r6, r5
 8017dc4:	4463      	add	r3, ip
 8017dc6:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 8017dc8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8017dca:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8017dce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017dd0:	5ef3      	ldrsh	r3, [r6, r3]
 8017dd2:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017dd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017dd6:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8017dd8:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017dda:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8017ddc:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8017dde:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017de2:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8017de4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8017de8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8017dec:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 8017dee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8017df2:	9f01      	ldr	r7, [sp, #4]
 8017df4:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8017df8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017dfa:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8017dfc:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8017dfe:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8017e00:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 8017e04:	9901      	ldr	r1, [sp, #4]
 8017e06:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8017e08:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8017e0c:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8017e10:	9a01      	ldr	r2, [sp, #4]
 8017e12:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8017e14:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8017e18:	ea4f 02aa 	mov.w	r2, sl, asr #2
 8017e1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017e22:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8017e26:	461f      	mov	r7, r3
 8017e28:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 8017e2c:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8017e30:	f1bc 0f00 	cmp.w	ip, #0
 8017e34:	d105      	bne.n	8017e42 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8017e36:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 8017e3a:	f7ff fdb8 	bl	80179ae <fill_inverse_cmap>
 8017e3e:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 8017e42:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8017e46:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8017e48:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8017e4a:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8017e4c:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 8017e4e:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8017e50:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017e52:	5cd2      	ldrb	r2, [r2, r3]
 8017e54:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8017e58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017e5a:	5cd2      	ldrb	r2, [r2, r3]
 8017e5c:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8017e60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017e62:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8017e64:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8017e66:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 8017e6a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8017e6e:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 8017e70:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8017e74:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8017e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 8017e78:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 8017e7c:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 8017e7e:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 8017e82:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 8017e84:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8017e88:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 8017e8a:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8017e8e:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8017e90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017e92:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8017e94:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8017e98:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 8017e9a:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8017e9e:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8017ea0:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8017ea4:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8017ea6:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 8017ea8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 8017eaa:	4437      	add	r7, r6
      outptr += dir;
 8017eac:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 8017eae:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8017eb0:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8017eb4:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8017eb6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017eb8:	443e      	add	r6, r7
 8017eba:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 8017ebc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017ebe:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8017ec0:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8017ec4:	9609      	str	r6, [sp, #36]	; 0x24
 8017ec6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017ec8:	e765      	b.n	8017d96 <pass2_fs_dither+0xcc>

08017eca <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8017eca:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 8017ecc:	6843      	ldr	r3, [r0, #4]
 8017ece:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8017ed2:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017ed4:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 8017edc:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8017ee0:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8017ee4:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8017ee8:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 8017eea:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 8017eec:	425c      	negs	r4, r3
 8017eee:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8017ef2:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 8017ef4:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8017ef8:	2b10      	cmp	r3, #16
 8017efa:	d1f7      	bne.n	8017eec <init_error_limit+0x22>
 8017efc:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8017f00:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8017f04:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 8017f08:	425d      	negs	r5, r3
 8017f0a:	f844 3f04 	str.w	r3, [r4, #4]!
 8017f0e:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8017f12:	f002 0501 	and.w	r5, r2, #1
 8017f16:	3a01      	subs	r2, #1
 8017f18:	442b      	add	r3, r5
 8017f1a:	f112 0f32 	cmn.w	r2, #50	; 0x32
 8017f1e:	d1f3      	bne.n	8017f08 <init_error_limit+0x3e>
 8017f20:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 8017f24:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 8017f28:	425c      	negs	r4, r3
 8017f2a:	f841 3f04 	str.w	r3, [r1, #4]!
 8017f2e:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8017f32:	4282      	cmp	r2, r0
 8017f34:	d1f9      	bne.n	8017f2a <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 8017f36:	bd38      	pop	{r3, r4, r5, pc}

08017f38 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 8017f38:	4770      	bx	lr

08017f3a <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8017f3a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8017f3e:	2201      	movs	r2, #1
 8017f40:	61da      	str	r2, [r3, #28]
}
 8017f42:	4770      	bx	lr

08017f44 <start_pass_2_quant>:
{
 8017f44:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8017f46:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8017f4a:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 8017f4c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8017f50:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d050      	beq.n	8017ff8 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8017f56:	2302      	movs	r3, #2
 8017f58:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 8017f5c:	b189      	cbz	r1, 8017f82 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 8017f5e:	4b28      	ldr	r3, [pc, #160]	; (8018000 <start_pass_2_quant+0xbc>)
 8017f60:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8017f62:	4b28      	ldr	r3, [pc, #160]	; (8018004 <start_pass_2_quant+0xc0>)
 8017f64:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 8017f66:	1f34      	subs	r4, r6, #4
 8017f68:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 8017f6a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8017f6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017f72:	2100      	movs	r1, #0
 8017f74:	f012 febc 	bl	802acf0 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8017f78:	42a6      	cmp	r6, r4
 8017f7a:	d1f6      	bne.n	8017f6a <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	61eb      	str	r3, [r5, #28]
}
 8017f80:	e02f      	b.n	8017fe2 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8017f82:	4b21      	ldr	r3, [pc, #132]	; (8018008 <start_pass_2_quant+0xc4>)
 8017f84:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8017f86:	4b21      	ldr	r3, [pc, #132]	; (801800c <start_pass_2_quant+0xc8>)
 8017f88:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 8017f8a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	dc29      	bgt.n	8017fe6 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8017f92:	223a      	movs	r2, #58	; 0x3a
 8017f94:	6823      	ldr	r3, [r4, #0]
 8017f96:	615a      	str	r2, [r3, #20]
 8017f98:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8017f9a:	619a      	str	r2, [r3, #24]
 8017f9c:	4620      	mov	r0, r4
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8017fa2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8017fa6:	2b02      	cmp	r3, #2
 8017fa8:	d118      	bne.n	8017fdc <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8017faa:	2306      	movs	r3, #6
 8017fac:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8017fae:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8017fb0:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8017fb2:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8017fb4:	b93b      	cbnz	r3, 8017fc6 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8017fb6:	6863      	ldr	r3, [r4, #4]
 8017fb8:	2101      	movs	r1, #1
 8017fba:	4620      	mov	r0, r4
 8017fbc:	9201      	str	r2, [sp, #4]
 8017fbe:	685b      	ldr	r3, [r3, #4]
 8017fc0:	4798      	blx	r3
 8017fc2:	9a01      	ldr	r2, [sp, #4]
 8017fc4:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8017fc6:	2100      	movs	r1, #0
 8017fc8:	6a28      	ldr	r0, [r5, #32]
 8017fca:	f012 fe91 	bl	802acf0 <memset>
      if (cquantize->error_limiter == NULL)
 8017fce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8017fd0:	b913      	cbnz	r3, 8017fd8 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	f7ff ff79 	bl	8017eca <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8017fd8:	2300      	movs	r3, #0
 8017fda:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 8017fdc:	69eb      	ldr	r3, [r5, #28]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d1c1      	bne.n	8017f66 <start_pass_2_quant+0x22>
}
 8017fe2:	b002      	add	sp, #8
 8017fe4:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8017fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017fea:	ddda      	ble.n	8017fa2 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8017fec:	223b      	movs	r2, #59	; 0x3b
 8017fee:	6823      	ldr	r3, [r4, #0]
 8017ff0:	615a      	str	r2, [r3, #20]
 8017ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017ff6:	e7d0      	b.n	8017f9a <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8017ff8:	2900      	cmp	r1, #0
 8017ffa:	d1b0      	bne.n	8017f5e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 8017ffc:	4b04      	ldr	r3, [pc, #16]	; (8018010 <start_pass_2_quant+0xcc>)
 8017ffe:	e7c1      	b.n	8017f84 <start_pass_2_quant+0x40>
 8018000:	0801795d 	.word	0x0801795d
 8018004:	08018253 	.word	0x08018253
 8018008:	08017ccb 	.word	0x08017ccb
 801800c:	08017f39 	.word	0x08017f39
 8018010:	08017c49 	.word	0x08017c49

08018014 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8018014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8018018:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 801801c:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 801801e:	b085      	sub	sp, #20
  if (c0max > c0min)
 8018020:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 8018022:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8018024:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8018026:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801802a:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 801802e:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8018032:	db24      	blt.n	801807e <update_box.isra.0+0x6a>
  if (c1max > c1min)
 8018034:	4584      	cmp	ip, r0
 8018036:	4662      	mov	r2, ip
 8018038:	db5d      	blt.n	80180f6 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 801803a:	42a5      	cmp	r5, r4
 801803c:	f280 80eb 	bge.w	8018216 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 8018040:	0196      	lsls	r6, r2, #6
 8018042:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8018046:	46ac      	mov	ip, r5
 8018048:	9602      	str	r6, [sp, #8]
 801804a:	fb07 f602 	mul.w	r6, r7, r2
 801804e:	9603      	str	r6, [sp, #12]
 8018050:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8018052:	469e      	mov	lr, r3
 8018054:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 8018058:	9e03      	ldr	r6, [sp, #12]
 801805a:	44b1      	add	r9, r6
 801805c:	e083      	b.n	8018166 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 801805e:	9a01      	ldr	r2, [sp, #4]
 8018060:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8018064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018068:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801806a:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 801806c:	454c      	cmp	r4, r9
 801806e:	da08      	bge.n	8018082 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8018070:	f108 0801 	add.w	r8, r8, #1
 8018074:	4540      	cmp	r0, r8
 8018076:	daf2      	bge.n	801805e <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8018078:	3301      	adds	r3, #1
 801807a:	459b      	cmp	fp, r3
 801807c:	db0f      	blt.n	801809e <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801807e:	46e0      	mov	r8, ip
 8018080:	e7f8      	b.n	8018074 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 8018082:	f832 ab02 	ldrh.w	sl, [r2], #2
 8018086:	f1ba 0f00 	cmp.w	sl, #0
 801808a:	d005      	beq.n	8018098 <update_box.isra.0+0x84>
  if (c0max > c0min)
 801808c:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 801808e:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8018090:	ddd0      	ble.n	8018034 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8018092:	465f      	mov	r7, fp
 8018094:	46e0      	mov	r8, ip
 8018096:	e00f      	b.n	80180b8 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8018098:	f109 0901 	add.w	r9, r9, #1
 801809c:	e7e6      	b.n	801806c <update_box.isra.0+0x58>
 have_c0min:
 801809e:	463b      	mov	r3, r7
 80180a0:	e7f7      	b.n	8018092 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 80180a2:	9a01      	ldr	r2, [sp, #4]
 80180a4:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 80180a8:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80180ac:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80180ae:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 80180b0:	454c      	cmp	r4, r9
 80180b2:	da07      	bge.n	80180c4 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80180b4:	f108 0801 	add.w	r8, r8, #1
 80180b8:	4540      	cmp	r0, r8
 80180ba:	daf2      	bge.n	80180a2 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 80180bc:	3f01      	subs	r7, #1
 80180be:	429f      	cmp	r7, r3
 80180c0:	dbb8      	blt.n	8018034 <update_box.isra.0+0x20>
 80180c2:	e7e7      	b.n	8018094 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 80180c4:	f832 ab02 	ldrh.w	sl, [r2], #2
 80180c8:	f1ba 0f00 	cmp.w	sl, #0
 80180cc:	d002      	beq.n	80180d4 <update_box.isra.0+0xc0>
	    goto have_c0max;
 80180ce:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 80180d0:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 80180d2:	e7af      	b.n	8018034 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 80180d4:	f109 0901 	add.w	r9, r9, #1
 80180d8:	e7ea      	b.n	80180b0 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 80180da:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80180dc:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 80180de:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 80180e2:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 80180e4:	454c      	cmp	r4, r9
 80180e6:	da0a      	bge.n	80180fe <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80180e8:	f108 0801 	add.w	r8, r8, #1
 80180ec:	45d8      	cmp	r8, fp
 80180ee:	ddf4      	ble.n	80180da <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 80180f0:	3201      	adds	r2, #1
 80180f2:	4290      	cmp	r0, r2
 80180f4:	db11      	blt.n	801811a <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80180f6:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80180f8:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 80180fc:	e7f6      	b.n	80180ec <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 80180fe:	f837 6b02 	ldrh.w	r6, [r7], #2
 8018102:	b13e      	cbz	r6, 8018114 <update_box.isra.0+0x100>
  if (c1max > c1min)
 8018104:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 8018106:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8018108:	dd97      	ble.n	801803a <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801810a:	4684      	mov	ip, r0
 801810c:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 801810e:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 8018112:	e00d      	b.n	8018130 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 8018114:	f109 0901 	add.w	r9, r9, #1
 8018118:	e7e4      	b.n	80180e4 <update_box.isra.0+0xd0>
 have_c1min:
 801811a:	4662      	mov	r2, ip
 801811c:	e7f5      	b.n	801810a <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 801811e:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8018120:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 8018122:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8018126:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8018128:	454c      	cmp	r4, r9
 801812a:	da09      	bge.n	8018140 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801812c:	f108 0801 	add.w	r8, r8, #1
 8018130:	45c3      	cmp	fp, r8
 8018132:	daf4      	bge.n	801811e <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 8018134:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018138:	4594      	cmp	ip, r2
 801813a:	f6ff af7e 	blt.w	801803a <update_box.isra.0+0x26>
 801813e:	e7e5      	b.n	801810c <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 8018140:	f837 6b02 	ldrh.w	r6, [r7], #2
 8018144:	b11e      	cbz	r6, 801814e <update_box.isra.0+0x13a>
	    goto have_c1max;
 8018146:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 8018148:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 801814c:	e775      	b.n	801803a <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 801814e:	f109 0901 	add.w	r9, r9, #1
 8018152:	e7e9      	b.n	8018128 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8018154:	9e01      	ldr	r6, [sp, #4]
 8018156:	4690      	mov	r8, r2
 8018158:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 801815c:	444f      	add	r7, r9
 801815e:	4580      	cmp	r8, r0
 8018160:	dd11      	ble.n	8018186 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8018162:	f10e 0e01 	add.w	lr, lr, #1
 8018166:	45f3      	cmp	fp, lr
 8018168:	daf4      	bge.n	8018154 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 801816a:	f10c 0c01 	add.w	ip, ip, #1
 801816e:	4564      	cmp	r4, ip
 8018170:	f6bf af6e 	bge.w	8018050 <update_box.isra.0+0x3c>
 have_c2min:
 8018174:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8018176:	4627      	mov	r7, r4
 8018178:	9d02      	ldr	r5, [sp, #8]
 801817a:	469e      	mov	lr, r3
 801817c:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 8018180:	9d03      	ldr	r5, [sp, #12]
 8018182:	44a9      	add	r9, r5
 8018184:	e034      	b.n	80181f0 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 8018186:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 801818a:	f837 a00a 	ldrh.w	sl, [r7, sl]
 801818e:	f1ba 0f00 	cmp.w	sl, #0
 8018192:	d021      	beq.n	80181d8 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 8018194:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 8018196:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 801819a:	dcec      	bgt.n	8018176 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801819c:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801819e:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80181a2:	eba4 070c 	sub.w	r7, r4, ip
 80181a6:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80181aa:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80181ae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80181b2:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80181b6:	013d      	lsls	r5, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80181b8:	fb08 f808 	mul.w	r8, r8, r8
 80181bc:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 80181c0:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80181c4:	fb05 8505 	mla	r5, r5, r5, r8
 80181c8:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 80181ca:	459b      	cmp	fp, r3
 80181cc:	da3f      	bge.n	801824e <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 80181ce:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 80181d2:	b005      	add	sp, #20
 80181d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80181d8:	f108 0801 	add.w	r8, r8, #1
 80181dc:	e7bf      	b.n	801815e <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80181de:	9d01      	ldr	r5, [sp, #4]
 80181e0:	4690      	mov	r8, r2
 80181e2:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 80181e6:	444d      	add	r5, r9
 80181e8:	4540      	cmp	r0, r8
 80181ea:	da07      	bge.n	80181fc <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80181ec:	f10e 0e01 	add.w	lr, lr, #1
 80181f0:	45f3      	cmp	fp, lr
 80181f2:	daf4      	bge.n	80181de <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 80181f4:	3f01      	subs	r7, #1
 80181f6:	4567      	cmp	r7, ip
 80181f8:	dbd0      	blt.n	801819c <update_box.isra.0+0x188>
 80181fa:	e7bd      	b.n	8018178 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 80181fc:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8018200:	f835 a00a 	ldrh.w	sl, [r5, sl]
 8018204:	f1ba 0f00 	cmp.w	sl, #0
 8018208:	d002      	beq.n	8018210 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 801820a:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 801820c:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 801820e:	e7c5      	b.n	801819c <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8018210:	f108 0801 	add.w	r8, r8, #1
 8018214:	e7e8      	b.n	80181e8 <update_box.isra.0+0x1d4>
 have_c2min:
 8018216:	46ac      	mov	ip, r5
 8018218:	e7c0      	b.n	801819c <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 801821a:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 801821e:	f1a5 0802 	sub.w	r8, r5, #2
 8018222:	9d01      	ldr	r5, [sp, #4]
 8018224:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8018228:	4445      	add	r5, r8
 801822a:	46e0      	mov	r8, ip
 801822c:	4544      	cmp	r4, r8
 801822e:	da04      	bge.n	801823a <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8018230:	3701      	adds	r7, #1
 8018232:	42b8      	cmp	r0, r7
 8018234:	daf1      	bge.n	801821a <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 8018236:	3301      	adds	r3, #1
 8018238:	e7c7      	b.n	80181ca <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 801823a:	f835 af02 	ldrh.w	sl, [r5, #2]!
 801823e:	f1ba 0f00 	cmp.w	sl, #0
 8018242:	d001      	beq.n	8018248 <update_box.isra.0+0x234>
	  ccount++;
 8018244:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8018248:	f108 0801 	add.w	r8, r8, #1
 801824c:	e7ee      	b.n	801822c <update_box.isra.0+0x218>
 801824e:	4617      	mov	r7, r2
 8018250:	e7ef      	b.n	8018232 <update_box.isra.0+0x21e>

08018252 <finish_pass1>:
{
 8018252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8018256:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801825a:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801825c:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 801825e:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8018262:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8018264:	691b      	ldr	r3, [r3, #16]
{
 8018266:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8018268:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 801826c:	9b02      	ldr	r3, [sp, #8]
 801826e:	695b      	ldr	r3, [r3, #20]
 8018270:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8018272:	9a01      	ldr	r2, [sp, #4]
 8018274:	6843      	ldr	r3, [r0, #4]
 8018276:	0152      	lsls	r2, r2, #5
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801827c:	2300      	movs	r3, #0
 801827e:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8018280:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8018282:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 8018284:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8018286:	6142      	str	r2, [r0, #20]
 8018288:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 801828a:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801828e:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8018292:	9b00      	ldr	r3, [sp, #0]
 8018294:	4601      	mov	r1, r0
 8018296:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 801829a:	f7ff febb 	bl	8018014 <update_box.isra.0>
  while (numboxes < desired_colors) {
 801829e:	9b01      	ldr	r3, [sp, #4]
 80182a0:	455b      	cmp	r3, fp
 80182a2:	dc24      	bgt.n	80182ee <finish_pass1+0x9c>
 80182a4:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 80182a6:	9a00      	ldr	r2, [sp, #0]
 80182a8:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 80182ac:	6992      	ldr	r2, [r2, #24]
 80182ae:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80182b0:	e9d8 7200 	ldrd	r7, r2, [r8]
 80182b4:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80182b6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80182ba:	9205      	str	r2, [sp, #20]
 80182bc:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80182c0:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80182c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80182c6:	9201      	str	r2, [sp, #4]
 80182c8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80182cc:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 80182ce:	9a01      	ldr	r2, [sp, #4]
 80182d0:	0052      	lsls	r2, r2, #1
 80182d2:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 80182d4:	2200      	movs	r2, #0
  long c1total = 0;
 80182d6:	4692      	mov	sl, r2
  long c0total = 0;
 80182d8:	4691      	mov	r9, r2
  long total = 0;
 80182da:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 80182dc:	9804      	ldr	r0, [sp, #16]
 80182de:	42b8      	cmp	r0, r7
 80182e0:	f2c0 8098 	blt.w	8018414 <finish_pass1+0x1c2>
 80182e4:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 80182e6:	9e05      	ldr	r6, [sp, #20]
 80182e8:	3004      	adds	r0, #4
 80182ea:	9008      	str	r0, [sp, #32]
 80182ec:	e07c      	b.n	80183e8 <finish_pass1+0x196>
    if (numboxes*2 <= desired_colors) {
 80182ee:	9b01      	ldr	r3, [sp, #4]
 80182f0:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 80182f4:	db4f      	blt.n	8018396 <finish_pass1+0x144>
  boxptr which = NULL;
 80182f6:	2300      	movs	r3, #0
 80182f8:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80182fa:	461e      	mov	r6, r3
  register long maxc = 0;
 80182fc:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 80182fe:	69c2      	ldr	r2, [r0, #28]
 8018300:	42ba      	cmp	r2, r7
 8018302:	dd04      	ble.n	801830e <finish_pass1+0xbc>
 8018304:	6984      	ldr	r4, [r0, #24]
 8018306:	2c00      	cmp	r4, #0
 8018308:	bfc4      	itt	gt
 801830a:	4603      	movgt	r3, r0
 801830c:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801830e:	3601      	adds	r6, #1
 8018310:	3020      	adds	r0, #32
 8018312:	45b3      	cmp	fp, r6
 8018314:	d1f3      	bne.n	80182fe <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 8018316:	2b00      	cmp	r3, #0
 8018318:	d0c5      	beq.n	80182a6 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 801831a:	685a      	ldr	r2, [r3, #4]
 801831c:	f101 0920 	add.w	r9, r1, #32
 8018320:	624a      	str	r2, [r1, #36]	; 0x24
 8018322:	68d8      	ldr	r0, [r3, #12]
 8018324:	62c8      	str	r0, [r1, #44]	; 0x2c
 8018326:	6958      	ldr	r0, [r3, #20]
 8018328:	6348      	str	r0, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 801832a:	6818      	ldr	r0, [r3, #0]
 801832c:	6208      	str	r0, [r1, #32]
 801832e:	6898      	ldr	r0, [r3, #8]
 8018330:	6288      	str	r0, [r1, #40]	; 0x28
 8018332:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8018336:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 801833a:	6818      	ldr	r0, [r3, #0]
 801833c:	9003      	str	r0, [sp, #12]
 801833e:	1a10      	subs	r0, r2, r0
 8018340:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8018344:	e9d3 0602 	ldrd	r0, r6, [r3, #8]
 8018348:	9004      	str	r0, [sp, #16]
 801834a:	1a30      	subs	r0, r6, r0
 801834c:	00c7      	lsls	r7, r0, #3
 801834e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8018352:	6958      	ldr	r0, [r3, #20]
 8018354:	eba0 0a0c 	sub.w	sl, r0, ip
    if (c2 > cmax) { cmax = c2; n = 2; }
 8018358:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 801835c:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8018360:	f2c0 808c 	blt.w	801847c <finish_pass1+0x22a>
    if (c0 > cmax) { n = 0; }
 8018364:	45be      	cmp	lr, r7
 8018366:	dd25      	ble.n	80183b4 <finish_pass1+0x162>
      lb = (b1->c0max + b1->c0min) / 2;
 8018368:	9803      	ldr	r0, [sp, #12]
 801836a:	4402      	add	r2, r0
 801836c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8018370:	1052      	asrs	r2, r2, #1
      b1->c0max = lb;
 8018372:	605a      	str	r2, [r3, #4]
      b2->c0min = lb+1;
 8018374:	3201      	adds	r2, #1
 8018376:	620a      	str	r2, [r1, #32]
    update_box(cinfo, b1);
 8018378:	4619      	mov	r1, r3
 801837a:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 801837c:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 8018380:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8018384:	f7ff fe46 	bl	8018014 <update_box.isra.0>
    update_box(cinfo, b2);
 8018388:	9b00      	ldr	r3, [sp, #0]
 801838a:	4649      	mov	r1, r9
 801838c:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8018390:	f7ff fe40 	bl	8018014 <update_box.isra.0>
    numboxes++;
 8018394:	e783      	b.n	801829e <finish_pass1+0x4c>
  boxptr which = NULL;
 8018396:	2300      	movs	r3, #0
 8018398:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801839a:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 801839c:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 801839e:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80183a0:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 80183a2:	42b7      	cmp	r7, r6
 80183a4:	bfc4      	itt	gt
 80183a6:	4613      	movgt	r3, r2
 80183a8:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80183aa:	4583      	cmp	fp, r0
 80183ac:	f102 0220 	add.w	r2, r2, #32
 80183b0:	d1f5      	bne.n	801839e <finish_pass1+0x14c>
 80183b2:	e7b0      	b.n	8018316 <finish_pass1+0xc4>
      lb = (b1->c1max + b1->c1min) / 2;
 80183b4:	9a04      	ldr	r2, [sp, #16]
 80183b6:	4416      	add	r6, r2
 80183b8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80183bc:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 80183be:	60de      	str	r6, [r3, #12]
      b2->c1min = lb+1;
 80183c0:	3601      	adds	r6, #1
 80183c2:	628e      	str	r6, [r1, #40]	; 0x28
      break;
 80183c4:	e7d8      	b.n	8018378 <finish_pass1+0x126>
      histp = & histogram[c0][c1][c2min];
 80183c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183c8:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80183cc:	9c03      	ldr	r4, [sp, #12]
 80183ce:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 80183d2:	f10e 0e02 	add.w	lr, lr, #2
 80183d6:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 80183da:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 80183de:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 80183e0:	9c07      	ldr	r4, [sp, #28]
 80183e2:	4564      	cmp	r4, ip
 80183e4:	da05      	bge.n	80183f2 <finish_pass1+0x1a0>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80183e6:	3601      	adds	r6, #1
 80183e8:	9806      	ldr	r0, [sp, #24]
 80183ea:	42b0      	cmp	r0, r6
 80183ec:	daeb      	bge.n	80183c6 <finish_pass1+0x174>
  for (c0 = c0min; c0 <= c0max; c0++)
 80183ee:	3701      	adds	r7, #1
 80183f0:	e774      	b.n	80182dc <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 80183f2:	f830 5b02 	ldrh.w	r5, [r0], #2
 80183f6:	b155      	cbz	r5, 801840e <finish_pass1+0x1bc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80183f8:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 80183fa:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 80183fc:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8018400:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8018404:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8018408:	3404      	adds	r4, #4
 801840a:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 801840e:	f10c 0c01 	add.w	ip, ip, #1
 8018412:	e7e5      	b.n	80183e0 <finish_pass1+0x18e>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8018414:	eb09 0961 	add.w	r9, r9, r1, asr #1
 8018418:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 801841a:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 801841e:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8018422:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8018426:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 801842a:	fb99 f9f1 	sdiv	r9, r9, r1
 801842e:	6800      	ldr	r0, [r0, #0]
 8018430:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8018434:	9800      	ldr	r0, [sp, #0]
 8018436:	fb9a faf1 	sdiv	sl, sl, r1
 801843a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801843e:	6840      	ldr	r0, [r0, #4]
 8018440:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8018444:	9800      	ldr	r0, [sp, #0]
 8018446:	fb92 f1f1 	sdiv	r1, r2, r1
 801844a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801844e:	6880      	ldr	r0, [r0, #8]
 8018450:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 8018452:	3301      	adds	r3, #1
 8018454:	455b      	cmp	r3, fp
 8018456:	f47f af26 	bne.w	80182a6 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 801845a:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801845c:	2162      	movs	r1, #98	; 0x62
 801845e:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 8018460:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8018464:	6812      	ldr	r2, [r2, #0]
 8018466:	e9c2 1305 	strd	r1, r3, [r2, #20]
 801846a:	6853      	ldr	r3, [r2, #4]
 801846c:	2101      	movs	r1, #1
 801846e:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8018470:	2301      	movs	r3, #1
 8018472:	9a02      	ldr	r2, [sp, #8]
 8018474:	61d3      	str	r3, [r2, #28]
}
 8018476:	b00b      	add	sp, #44	; 0x2c
 8018478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 801847c:	45a6      	cmp	lr, r4
 801847e:	f73f af73 	bgt.w	8018368 <finish_pass1+0x116>
      lb = (b1->c2max + b1->c2min) / 2;
 8018482:	4460      	add	r0, ip
 8018484:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8018488:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 801848a:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 801848c:	3001      	adds	r0, #1
 801848e:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 8018490:	e772      	b.n	8018378 <finish_pass1+0x126>
	...

08018494 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8018494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8018496:	6843      	ldr	r3, [r0, #4]
 8018498:	222c      	movs	r2, #44	; 0x2c
 801849a:	2101      	movs	r1, #1
{
 801849c:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 80184a2:	4b30      	ldr	r3, [pc, #192]	; (8018564 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80184a4:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80184a8:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 80184aa:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 80184ac:	4b2e      	ldr	r3, [pc, #184]	; (8018568 <jinit_2pass_quantizer+0xd4>)
 80184ae:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 80184b0:	2300      	movs	r3, #0
 80184b2:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 80184b4:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 80184b6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80184b8:	2b03      	cmp	r3, #3
 80184ba:	d005      	beq.n	80184c8 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 80184bc:	6823      	ldr	r3, [r4, #0]
 80184be:	2230      	movs	r2, #48	; 0x30
 80184c0:	4620      	mov	r0, r4
 80184c2:	615a      	str	r2, [r3, #20]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 80184c8:	6863      	ldr	r3, [r4, #4]
 80184ca:	2600      	movs	r6, #0
 80184cc:	2280      	movs	r2, #128	; 0x80
 80184ce:	2101      	movs	r1, #1
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	4620      	mov	r0, r4
 80184d4:	4798      	blx	r3
 80184d6:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 80184d8:	6863      	ldr	r3, [r4, #4]
 80184da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80184de:	69af      	ldr	r7, [r5, #24]
 80184e0:	2101      	movs	r1, #1
 80184e2:	685b      	ldr	r3, [r3, #4]
 80184e4:	4620      	mov	r0, r4
 80184e6:	4798      	blx	r3
 80184e8:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 80184ea:	3604      	adds	r6, #4
 80184ec:	2e80      	cmp	r6, #128	; 0x80
 80184ee:	d1f3      	bne.n	80184d8 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 80184f0:	2301      	movs	r3, #1
 80184f2:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 80184f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d031      	beq.n	801855e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 80184fa:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 80184fc:	2e07      	cmp	r6, #7
 80184fe:	dc25      	bgt.n	801854c <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8018500:	223a      	movs	r2, #58	; 0x3a
 8018502:	6823      	ldr	r3, [r4, #0]
 8018504:	615a      	str	r2, [r3, #20]
 8018506:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8018508:	619a      	str	r2, [r3, #24]
 801850a:	4620      	mov	r0, r4
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8018510:	6863      	ldr	r3, [r4, #4]
 8018512:	4632      	mov	r2, r6
 8018514:	2101      	movs	r1, #1
 8018516:	4620      	mov	r0, r4
 8018518:	689f      	ldr	r7, [r3, #8]
 801851a:	2303      	movs	r3, #3
 801851c:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 801851e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8018522:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8018526:	b1e3      	cbz	r3, 8018562 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8018528:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801852a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801852c:	4620      	mov	r0, r4
 801852e:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8018530:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8018534:	2306      	movs	r3, #6
 8018536:	435a      	muls	r2, r3
 8018538:	6863      	ldr	r3, [r4, #4]
 801853a:	320c      	adds	r2, #12
 801853c:	685b      	ldr	r3, [r3, #4]
 801853e:	4798      	blx	r3
 8018540:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8018542:	4620      	mov	r0, r4
  }
}
 8018544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8018548:	f7ff bcbf 	b.w	8017eca <init_error_limit>
    if (desired > MAXNUMCOLORS)
 801854c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8018550:	ddde      	ble.n	8018510 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8018552:	223b      	movs	r2, #59	; 0x3b
 8018554:	6823      	ldr	r3, [r4, #0]
 8018556:	615a      	str	r2, [r3, #20]
 8018558:	f44f 7280 	mov.w	r2, #256	; 0x100
 801855c:	e7d4      	b.n	8018508 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 801855e:	612b      	str	r3, [r5, #16]
 8018560:	e7df      	b.n	8018522 <jinit_2pass_quantizer+0x8e>
}
 8018562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018564:	08017f45 	.word	0x08017f45
 8018568:	08017f3b 	.word	0x08017f3b

0801856c <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 801856c:	4408      	add	r0, r1
 801856e:	3801      	subs	r0, #1
}
 8018570:	fb90 f0f1 	sdiv	r0, r0, r1
 8018574:	4770      	bx	lr

08018576 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8018576:	1e4b      	subs	r3, r1, #1
 8018578:	4418      	add	r0, r3
  return a - (a % b);
 801857a:	fb90 f3f1 	sdiv	r3, r0, r1
 801857e:	fb01 0113 	mls	r1, r1, r3, r0
}
 8018582:	1a40      	subs	r0, r0, r1
 8018584:	4770      	bx	lr

08018586 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8018586:	b570      	push	{r4, r5, r6, lr}
 8018588:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 801858a:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 801858e:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8018592:	2e00      	cmp	r6, #0
 8018594:	dc00      	bgt.n	8018598 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8018596:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8018598:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 801859a:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 801859c:	f854 1b04 	ldr.w	r1, [r4], #4
 80185a0:	f855 0b04 	ldr.w	r0, [r5], #4
 80185a4:	f012 fb96 	bl	802acd4 <memcpy>
  for (row = num_rows; row > 0; row--) {
 80185a8:	e7f3      	b.n	8018592 <jcopy_sample_rows+0xc>

080185aa <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 80185aa:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 80185ac:	01d2      	lsls	r2, r2, #7
 80185ae:	4601      	mov	r1, r0
 80185b0:	4618      	mov	r0, r3
 80185b2:	f012 bb8f 	b.w	802acd4 <memcpy>

080185b6 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80185b6:	8880      	ldrh	r0, [r0, #4]
 80185b8:	4770      	bx	lr

080185ba <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80185ba:	b570      	push	{r4, r5, r6, lr}
 80185bc:	6803      	ldr	r3, [r0, #0]
 80185be:	460c      	mov	r4, r1
 80185c0:	2100      	movs	r1, #0
 80185c2:	4605      	mov	r5, r0
 80185c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185c6:	4798      	blx	r3
 80185c8:	4606      	mov	r6, r0
 80185ca:	682b      	ldr	r3, [r5, #0]
 80185cc:	4628      	mov	r0, r5
 80185ce:	1ba4      	subs	r4, r4, r6
 80185d0:	6a1b      	ldr	r3, [r3, #32]
 80185d2:	b2a4      	uxth	r4, r4
 80185d4:	4798      	blx	r3
 80185d6:	fbb4 f0f0 	udiv	r0, r4, r0
 80185da:	bd70      	pop	{r4, r5, r6, pc}

080185dc <_ZN8touchgfx17AbstractPartition5clearEv>:
 80185dc:	2300      	movs	r3, #0
 80185de:	8083      	strh	r3, [r0, #4]
 80185e0:	4770      	bx	lr

080185e2 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80185e2:	b510      	push	{r4, lr}
 80185e4:	6803      	ldr	r3, [r0, #0]
 80185e6:	4604      	mov	r4, r0
 80185e8:	8881      	ldrh	r1, [r0, #4]
 80185ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ec:	4798      	blx	r3
 80185ee:	88a3      	ldrh	r3, [r4, #4]
 80185f0:	3301      	adds	r3, #1
 80185f2:	80a3      	strh	r3, [r4, #4]
 80185f4:	bd10      	pop	{r4, pc}

080185f6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80185f6:	6803      	ldr	r3, [r0, #0]
 80185f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185fa:	4718      	bx	r3

080185fc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80185fc:	4770      	bx	lr
	...

08018600 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8018600:	4a02      	ldr	r2, [pc, #8]	; (801860c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8018602:	6002      	str	r2, [r0, #0]
 8018604:	2200      	movs	r2, #0
 8018606:	8082      	strh	r2, [r0, #4]
 8018608:	4770      	bx	lr
 801860a:	bf00      	nop
 801860c:	080304cc 	.word	0x080304cc

08018610 <_ZN8touchgfx9Container13getFirstChildEv>:
 8018610:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018612:	4770      	bx	lr

08018614 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018614:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018616:	2000      	movs	r0, #0
 8018618:	b12b      	cbz	r3, 8018626 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801861a:	b920      	cbnz	r0, 8018626 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801861c:	1a5a      	subs	r2, r3, r1
 801861e:	699b      	ldr	r3, [r3, #24]
 8018620:	4250      	negs	r0, r2
 8018622:	4150      	adcs	r0, r2
 8018624:	e7f8      	b.n	8018618 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8018626:	4770      	bx	lr

08018628 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018628:	2300      	movs	r3, #0
 801862a:	6148      	str	r0, [r1, #20]
 801862c:	618b      	str	r3, [r1, #24]
 801862e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018630:	b913      	cbnz	r3, 8018638 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8018632:	6281      	str	r1, [r0, #40]	; 0x28
 8018634:	4770      	bx	lr
 8018636:	4613      	mov	r3, r2
 8018638:	699a      	ldr	r2, [r3, #24]
 801863a:	2a00      	cmp	r2, #0
 801863c:	d1fb      	bne.n	8018636 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 801863e:	6199      	str	r1, [r3, #24]
 8018640:	4770      	bx	lr

08018642 <_ZN8touchgfx9Container9removeAllEv>:
 8018642:	2200      	movs	r2, #0
 8018644:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018646:	b123      	cbz	r3, 8018652 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8018648:	6999      	ldr	r1, [r3, #24]
 801864a:	6281      	str	r1, [r0, #40]	; 0x28
 801864c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8018650:	e7f8      	b.n	8018644 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8018652:	4770      	bx	lr

08018654 <_ZN8touchgfx9Container6unlinkEv>:
 8018654:	2300      	movs	r3, #0
 8018656:	6283      	str	r3, [r0, #40]	; 0x28
 8018658:	4770      	bx	lr

0801865a <_ZNK8touchgfx9Container12getSolidRectEv>:
 801865a:	2200      	movs	r2, #0
 801865c:	8002      	strh	r2, [r0, #0]
 801865e:	8042      	strh	r2, [r0, #2]
 8018660:	8082      	strh	r2, [r0, #4]
 8018662:	80c2      	strh	r2, [r0, #6]
 8018664:	4770      	bx	lr

08018666 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8018666:	b570      	push	{r4, r5, r6, lr}
 8018668:	460d      	mov	r5, r1
 801866a:	4616      	mov	r6, r2
 801866c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801866e:	b13c      	cbz	r4, 8018680 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8018670:	6823      	ldr	r3, [r4, #0]
 8018672:	4620      	mov	r0, r4
 8018674:	4632      	mov	r2, r6
 8018676:	4629      	mov	r1, r5
 8018678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801867a:	4798      	blx	r3
 801867c:	69a4      	ldr	r4, [r4, #24]
 801867e:	e7f6      	b.n	801866e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8018680:	bd70      	pop	{r4, r5, r6, pc}

08018682 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8018682:	b538      	push	{r3, r4, r5, lr}
 8018684:	460d      	mov	r5, r1
 8018686:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018688:	b134      	cbz	r4, 8018698 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801868a:	682b      	ldr	r3, [r5, #0]
 801868c:	4621      	mov	r1, r4
 801868e:	4628      	mov	r0, r5
 8018690:	689b      	ldr	r3, [r3, #8]
 8018692:	4798      	blx	r3
 8018694:	69a4      	ldr	r4, [r4, #24]
 8018696:	e7f7      	b.n	8018688 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8018698:	bd38      	pop	{r3, r4, r5, pc}

0801869a <_ZN8touchgfx9ContainerD1Ev>:
 801869a:	4770      	bx	lr

0801869c <_ZN8touchgfx9ContainerD0Ev>:
 801869c:	b510      	push	{r4, lr}
 801869e:	4604      	mov	r4, r0
 80186a0:	212c      	movs	r1, #44	; 0x2c
 80186a2:	f012 f970 	bl	802a986 <_ZdlPvj>
 80186a6:	4620      	mov	r0, r4
 80186a8:	bd10      	pop	{r4, pc}

080186aa <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80186aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80186ac:	b19b      	cbz	r3, 80186d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80186ae:	428b      	cmp	r3, r1
 80186b0:	d109      	bne.n	80186c6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80186b2:	699a      	ldr	r2, [r3, #24]
 80186b4:	2100      	movs	r1, #0
 80186b6:	6159      	str	r1, [r3, #20]
 80186b8:	6282      	str	r2, [r0, #40]	; 0x28
 80186ba:	b902      	cbnz	r2, 80186be <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80186bc:	4770      	bx	lr
 80186be:	6199      	str	r1, [r3, #24]
 80186c0:	4770      	bx	lr
 80186c2:	4613      	mov	r3, r2
 80186c4:	b13a      	cbz	r2, 80186d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80186c6:	699a      	ldr	r2, [r3, #24]
 80186c8:	428a      	cmp	r2, r1
 80186ca:	d1fa      	bne.n	80186c2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80186cc:	698a      	ldr	r2, [r1, #24]
 80186ce:	619a      	str	r2, [r3, #24]
 80186d0:	2300      	movs	r3, #0
 80186d2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80186d6:	4770      	bx	lr

080186d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80186d8:	b410      	push	{r4}
 80186da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80186dc:	4604      	mov	r4, r0
 80186de:	b92b      	cbnz	r3, 80186ec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80186e0:	6803      	ldr	r3, [r0, #0]
 80186e2:	4611      	mov	r1, r2
 80186e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80186ea:	4718      	bx	r3
 80186ec:	b941      	cbnz	r1, 8018700 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80186ee:	6193      	str	r3, [r2, #24]
 80186f0:	6282      	str	r2, [r0, #40]	; 0x28
 80186f2:	6154      	str	r4, [r2, #20]
 80186f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186f8:	4770      	bx	lr
 80186fa:	4603      	mov	r3, r0
 80186fc:	2800      	cmp	r0, #0
 80186fe:	d0f9      	beq.n	80186f4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8018700:	4299      	cmp	r1, r3
 8018702:	6998      	ldr	r0, [r3, #24]
 8018704:	d1f9      	bne.n	80186fa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8018706:	6190      	str	r0, [r2, #24]
 8018708:	618a      	str	r2, [r1, #24]
 801870a:	e7f2      	b.n	80186f2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0801870c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018710:	461f      	mov	r7, r3
 8018712:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8018716:	460d      	mov	r5, r1
 8018718:	4616      	mov	r6, r2
 801871a:	b103      	cbz	r3, 801871e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801871c:	6038      	str	r0, [r7, #0]
 801871e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018720:	b314      	cbz	r4, 8018768 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8018722:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018726:	b1eb      	cbz	r3, 8018764 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018728:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801872c:	428d      	cmp	r5, r1
 801872e:	db19      	blt.n	8018764 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018730:	b289      	uxth	r1, r1
 8018732:	8923      	ldrh	r3, [r4, #8]
 8018734:	440b      	add	r3, r1
 8018736:	b21b      	sxth	r3, r3
 8018738:	429d      	cmp	r5, r3
 801873a:	da13      	bge.n	8018764 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801873c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018740:	4296      	cmp	r6, r2
 8018742:	db0f      	blt.n	8018764 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018744:	b292      	uxth	r2, r2
 8018746:	8963      	ldrh	r3, [r4, #10]
 8018748:	4413      	add	r3, r2
 801874a:	b21b      	sxth	r3, r3
 801874c:	429e      	cmp	r6, r3
 801874e:	da09      	bge.n	8018764 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018750:	6823      	ldr	r3, [r4, #0]
 8018752:	1ab2      	subs	r2, r6, r2
 8018754:	1a69      	subs	r1, r5, r1
 8018756:	4620      	mov	r0, r4
 8018758:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801875c:	b212      	sxth	r2, r2
 801875e:	463b      	mov	r3, r7
 8018760:	b209      	sxth	r1, r1
 8018762:	47c0      	blx	r8
 8018764:	69a4      	ldr	r4, [r4, #24]
 8018766:	e7db      	b.n	8018720 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8018768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801876c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 801876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018770:	4c6d      	ldr	r4, [pc, #436]	; (8018928 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8018772:	b0a1      	sub	sp, #132	; 0x84
 8018774:	4606      	mov	r6, r0
 8018776:	6824      	ldr	r4, [r4, #0]
 8018778:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801877a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 801877e:	2400      	movs	r4, #0
 8018780:	9303      	str	r3, [sp, #12]
 8018782:	802c      	strh	r4, [r5, #0]
 8018784:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8018786:	802c      	strh	r4, [r5, #0]
 8018788:	601c      	str	r4, [r3, #0]
 801878a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801878e:	f7ff ffbd 	bl	801870c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018792:	f1b9 0f03 	cmp.w	r9, #3
 8018796:	f340 80c1 	ble.w	801891c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801879a:	4631      	mov	r1, r6
 801879c:	a80c      	add	r0, sp, #48	; 0x30
 801879e:	f004 fbbf 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80187a2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80187a6:	9306      	str	r3, [sp, #24]
 80187a8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80187ac:	9307      	str	r3, [sp, #28]
 80187ae:	9b03      	ldr	r3, [sp, #12]
 80187b0:	f8d3 a000 	ldr.w	sl, [r3]
 80187b4:	f1ba 0f00 	cmp.w	sl, #0
 80187b8:	f000 80b3 	beq.w	8018922 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80187bc:	4651      	mov	r1, sl
 80187be:	a810      	add	r0, sp, #64	; 0x40
 80187c0:	f004 fbae 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80187c4:	2002      	movs	r0, #2
 80187c6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80187ca:	9b01      	ldr	r3, [sp, #4]
 80187cc:	9a06      	ldr	r2, [sp, #24]
 80187ce:	fb91 f1f0 	sdiv	r1, r1, r0
 80187d2:	189d      	adds	r5, r3, r2
 80187d4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80187d8:	9a07      	ldr	r2, [sp, #28]
 80187da:	4419      	add	r1, r3
 80187dc:	9b02      	ldr	r3, [sp, #8]
 80187de:	4413      	add	r3, r2
 80187e0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80187e4:	1a6d      	subs	r5, r5, r1
 80187e6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80187ea:	fb92 f2f0 	sdiv	r2, r2, r0
 80187ee:	440a      	add	r2, r1
 80187f0:	1a9b      	subs	r3, r3, r2
 80187f2:	435b      	muls	r3, r3
 80187f4:	fb05 3505 	mla	r5, r5, r5, r3
 80187f8:	4f4c      	ldr	r7, [pc, #304]	; (801892c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80187fa:	ac10      	add	r4, sp, #64	; 0x40
 80187fc:	f1b9 0f0c 	cmp.w	r9, #12
 8018800:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018804:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018808:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801880a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801880c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018814:	f04f 0303 	mov.w	r3, #3
 8018818:	bfd8      	it	le
 801881a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801881e:	f04f 0400 	mov.w	r4, #0
 8018822:	f8cd 9000 	str.w	r9, [sp]
 8018826:	bfcc      	ite	gt
 8018828:	4698      	movgt	r8, r3
 801882a:	fb92 f8f3 	sdivle	r8, r2, r3
 801882e:	1c63      	adds	r3, r4, #1
 8018830:	aa10      	add	r2, sp, #64	; 0x40
 8018832:	f004 0401 	and.w	r4, r4, #1
 8018836:	f04f 0b00 	mov.w	fp, #0
 801883a:	9308      	str	r3, [sp, #32]
 801883c:	9b00      	ldr	r3, [sp, #0]
 801883e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8018842:	fb93 f3f8 	sdiv	r3, r3, r8
 8018846:	3404      	adds	r4, #4
 8018848:	b29b      	uxth	r3, r3
 801884a:	9304      	str	r3, [sp, #16]
 801884c:	9a04      	ldr	r2, [sp, #16]
 801884e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018852:	fb13 f302 	smulbb	r3, r3, r2
 8018856:	9a01      	ldr	r2, [sp, #4]
 8018858:	b29b      	uxth	r3, r3
 801885a:	1899      	adds	r1, r3, r2
 801885c:	9305      	str	r3, [sp, #20]
 801885e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018862:	b209      	sxth	r1, r1
 8018864:	4299      	cmp	r1, r3
 8018866:	db4d      	blt.n	8018904 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018868:	8932      	ldrh	r2, [r6, #8]
 801886a:	4413      	add	r3, r2
 801886c:	b21b      	sxth	r3, r3
 801886e:	4299      	cmp	r1, r3
 8018870:	da48      	bge.n	8018904 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018872:	9b04      	ldr	r3, [sp, #16]
 8018874:	6827      	ldr	r7, [r4, #0]
 8018876:	fb17 f703 	smulbb	r7, r7, r3
 801887a:	9b02      	ldr	r3, [sp, #8]
 801887c:	b2bf      	uxth	r7, r7
 801887e:	18fa      	adds	r2, r7, r3
 8018880:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018884:	b212      	sxth	r2, r2
 8018886:	429a      	cmp	r2, r3
 8018888:	db3c      	blt.n	8018904 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801888a:	8970      	ldrh	r0, [r6, #10]
 801888c:	4403      	add	r3, r0
 801888e:	b21b      	sxth	r3, r3
 8018890:	429a      	cmp	r2, r3
 8018892:	da37      	bge.n	8018904 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018894:	2300      	movs	r3, #0
 8018896:	4630      	mov	r0, r6
 8018898:	930b      	str	r3, [sp, #44]	; 0x2c
 801889a:	ab0b      	add	r3, sp, #44	; 0x2c
 801889c:	f7ff ff36 	bl	801870c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80188a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80188a2:	b37a      	cbz	r2, 8018904 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80188a4:	4552      	cmp	r2, sl
 80188a6:	d02d      	beq.n	8018904 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80188a8:	4611      	mov	r1, r2
 80188aa:	a80e      	add	r0, sp, #56	; 0x38
 80188ac:	9209      	str	r2, [sp, #36]	; 0x24
 80188ae:	f004 fb37 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80188b2:	f04f 0e02 	mov.w	lr, #2
 80188b6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80188ba:	9a06      	ldr	r2, [sp, #24]
 80188bc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80188c0:	9b01      	ldr	r3, [sp, #4]
 80188c2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80188c6:	4413      	add	r3, r2
 80188c8:	9a07      	ldr	r2, [sp, #28]
 80188ca:	fb91 f1fe 	sdiv	r1, r1, lr
 80188ce:	fb9c fcfe 	sdiv	ip, ip, lr
 80188d2:	4401      	add	r1, r0
 80188d4:	1a58      	subs	r0, r3, r1
 80188d6:	9b02      	ldr	r3, [sp, #8]
 80188d8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80188dc:	4413      	add	r3, r2
 80188de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188e0:	448c      	add	ip, r1
 80188e2:	eba3 030c 	sub.w	r3, r3, ip
 80188e6:	435b      	muls	r3, r3
 80188e8:	fb00 3300 	mla	r3, r0, r0, r3
 80188ec:	42ab      	cmp	r3, r5
 80188ee:	d208      	bcs.n	8018902 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80188f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80188f2:	461d      	mov	r5, r3
 80188f4:	9803      	ldr	r0, [sp, #12]
 80188f6:	6001      	str	r1, [r0, #0]
 80188f8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80188fa:	9805      	ldr	r0, [sp, #20]
 80188fc:	8008      	strh	r0, [r1, #0]
 80188fe:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018900:	800f      	strh	r7, [r1, #0]
 8018902:	4692      	mov	sl, r2
 8018904:	f10b 0b01 	add.w	fp, fp, #1
 8018908:	3408      	adds	r4, #8
 801890a:	f1bb 0f04 	cmp.w	fp, #4
 801890e:	d19d      	bne.n	801884c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8018910:	9b00      	ldr	r3, [sp, #0]
 8018912:	9c08      	ldr	r4, [sp, #32]
 8018914:	444b      	add	r3, r9
 8018916:	4544      	cmp	r4, r8
 8018918:	9300      	str	r3, [sp, #0]
 801891a:	d188      	bne.n	801882e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801891c:	b021      	add	sp, #132	; 0x84
 801891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018922:	f04f 35ff 	mov.w	r5, #4294967295
 8018926:	e767      	b.n	80187f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8018928:	20015fbc 	.word	0x20015fbc
 801892c:	0802bff8 	.word	0x0802bff8

08018930 <_ZN8touchgfx4RectaNERKS0_>:
 8018930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018934:	f9b1 7000 	ldrsh.w	r7, [r1]
 8018938:	888c      	ldrh	r4, [r1, #4]
 801893a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801893e:	443c      	add	r4, r7
 8018940:	b2a4      	uxth	r4, r4
 8018942:	fa0f f884 	sxth.w	r8, r4
 8018946:	45c1      	cmp	r9, r8
 8018948:	da2f      	bge.n	80189aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801894a:	8882      	ldrh	r2, [r0, #4]
 801894c:	444a      	add	r2, r9
 801894e:	b292      	uxth	r2, r2
 8018950:	fa0f fe82 	sxth.w	lr, r2
 8018954:	4577      	cmp	r7, lr
 8018956:	da28      	bge.n	80189aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018958:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801895c:	88cb      	ldrh	r3, [r1, #6]
 801895e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018962:	442b      	add	r3, r5
 8018964:	b21b      	sxth	r3, r3
 8018966:	429e      	cmp	r6, r3
 8018968:	da1f      	bge.n	80189aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801896a:	88c3      	ldrh	r3, [r0, #6]
 801896c:	4433      	add	r3, r6
 801896e:	b29b      	uxth	r3, r3
 8018970:	fa0f fc83 	sxth.w	ip, r3
 8018974:	4565      	cmp	r5, ip
 8018976:	da18      	bge.n	80189aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018978:	454f      	cmp	r7, r9
 801897a:	bfb8      	it	lt
 801897c:	464f      	movlt	r7, r9
 801897e:	42b5      	cmp	r5, r6
 8018980:	bfb8      	it	lt
 8018982:	4635      	movlt	r5, r6
 8018984:	45f0      	cmp	r8, lr
 8018986:	bfd8      	it	le
 8018988:	4622      	movle	r2, r4
 801898a:	1bd2      	subs	r2, r2, r7
 801898c:	8082      	strh	r2, [r0, #4]
 801898e:	884a      	ldrh	r2, [r1, #2]
 8018990:	88c9      	ldrh	r1, [r1, #6]
 8018992:	8007      	strh	r7, [r0, #0]
 8018994:	440a      	add	r2, r1
 8018996:	8045      	strh	r5, [r0, #2]
 8018998:	b292      	uxth	r2, r2
 801899a:	b211      	sxth	r1, r2
 801899c:	458c      	cmp	ip, r1
 801899e:	bfa8      	it	ge
 80189a0:	4613      	movge	r3, r2
 80189a2:	1b5b      	subs	r3, r3, r5
 80189a4:	80c3      	strh	r3, [r0, #6]
 80189a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189aa:	2300      	movs	r3, #0
 80189ac:	8003      	strh	r3, [r0, #0]
 80189ae:	8043      	strh	r3, [r0, #2]
 80189b0:	8083      	strh	r3, [r0, #4]
 80189b2:	80c3      	strh	r3, [r0, #6]
 80189b4:	e7f7      	b.n	80189a6 <_ZN8touchgfx4RectaNERKS0_+0x76>

080189b6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80189b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	dd06      	ble.n	80189cc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80189be:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80189c2:	2800      	cmp	r0, #0
 80189c4:	bfcc      	ite	gt
 80189c6:	2000      	movgt	r0, #0
 80189c8:	2001      	movle	r0, #1
 80189ca:	4770      	bx	lr
 80189cc:	2001      	movs	r0, #1
 80189ce:	4770      	bx	lr

080189d0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80189d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189d4:	2300      	movs	r3, #0
 80189d6:	4604      	mov	r4, r0
 80189d8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80189da:	8003      	strh	r3, [r0, #0]
 80189dc:	8043      	strh	r3, [r0, #2]
 80189de:	8083      	strh	r3, [r0, #4]
 80189e0:	80c3      	strh	r3, [r0, #6]
 80189e2:	2d00      	cmp	r5, #0
 80189e4:	d040      	beq.n	8018a68 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80189e6:	1d28      	adds	r0, r5, #4
 80189e8:	f7ff ffe5 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189ec:	b988      	cbnz	r0, 8018a12 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80189ee:	4620      	mov	r0, r4
 80189f0:	f7ff ffe1 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189f4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80189f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80189fc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018a00:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8018a04:	b138      	cbz	r0, 8018a16 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8018a06:	8022      	strh	r2, [r4, #0]
 8018a08:	8063      	strh	r3, [r4, #2]
 8018a0a:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018a0e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018a12:	69ad      	ldr	r5, [r5, #24]
 8018a14:	e7e5      	b.n	80189e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8018a16:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018a1a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018a1e:	4290      	cmp	r0, r2
 8018a20:	4607      	mov	r7, r0
 8018a22:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8018a26:	460e      	mov	r6, r1
 8018a28:	bfa8      	it	ge
 8018a2a:	4617      	movge	r7, r2
 8018a2c:	4299      	cmp	r1, r3
 8018a2e:	4472      	add	r2, lr
 8018a30:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8018a34:	bfa8      	it	ge
 8018a36:	461e      	movge	r6, r3
 8018a38:	4440      	add	r0, r8
 8018a3a:	4471      	add	r1, lr
 8018a3c:	4463      	add	r3, ip
 8018a3e:	b200      	sxth	r0, r0
 8018a40:	8027      	strh	r7, [r4, #0]
 8018a42:	b212      	sxth	r2, r2
 8018a44:	8066      	strh	r6, [r4, #2]
 8018a46:	b209      	sxth	r1, r1
 8018a48:	b21b      	sxth	r3, r3
 8018a4a:	4290      	cmp	r0, r2
 8018a4c:	bfac      	ite	ge
 8018a4e:	ebc7 0200 	rsbge	r2, r7, r0
 8018a52:	ebc7 0202 	rsblt	r2, r7, r2
 8018a56:	4299      	cmp	r1, r3
 8018a58:	bfac      	ite	ge
 8018a5a:	ebc6 0301 	rsbge	r3, r6, r1
 8018a5e:	ebc6 0303 	rsblt	r3, r6, r3
 8018a62:	80a2      	strh	r2, [r4, #4]
 8018a64:	80e3      	strh	r3, [r4, #6]
 8018a66:	e7d4      	b.n	8018a12 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018a68:	4620      	mov	r0, r4
 8018a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a6e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8018a6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018a72:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018a76:	b383      	cbz	r3, 8018ada <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018a78:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018a7a:	b374      	cbz	r4, 8018ada <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018a7c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8018a80:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8018a84:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8018a88:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8018a8c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018a90:	b303      	cbz	r3, 8018ad4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018a92:	4668      	mov	r0, sp
 8018a94:	1d21      	adds	r1, r4, #4
 8018a96:	f8ad 5000 	strh.w	r5, [sp]
 8018a9a:	f8ad 6002 	strh.w	r6, [sp, #2]
 8018a9e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018aa2:	f8ad 8006 	strh.w	r8, [sp, #6]
 8018aa6:	f7ff ff43 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 8018aaa:	4668      	mov	r0, sp
 8018aac:	f7ff ff83 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ab0:	b980      	cbnz	r0, 8018ad4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018ab2:	f8bd 3000 	ldrh.w	r3, [sp]
 8018ab6:	4669      	mov	r1, sp
 8018ab8:	88a2      	ldrh	r2, [r4, #4]
 8018aba:	4620      	mov	r0, r4
 8018abc:	1a9b      	subs	r3, r3, r2
 8018abe:	88e2      	ldrh	r2, [r4, #6]
 8018ac0:	f8ad 3000 	strh.w	r3, [sp]
 8018ac4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018ac8:	1a9b      	subs	r3, r3, r2
 8018aca:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018ace:	6823      	ldr	r3, [r4, #0]
 8018ad0:	689b      	ldr	r3, [r3, #8]
 8018ad2:	4798      	blx	r3
 8018ad4:	69a4      	ldr	r4, [r4, #24]
 8018ad6:	2c00      	cmp	r4, #0
 8018ad8:	d1d8      	bne.n	8018a8c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8018ada:	b002      	add	sp, #8
 8018adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ae0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ae2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018ae6:	460d      	mov	r5, r1
 8018ae8:	4616      	mov	r6, r2
 8018aea:	b323      	cbz	r3, 8018b36 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018aec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018aee:	b314      	cbz	r4, 8018b36 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018af0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018af4:	b1eb      	cbz	r3, 8018b32 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018af6:	6828      	ldr	r0, [r5, #0]
 8018af8:	466b      	mov	r3, sp
 8018afa:	6869      	ldr	r1, [r5, #4]
 8018afc:	c303      	stmia	r3!, {r0, r1}
 8018afe:	4668      	mov	r0, sp
 8018b00:	1d21      	adds	r1, r4, #4
 8018b02:	f7ff ff15 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 8018b06:	4668      	mov	r0, sp
 8018b08:	f7ff ff55 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b0c:	b988      	cbnz	r0, 8018b32 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018b0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8018b12:	4669      	mov	r1, sp
 8018b14:	88a2      	ldrh	r2, [r4, #4]
 8018b16:	4620      	mov	r0, r4
 8018b18:	1a9b      	subs	r3, r3, r2
 8018b1a:	88e2      	ldrh	r2, [r4, #6]
 8018b1c:	f8ad 3000 	strh.w	r3, [sp]
 8018b20:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018b24:	1a9b      	subs	r3, r3, r2
 8018b26:	4632      	mov	r2, r6
 8018b28:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018b2c:	6823      	ldr	r3, [r4, #0]
 8018b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b30:	4798      	blx	r3
 8018b32:	69a4      	ldr	r4, [r4, #24]
 8018b34:	e7db      	b.n	8018aee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8018b36:	b002      	add	sp, #8
 8018b38:	bd70      	pop	{r4, r5, r6, pc}

08018b3a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018b3a:	6803      	ldr	r3, [r0, #0]
 8018b3c:	b513      	push	{r0, r1, r4, lr}
 8018b3e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8018b42:	2300      	movs	r3, #0
 8018b44:	e9cd 3300 	strd	r3, r3, [sp]
 8018b48:	466b      	mov	r3, sp
 8018b4a:	47a0      	blx	r4
 8018b4c:	b002      	add	sp, #8
 8018b4e:	bd10      	pop	{r4, pc}

08018b50 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018b50:	2301      	movs	r3, #1
 8018b52:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018b56:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018b5a:	4770      	bx	lr

08018b5c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8018b5c:	2301      	movs	r3, #1
 8018b5e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018b62:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018b66:	4770      	bx	lr

08018b68 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018b68:	6843      	ldr	r3, [r0, #4]
 8018b6a:	2201      	movs	r2, #1
 8018b6c:	725a      	strb	r2, [r3, #9]
 8018b6e:	6840      	ldr	r0, [r0, #4]
 8018b70:	6803      	ldr	r3, [r0, #0]
 8018b72:	691b      	ldr	r3, [r3, #16]
 8018b74:	4718      	bx	r3

08018b76 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018b76:	6840      	ldr	r0, [r0, #4]
 8018b78:	6803      	ldr	r3, [r0, #0]
 8018b7a:	689b      	ldr	r3, [r3, #8]
 8018b7c:	4718      	bx	r3

08018b7e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8018b7e:	b530      	push	{r4, r5, lr}
 8018b80:	b08b      	sub	sp, #44	; 0x2c
 8018b82:	6804      	ldr	r4, [r0, #0]
 8018b84:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8018b88:	9509      	str	r5, [sp, #36]	; 0x24
 8018b8a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8018b8e:	9508      	str	r5, [sp, #32]
 8018b90:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8018b94:	9507      	str	r5, [sp, #28]
 8018b96:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8018b9a:	9506      	str	r5, [sp, #24]
 8018b9c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8018ba0:	9505      	str	r5, [sp, #20]
 8018ba2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8018ba6:	9504      	str	r5, [sp, #16]
 8018ba8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8018bac:	9503      	str	r5, [sp, #12]
 8018bae:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018bb2:	9502      	str	r5, [sp, #8]
 8018bb4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8018bb8:	e9cd 3500 	strd	r3, r5, [sp]
 8018bbc:	4613      	mov	r3, r2
 8018bbe:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8018bc0:	2200      	movs	r2, #0
 8018bc2:	47a0      	blx	r4
 8018bc4:	b00b      	add	sp, #44	; 0x2c
 8018bc6:	bd30      	pop	{r4, r5, pc}

08018bc8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018bc8:	4b04      	ldr	r3, [pc, #16]	; (8018bdc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8018bca:	781b      	ldrb	r3, [r3, #0]
 8018bcc:	b123      	cbz	r3, 8018bd8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018bce:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018bd2:	f080 0001 	eor.w	r0, r0, #1
 8018bd6:	4770      	bx	lr
 8018bd8:	2001      	movs	r0, #1
 8018bda:	4770      	bx	lr
 8018bdc:	20015fba 	.word	0x20015fba

08018be0 <_ZN8touchgfx3HAL8endFrameEv>:
 8018be0:	b510      	push	{r4, lr}
 8018be2:	4604      	mov	r4, r0
 8018be4:	6840      	ldr	r0, [r0, #4]
 8018be6:	6803      	ldr	r3, [r0, #0]
 8018be8:	689b      	ldr	r3, [r3, #8]
 8018bea:	4798      	blx	r3
 8018bec:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018bf0:	b113      	cbz	r3, 8018bf8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018bf2:	2301      	movs	r3, #1
 8018bf4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018bf8:	bd10      	pop	{r4, pc}

08018bfa <_ZN8touchgfx3HAL10initializeEv>:
 8018bfa:	b510      	push	{r4, lr}
 8018bfc:	4604      	mov	r4, r0
 8018bfe:	f7e9 fa2d 	bl	800205c <_ZN8touchgfx10OSWrappers10initializeEv>
 8018c02:	f7e9 f909 	bl	8001e18 <_ZN8touchgfx4GPIO4initEv>
 8018c06:	6860      	ldr	r0, [r4, #4]
 8018c08:	6803      	ldr	r3, [r0, #0]
 8018c0a:	68db      	ldr	r3, [r3, #12]
 8018c0c:	4798      	blx	r3
 8018c0e:	68e0      	ldr	r0, [r4, #12]
 8018c10:	6803      	ldr	r3, [r0, #0]
 8018c12:	689b      	ldr	r3, [r3, #8]
 8018c14:	4798      	blx	r3
 8018c16:	6823      	ldr	r3, [r4, #0]
 8018c18:	4620      	mov	r0, r4
 8018c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c20:	4718      	bx	r3

08018c22 <_ZN8touchgfx3HAL9taskEntryEv>:
 8018c22:	b508      	push	{r3, lr}
 8018c24:	6803      	ldr	r3, [r0, #0]
 8018c26:	4604      	mov	r4, r0
 8018c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018c2c:	4798      	blx	r3
 8018c2e:	6823      	ldr	r3, [r4, #0]
 8018c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018c32:	4620      	mov	r0, r4
 8018c34:	4798      	blx	r3
 8018c36:	f7e9 fa5d 	bl	80020f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018c3a:	6823      	ldr	r3, [r4, #0]
 8018c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c3e:	e7f8      	b.n	8018c32 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08018c40 <_ZN8touchgfx3HAL4tickEv>:
 8018c40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018c42:	6803      	ldr	r3, [r0, #0]
 8018c44:	4604      	mov	r4, r0
 8018c46:	4d5b      	ldr	r5, [pc, #364]	; (8018db4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8018c48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018c4c:	4798      	blx	r3
 8018c4e:	2800      	cmp	r0, #0
 8018c50:	f000 8095 	beq.w	8018d7e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8018c54:	2001      	movs	r0, #1
 8018c56:	2600      	movs	r6, #0
 8018c58:	f7e9 f844 	bl	8001ce4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018c5c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8018c60:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8018c64:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018c68:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8018c6c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8018c70:	b133      	cbz	r3, 8018c80 <_ZN8touchgfx3HAL4tickEv+0x40>
 8018c72:	6823      	ldr	r3, [r4, #0]
 8018c74:	4620      	mov	r0, r4
 8018c76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8018c7a:	4798      	blx	r3
 8018c7c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8018c80:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8018c84:	2601      	movs	r6, #1
 8018c86:	6862      	ldr	r2, [r4, #4]
 8018c88:	f083 0301 	eor.w	r3, r3, #1
 8018c8c:	702e      	strb	r6, [r5, #0]
 8018c8e:	7253      	strb	r3, [r2, #9]
 8018c90:	f003 f866 	bl	801bd60 <_ZN8touchgfx11Application11getInstanceEv>
 8018c94:	6803      	ldr	r3, [r0, #0]
 8018c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c98:	4798      	blx	r3
 8018c9a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018c9e:	b90b      	cbnz	r3, 8018ca4 <_ZN8touchgfx3HAL4tickEv+0x64>
 8018ca0:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8018ca4:	f003 f85c 	bl	801bd60 <_ZN8touchgfx11Application11getInstanceEv>
 8018ca8:	6803      	ldr	r3, [r0, #0]
 8018caa:	695b      	ldr	r3, [r3, #20]
 8018cac:	4798      	blx	r3
 8018cae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cb0:	6803      	ldr	r3, [r0, #0]
 8018cb2:	691b      	ldr	r3, [r3, #16]
 8018cb4:	4798      	blx	r3
 8018cb6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018cba:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8018cbe:	3b01      	subs	r3, #1
 8018cc0:	b2db      	uxtb	r3, r3
 8018cc2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018cc6:	b10a      	cbz	r2, 8018ccc <_ZN8touchgfx3HAL4tickEv+0x8c>
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d1eb      	bne.n	8018ca4 <_ZN8touchgfx3HAL4tickEv+0x64>
 8018ccc:	4a3a      	ldr	r2, [pc, #232]	; (8018db8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018cce:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018cd2:	7813      	ldrb	r3, [r2, #0]
 8018cd4:	3301      	adds	r3, #1
 8018cd6:	b25b      	sxtb	r3, r3
 8018cd8:	4299      	cmp	r1, r3
 8018cda:	7013      	strb	r3, [r2, #0]
 8018cdc:	dc10      	bgt.n	8018d00 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8018cde:	2300      	movs	r3, #0
 8018ce0:	68e0      	ldr	r0, [r4, #12]
 8018ce2:	a902      	add	r1, sp, #8
 8018ce4:	7013      	strb	r3, [r2, #0]
 8018ce6:	aa03      	add	r2, sp, #12
 8018ce8:	6803      	ldr	r3, [r0, #0]
 8018cea:	68db      	ldr	r3, [r3, #12]
 8018cec:	4798      	blx	r3
 8018cee:	6823      	ldr	r3, [r4, #0]
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	d050      	beq.n	8018d96 <_ZN8touchgfx3HAL4tickEv+0x156>
 8018cf4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018cfe:	4798      	blx	r3
 8018d00:	2300      	movs	r3, #0
 8018d02:	6960      	ldr	r0, [r4, #20]
 8018d04:	f88d 3007 	strb.w	r3, [sp, #7]
 8018d08:	b158      	cbz	r0, 8018d22 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8018d0a:	6803      	ldr	r3, [r0, #0]
 8018d0c:	f10d 0107 	add.w	r1, sp, #7
 8018d10:	68db      	ldr	r3, [r3, #12]
 8018d12:	4798      	blx	r3
 8018d14:	b128      	cbz	r0, 8018d22 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8018d16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d18:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018d1c:	6803      	ldr	r3, [r0, #0]
 8018d1e:	68db      	ldr	r3, [r3, #12]
 8018d20:	4798      	blx	r3
 8018d22:	f104 001c 	add.w	r0, r4, #28
 8018d26:	f011 fd79 	bl	802a81c <_ZN8touchgfx8Gestures4tickEv>
 8018d2a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8018d2e:	b30b      	cbz	r3, 8018d74 <_ZN8touchgfx3HAL4tickEv+0x134>
 8018d30:	6920      	ldr	r0, [r4, #16]
 8018d32:	6803      	ldr	r3, [r0, #0]
 8018d34:	691b      	ldr	r3, [r3, #16]
 8018d36:	4798      	blx	r3
 8018d38:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d3a:	4606      	mov	r6, r0
 8018d3c:	b903      	cbnz	r3, 8018d40 <_ZN8touchgfx3HAL4tickEv+0x100>
 8018d3e:	6720      	str	r0, [r4, #112]	; 0x70
 8018d40:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d42:	4a1e      	ldr	r2, [pc, #120]	; (8018dbc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018d44:	1af3      	subs	r3, r6, r3
 8018d46:	4293      	cmp	r3, r2
 8018d48:	d914      	bls.n	8018d74 <_ZN8touchgfx3HAL4tickEv+0x134>
 8018d4a:	6920      	ldr	r0, [r4, #16]
 8018d4c:	6803      	ldr	r3, [r0, #0]
 8018d4e:	699b      	ldr	r3, [r3, #24]
 8018d50:	4798      	blx	r3
 8018d52:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d54:	2264      	movs	r2, #100	; 0x64
 8018d56:	1af3      	subs	r3, r6, r3
 8018d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8018d5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8018d60:	2800      	cmp	r0, #0
 8018d62:	dc1d      	bgt.n	8018da0 <_ZN8touchgfx3HAL4tickEv+0x160>
 8018d64:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8018d68:	6920      	ldr	r0, [r4, #16]
 8018d6a:	2100      	movs	r1, #0
 8018d6c:	6803      	ldr	r3, [r0, #0]
 8018d6e:	69db      	ldr	r3, [r3, #28]
 8018d70:	4798      	blx	r3
 8018d72:	6726      	str	r6, [r4, #112]	; 0x70
 8018d74:	f002 fff4 	bl	801bd60 <_ZN8touchgfx11Application11getInstanceEv>
 8018d78:	6803      	ldr	r3, [r0, #0]
 8018d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d7c:	4798      	blx	r3
 8018d7e:	6823      	ldr	r3, [r4, #0]
 8018d80:	4620      	mov	r0, r4
 8018d82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018d86:	4798      	blx	r3
 8018d88:	2001      	movs	r0, #1
 8018d8a:	f7e8 ffdb 	bl	8001d44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018d8e:	2300      	movs	r3, #0
 8018d90:	702b      	strb	r3, [r5, #0]
 8018d92:	b004      	add	sp, #16
 8018d94:	bd70      	pop	{r4, r5, r6, pc}
 8018d96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018d9a:	4620      	mov	r0, r4
 8018d9c:	4798      	blx	r3
 8018d9e:	e7af      	b.n	8018d00 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8018da0:	2863      	cmp	r0, #99	; 0x63
 8018da2:	bfcb      	itete	gt
 8018da4:	2300      	movgt	r3, #0
 8018da6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8018daa:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8018dae:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018db2:	e7d9      	b.n	8018d68 <_ZN8touchgfx3HAL4tickEv+0x128>
 8018db4:	20015fc0 	.word	0x20015fc0
 8018db8:	20015fc1 	.word	0x20015fc1
 8018dbc:	05f5e100 	.word	0x05f5e100

08018dc0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018dc0:	f7e9 b97c 	b.w	80020bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018dc4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018dc4:	6581      	str	r1, [r0, #88]	; 0x58
 8018dc6:	301c      	adds	r0, #28
 8018dc8:	f011 bd26 	b.w	802a818 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018dcc <_ZN8touchgfx3HAL5touchEll>:
 8018dcc:	b530      	push	{r4, r5, lr}
 8018dce:	b087      	sub	sp, #28
 8018dd0:	4604      	mov	r4, r0
 8018dd2:	a804      	add	r0, sp, #16
 8018dd4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018dd8:	f002 fdc2 	bl	801b960 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018ddc:	9b04      	ldr	r3, [sp, #16]
 8018dde:	a906      	add	r1, sp, #24
 8018de0:	a803      	add	r0, sp, #12
 8018de2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018de6:	9b05      	ldr	r3, [sp, #20]
 8018de8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018dec:	f002 fe0a 	bl	801ba04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018df0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8018df4:	f104 001c 	add.w	r0, r4, #28
 8018df8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018dfc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018e00:	b189      	cbz	r1, 8018e26 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018e02:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8018e06:	9300      	str	r3, [sp, #0]
 8018e08:	4613      	mov	r3, r2
 8018e0a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018e0e:	462a      	mov	r2, r5
 8018e10:	f011 fd12 	bl	802a838 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018e14:	b128      	cbz	r0, 8018e22 <_ZN8touchgfx3HAL5touchEll+0x56>
 8018e16:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018e1a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018e1c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018e20:	6623      	str	r3, [r4, #96]	; 0x60
 8018e22:	b007      	add	sp, #28
 8018e24:	bd30      	pop	{r4, r5, pc}
 8018e26:	f011 fd47 	bl	802a8b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018e2a:	2301      	movs	r3, #1
 8018e2c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018e30:	e7f1      	b.n	8018e16 <_ZN8touchgfx3HAL5touchEll+0x4a>

08018e32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018e32:	b510      	push	{r4, lr}
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d046      	beq.n	8018ec6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018e38:	ea81 0002 	eor.w	r0, r1, r2
 8018e3c:	07c4      	lsls	r4, r0, #31
 8018e3e:	d508      	bpl.n	8018e52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018e40:	440b      	add	r3, r1
 8018e42:	3a01      	subs	r2, #1
 8018e44:	428b      	cmp	r3, r1
 8018e46:	d93e      	bls.n	8018ec6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018e48:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018e4c:	f801 0b01 	strb.w	r0, [r1], #1
 8018e50:	e7f8      	b.n	8018e44 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018e52:	07d0      	lsls	r0, r2, #31
 8018e54:	bf42      	ittt	mi
 8018e56:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018e5a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018e5e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018e62:	2b01      	cmp	r3, #1
 8018e64:	d911      	bls.n	8018e8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018e66:	ea81 0402 	eor.w	r4, r1, r2
 8018e6a:	4610      	mov	r0, r2
 8018e6c:	07a4      	lsls	r4, r4, #30
 8018e6e:	d022      	beq.n	8018eb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018e70:	f023 0401 	bic.w	r4, r3, #1
 8018e74:	440c      	add	r4, r1
 8018e76:	428c      	cmp	r4, r1
 8018e78:	4602      	mov	r2, r0
 8018e7a:	d904      	bls.n	8018e86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018e7c:	8812      	ldrh	r2, [r2, #0]
 8018e7e:	3002      	adds	r0, #2
 8018e80:	f821 2b02 	strh.w	r2, [r1], #2
 8018e84:	e7f7      	b.n	8018e76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8018e86:	f003 0301 	and.w	r3, r3, #1
 8018e8a:	f023 0003 	bic.w	r0, r3, #3
 8018e8e:	4408      	add	r0, r1
 8018e90:	4288      	cmp	r0, r1
 8018e92:	4614      	mov	r4, r2
 8018e94:	d904      	bls.n	8018ea0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8018e96:	6824      	ldr	r4, [r4, #0]
 8018e98:	3204      	adds	r2, #4
 8018e9a:	f841 4b04 	str.w	r4, [r1], #4
 8018e9e:	e7f7      	b.n	8018e90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018ea0:	f003 0303 	and.w	r3, r3, #3
 8018ea4:	3a01      	subs	r2, #1
 8018ea6:	440b      	add	r3, r1
 8018ea8:	428b      	cmp	r3, r1
 8018eaa:	d90c      	bls.n	8018ec6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018eac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018eb0:	f801 0b01 	strb.w	r0, [r1], #1
 8018eb4:	e7f8      	b.n	8018ea8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8018eb6:	0790      	lsls	r0, r2, #30
 8018eb8:	d0e7      	beq.n	8018e8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018eba:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018ebe:	3b02      	subs	r3, #2
 8018ec0:	f821 0b02 	strh.w	r0, [r1], #2
 8018ec4:	e7e1      	b.n	8018e8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018ec6:	2001      	movs	r0, #1
 8018ec8:	bd10      	pop	{r4, pc}

08018eca <_ZN8touchgfx3HAL7noTouchEv>:
 8018eca:	b510      	push	{r4, lr}
 8018ecc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018ed0:	4604      	mov	r4, r0
 8018ed2:	b153      	cbz	r3, 8018eea <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018ed4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018ed8:	2101      	movs	r1, #1
 8018eda:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018ede:	301c      	adds	r0, #28
 8018ee0:	f011 fcea 	bl	802a8b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018eea:	bd10      	pop	{r4, pc}

08018eec <_ZN8touchgfx3HAL3lcdEv>:
 8018eec:	4b04      	ldr	r3, [pc, #16]	; (8018f00 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018ef4:	b10a      	cbz	r2, 8018efa <_ZN8touchgfx3HAL3lcdEv+0xe>
 8018ef6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018ef8:	b900      	cbnz	r0, 8018efc <_ZN8touchgfx3HAL3lcdEv+0x10>
 8018efa:	6898      	ldr	r0, [r3, #8]
 8018efc:	4770      	bx	lr
 8018efe:	bf00      	nop
 8018f00:	20015fbc 	.word	0x20015fbc

08018f04 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f08:	b085      	sub	sp, #20
 8018f0a:	4604      	mov	r4, r0
 8018f0c:	2000      	movs	r0, #0
 8018f0e:	4699      	mov	r9, r3
 8018f10:	ad04      	add	r5, sp, #16
 8018f12:	460f      	mov	r7, r1
 8018f14:	4690      	mov	r8, r2
 8018f16:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018f1a:	69a0      	ldr	r0, [r4, #24]
 8018f1c:	6806      	ldr	r6, [r0, #0]
 8018f1e:	9501      	str	r5, [sp, #4]
 8018f20:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8018f24:	9500      	str	r5, [sp, #0]
 8018f26:	6835      	ldr	r5, [r6, #0]
 8018f28:	47a8      	blx	r5
 8018f2a:	4d10      	ldr	r5, [pc, #64]	; (8018f6c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8018f2c:	4606      	mov	r6, r0
 8018f2e:	f8a5 9000 	strh.w	r9, [r5]
 8018f32:	f7ff ffdb 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 8018f36:	6803      	ldr	r3, [r0, #0]
 8018f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f3a:	4798      	blx	r3
 8018f3c:	b128      	cbz	r0, 8018f4a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8018f3e:	2801      	cmp	r0, #1
 8018f40:	d00b      	beq.n	8018f5a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8018f42:	4630      	mov	r0, r6
 8018f44:	b005      	add	sp, #20
 8018f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f4a:	882b      	ldrh	r3, [r5, #0]
 8018f4c:	fb08 7203 	mla	r2, r8, r3, r7
 8018f50:	9b03      	ldr	r3, [sp, #12]
 8018f52:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018f56:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018f58:	e7f3      	b.n	8018f42 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8018f5a:	882a      	ldrh	r2, [r5, #0]
 8018f5c:	9b03      	ldr	r3, [sp, #12]
 8018f5e:	fb08 7202 	mla	r2, r8, r2, r7
 8018f62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018f66:	1a9a      	subs	r2, r3, r2
 8018f68:	63e2      	str	r2, [r4, #60]	; 0x3c
 8018f6a:	e7ea      	b.n	8018f42 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8018f6c:	20015fb6 	.word	0x20015fb6

08018f70 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f72:	b08b      	sub	sp, #44	; 0x2c
 8018f74:	4617      	mov	r7, r2
 8018f76:	4604      	mov	r4, r0
 8018f78:	460e      	mov	r6, r1
 8018f7a:	461d      	mov	r5, r3
 8018f7c:	f7ff ffb6 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 8018f80:	6803      	ldr	r3, [r0, #0]
 8018f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f84:	4798      	blx	r3
 8018f86:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018f8a:	9007      	str	r0, [sp, #28]
 8018f8c:	4631      	mov	r1, r6
 8018f8e:	6822      	ldr	r2, [r4, #0]
 8018f90:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018f94:	4b0c      	ldr	r3, [pc, #48]	; (8018fc8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018f96:	4620      	mov	r0, r4
 8018f98:	881b      	ldrh	r3, [r3, #0]
 8018f9a:	9306      	str	r3, [sp, #24]
 8018f9c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018fa0:	9305      	str	r3, [sp, #20]
 8018fa2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018fa6:	9304      	str	r3, [sp, #16]
 8018fa8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018fac:	9303      	str	r3, [sp, #12]
 8018fae:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018fb2:	9302      	str	r3, [sp, #8]
 8018fb4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018fb8:	e9cd 5300 	strd	r5, r3, [sp]
 8018fbc:	463b      	mov	r3, r7
 8018fbe:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	47a8      	blx	r5
 8018fc4:	b00b      	add	sp, #44	; 0x2c
 8018fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fc8:	20015fb6 	.word	0x20015fb6

08018fcc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018fd0:	4698      	mov	r8, r3
 8018fd2:	6803      	ldr	r3, [r0, #0]
 8018fd4:	b08b      	sub	sp, #44	; 0x2c
 8018fd6:	4617      	mov	r7, r2
 8018fd8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8018fda:	460e      	mov	r6, r1
 8018fdc:	4b13      	ldr	r3, [pc, #76]	; (801902c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8018fde:	4604      	mov	r4, r0
 8018fe0:	f8b3 9000 	ldrh.w	r9, [r3]
 8018fe4:	f7ff ff82 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 8018fe8:	6803      	ldr	r3, [r0, #0]
 8018fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fec:	4798      	blx	r3
 8018fee:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018ff2:	2200      	movs	r2, #0
 8018ff4:	4631      	mov	r1, r6
 8018ff6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018ffa:	2302      	movs	r3, #2
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8019002:	2301      	movs	r3, #1
 8019004:	9305      	str	r3, [sp, #20]
 8019006:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801900a:	9304      	str	r3, [sp, #16]
 801900c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019010:	9303      	str	r3, [sp, #12]
 8019012:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019016:	9302      	str	r3, [sp, #8]
 8019018:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801901c:	e9cd 8300 	strd	r8, r3, [sp]
 8019020:	463b      	mov	r3, r7
 8019022:	47a8      	blx	r5
 8019024:	b00b      	add	sp, #44	; 0x2c
 8019026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801902a:	bf00      	nop
 801902c:	20015fb6 	.word	0x20015fb6

08019030 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8019030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019034:	4698      	mov	r8, r3
 8019036:	6803      	ldr	r3, [r0, #0]
 8019038:	b087      	sub	sp, #28
 801903a:	460e      	mov	r6, r1
 801903c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801903e:	4617      	mov	r7, r2
 8019040:	4b0f      	ldr	r3, [pc, #60]	; (8019080 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8019042:	4604      	mov	r4, r0
 8019044:	f8b3 9000 	ldrh.w	r9, [r3]
 8019048:	f7ff ff50 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 801904c:	6803      	ldr	r3, [r0, #0]
 801904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019050:	4798      	blx	r3
 8019052:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8019056:	463a      	mov	r2, r7
 8019058:	4631      	mov	r1, r6
 801905a:	f8cd 900c 	str.w	r9, [sp, #12]
 801905e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8019062:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019066:	4620      	mov	r0, r4
 8019068:	9302      	str	r3, [sp, #8]
 801906a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801906e:	9301      	str	r3, [sp, #4]
 8019070:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019074:	9300      	str	r3, [sp, #0]
 8019076:	4643      	mov	r3, r8
 8019078:	47a8      	blx	r5
 801907a:	b007      	add	sp, #28
 801907c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019080:	20015fb6 	.word	0x20015fb6

08019084 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019088:	4604      	mov	r4, r0
 801908a:	b08f      	sub	sp, #60	; 0x3c
 801908c:	4610      	mov	r0, r2
 801908e:	460d      	mov	r5, r1
 8019090:	4691      	mov	r9, r2
 8019092:	461e      	mov	r6, r3
 8019094:	f005 fe00 	bl	801ec98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019098:	2800      	cmp	r0, #0
 801909a:	f000 809d 	beq.w	80191d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801909e:	6823      	ldr	r3, [r4, #0]
 80190a0:	4620      	mov	r0, r4
 80190a2:	f8df b198 	ldr.w	fp, [pc, #408]	; 801923c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80190a6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80190aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190ac:	4798      	blx	r3
 80190ae:	6823      	ldr	r3, [r4, #0]
 80190b0:	4620      	mov	r0, r4
 80190b2:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8019240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80190b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190b8:	4798      	blx	r3
 80190ba:	f8bb 3000 	ldrh.w	r3, [fp]
 80190be:	4f5c      	ldr	r7, [pc, #368]	; (8019230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80190c0:	9301      	str	r3, [sp, #4]
 80190c2:	f8ba 3000 	ldrh.w	r3, [sl]
 80190c6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80190ca:	4640      	mov	r0, r8
 80190cc:	9302      	str	r3, [sp, #8]
 80190ce:	883b      	ldrh	r3, [r7, #0]
 80190d0:	9303      	str	r3, [sp, #12]
 80190d2:	4b58      	ldr	r3, [pc, #352]	; (8019234 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80190d4:	881a      	ldrh	r2, [r3, #0]
 80190d6:	9305      	str	r3, [sp, #20]
 80190d8:	9204      	str	r2, [sp, #16]
 80190da:	f005 fe71 	bl	801edc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80190de:	8038      	strh	r0, [r7, #0]
 80190e0:	4640      	mov	r0, r8
 80190e2:	f005 fea1 	bl	801ee28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80190e6:	9b05      	ldr	r3, [sp, #20]
 80190e8:	b280      	uxth	r0, r0
 80190ea:	8018      	strh	r0, [r3, #0]
 80190ec:	4b52      	ldr	r3, [pc, #328]	; (8019238 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80190ee:	781b      	ldrb	r3, [r3, #0]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d174      	bne.n	80191de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80190f4:	883b      	ldrh	r3, [r7, #0]
 80190f6:	f8aa 0000 	strh.w	r0, [sl]
 80190fa:	f8ab 3000 	strh.w	r3, [fp]
 80190fe:	4648      	mov	r0, r9
 8019100:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8019104:	f005 fdc8 	bl	801ec98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019108:	2200      	movs	r2, #0
 801910a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801910e:	4611      	mov	r1, r2
 8019110:	4628      	mov	r0, r5
 8019112:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8019116:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801911a:	f7ea fc00 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 801911e:	2301      	movs	r3, #1
 8019120:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8019124:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8019128:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801912c:	2b00      	cmp	r3, #0
 801912e:	dd5c      	ble.n	80191ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8019130:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019134:	2b00      	cmp	r3, #0
 8019136:	dd58      	ble.n	80191ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8019138:	462a      	mov	r2, r5
 801913a:	ab0a      	add	r3, sp, #40	; 0x28
 801913c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019140:	6851      	ldr	r1, [r2, #4]
 8019142:	c303      	stmia	r3!, {r0, r1}
 8019144:	4631      	mov	r1, r6
 8019146:	a80a      	add	r0, sp, #40	; 0x28
 8019148:	f7ff fbf2 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 801914c:	4b38      	ldr	r3, [pc, #224]	; (8019230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801914e:	2100      	movs	r1, #0
 8019150:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019154:	4b37      	ldr	r3, [pc, #220]	; (8019234 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019156:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801915a:	aa0a      	add	r2, sp, #40	; 0x28
 801915c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019160:	910c      	str	r1, [sp, #48]	; 0x30
 8019162:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019166:	ab08      	add	r3, sp, #32
 8019168:	e892 0003 	ldmia.w	r2, {r0, r1}
 801916c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019170:	4618      	mov	r0, r3
 8019172:	a90c      	add	r1, sp, #48	; 0x30
 8019174:	f7ff fbdc 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 8019178:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801917a:	2b00      	cmp	r3, #0
 801917c:	d13c      	bne.n	80191f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801917e:	2000      	movs	r0, #0
 8019180:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8019184:	2600      	movs	r6, #0
 8019186:	696b      	ldr	r3, [r5, #20]
 8019188:	a908      	add	r1, sp, #32
 801918a:	682a      	ldr	r2, [r5, #0]
 801918c:	4628      	mov	r0, r5
 801918e:	9305      	str	r3, [sp, #20]
 8019190:	616e      	str	r6, [r5, #20]
 8019192:	6892      	ldr	r2, [r2, #8]
 8019194:	4790      	blx	r2
 8019196:	9b05      	ldr	r3, [sp, #20]
 8019198:	4652      	mov	r2, sl
 801919a:	4649      	mov	r1, r9
 801919c:	616b      	str	r3, [r5, #20]
 801919e:	4628      	mov	r0, r5
 80191a0:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80191a4:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80191a8:	f7ea fbb9 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 80191ac:	9a01      	ldr	r2, [sp, #4]
 80191ae:	4b23      	ldr	r3, [pc, #140]	; (801923c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80191b0:	4620      	mov	r0, r4
 80191b2:	801a      	strh	r2, [r3, #0]
 80191b4:	9a02      	ldr	r2, [sp, #8]
 80191b6:	4b22      	ldr	r3, [pc, #136]	; (8019240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80191b8:	801a      	strh	r2, [r3, #0]
 80191ba:	9a03      	ldr	r2, [sp, #12]
 80191bc:	4b1c      	ldr	r3, [pc, #112]	; (8019230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80191be:	801a      	strh	r2, [r3, #0]
 80191c0:	4b1c      	ldr	r3, [pc, #112]	; (8019234 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80191c2:	9a04      	ldr	r2, [sp, #16]
 80191c4:	801a      	strh	r2, [r3, #0]
 80191c6:	6823      	ldr	r3, [r4, #0]
 80191c8:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80191cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191ce:	4798      	blx	r3
 80191d0:	6823      	ldr	r3, [r4, #0]
 80191d2:	4620      	mov	r0, r4
 80191d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191d6:	4798      	blx	r3
 80191d8:	b00f      	add	sp, #60	; 0x3c
 80191da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191de:	883b      	ldrh	r3, [r7, #0]
 80191e0:	f8ab 0000 	strh.w	r0, [fp]
 80191e4:	f8aa 3000 	strh.w	r3, [sl]
 80191e8:	e789      	b.n	80190fe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80191ea:	462a      	mov	r2, r5
 80191ec:	ab0a      	add	r3, sp, #40	; 0x28
 80191ee:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80191f2:	6851      	ldr	r1, [r2, #4]
 80191f4:	c303      	stmia	r3!, {r0, r1}
 80191f6:	e7a9      	b.n	801914c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80191f8:	a807      	add	r0, sp, #28
 80191fa:	f005 ff51 	bl	801f0a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80191fe:	4606      	mov	r6, r0
 8019200:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019202:	6803      	ldr	r3, [r0, #0]
 8019204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019206:	4798      	blx	r3
 8019208:	4286      	cmp	r6, r0
 801920a:	d1b8      	bne.n	801917e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801920c:	f7ff fe6e 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 8019210:	6803      	ldr	r3, [r0, #0]
 8019212:	4606      	mov	r6, r0
 8019214:	a807      	add	r0, sp, #28
 8019216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019218:	9305      	str	r3, [sp, #20]
 801921a:	f005 ff41 	bl	801f0a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801921e:	9b05      	ldr	r3, [sp, #20]
 8019220:	4601      	mov	r1, r0
 8019222:	4630      	mov	r0, r6
 8019224:	4798      	blx	r3
 8019226:	f080 0001 	eor.w	r0, r0, #1
 801922a:	b2c0      	uxtb	r0, r0
 801922c:	e7a8      	b.n	8019180 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801922e:	bf00      	nop
 8019230:	20015fb0 	.word	0x20015fb0
 8019234:	20015fb2 	.word	0x20015fb2
 8019238:	20015fb4 	.word	0x20015fb4
 801923c:	20015fb6 	.word	0x20015fb6
 8019240:	20015fb8 	.word	0x20015fb8

08019244 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8019244:	4b07      	ldr	r3, [pc, #28]	; (8019264 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8019246:	b510      	push	{r4, lr}
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	4604      	mov	r4, r0
 801924c:	b13b      	cbz	r3, 801925e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801924e:	6803      	ldr	r3, [r0, #0]
 8019250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019252:	4798      	blx	r3
 8019254:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019256:	4283      	cmp	r3, r0
 8019258:	d101      	bne.n	801925e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801925a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801925c:	bd10      	pop	{r4, pc}
 801925e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019260:	e7fc      	b.n	801925c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8019262:	bf00      	nop
 8019264:	20015fba 	.word	0x20015fba

08019268 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8019268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801926c:	461d      	mov	r5, r3
 801926e:	b08a      	sub	sp, #40	; 0x28
 8019270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019274:	4690      	mov	r8, r2
 8019276:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801927a:	2400      	movs	r4, #0
 801927c:	4607      	mov	r7, r0
 801927e:	fb06 8505 	mla	r5, r6, r5, r8
 8019282:	9404      	str	r4, [sp, #16]
 8019284:	f88d 4020 	strb.w	r4, [sp, #32]
 8019288:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801928c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019290:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019294:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019298:	f8ad 301a 	strh.w	r3, [sp, #26]
 801929c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80192a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80192a4:	f7ff ffce 	bl	8019244 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80192a8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80192ac:	6878      	ldr	r0, [r7, #4]
 80192ae:	f8ad 601e 	strh.w	r6, [sp, #30]
 80192b2:	a901      	add	r1, sp, #4
 80192b4:	9505      	str	r5, [sp, #20]
 80192b6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80192ba:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80192be:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80192c2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80192c6:	6803      	ldr	r3, [r0, #0]
 80192c8:	685b      	ldr	r3, [r3, #4]
 80192ca:	4798      	blx	r3
 80192cc:	b00a      	add	sp, #40	; 0x28
 80192ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192d2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80192d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192d6:	b08b      	sub	sp, #44	; 0x2c
 80192d8:	2400      	movs	r4, #0
 80192da:	4691      	mov	r9, r2
 80192dc:	461d      	mov	r5, r3
 80192de:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80192e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80192e6:	4688      	mov	r8, r1
 80192e8:	4607      	mov	r7, r0
 80192ea:	9404      	str	r4, [sp, #16]
 80192ec:	fb06 9505 	mla	r5, r6, r5, r9
 80192f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80192f4:	f7ff ffa6 	bl	8019244 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80192f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80192fc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019300:	6878      	ldr	r0, [r7, #4]
 8019302:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019306:	a901      	add	r1, sp, #4
 8019308:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801930c:	9505      	str	r5, [sp, #20]
 801930e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019312:	f8ad 401c 	strh.w	r4, [sp, #28]
 8019316:	f8ad 601e 	strh.w	r6, [sp, #30]
 801931a:	f8cd 8010 	str.w	r8, [sp, #16]
 801931e:	f8ad 4020 	strh.w	r4, [sp, #32]
 8019322:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8019326:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801932a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801932e:	6803      	ldr	r3, [r0, #0]
 8019330:	685b      	ldr	r3, [r3, #4]
 8019332:	4798      	blx	r3
 8019334:	b00b      	add	sp, #44	; 0x2c
 8019336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801933c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019340:	b08a      	sub	sp, #40	; 0x28
 8019342:	4698      	mov	r8, r3
 8019344:	2300      	movs	r3, #0
 8019346:	4606      	mov	r6, r0
 8019348:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801934c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8019350:	2d0b      	cmp	r5, #11
 8019352:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8019356:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801935a:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801935e:	9304      	str	r3, [sp, #16]
 8019360:	d137      	bne.n	80193d2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8019362:	2380      	movs	r3, #128	; 0x80
 8019364:	f88d 0020 	strb.w	r0, [sp, #32]
 8019368:	4630      	mov	r0, r6
 801936a:	9203      	str	r2, [sp, #12]
 801936c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8019370:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019374:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019378:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801937c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019380:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019384:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019388:	f7ff ff5c 	bl	8019244 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801938c:	2c0b      	cmp	r4, #11
 801938e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8019392:	f8ad 701e 	strh.w	r7, [sp, #30]
 8019396:	bf94      	ite	ls
 8019398:	4b19      	ldrls	r3, [pc, #100]	; (8019400 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801939a:	2100      	movhi	r1, #0
 801939c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80193a0:	bf98      	it	ls
 80193a2:	5d19      	ldrbls	r1, [r3, r4]
 80193a4:	fb02 8307 	mla	r3, r2, r7, r8
 80193a8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80193ac:	10c9      	asrs	r1, r1, #3
 80193ae:	fb01 0003 	mla	r0, r1, r3, r0
 80193b2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80193b6:	a901      	add	r1, sp, #4
 80193b8:	9005      	str	r0, [sp, #20]
 80193ba:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80193be:	2300      	movs	r3, #0
 80193c0:	6870      	ldr	r0, [r6, #4]
 80193c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80193c6:	6803      	ldr	r3, [r0, #0]
 80193c8:	685b      	ldr	r3, [r3, #4]
 80193ca:	4798      	blx	r3
 80193cc:	b00a      	add	sp, #40	; 0x28
 80193ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193d2:	2d02      	cmp	r5, #2
 80193d4:	d109      	bne.n	80193ea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80193d6:	28ff      	cmp	r0, #255	; 0xff
 80193d8:	d105      	bne.n	80193e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80193da:	f1bc 0f00 	cmp.w	ip, #0
 80193de:	bf14      	ite	ne
 80193e0:	2340      	movne	r3, #64	; 0x40
 80193e2:	2320      	moveq	r3, #32
 80193e4:	e7be      	b.n	8019364 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80193e6:	2340      	movs	r3, #64	; 0x40
 80193e8:	e7bc      	b.n	8019364 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80193ea:	28ff      	cmp	r0, #255	; 0xff
 80193ec:	d105      	bne.n	80193fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80193ee:	f1bc 0f00 	cmp.w	ip, #0
 80193f2:	bf14      	ite	ne
 80193f4:	2304      	movne	r3, #4
 80193f6:	2301      	moveq	r3, #1
 80193f8:	e7b4      	b.n	8019364 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80193fa:	2304      	movs	r3, #4
 80193fc:	e7b2      	b.n	8019364 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80193fe:	bf00      	nop
 8019400:	08030588 	.word	0x08030588

08019404 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8019404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019408:	b08b      	sub	sp, #44	; 0x2c
 801940a:	461d      	mov	r5, r3
 801940c:	2400      	movs	r4, #0
 801940e:	4688      	mov	r8, r1
 8019410:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8019414:	4693      	mov	fp, r2
 8019416:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801941a:	4607      	mov	r7, r0
 801941c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019420:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8019424:	9404      	str	r4, [sp, #16]
 8019426:	bf14      	ite	ne
 8019428:	2308      	movne	r3, #8
 801942a:	2302      	moveq	r3, #2
 801942c:	fb05 b50a 	mla	r5, r5, sl, fp
 8019430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019434:	f7ff ff06 	bl	8019244 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019438:	2e0b      	cmp	r6, #11
 801943a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801943e:	a901      	add	r1, sp, #4
 8019440:	bf98      	it	ls
 8019442:	4b13      	ldrls	r3, [pc, #76]	; (8019490 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8019444:	f8ad a01e 	strh.w	sl, [sp, #30]
 8019448:	bf98      	it	ls
 801944a:	5d9c      	ldrbls	r4, [r3, r6]
 801944c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019450:	10e4      	asrs	r4, r4, #3
 8019452:	f8cd 8010 	str.w	r8, [sp, #16]
 8019456:	f8ad 3018 	strh.w	r3, [sp, #24]
 801945a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801945e:	fb04 0405 	mla	r4, r4, r5, r0
 8019462:	6878      	ldr	r0, [r7, #4]
 8019464:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019468:	2300      	movs	r3, #0
 801946a:	9405      	str	r4, [sp, #20]
 801946c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019470:	f88d 9020 	strb.w	r9, [sp, #32]
 8019474:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8019478:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801947c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8019480:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8019484:	6803      	ldr	r3, [r0, #0]
 8019486:	685b      	ldr	r3, [r3, #4]
 8019488:	4798      	blx	r3
 801948a:	b00b      	add	sp, #44	; 0x2c
 801948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019490:	08030588 	.word	0x08030588

08019494 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019498:	461e      	mov	r6, r3
 801949a:	4b0a      	ldr	r3, [pc, #40]	; (80194c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801949c:	460f      	mov	r7, r1
 801949e:	4690      	mov	r8, r2
 80194a0:	881d      	ldrh	r5, [r3, #0]
 80194a2:	f7ff fd23 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 80194a6:	6803      	ldr	r3, [r0, #0]
 80194a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194aa:	4798      	blx	r3
 80194ac:	280b      	cmp	r0, #11
 80194ae:	bf96      	itet	ls
 80194b0:	4b05      	ldrls	r3, [pc, #20]	; (80194c8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80194b2:	2400      	movhi	r4, #0
 80194b4:	5c1c      	ldrbls	r4, [r3, r0]
 80194b6:	fb08 7005 	mla	r0, r8, r5, r7
 80194ba:	10e4      	asrs	r4, r4, #3
 80194bc:	fb04 6000 	mla	r0, r4, r0, r6
 80194c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194c4:	20015fb6 	.word	0x20015fb6
 80194c8:	08030588 	.word	0x08030588

080194cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80194cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194ce:	b08b      	sub	sp, #44	; 0x2c
 80194d0:	461f      	mov	r7, r3
 80194d2:	4604      	mov	r4, r0
 80194d4:	4616      	mov	r6, r2
 80194d6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80194da:	2500      	movs	r5, #0
 80194dc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80194e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80194e4:	9504      	str	r5, [sp, #16]
 80194e6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80194ea:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80194ee:	f8ad 301a 	strh.w	r3, [sp, #26]
 80194f2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80194f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80194fa:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80194fe:	f88d 3020 	strb.w	r3, [sp, #32]
 8019502:	f7ff fe9f 	bl	8019244 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019506:	463a      	mov	r2, r7
 8019508:	4631      	mov	r1, r6
 801950a:	4603      	mov	r3, r0
 801950c:	4620      	mov	r0, r4
 801950e:	f7ff ffc1 	bl	8019494 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019512:	4b0e      	ldr	r3, [pc, #56]	; (801954c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8019514:	9005      	str	r0, [sp, #20]
 8019516:	881b      	ldrh	r3, [r3, #0]
 8019518:	f8ad 301e 	strh.w	r3, [sp, #30]
 801951c:	f7ff fce6 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 8019520:	6803      	ldr	r3, [r0, #0]
 8019522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019524:	4798      	blx	r3
 8019526:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019528:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801952c:	a901      	add	r1, sp, #4
 801952e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8019532:	9304      	str	r3, [sp, #16]
 8019534:	6860      	ldr	r0, [r4, #4]
 8019536:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801953a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801953e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8019542:	6803      	ldr	r3, [r0, #0]
 8019544:	685b      	ldr	r3, [r3, #4]
 8019546:	4798      	blx	r3
 8019548:	b00b      	add	sp, #44	; 0x2c
 801954a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801954c:	20015fb6 	.word	0x20015fb6

08019550 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019552:	b08d      	sub	sp, #52	; 0x34
 8019554:	2501      	movs	r5, #1
 8019556:	4604      	mov	r4, r0
 8019558:	466b      	mov	r3, sp
 801955a:	9503      	str	r5, [sp, #12]
 801955c:	e883 0006 	stmia.w	r3, {r1, r2}
 8019560:	2300      	movs	r3, #0
 8019562:	f8bd 6000 	ldrh.w	r6, [sp]
 8019566:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801956a:	9306      	str	r3, [sp, #24]
 801956c:	6803      	ldr	r3, [r0, #0]
 801956e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019570:	4798      	blx	r3
 8019572:	463a      	mov	r2, r7
 8019574:	4631      	mov	r1, r6
 8019576:	4603      	mov	r3, r0
 8019578:	4620      	mov	r0, r4
 801957a:	f7ff ff8b 	bl	8019494 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801957e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019580:	9004      	str	r0, [sp, #16]
 8019582:	9307      	str	r3, [sp, #28]
 8019584:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019588:	f8ad 3020 	strh.w	r3, [sp, #32]
 801958c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019590:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019594:	4b0e      	ldr	r3, [pc, #56]	; (80195d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8019596:	881b      	ldrh	r3, [r3, #0]
 8019598:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801959c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80195a0:	f7ff fca4 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 80195a4:	6803      	ldr	r3, [r0, #0]
 80195a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195a8:	4798      	blx	r3
 80195aa:	23ff      	movs	r3, #255	; 0xff
 80195ac:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80195b0:	a903      	add	r1, sp, #12
 80195b2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80195b6:	6860      	ldr	r0, [r4, #4]
 80195b8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80195bc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80195c0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80195c4:	6803      	ldr	r3, [r0, #0]
 80195c6:	685b      	ldr	r3, [r3, #4]
 80195c8:	4798      	blx	r3
 80195ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80195cc:	b00d      	add	sp, #52	; 0x34
 80195ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195d0:	20015fb6 	.word	0x20015fb6

080195d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80195d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195d8:	b08c      	sub	sp, #48	; 0x30
 80195da:	461e      	mov	r6, r3
 80195dc:	2300      	movs	r3, #0
 80195de:	4604      	mov	r4, r0
 80195e0:	466d      	mov	r5, sp
 80195e2:	9306      	str	r3, [sp, #24]
 80195e4:	6803      	ldr	r3, [r0, #0]
 80195e6:	e885 0006 	stmia.w	r5, {r1, r2}
 80195ea:	2501      	movs	r5, #1
 80195ec:	f8bd 7000 	ldrh.w	r7, [sp]
 80195f0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80195f4:	9503      	str	r5, [sp, #12]
 80195f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195f8:	4798      	blx	r3
 80195fa:	4642      	mov	r2, r8
 80195fc:	4639      	mov	r1, r7
 80195fe:	4603      	mov	r3, r0
 8019600:	4620      	mov	r0, r4
 8019602:	f7ff ff47 	bl	8019494 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019606:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801960a:	9004      	str	r0, [sp, #16]
 801960c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019610:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019614:	9607      	str	r6, [sp, #28]
 8019616:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801961a:	4b10      	ldr	r3, [pc, #64]	; (801965c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801961c:	881b      	ldrh	r3, [r3, #0]
 801961e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019624:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019628:	f7ff fc60 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 801962c:	6803      	ldr	r3, [r0, #0]
 801962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019630:	4798      	blx	r3
 8019632:	23ff      	movs	r3, #255	; 0xff
 8019634:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8019638:	a903      	add	r1, sp, #12
 801963a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801963e:	6860      	ldr	r0, [r4, #4]
 8019640:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8019644:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019648:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801964c:	6803      	ldr	r3, [r0, #0]
 801964e:	685b      	ldr	r3, [r3, #4]
 8019650:	4798      	blx	r3
 8019652:	4630      	mov	r0, r6
 8019654:	b00c      	add	sp, #48	; 0x30
 8019656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801965a:	bf00      	nop
 801965c:	20015fb6 	.word	0x20015fb6

08019660 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8019660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019662:	b085      	sub	sp, #20
 8019664:	4605      	mov	r5, r0
 8019666:	ac02      	add	r4, sp, #8
 8019668:	e884 0006 	stmia.w	r4, {r1, r2}
 801966c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8019670:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8019674:	f7ff fde6 	bl	8019244 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019678:	4631      	mov	r1, r6
 801967a:	4603      	mov	r3, r0
 801967c:	463a      	mov	r2, r7
 801967e:	4628      	mov	r0, r5
 8019680:	f7ff ff08 	bl	8019494 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019684:	4a05      	ldr	r2, [pc, #20]	; (801969c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8019686:	682b      	ldr	r3, [r5, #0]
 8019688:	8812      	ldrh	r2, [r2, #0]
 801968a:	9200      	str	r2, [sp, #0]
 801968c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801968e:	4603      	mov	r3, r0
 8019690:	4628      	mov	r0, r5
 8019692:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019696:	47b0      	blx	r6
 8019698:	b005      	add	sp, #20
 801969a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801969c:	20015fb6 	.word	0x20015fb6

080196a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80196a0:	b570      	push	{r4, r5, r6, lr}
 80196a2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80196a6:	4604      	mov	r4, r0
 80196a8:	b19b      	cbz	r3, 80196d2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80196aa:	2002      	movs	r0, #2
 80196ac:	f7e8 fb7a 	bl	8001da4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80196b0:	2300      	movs	r3, #0
 80196b2:	4620      	mov	r0, r4
 80196b4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80196b8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80196bc:	6823      	ldr	r3, [r4, #0]
 80196be:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80196c2:	f7ff fdbf 	bl	8019244 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80196c6:	4601      	mov	r1, r0
 80196c8:	4620      	mov	r0, r4
 80196ca:	462b      	mov	r3, r5
 80196cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196d0:	4718      	bx	r3
 80196d2:	bd70      	pop	{r4, r5, r6, pc}

080196d4 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80196d4:	b570      	push	{r4, r5, r6, lr}
 80196d6:	4605      	mov	r5, r0
 80196d8:	460c      	mov	r4, r1
 80196da:	2003      	movs	r0, #3
 80196dc:	b149      	cbz	r1, 80196f2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80196de:	f7e8 fb01 	bl	8001ce4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80196e2:	6928      	ldr	r0, [r5, #16]
 80196e4:	b168      	cbz	r0, 8019702 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80196e6:	6803      	ldr	r3, [r0, #0]
 80196e8:	2101      	movs	r1, #1
 80196ea:	695b      	ldr	r3, [r3, #20]
 80196ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196f0:	4718      	bx	r3
 80196f2:	f7e8 fb27 	bl	8001d44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80196f6:	6928      	ldr	r0, [r5, #16]
 80196f8:	b118      	cbz	r0, 8019702 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80196fa:	6803      	ldr	r3, [r0, #0]
 80196fc:	4621      	mov	r1, r4
 80196fe:	695b      	ldr	r3, [r3, #20]
 8019700:	e7f4      	b.n	80196ec <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8019702:	bd70      	pop	{r4, r5, r6, pc}

08019704 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801970a:	4604      	mov	r4, r0
 801970c:	460d      	mov	r5, r1
 801970e:	428b      	cmp	r3, r1
 8019710:	d006      	beq.n	8019720 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8019712:	6803      	ldr	r3, [r0, #0]
 8019714:	b929      	cbnz	r1, 8019722 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8019716:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801971a:	4798      	blx	r3
 801971c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8019720:	bd38      	pop	{r3, r4, r5, pc}
 8019722:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8019726:	e7f8      	b.n	801971a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08019728 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019728:	4b0d      	ldr	r3, [pc, #52]	; (8019760 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801972a:	b510      	push	{r4, lr}
 801972c:	781b      	ldrb	r3, [r3, #0]
 801972e:	4604      	mov	r4, r0
 8019730:	b95b      	cbnz	r3, 801974a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019732:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8019736:	2b02      	cmp	r3, #2
 8019738:	d007      	beq.n	801974a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801973a:	6840      	ldr	r0, [r0, #4]
 801973c:	f000 f912 	bl	8019964 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019740:	b118      	cbz	r0, 801974a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019742:	6862      	ldr	r2, [r4, #4]
 8019744:	7a53      	ldrb	r3, [r2, #9]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d0fc      	beq.n	8019744 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801974a:	f7e8 fcaf 	bl	80020ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801974e:	4620      	mov	r0, r4
 8019750:	2100      	movs	r1, #0
 8019752:	f7ff ffd7 	bl	8019704 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019756:	4620      	mov	r0, r4
 8019758:	f7ff fd74 	bl	8019244 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801975c:	bd10      	pop	{r4, pc}
 801975e:	bf00      	nop
 8019760:	20015fba 	.word	0x20015fba

08019764 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019764:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8019768:	1a13      	subs	r3, r2, r0
 801976a:	4258      	negs	r0, r3
 801976c:	4158      	adcs	r0, r3
 801976e:	4770      	bx	lr

08019770 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019770:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019774:	1a9b      	subs	r3, r3, r2
 8019776:	2b00      	cmp	r3, #0
 8019778:	bfdc      	itt	le
 801977a:	6882      	ldrle	r2, [r0, #8]
 801977c:	189b      	addle	r3, r3, r2
 801977e:	2b01      	cmp	r3, #1
 8019780:	bfcc      	ite	gt
 8019782:	2000      	movgt	r0, #0
 8019784:	2001      	movle	r0, #1
 8019786:	4770      	bx	lr

08019788 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019788:	6902      	ldr	r2, [r0, #16]
 801978a:	6843      	ldr	r3, [r0, #4]
 801978c:	2024      	movs	r0, #36	; 0x24
 801978e:	fb00 3002 	mla	r0, r0, r2, r3
 8019792:	4770      	bx	lr

08019794 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019794:	6803      	ldr	r3, [r0, #0]
 8019796:	691b      	ldr	r3, [r3, #16]
 8019798:	4718      	bx	r3

0801979a <_ZN8touchgfx13DMA_Interface7executeEv>:
 801979a:	2301      	movs	r3, #1
 801979c:	b570      	push	{r4, r5, r6, lr}
 801979e:	7203      	strb	r3, [r0, #8]
 80197a0:	4604      	mov	r4, r0
 80197a2:	6840      	ldr	r0, [r0, #4]
 80197a4:	6803      	ldr	r3, [r0, #0]
 80197a6:	699b      	ldr	r3, [r3, #24]
 80197a8:	4798      	blx	r3
 80197aa:	6803      	ldr	r3, [r0, #0]
 80197ac:	4605      	mov	r5, r0
 80197ae:	2b40      	cmp	r3, #64	; 0x40
 80197b0:	d00c      	beq.n	80197cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80197b2:	d810      	bhi.n	80197d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80197b4:	2b04      	cmp	r3, #4
 80197b6:	d01d      	beq.n	80197f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80197b8:	d804      	bhi.n	80197c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80197ba:	2b01      	cmp	r3, #1
 80197bc:	d006      	beq.n	80197cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80197be:	2b02      	cmp	r3, #2
 80197c0:	d02c      	beq.n	801981c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80197c2:	bd70      	pop	{r4, r5, r6, pc}
 80197c4:	2b08      	cmp	r3, #8
 80197c6:	d01d      	beq.n	8019804 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80197c8:	2b20      	cmp	r3, #32
 80197ca:	d1fa      	bne.n	80197c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80197cc:	6823      	ldr	r3, [r4, #0]
 80197ce:	4620      	mov	r0, r4
 80197d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197d2:	4798      	blx	r3
 80197d4:	e013      	b.n	80197fe <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80197d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80197da:	d0f7      	beq.n	80197cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80197dc:	d804      	bhi.n	80197e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80197de:	2b80      	cmp	r3, #128	; 0x80
 80197e0:	d0f4      	beq.n	80197cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80197e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80197e6:	e7f0      	b.n	80197ca <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80197e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80197ec:	d0ee      	beq.n	80197cc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80197ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80197f2:	e7e5      	b.n	80197c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80197f4:	6823      	ldr	r3, [r4, #0]
 80197f6:	7f01      	ldrb	r1, [r0, #28]
 80197f8:	4620      	mov	r0, r4
 80197fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197fc:	4798      	blx	r3
 80197fe:	6823      	ldr	r3, [r4, #0]
 8019800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019802:	e006      	b.n	8019812 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019804:	6823      	ldr	r3, [r4, #0]
 8019806:	7f01      	ldrb	r1, [r0, #28]
 8019808:	4620      	mov	r0, r4
 801980a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801980c:	4798      	blx	r3
 801980e:	6823      	ldr	r3, [r4, #0]
 8019810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019812:	4629      	mov	r1, r5
 8019814:	4620      	mov	r0, r4
 8019816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801981a:	4718      	bx	r3
 801981c:	6823      	ldr	r3, [r4, #0]
 801981e:	4620      	mov	r0, r4
 8019820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019822:	4798      	blx	r3
 8019824:	e7f3      	b.n	801980e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08019826 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019826:	4770      	bx	lr

08019828 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019828:	4770      	bx	lr

0801982a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801982a:	4770      	bx	lr

0801982c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801982c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8019830:	b510      	push	{r4, lr}
 8019832:	1ad2      	subs	r2, r2, r3
 8019834:	2a00      	cmp	r2, #0
 8019836:	bfdc      	itt	le
 8019838:	6884      	ldrle	r4, [r0, #8]
 801983a:	1912      	addle	r2, r2, r4
 801983c:	2a01      	cmp	r2, #1
 801983e:	dd16      	ble.n	801986e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8019840:	6842      	ldr	r2, [r0, #4]
 8019842:	2424      	movs	r4, #36	; 0x24
 8019844:	fb04 2303 	mla	r3, r4, r3, r2
 8019848:	f101 0220 	add.w	r2, r1, #32
 801984c:	f851 4b04 	ldr.w	r4, [r1], #4
 8019850:	4291      	cmp	r1, r2
 8019852:	f843 4b04 	str.w	r4, [r3], #4
 8019856:	d1f9      	bne.n	801984c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8019858:	780a      	ldrb	r2, [r1, #0]
 801985a:	701a      	strb	r2, [r3, #0]
 801985c:	68c3      	ldr	r3, [r0, #12]
 801985e:	6882      	ldr	r2, [r0, #8]
 8019860:	f3bf 8f5b 	dmb	ish
 8019864:	3301      	adds	r3, #1
 8019866:	429a      	cmp	r2, r3
 8019868:	bfd8      	it	le
 801986a:	1a9b      	suble	r3, r3, r2
 801986c:	60c3      	str	r3, [r0, #12]
 801986e:	bd10      	pop	{r4, pc}

08019870 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019870:	6903      	ldr	r3, [r0, #16]
 8019872:	6882      	ldr	r2, [r0, #8]
 8019874:	f3bf 8f5b 	dmb	ish
 8019878:	3301      	adds	r3, #1
 801987a:	429a      	cmp	r2, r3
 801987c:	bfd8      	it	le
 801987e:	1a9b      	suble	r3, r3, r2
 8019880:	6103      	str	r3, [r0, #16]
 8019882:	4770      	bx	lr

08019884 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019884:	b570      	push	{r4, r5, r6, lr}
 8019886:	4604      	mov	r4, r0
 8019888:	460e      	mov	r6, r1
 801988a:	6860      	ldr	r0, [r4, #4]
 801988c:	6803      	ldr	r3, [r0, #0]
 801988e:	685b      	ldr	r3, [r3, #4]
 8019890:	4798      	blx	r3
 8019892:	2800      	cmp	r0, #0
 8019894:	d1f9      	bne.n	801988a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019896:	4d0d      	ldr	r5, [pc, #52]	; (80198cc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8019898:	6828      	ldr	r0, [r5, #0]
 801989a:	6803      	ldr	r3, [r0, #0]
 801989c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801989e:	4798      	blx	r3
 80198a0:	f7e8 fc12 	bl	80020c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80198a4:	6828      	ldr	r0, [r5, #0]
 80198a6:	2101      	movs	r1, #1
 80198a8:	f7ff ff2c 	bl	8019704 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80198ac:	6860      	ldr	r0, [r4, #4]
 80198ae:	4631      	mov	r1, r6
 80198b0:	6803      	ldr	r3, [r0, #0]
 80198b2:	689b      	ldr	r3, [r3, #8]
 80198b4:	4798      	blx	r3
 80198b6:	6823      	ldr	r3, [r4, #0]
 80198b8:	4620      	mov	r0, r4
 80198ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198bc:	4798      	blx	r3
 80198be:	6828      	ldr	r0, [r5, #0]
 80198c0:	6803      	ldr	r3, [r0, #0]
 80198c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80198c8:	4718      	bx	r3
 80198ca:	bf00      	nop
 80198cc:	20015fbc 	.word	0x20015fbc

080198d0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80198d0:	b508      	push	{r3, lr}
 80198d2:	f7e8 fbeb 	bl	80020ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80198d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80198da:	f7e8 bbef 	b.w	80020bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080198de <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80198de:	b510      	push	{r4, lr}
 80198e0:	4604      	mov	r4, r0
 80198e2:	2114      	movs	r1, #20
 80198e4:	f011 f84f 	bl	802a986 <_ZdlPvj>
 80198e8:	4620      	mov	r0, r4
 80198ea:	bd10      	pop	{r4, pc}

080198ec <_ZN8touchgfx13DMA_Interface5startEv>:
 80198ec:	b510      	push	{r4, lr}
 80198ee:	4604      	mov	r4, r0
 80198f0:	6840      	ldr	r0, [r0, #4]
 80198f2:	6803      	ldr	r3, [r0, #0]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	4798      	blx	r3
 80198f8:	b948      	cbnz	r0, 801990e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80198fa:	7a63      	ldrb	r3, [r4, #9]
 80198fc:	b13b      	cbz	r3, 801990e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80198fe:	7a23      	ldrb	r3, [r4, #8]
 8019900:	b92b      	cbnz	r3, 801990e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019902:	6823      	ldr	r3, [r4, #0]
 8019904:	4620      	mov	r0, r4
 8019906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801990c:	4718      	bx	r3
 801990e:	bd10      	pop	{r4, pc}

08019910 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019910:	b570      	push	{r4, r5, r6, lr}
 8019912:	4604      	mov	r4, r0
 8019914:	6840      	ldr	r0, [r0, #4]
 8019916:	6803      	ldr	r3, [r0, #0]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	4798      	blx	r3
 801991c:	4605      	mov	r5, r0
 801991e:	b930      	cbnz	r0, 801992e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019920:	7a23      	ldrb	r3, [r4, #8]
 8019922:	b123      	cbz	r3, 801992e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019924:	6860      	ldr	r0, [r4, #4]
 8019926:	6803      	ldr	r3, [r0, #0]
 8019928:	695b      	ldr	r3, [r3, #20]
 801992a:	4798      	blx	r3
 801992c:	7225      	strb	r5, [r4, #8]
 801992e:	6860      	ldr	r0, [r4, #4]
 8019930:	6803      	ldr	r3, [r0, #0]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	4798      	blx	r3
 8019936:	b928      	cbnz	r0, 8019944 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019938:	6823      	ldr	r3, [r4, #0]
 801993a:	4620      	mov	r0, r4
 801993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801993e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019942:	4718      	bx	r3
 8019944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019948:	f7e8 bbc6 	b.w	80020d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801994c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801994c:	b510      	push	{r4, lr}
 801994e:	6082      	str	r2, [r0, #8]
 8019950:	2200      	movs	r2, #0
 8019952:	4c03      	ldr	r4, [pc, #12]	; (8019960 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019954:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019958:	e9c0 4100 	strd	r4, r1, [r0]
 801995c:	bd10      	pop	{r4, pc}
 801995e:	bf00      	nop
 8019960:	0803059c 	.word	0x0803059c

08019964 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019964:	6840      	ldr	r0, [r0, #4]
 8019966:	6803      	ldr	r3, [r0, #0]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	4718      	bx	r3

0801996c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801996c:	2000      	movs	r0, #0
 801996e:	4770      	bx	lr

08019970 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8019970:	4b07      	ldr	r3, [pc, #28]	; (8019990 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8019972:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019974:	881b      	ldrh	r3, [r3, #0]
 8019976:	4293      	cmp	r3, r2
 8019978:	bf81      	itttt	hi
 801997a:	4b06      	ldrhi	r3, [pc, #24]	; (8019994 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801997c:	681b      	ldrhi	r3, [r3, #0]
 801997e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8019982:	7858      	ldrbhi	r0, [r3, #1]
 8019984:	bf8c      	ite	hi
 8019986:	f000 0003 	andhi.w	r0, r0, #3
 801998a:	2000      	movls	r0, #0
 801998c:	4770      	bx	lr
 801998e:	bf00      	nop
 8019990:	20016010 	.word	0x20016010
 8019994:	2001600c 	.word	0x2001600c

08019998 <_ZN8touchgfx8TextAreaD1Ev>:
 8019998:	4770      	bx	lr
	...

0801999c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801999c:	4b11      	ldr	r3, [pc, #68]	; (80199e4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801999e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199a2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80199a4:	4604      	mov	r4, r0
 80199a6:	881b      	ldrh	r3, [r3, #0]
 80199a8:	428b      	cmp	r3, r1
 80199aa:	d918      	bls.n	80199de <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80199ac:	6803      	ldr	r3, [r0, #0]
 80199ae:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80199b0:	4b0d      	ldr	r3, [pc, #52]	; (80199e8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80199b2:	6818      	ldr	r0, [r3, #0]
 80199b4:	f7eb fbd2 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 80199b8:	6823      	ldr	r3, [r4, #0]
 80199ba:	4606      	mov	r6, r0
 80199bc:	4620      	mov	r0, r4
 80199be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80199c0:	4798      	blx	r3
 80199c2:	6823      	ldr	r3, [r4, #0]
 80199c4:	4607      	mov	r7, r0
 80199c6:	4620      	mov	r0, r4
 80199c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80199cc:	4798      	blx	r3
 80199ce:	463a      	mov	r2, r7
 80199d0:	4603      	mov	r3, r0
 80199d2:	4631      	mov	r1, r6
 80199d4:	4620      	mov	r0, r4
 80199d6:	46ac      	mov	ip, r5
 80199d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199dc:	4760      	bx	ip
 80199de:	2000      	movs	r0, #0
 80199e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199e4:	20016010 	.word	0x20016010
 80199e8:	20016018 	.word	0x20016018

080199ec <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80199ec:	4b18      	ldr	r3, [pc, #96]	; (8019a50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80199ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80199f2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80199f4:	4604      	mov	r4, r0
 80199f6:	881b      	ldrh	r3, [r3, #0]
 80199f8:	428b      	cmp	r3, r1
 80199fa:	d926      	bls.n	8019a4a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80199fc:	4b15      	ldr	r3, [pc, #84]	; (8019a54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019a04:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019a08:	4b13      	ldr	r3, [pc, #76]	; (8019a58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019a0a:	7855      	ldrb	r5, [r2, #1]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8019a12:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8019a16:	6833      	ldr	r3, [r6, #0]
 8019a18:	69df      	ldr	r7, [r3, #28]
 8019a1a:	4b10      	ldr	r3, [pc, #64]	; (8019a5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8019a1c:	6818      	ldr	r0, [r3, #0]
 8019a1e:	f7eb fb9d 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8019a22:	6823      	ldr	r3, [r4, #0]
 8019a24:	4680      	mov	r8, r0
 8019a26:	4620      	mov	r0, r4
 8019a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019a2a:	4798      	blx	r3
 8019a2c:	6823      	ldr	r3, [r4, #0]
 8019a2e:	4681      	mov	r9, r0
 8019a30:	4620      	mov	r0, r4
 8019a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019a36:	4798      	blx	r3
 8019a38:	464b      	mov	r3, r9
 8019a3a:	9000      	str	r0, [sp, #0]
 8019a3c:	4642      	mov	r2, r8
 8019a3e:	4629      	mov	r1, r5
 8019a40:	4630      	mov	r0, r6
 8019a42:	47b8      	blx	r7
 8019a44:	b003      	add	sp, #12
 8019a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a4a:	2000      	movs	r0, #0
 8019a4c:	e7fa      	b.n	8019a44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8019a4e:	bf00      	nop
 8019a50:	20016010 	.word	0x20016010
 8019a54:	2001600c 	.word	0x2001600c
 8019a58:	20016014 	.word	0x20016014
 8019a5c:	20016018 	.word	0x20016018

08019a60 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8019a60:	b40e      	push	{r1, r2, r3}
 8019a62:	4b30      	ldr	r3, [pc, #192]	; (8019b24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8019a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a68:	881a      	ldrh	r2, [r3, #0]
 8019a6a:	b09d      	sub	sp, #116	; 0x74
 8019a6c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019a6e:	4604      	mov	r4, r0
 8019a70:	429a      	cmp	r2, r3
 8019a72:	d954      	bls.n	8019b1e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8019a74:	aa26      	add	r2, sp, #152	; 0x98
 8019a76:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8019b28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8019a7a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8019b2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8019a7e:	9202      	str	r2, [sp, #8]
 8019a80:	f8d9 2000 	ldr.w	r2, [r9]
 8019a84:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019a88:	f8d8 3000 	ldr.w	r3, [r8]
 8019a8c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019a90:	682b      	ldr	r3, [r5, #0]
 8019a92:	4628      	mov	r0, r5
 8019a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a96:	4798      	blx	r3
 8019a98:	4606      	mov	r6, r0
 8019a9a:	b207      	sxth	r7, r0
 8019a9c:	a803      	add	r0, sp, #12
 8019a9e:	f003 fdfd 	bl	801d69c <_ZN8touchgfx12TextProviderC1Ev>
 8019aa2:	682b      	ldr	r3, [r5, #0]
 8019aa4:	4628      	mov	r0, r5
 8019aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019aa8:	4798      	blx	r3
 8019aaa:	682b      	ldr	r3, [r5, #0]
 8019aac:	4682      	mov	sl, r0
 8019aae:	4628      	mov	r0, r5
 8019ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ab2:	4798      	blx	r3
 8019ab4:	4653      	mov	r3, sl
 8019ab6:	9000      	str	r0, [sp, #0]
 8019ab8:	a803      	add	r0, sp, #12
 8019aba:	9a02      	ldr	r2, [sp, #8]
 8019abc:	9925      	ldr	r1, [sp, #148]	; 0x94
 8019abe:	f003 fe48 	bl	801d752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019ac2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019ac4:	f8d9 3000 	ldr.w	r3, [r9]
 8019ac8:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8019acc:	8925      	ldrh	r5, [r4, #8]
 8019ace:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8019ad2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019ad6:	eba5 050c 	sub.w	r5, r5, ip
 8019ada:	784a      	ldrb	r2, [r1, #1]
 8019adc:	f8d8 3000 	ldr.w	r3, [r8]
 8019ae0:	b22d      	sxth	r5, r5
 8019ae2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8019ae6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019aea:	9500      	str	r5, [sp, #0]
 8019aec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019af0:	a803      	add	r0, sp, #12
 8019af2:	f001 fcc3 	bl	801b47c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019af6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019afa:	b203      	sxth	r3, r0
 8019afc:	18b9      	adds	r1, r7, r2
 8019afe:	2900      	cmp	r1, #0
 8019b00:	dd0b      	ble.n	8019b1a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8019b02:	3b01      	subs	r3, #1
 8019b04:	fb13 f302 	smulbb	r3, r3, r2
 8019b08:	fb16 3300 	smlabb	r3, r6, r0, r3
 8019b0c:	b21f      	sxth	r7, r3
 8019b0e:	4638      	mov	r0, r7
 8019b10:	b01d      	add	sp, #116	; 0x74
 8019b12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b16:	b003      	add	sp, #12
 8019b18:	4770      	bx	lr
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	dcf7      	bgt.n	8019b0e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8019b1e:	2700      	movs	r7, #0
 8019b20:	e7f5      	b.n	8019b0e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8019b22:	bf00      	nop
 8019b24:	20016010 	.word	0x20016010
 8019b28:	2001600c 	.word	0x2001600c
 8019b2c:	20016014 	.word	0x20016014

08019b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8019b30:	4bbd      	ldr	r3, [pc, #756]	; (8019e28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8019b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b36:	460c      	mov	r4, r1
 8019b38:	881b      	ldrh	r3, [r3, #0]
 8019b3a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8019b3c:	b0a9      	sub	sp, #164	; 0xa4
 8019b3e:	4680      	mov	r8, r0
 8019b40:	428b      	cmp	r3, r1
 8019b42:	d809      	bhi.n	8019b58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8019b44:	2300      	movs	r3, #0
 8019b46:	f04f 32ff 	mov.w	r2, #4294967295
 8019b4a:	6083      	str	r3, [r0, #8]
 8019b4c:	e9c0 3200 	strd	r3, r2, [r0]
 8019b50:	4640      	mov	r0, r8
 8019b52:	b029      	add	sp, #164	; 0xa4
 8019b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b58:	4eb4      	ldr	r6, [pc, #720]	; (8019e2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8019b5a:	6833      	ldr	r3, [r6, #0]
 8019b5c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8019b60:	4bb3      	ldr	r3, [pc, #716]	; (8019e30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019b68:	4bb2      	ldr	r3, [pc, #712]	; (8019e34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8019b6a:	6818      	ldr	r0, [r3, #0]
 8019b6c:	f7eb faf6 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8019b70:	682b      	ldr	r3, [r5, #0]
 8019b72:	4681      	mov	r9, r0
 8019b74:	4628      	mov	r0, r5
 8019b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b78:	4798      	blx	r3
 8019b7a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8019b7c:	b203      	sxth	r3, r0
 8019b7e:	4682      	mov	sl, r0
 8019b80:	4407      	add	r7, r0
 8019b82:	a80f      	add	r0, sp, #60	; 0x3c
 8019b84:	9304      	str	r3, [sp, #16]
 8019b86:	b2bb      	uxth	r3, r7
 8019b88:	9303      	str	r3, [sp, #12]
 8019b8a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	f040 80a5 	bne.w	8019cde <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8019b94:	f003 fd82 	bl	801d69c <_ZN8touchgfx12TextProviderC1Ev>
 8019b98:	682b      	ldr	r3, [r5, #0]
 8019b9a:	4628      	mov	r0, r5
 8019b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b9e:	4798      	blx	r3
 8019ba0:	682b      	ldr	r3, [r5, #0]
 8019ba2:	4606      	mov	r6, r0
 8019ba4:	4628      	mov	r0, r5
 8019ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ba8:	4798      	blx	r3
 8019baa:	6823      	ldr	r3, [r4, #0]
 8019bac:	4607      	mov	r7, r0
 8019bae:	4620      	mov	r0, r4
 8019bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019bb2:	4798      	blx	r3
 8019bb4:	6823      	ldr	r3, [r4, #0]
 8019bb6:	4683      	mov	fp, r0
 8019bb8:	4620      	mov	r0, r4
 8019bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019bbe:	4798      	blx	r3
 8019bc0:	463b      	mov	r3, r7
 8019bc2:	4649      	mov	r1, r9
 8019bc4:	4632      	mov	r2, r6
 8019bc6:	2600      	movs	r6, #0
 8019bc8:	e9cd b000 	strd	fp, r0, [sp]
 8019bcc:	a80f      	add	r0, sp, #60	; 0x3c
 8019bce:	4637      	mov	r7, r6
 8019bd0:	f003 fdd4 	bl	801d77c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8019bd4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019bd8:	f8df b250 	ldr.w	fp, [pc, #592]	; 8019e2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8019bdc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019be0:	bf0c      	ite	eq
 8019be2:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8019be6:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8019bea:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019bec:	4629      	mov	r1, r5
 8019bee:	f8db 3000 	ldr.w	r3, [fp]
 8019bf2:	a80f      	add	r0, sp, #60	; 0x3c
 8019bf4:	3701      	adds	r7, #1
 8019bf6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019bfa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019bfe:	b2bf      	uxth	r7, r7
 8019c00:	785b      	ldrb	r3, [r3, #1]
 8019c02:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019c06:	f001 f954 	bl	801aeb2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019c0a:	9b03      	ldr	r3, [sp, #12]
 8019c0c:	4286      	cmp	r6, r0
 8019c0e:	eba9 0903 	sub.w	r9, r9, r3
 8019c12:	bfb8      	it	lt
 8019c14:	4606      	movlt	r6, r0
 8019c16:	a80f      	add	r0, sp, #60	; 0x3c
 8019c18:	fa0f f989 	sxth.w	r9, r9
 8019c1c:	b236      	sxth	r6, r6
 8019c1e:	f003 fd64 	bl	801d6ea <_ZN8touchgfx12TextProvider11endOfStringEv>
 8019c22:	b918      	cbnz	r0, 8019c2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8019c24:	7a2b      	ldrb	r3, [r5, #8]
 8019c26:	444b      	add	r3, r9
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	dcde      	bgt.n	8019bea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8019c2c:	9b03      	ldr	r3, [sp, #12]
 8019c2e:	4620      	mov	r0, r4
 8019c30:	9a04      	ldr	r2, [sp, #16]
 8019c32:	fb13 f707 	smulbb	r7, r3, r7
 8019c36:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019c38:	f895 9009 	ldrb.w	r9, [r5, #9]
 8019c3c:	1aff      	subs	r7, r7, r3
 8019c3e:	b2bf      	uxth	r7, r7
 8019c40:	b23b      	sxth	r3, r7
 8019c42:	429a      	cmp	r2, r3
 8019c44:	bfa8      	it	ge
 8019c46:	4657      	movge	r7, sl
 8019c48:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019c4c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019c50:	6823      	ldr	r3, [r4, #0]
 8019c52:	444f      	add	r7, r9
 8019c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c56:	bf08      	it	eq
 8019c58:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8019c5c:	fa1f f987 	uxth.w	r9, r7
 8019c60:	bf18      	it	ne
 8019c62:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8019c66:	4798      	blx	r3
 8019c68:	2801      	cmp	r0, #1
 8019c6a:	fa0f f789 	sxth.w	r7, r9
 8019c6e:	b2b3      	uxth	r3, r6
 8019c70:	f000 80e2 	beq.w	8019e38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8019c74:	2802      	cmp	r0, #2
 8019c76:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8019c7a:	f000 80e3 	beq.w	8019e44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8019c7e:	7aea      	ldrb	r2, [r5, #11]
 8019c80:	b236      	sxth	r6, r6
 8019c82:	7b2d      	ldrb	r5, [r5, #12]
 8019c84:	1ab6      	subs	r6, r6, r2
 8019c86:	442a      	add	r2, r5
 8019c88:	fa1f fa86 	uxth.w	sl, r6
 8019c8c:	4413      	add	r3, r2
 8019c8e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8019c92:	fa0f fb8a 	sxth.w	fp, sl
 8019c96:	b29b      	uxth	r3, r3
 8019c98:	2a02      	cmp	r2, #2
 8019c9a:	b21e      	sxth	r6, r3
 8019c9c:	f000 80d6 	beq.w	8019e4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8019ca0:	2a03      	cmp	r2, #3
 8019ca2:	f000 80de 	beq.w	8019e62 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8019ca6:	2a01      	cmp	r2, #1
 8019ca8:	f040 80e6 	bne.w	8019e78 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8019cac:	8925      	ldrh	r5, [r4, #8]
 8019cae:	4633      	mov	r3, r6
 8019cb0:	463e      	mov	r6, r7
 8019cb2:	eba5 0909 	sub.w	r9, r5, r9
 8019cb6:	461f      	mov	r7, r3
 8019cb8:	465d      	mov	r5, fp
 8019cba:	fa0f fb89 	sxth.w	fp, r9
 8019cbe:	4b5d      	ldr	r3, [pc, #372]	; (8019e34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8019cc0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019cc2:	6818      	ldr	r0, [r3, #0]
 8019cc4:	f7eb fa4a 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8019cc8:	f8a8 b000 	strh.w	fp, [r8]
 8019ccc:	f8a8 5002 	strh.w	r5, [r8, #2]
 8019cd0:	f8a8 6004 	strh.w	r6, [r8, #4]
 8019cd4:	f8a8 7006 	strh.w	r7, [r8, #6]
 8019cd8:	f8c8 0008 	str.w	r0, [r8, #8]
 8019cdc:	e738      	b.n	8019b50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8019cde:	f003 fcdd 	bl	801d69c <_ZN8touchgfx12TextProviderC1Ev>
 8019ce2:	682b      	ldr	r3, [r5, #0]
 8019ce4:	4628      	mov	r0, r5
 8019ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019ce8:	4798      	blx	r3
 8019cea:	682b      	ldr	r3, [r5, #0]
 8019cec:	4607      	mov	r7, r0
 8019cee:	4628      	mov	r0, r5
 8019cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019cf2:	4798      	blx	r3
 8019cf4:	6823      	ldr	r3, [r4, #0]
 8019cf6:	4683      	mov	fp, r0
 8019cf8:	4620      	mov	r0, r4
 8019cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019cfc:	4798      	blx	r3
 8019cfe:	6822      	ldr	r2, [r4, #0]
 8019d00:	9005      	str	r0, [sp, #20]
 8019d02:	4620      	mov	r0, r4
 8019d04:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8019d08:	4790      	blx	r2
 8019d0a:	9b05      	ldr	r3, [sp, #20]
 8019d0c:	463a      	mov	r2, r7
 8019d0e:	4649      	mov	r1, r9
 8019d10:	9001      	str	r0, [sp, #4]
 8019d12:	a80f      	add	r0, sp, #60	; 0x3c
 8019d14:	9300      	str	r3, [sp, #0]
 8019d16:	465b      	mov	r3, fp
 8019d18:	f003 fd30 	bl	801d77c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8019d1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019d20:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8019d24:	af0f      	add	r7, sp, #60	; 0x3c
 8019d26:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019d2a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019d2e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019d30:	bf0a      	itet	eq
 8019d32:	464a      	moveq	r2, r9
 8019d34:	461a      	movne	r2, r3
 8019d36:	4699      	moveq	r9, r3
 8019d38:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8019d3c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8019d40:	1ad2      	subs	r2, r2, r3
 8019d42:	6833      	ldr	r3, [r6, #0]
 8019d44:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8019d48:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8019d4c:	7859      	ldrb	r1, [r3, #1]
 8019d4e:	2300      	movs	r3, #0
 8019d50:	9707      	str	r7, [sp, #28]
 8019d52:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8019d56:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019d5a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8019d5e:	f88d 1020 	strb.w	r1, [sp, #32]
 8019d62:	9509      	str	r5, [sp, #36]	; 0x24
 8019d64:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019d68:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8019d6c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8019d70:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019d74:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8019d78:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019d7c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019d80:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019d84:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8019d88:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8019d8c:	b350      	cbz	r0, 8019de4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019d8e:	682b      	ldr	r3, [r5, #0]
 8019d90:	4628      	mov	r0, r5
 8019d92:	695b      	ldr	r3, [r3, #20]
 8019d94:	4798      	blx	r3
 8019d96:	4607      	mov	r7, r0
 8019d98:	b320      	cbz	r0, 8019de4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d9c:	4639      	mov	r1, r7
 8019d9e:	6803      	ldr	r3, [r0, #0]
 8019da0:	68db      	ldr	r3, [r3, #12]
 8019da2:	4798      	blx	r3
 8019da4:	4606      	mov	r6, r0
 8019da6:	b1e8      	cbz	r0, 8019de4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019da8:	7b43      	ldrb	r3, [r0, #13]
 8019daa:	7a82      	ldrb	r2, [r0, #10]
 8019dac:	005b      	lsls	r3, r3, #1
 8019dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019db2:	4313      	orrs	r3, r2
 8019db4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8019db8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8019dbc:	2b06      	cmp	r3, #6
 8019dbe:	d111      	bne.n	8019de4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019dc2:	4632      	mov	r2, r6
 8019dc4:	4639      	mov	r1, r7
 8019dc6:	6803      	ldr	r3, [r0, #0]
 8019dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019dca:	4798      	blx	r3
 8019dcc:	7b73      	ldrb	r3, [r6, #13]
 8019dce:	005b      	lsls	r3, r3, #1
 8019dd0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019dd4:	7ab3      	ldrb	r3, [r6, #10]
 8019dd6:	4313      	orrs	r3, r2
 8019dd8:	4418      	add	r0, r3
 8019dda:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019dde:	4418      	add	r0, r3
 8019de0:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8019de4:	2600      	movs	r6, #0
 8019de6:	4637      	mov	r7, r6
 8019de8:	a806      	add	r0, sp, #24
 8019dea:	3701      	adds	r7, #1
 8019dec:	f001 fa43 	bl	801b276 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8019df0:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8019df4:	9b03      	ldr	r3, [sp, #12]
 8019df6:	b2bf      	uxth	r7, r7
 8019df8:	4286      	cmp	r6, r0
 8019dfa:	eba9 0903 	sub.w	r9, r9, r3
 8019dfe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019e02:	bfb8      	it	lt
 8019e04:	4606      	movlt	r6, r0
 8019e06:	fa0f f989 	sxth.w	r9, r9
 8019e0a:	b236      	sxth	r6, r6
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	f43f af0d 	beq.w	8019c2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8019e12:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	f47f af08 	bne.w	8019c2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8019e1c:	7a2b      	ldrb	r3, [r5, #8]
 8019e1e:	444b      	add	r3, r9
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	dce1      	bgt.n	8019de8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8019e24:	e702      	b.n	8019c2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8019e26:	bf00      	nop
 8019e28:	20016010 	.word	0x20016010
 8019e2c:	2001600c 	.word	0x2001600c
 8019e30:	20016014 	.word	0x20016014
 8019e34:	20016018 	.word	0x20016018
 8019e38:	ebaa 0606 	sub.w	r6, sl, r6
 8019e3c:	2002      	movs	r0, #2
 8019e3e:	fb96 f6f0 	sdiv	r6, r6, r0
 8019e42:	e71c      	b.n	8019c7e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8019e44:	441e      	add	r6, r3
 8019e46:	ebaa 0606 	sub.w	r6, sl, r6
 8019e4a:	e718      	b.n	8019c7e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8019e4c:	8925      	ldrh	r5, [r4, #8]
 8019e4e:	1aed      	subs	r5, r5, r3
 8019e50:	eba5 050a 	sub.w	r5, r5, sl
 8019e54:	fa0f fb85 	sxth.w	fp, r5
 8019e58:	8965      	ldrh	r5, [r4, #10]
 8019e5a:	eba5 0509 	sub.w	r5, r5, r9
 8019e5e:	b22d      	sxth	r5, r5
 8019e60:	e72d      	b.n	8019cbe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8019e62:	8965      	ldrh	r5, [r4, #10]
 8019e64:	f04f 0b00 	mov.w	fp, #0
 8019e68:	1aed      	subs	r5, r5, r3
 8019e6a:	4633      	mov	r3, r6
 8019e6c:	463e      	mov	r6, r7
 8019e6e:	eba5 050a 	sub.w	r5, r5, sl
 8019e72:	461f      	mov	r7, r3
 8019e74:	b22d      	sxth	r5, r5
 8019e76:	e722      	b.n	8019cbe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8019e78:	2500      	movs	r5, #0
 8019e7a:	e720      	b.n	8019cbe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08019e7c <_ZN8touchgfx8TextAreaD0Ev>:
 8019e7c:	b510      	push	{r4, lr}
 8019e7e:	4604      	mov	r4, r0
 8019e80:	2148      	movs	r1, #72	; 0x48
 8019e82:	f010 fd80 	bl	802a986 <_ZdlPvj>
 8019e86:	4620      	mov	r0, r4
 8019e88:	bd10      	pop	{r4, pc}
	...

08019e8c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8019e8c:	b513      	push	{r0, r1, r4, lr}
 8019e8e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8019e92:	4604      	mov	r4, r0
 8019e94:	b1fb      	cbz	r3, 8019ed6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019e96:	4b16      	ldr	r3, [pc, #88]	; (8019ef0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8019e98:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019e9a:	881b      	ldrh	r3, [r3, #0]
 8019e9c:	428b      	cmp	r3, r1
 8019e9e:	d91a      	bls.n	8019ed6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019ea0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	dd16      	ble.n	8019ed6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019ea8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	dd12      	ble.n	8019ed6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019eb0:	4b10      	ldr	r3, [pc, #64]	; (8019ef4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8019eb2:	6818      	ldr	r0, [r3, #0]
 8019eb4:	f7eb f952 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8019eb8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8019ebc:	6822      	ldr	r2, [r4, #0]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	db06      	blt.n	8019ed0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8019ec2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	db02      	blt.n	8019ed0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8019eca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019ecc:	4298      	cmp	r0, r3
 8019ece:	d004      	beq.n	8019eda <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8019ed0:	6953      	ldr	r3, [r2, #20]
 8019ed2:	4620      	mov	r0, r4
 8019ed4:	4798      	blx	r3
 8019ed6:	b002      	add	sp, #8
 8019ed8:	bd10      	pop	{r4, pc}
 8019eda:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8019ede:	466b      	mov	r3, sp
 8019ee0:	6912      	ldr	r2, [r2, #16]
 8019ee2:	c903      	ldmia	r1, {r0, r1}
 8019ee4:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ee8:	4619      	mov	r1, r3
 8019eea:	4620      	mov	r0, r4
 8019eec:	4790      	blx	r2
 8019eee:	e7f2      	b.n	8019ed6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019ef0:	20016010 	.word	0x20016010
 8019ef4:	20016018 	.word	0x20016018

08019ef8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019ef8:	4b45      	ldr	r3, [pc, #276]	; (801a010 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8019efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019efe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019f00:	b08e      	sub	sp, #56	; 0x38
 8019f02:	881b      	ldrh	r3, [r3, #0]
 8019f04:	4604      	mov	r4, r0
 8019f06:	4293      	cmp	r3, r2
 8019f08:	d97e      	bls.n	801a008 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019f0a:	6808      	ldr	r0, [r1, #0]
 8019f0c:	ab05      	add	r3, sp, #20
 8019f0e:	6849      	ldr	r1, [r1, #4]
 8019f10:	4d40      	ldr	r5, [pc, #256]	; (801a014 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8019f12:	c303      	stmia	r3!, {r0, r1}
 8019f14:	4611      	mov	r1, r2
 8019f16:	6828      	ldr	r0, [r5, #0]
 8019f18:	f7eb f920 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8019f1c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	db11      	blt.n	8019f48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8019f24:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	db0d      	blt.n	8019f48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8019f2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019f2e:	4298      	cmp	r0, r3
 8019f30:	d10a      	bne.n	8019f48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8019f32:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8019f36:	ab09      	add	r3, sp, #36	; 0x24
 8019f38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019f3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019f40:	4619      	mov	r1, r3
 8019f42:	a805      	add	r0, sp, #20
 8019f44:	f7fe fcf4 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 8019f48:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	dd5b      	ble.n	801a008 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019f50:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	dd57      	ble.n	801a008 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019f58:	4f2f      	ldr	r7, [pc, #188]	; (801a018 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8019f5a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019f5c:	683b      	ldr	r3, [r7, #0]
 8019f5e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019f62:	4b2e      	ldr	r3, [pc, #184]	; (801a01c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019f6a:	2e00      	cmp	r6, #0
 8019f6c:	d04c      	beq.n	801a008 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019f6e:	6823      	ldr	r3, [r4, #0]
 8019f70:	4620      	mov	r0, r4
 8019f72:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8019f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f78:	4798      	blx	r3
 8019f7a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019f7c:	683b      	ldr	r3, [r7, #0]
 8019f7e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8019f82:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019f86:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8019f8a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8019f8e:	785b      	ldrb	r3, [r3, #1]
 8019f90:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8019f94:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019f98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019f9a:	9609      	str	r6, [sp, #36]	; 0x24
 8019f9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019fa0:	4b1f      	ldr	r3, [pc, #124]	; (801a020 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8019fa2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8019fac:	910b      	str	r1, [sp, #44]	; 0x2c
 8019fae:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8019fb2:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8019fb6:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8019fba:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8019fbe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019fc2:	b10a      	cbz	r2, 8019fc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8019fc4:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8019fc6:	b906      	cbnz	r6, 8019fca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8019fc8:	689e      	ldr	r6, [r3, #8]
 8019fca:	af07      	add	r7, sp, #28
 8019fcc:	4621      	mov	r1, r4
 8019fce:	4638      	mov	r0, r7
 8019fd0:	f002 ffa6 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fd4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019fd6:	6828      	ldr	r0, [r5, #0]
 8019fd8:	f7eb f8c0 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 8019fdc:	6823      	ldr	r3, [r4, #0]
 8019fde:	4605      	mov	r5, r0
 8019fe0:	4620      	mov	r0, r4
 8019fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019fe4:	4798      	blx	r3
 8019fe6:	6823      	ldr	r3, [r4, #0]
 8019fe8:	4680      	mov	r8, r0
 8019fea:	4620      	mov	r0, r4
 8019fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019ff0:	4798      	blx	r3
 8019ff2:	ab09      	add	r3, sp, #36	; 0x24
 8019ff4:	9501      	str	r5, [sp, #4]
 8019ff6:	9300      	str	r3, [sp, #0]
 8019ff8:	ab05      	add	r3, sp, #20
 8019ffa:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8019ffe:	4630      	mov	r0, r6
 801a000:	e897 0006 	ldmia.w	r7, {r1, r2}
 801a004:	f7eb f85c 	bl	80050c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a008:	b00e      	add	sp, #56	; 0x38
 801a00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a00e:	bf00      	nop
 801a010:	20016010 	.word	0x20016010
 801a014:	20016018 	.word	0x20016018
 801a018:	2001600c 	.word	0x2001600c
 801a01c:	20016014 	.word	0x20016014
 801a020:	20015fbc 	.word	0x20015fbc

0801a024 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 801a024:	b570      	push	{r4, r5, r6, lr}
 801a026:	6803      	ldr	r3, [r0, #0]
 801a028:	4604      	mov	r4, r0
 801a02a:	4615      	mov	r5, r2
 801a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a02e:	4798      	blx	r3
 801a030:	6823      	ldr	r3, [r4, #0]
 801a032:	4629      	mov	r1, r5
 801a034:	4620      	mov	r0, r4
 801a036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a03c:	4718      	bx	r3
	...

0801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801a040:	b538      	push	{r3, r4, r5, lr}
 801a042:	4b0e      	ldr	r3, [pc, #56]	; (801a07c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801a044:	4604      	mov	r4, r0
 801a046:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a048:	881b      	ldrh	r3, [r3, #0]
 801a04a:	429a      	cmp	r2, r3
 801a04c:	d214      	bcs.n	801a078 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801a04e:	6803      	ldr	r3, [r0, #0]
 801a050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a052:	4798      	blx	r3
 801a054:	6823      	ldr	r3, [r4, #0]
 801a056:	4605      	mov	r5, r0
 801a058:	4620      	mov	r0, r4
 801a05a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a05c:	4798      	blx	r3
 801a05e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a062:	b22d      	sxth	r5, r5
 801a064:	4601      	mov	r1, r0
 801a066:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801a06a:	bf06      	itte	eq
 801a06c:	4602      	moveq	r2, r0
 801a06e:	4629      	moveq	r1, r5
 801a070:	462a      	movne	r2, r5
 801a072:	4620      	mov	r0, r4
 801a074:	f7ff ffd6 	bl	801a024 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a078:	bd38      	pop	{r3, r4, r5, pc}
 801a07a:	bf00      	nop
 801a07c:	20016010 	.word	0x20016010

0801a080 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801a080:	b530      	push	{r4, r5, lr}
 801a082:	888b      	ldrh	r3, [r1, #4]
 801a084:	b085      	sub	sp, #20
 801a086:	4604      	mov	r4, r0
 801a088:	8583      	strh	r3, [r0, #44]	; 0x2c
 801a08a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801a08e:	b923      	cbnz	r3, 801a09a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801a090:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a094:	b90b      	cbnz	r3, 801a09a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801a096:	f7ff ffd3 	bl	801a040 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801a09a:	6823      	ldr	r3, [r4, #0]
 801a09c:	466d      	mov	r5, sp
 801a09e:	4621      	mov	r1, r4
 801a0a0:	343c      	adds	r4, #60	; 0x3c
 801a0a2:	4628      	mov	r0, r5
 801a0a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a0a8:	4798      	blx	r3
 801a0aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a0ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a0b2:	b005      	add	sp, #20
 801a0b4:	bd30      	pop	{r4, r5, pc}
	...

0801a0b8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>:
 801a0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0bc:	4b3c      	ldr	r3, [pc, #240]	; (801a1b0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf8>)
 801a0be:	4604      	mov	r4, r0
 801a0c0:	881a      	ldrh	r2, [r3, #0]
 801a0c2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a0c4:	429a      	cmp	r2, r3
 801a0c6:	d942      	bls.n	801a14e <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801a0c8:	6803      	ldr	r3, [r0, #0]
 801a0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0cc:	4798      	blx	r3
 801a0ce:	6823      	ldr	r3, [r4, #0]
 801a0d0:	4681      	mov	r9, r0
 801a0d2:	4620      	mov	r0, r4
 801a0d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a0d6:	4798      	blx	r3
 801a0d8:	6823      	ldr	r3, [r4, #0]
 801a0da:	4680      	mov	r8, r0
 801a0dc:	4620      	mov	r0, r4
 801a0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0e0:	4798      	blx	r3
 801a0e2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a0e6:	4605      	mov	r5, r0
 801a0e8:	b287      	uxth	r7, r0
 801a0ea:	fa0f f688 	sxth.w	r6, r8
 801a0ee:	b1cb      	cbz	r3, 801a124 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x6c>
 801a0f0:	2b02      	cmp	r3, #2
 801a0f2:	d12e      	bne.n	801a152 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x9a>
 801a0f4:	f1b9 0f02 	cmp.w	r9, #2
 801a0f8:	d017      	beq.n	801a12a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x72>
 801a0fa:	f1b9 0f01 	cmp.w	r9, #1
 801a0fe:	8920      	ldrh	r0, [r4, #8]
 801a100:	88a1      	ldrh	r1, [r4, #4]
 801a102:	bf06      	itte	eq
 801a104:	eba0 0008 	subeq.w	r0, r0, r8
 801a108:	2302      	moveq	r3, #2
 801a10a:	1840      	addne	r0, r0, r1
 801a10c:	6822      	ldr	r2, [r4, #0]
 801a10e:	bf0a      	itet	eq
 801a110:	fb90 f3f3 	sdiveq	r3, r0, r3
 801a114:	eba0 0108 	subne.w	r1, r0, r8
 801a118:	18c9      	addeq	r1, r1, r3
 801a11a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801a11c:	4620      	mov	r0, r4
 801a11e:	b209      	sxth	r1, r1
 801a120:	4790      	blx	r2
 801a122:	e002      	b.n	801a12a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x72>
 801a124:	f1b9 0f00 	cmp.w	r9, #0
 801a128:	d1e7      	bne.n	801a0fa <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x42>
 801a12a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a12e:	2b02      	cmp	r3, #2
 801a130:	d108      	bne.n	801a144 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x8c>
 801a132:	88e3      	ldrh	r3, [r4, #6]
 801a134:	4620      	mov	r0, r4
 801a136:	8961      	ldrh	r1, [r4, #10]
 801a138:	4419      	add	r1, r3
 801a13a:	6823      	ldr	r3, [r4, #0]
 801a13c:	1bc9      	subs	r1, r1, r7
 801a13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a140:	b209      	sxth	r1, r1
 801a142:	4798      	blx	r3
 801a144:	462a      	mov	r2, r5
 801a146:	4631      	mov	r1, r6
 801a148:	4620      	mov	r0, r4
 801a14a:	f7ff ff6b 	bl	801a024 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a152:	2b01      	cmp	r3, #1
 801a154:	d112      	bne.n	801a17c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc4>
 801a156:	f1b9 0f00 	cmp.w	r9, #0
 801a15a:	d114      	bne.n	801a186 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xce>
 801a15c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a160:	2b01      	cmp	r3, #1
 801a162:	d108      	bne.n	801a176 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xbe>
 801a164:	88a3      	ldrh	r3, [r4, #4]
 801a166:	4620      	mov	r0, r4
 801a168:	8921      	ldrh	r1, [r4, #8]
 801a16a:	4419      	add	r1, r3
 801a16c:	6823      	ldr	r3, [r4, #0]
 801a16e:	1bc9      	subs	r1, r1, r7
 801a170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a172:	b209      	sxth	r1, r1
 801a174:	4798      	blx	r3
 801a176:	4632      	mov	r2, r6
 801a178:	4629      	mov	r1, r5
 801a17a:	e7e5      	b.n	801a148 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x90>
 801a17c:	2b03      	cmp	r3, #3
 801a17e:	d102      	bne.n	801a186 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xce>
 801a180:	f1b9 0f02 	cmp.w	r9, #2
 801a184:	d0ea      	beq.n	801a15c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xa4>
 801a186:	f1b9 0f01 	cmp.w	r9, #1
 801a18a:	8963      	ldrh	r3, [r4, #10]
 801a18c:	88e1      	ldrh	r1, [r4, #6]
 801a18e:	bf06      	itte	eq
 801a190:	2002      	moveq	r0, #2
 801a192:	eba3 0308 	subeq.w	r3, r3, r8
 801a196:	185b      	addne	r3, r3, r1
 801a198:	6822      	ldr	r2, [r4, #0]
 801a19a:	bf0a      	itet	eq
 801a19c:	fb93 f0f0 	sdiveq	r0, r3, r0
 801a1a0:	eba3 0108 	subne.w	r1, r3, r8
 801a1a4:	1809      	addeq	r1, r1, r0
 801a1a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801a1a8:	4620      	mov	r0, r4
 801a1aa:	b209      	sxth	r1, r1
 801a1ac:	4790      	blx	r2
 801a1ae:	e7d5      	b.n	801a15c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xa4>
 801a1b0:	20016010 	.word	0x20016010

0801a1b4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	8083      	strh	r3, [r0, #4]
 801a1b8:	80c3      	strh	r3, [r0, #6]
 801a1ba:	8003      	strh	r3, [r0, #0]
 801a1bc:	8043      	strh	r3, [r0, #2]
 801a1be:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801a1c2:	2bff      	cmp	r3, #255	; 0xff
 801a1c4:	bf01      	itttt	eq
 801a1c6:	890b      	ldrheq	r3, [r1, #8]
 801a1c8:	8083      	strheq	r3, [r0, #4]
 801a1ca:	894b      	ldrheq	r3, [r1, #10]
 801a1cc:	80c3      	strheq	r3, [r0, #6]
 801a1ce:	4770      	bx	lr

0801a1d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	466b      	mov	r3, sp
 801a1d6:	6808      	ldr	r0, [r1, #0]
 801a1d8:	6849      	ldr	r1, [r1, #4]
 801a1da:	c303      	stmia	r3!, {r0, r1}
 801a1dc:	6823      	ldr	r3, [r4, #0]
 801a1de:	4669      	mov	r1, sp
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1e4:	4798      	blx	r3
 801a1e6:	4b08      	ldr	r3, [pc, #32]	; (801a208 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a1ee:	b10a      	cbz	r2, 801a1f4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a1f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a1f2:	b900      	cbnz	r0, 801a1f6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a1f4:	6898      	ldr	r0, [r3, #8]
 801a1f6:	6803      	ldr	r3, [r0, #0]
 801a1f8:	4669      	mov	r1, sp
 801a1fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a1fc:	6a1d      	ldr	r5, [r3, #32]
 801a1fe:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a202:	47a8      	blx	r5
 801a204:	b003      	add	sp, #12
 801a206:	bd30      	pop	{r4, r5, pc}
 801a208:	20015fbc 	.word	0x20015fbc

0801a20c <_ZN8touchgfx3BoxD1Ev>:
 801a20c:	4770      	bx	lr

0801a20e <_ZN8touchgfx3BoxD0Ev>:
 801a20e:	b510      	push	{r4, lr}
 801a210:	4604      	mov	r4, r0
 801a212:	212c      	movs	r1, #44	; 0x2c
 801a214:	f010 fbb7 	bl	802a986 <_ZdlPvj>
 801a218:	4620      	mov	r0, r4
 801a21a:	bd10      	pop	{r4, pc}

0801a21c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801a21c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801a220:	b12a      	cbz	r2, 801a22e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801a222:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801a226:	b112      	cbz	r2, 801a22e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801a228:	6803      	ldr	r3, [r0, #0]
 801a22a:	695b      	ldr	r3, [r3, #20]
 801a22c:	4718      	bx	r3
 801a22e:	4770      	bx	lr

0801a230 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 801a230:	4b30      	ldr	r3, [pc, #192]	; (801a2f4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801a232:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a236:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a238:	b08d      	sub	sp, #52	; 0x34
 801a23a:	881b      	ldrh	r3, [r3, #0]
 801a23c:	4604      	mov	r4, r0
 801a23e:	460f      	mov	r7, r1
 801a240:	4293      	cmp	r3, r2
 801a242:	d954      	bls.n	801a2ee <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801a244:	4b2c      	ldr	r3, [pc, #176]	; (801a2f8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801a246:	6819      	ldr	r1, [r3, #0]
 801a248:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 801a24c:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801a250:	4a2a      	ldr	r2, [pc, #168]	; (801a2fc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801a252:	6812      	ldr	r2, [r2, #0]
 801a254:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801a258:	2900      	cmp	r1, #0
 801a25a:	d048      	beq.n	801a2ee <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801a25c:	785a      	ldrb	r2, [r3, #1]
 801a25e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801a262:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801a266:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801a26a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801a26e:	4b24      	ldr	r3, [pc, #144]	; (801a300 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 801a270:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 801a274:	681a      	ldr	r2, [r3, #0]
 801a276:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 801a27a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801a27e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801a282:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801a284:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 801a288:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 801a28c:	9107      	str	r1, [sp, #28]
 801a28e:	f88d 8020 	strb.w	r8, [sp, #32]
 801a292:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801a296:	9609      	str	r6, [sp, #36]	; 0x24
 801a298:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801a29c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 801a2a0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 801a2a4:	b10b      	cbz	r3, 801a2aa <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801a2a6:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 801a2a8:	b905      	cbnz	r5, 801a2ac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801a2aa:	6895      	ldr	r5, [r2, #8]
 801a2ac:	ae05      	add	r6, sp, #20
 801a2ae:	4621      	mov	r1, r4
 801a2b0:	4630      	mov	r0, r6
 801a2b2:	f002 fe35 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a2b6:	4b13      	ldr	r3, [pc, #76]	; (801a304 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801a2b8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a2ba:	6818      	ldr	r0, [r3, #0]
 801a2bc:	f7ea ff4e 	bl	800515c <_ZNK8touchgfx5Texts7getTextEt>
 801a2c0:	6823      	ldr	r3, [r4, #0]
 801a2c2:	4680      	mov	r8, r0
 801a2c4:	4620      	mov	r0, r4
 801a2c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a2c8:	4798      	blx	r3
 801a2ca:	6823      	ldr	r3, [r4, #0]
 801a2cc:	4681      	mov	r9, r0
 801a2ce:	4620      	mov	r0, r4
 801a2d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a2d4:	4798      	blx	r3
 801a2d6:	ab07      	add	r3, sp, #28
 801a2d8:	f8cd 8004 	str.w	r8, [sp, #4]
 801a2dc:	9300      	str	r3, [sp, #0]
 801a2de:	463b      	mov	r3, r7
 801a2e0:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a2ea:	f7ea fee9 	bl	80050c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a2ee:	b00d      	add	sp, #52	; 0x34
 801a2f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a2f4:	20016010 	.word	0x20016010
 801a2f8:	2001600c 	.word	0x2001600c
 801a2fc:	20016014 	.word	0x20016014
 801a300:	20015fbc 	.word	0x20015fbc
 801a304:	20016018 	.word	0x20016018

0801a308 <_ZN8touchgfx5ImageD1Ev>:
 801a308:	4770      	bx	lr

0801a30a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a30a:	b570      	push	{r4, r5, r6, lr}
 801a30c:	880b      	ldrh	r3, [r1, #0]
 801a30e:	460d      	mov	r5, r1
 801a310:	4604      	mov	r4, r0
 801a312:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a314:	4608      	mov	r0, r1
 801a316:	f004 fd53 	bl	801edc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a31a:	4606      	mov	r6, r0
 801a31c:	4628      	mov	r0, r5
 801a31e:	f004 fd83 	bl	801ee28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a322:	6823      	ldr	r3, [r4, #0]
 801a324:	4605      	mov	r5, r0
 801a326:	4631      	mov	r1, r6
 801a328:	4620      	mov	r0, r4
 801a32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a32c:	4798      	blx	r3
 801a32e:	6823      	ldr	r3, [r4, #0]
 801a330:	4629      	mov	r1, r5
 801a332:	4620      	mov	r0, r4
 801a334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a33a:	4718      	bx	r3

0801a33c <_ZN8touchgfx5ImageD0Ev>:
 801a33c:	b510      	push	{r4, lr}
 801a33e:	4604      	mov	r4, r0
 801a340:	212c      	movs	r1, #44	; 0x2c
 801a342:	f010 fb20 	bl	802a986 <_ZdlPvj>
 801a346:	4620      	mov	r0, r4
 801a348:	bd10      	pop	{r4, pc}

0801a34a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a34a:	b510      	push	{r4, lr}
 801a34c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a350:	4604      	mov	r4, r0
 801a352:	2bff      	cmp	r3, #255	; 0xff
 801a354:	d006      	beq.n	801a364 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801a356:	2300      	movs	r3, #0
 801a358:	8003      	strh	r3, [r0, #0]
 801a35a:	8043      	strh	r3, [r0, #2]
 801a35c:	8083      	strh	r3, [r0, #4]
 801a35e:	80c3      	strh	r3, [r0, #6]
 801a360:	4620      	mov	r0, r4
 801a362:	bd10      	pop	{r4, pc}
 801a364:	3126      	adds	r1, #38	; 0x26
 801a366:	f004 fd93 	bl	801ee90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a36a:	e7f9      	b.n	801a360 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801a36c <_ZNK8touchgfx5Image17invalidateContentEv>:
 801a36c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 801a370:	b12a      	cbz	r2, 801a37e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801a372:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801a376:	b112      	cbz	r2, 801a37e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801a378:	6803      	ldr	r3, [r0, #0]
 801a37a:	695b      	ldr	r3, [r3, #20]
 801a37c:	4718      	bx	r3
 801a37e:	4770      	bx	lr

0801a380 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801a380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a384:	4604      	mov	r4, r0
 801a386:	b088      	sub	sp, #32
 801a388:	2500      	movs	r5, #0
 801a38a:	460f      	mov	r7, r1
 801a38c:	f854 3b26 	ldr.w	r3, [r4], #38
 801a390:	a904      	add	r1, sp, #16
 801a392:	4606      	mov	r6, r0
 801a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a396:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a39a:	4798      	blx	r3
 801a39c:	4620      	mov	r0, r4
 801a39e:	f004 fd0f 	bl	801edc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a3a2:	4680      	mov	r8, r0
 801a3a4:	4620      	mov	r0, r4
 801a3a6:	f004 fd3f 	bl	801ee28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a3aa:	9506      	str	r5, [sp, #24]
 801a3ac:	ad06      	add	r5, sp, #24
 801a3ae:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a3b2:	4639      	mov	r1, r7
 801a3b4:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a3b8:	4628      	mov	r0, r5
 801a3ba:	f7fe fab9 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 801a3be:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	dd19      	ble.n	801a3fa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a3c6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	dd15      	ble.n	801a3fa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a3ce:	4b0c      	ldr	r3, [pc, #48]	; (801a400 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a3d6:	b10a      	cbz	r2, 801a3dc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801a3d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a3da:	b900      	cbnz	r0, 801a3de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801a3dc:	6898      	ldr	r0, [r3, #8]
 801a3de:	2701      	movs	r7, #1
 801a3e0:	6801      	ldr	r1, [r0, #0]
 801a3e2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a3e6:	9702      	str	r7, [sp, #8]
 801a3e8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801a3ec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a3f0:	e9cd 5600 	strd	r5, r6, [sp]
 801a3f4:	688d      	ldr	r5, [r1, #8]
 801a3f6:	4621      	mov	r1, r4
 801a3f8:	47a8      	blx	r5
 801a3fa:	b008      	add	sp, #32
 801a3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a400:	20015fbc 	.word	0x20015fbc

0801a404 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a404:	b510      	push	{r4, lr}
 801a406:	6803      	ldr	r3, [r0, #0]
 801a408:	460c      	mov	r4, r1
 801a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a40c:	4798      	blx	r3
 801a40e:	1b03      	subs	r3, r0, r4
 801a410:	4258      	negs	r0, r3
 801a412:	4158      	adcs	r0, r3
 801a414:	bd10      	pop	{r4, pc}
	...

0801a418 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a418:	4b01      	ldr	r3, [pc, #4]	; (801a420 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a41a:	6019      	str	r1, [r3, #0]
 801a41c:	4770      	bx	lr
 801a41e:	bf00      	nop
 801a420:	20015fc4 	.word	0x20015fc4

0801a424 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a428:	4696      	mov	lr, r2
 801a42a:	b097      	sub	sp, #92	; 0x5c
 801a42c:	4605      	mov	r5, r0
 801a42e:	4614      	mov	r4, r2
 801a430:	460e      	mov	r6, r1
 801a432:	461f      	mov	r7, r3
 801a434:	f10d 0c1c 	add.w	ip, sp, #28
 801a438:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a43c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a440:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a444:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a44c:	f8de 3000 	ldr.w	r3, [lr]
 801a450:	f104 0e14 	add.w	lr, r4, #20
 801a454:	f8cc 3000 	str.w	r3, [ip]
 801a458:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a45c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a460:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a464:	f8de 3000 	ldr.w	r3, [lr]
 801a468:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a46c:	f8cc 3000 	str.w	r3, [ip]
 801a470:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a474:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a478:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a47c:	f8de 3000 	ldr.w	r3, [lr]
 801a480:	4631      	mov	r1, r6
 801a482:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a484:	4628      	mov	r0, r5
 801a486:	f8cc 3000 	str.w	r3, [ip]
 801a48a:	682b      	ldr	r3, [r5, #0]
 801a48c:	9201      	str	r2, [sp, #4]
 801a48e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a490:	f8cd 8008 	str.w	r8, [sp, #8]
 801a494:	9200      	str	r2, [sp, #0]
 801a496:	aa07      	add	r2, sp, #28
 801a498:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a49c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801a4a0:	463b      	mov	r3, r7
 801a4a2:	47d8      	blx	fp
 801a4a4:	46a6      	mov	lr, r4
 801a4a6:	f10d 0c1c 	add.w	ip, sp, #28
 801a4aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a4ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a4b2:	f8de 3000 	ldr.w	r3, [lr]
 801a4b6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a4ba:	343c      	adds	r4, #60	; 0x3c
 801a4bc:	f8cc 3000 	str.w	r3, [ip]
 801a4c0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a4c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a4c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a4cc:	f8de 3000 	ldr.w	r3, [lr]
 801a4d0:	f8cc 3000 	str.w	r3, [ip]
 801a4d4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a4d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a4da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a4de:	6823      	ldr	r3, [r4, #0]
 801a4e0:	4631      	mov	r1, r6
 801a4e2:	4628      	mov	r0, r5
 801a4e4:	f8cc 3000 	str.w	r3, [ip]
 801a4e8:	682b      	ldr	r3, [r5, #0]
 801a4ea:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a4ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a4f0:	f8cd 8008 	str.w	r8, [sp, #8]
 801a4f4:	9201      	str	r2, [sp, #4]
 801a4f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a4f8:	9200      	str	r2, [sp, #0]
 801a4fa:	aa07      	add	r2, sp, #28
 801a4fc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801a4fe:	463b      	mov	r3, r7
 801a500:	47a0      	blx	r4
 801a502:	b017      	add	sp, #92	; 0x5c
 801a504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a508 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a50c:	b08d      	sub	sp, #52	; 0x34
 801a50e:	4688      	mov	r8, r1
 801a510:	f8d3 c000 	ldr.w	ip, [r3]
 801a514:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a516:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a51a:	680f      	ldr	r7, [r1, #0]
 801a51c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a520:	eba7 070c 	sub.w	r7, r7, ip
 801a524:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a528:	edd3 6a07 	vldr	s13, [r3, #28]
 801a52c:	42bc      	cmp	r4, r7
 801a52e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a530:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a534:	bfa8      	it	ge
 801a536:	463c      	movge	r4, r7
 801a538:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a53c:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a540:	ee07 4a90 	vmov	s15, r4
 801a544:	eb09 0e0c 	add.w	lr, r9, ip
 801a548:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a54c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a550:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a554:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a558:	4571      	cmp	r1, lr
 801a55a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a55e:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a562:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a566:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a56a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a56e:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a572:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a576:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a57a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a57e:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a582:	f340 808c 	ble.w	801a69e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a586:	eba1 060e 	sub.w	r6, r1, lr
 801a58a:	fb96 f5f4 	sdiv	r5, r6, r4
 801a58e:	ee07 5a10 	vmov	s14, r5
 801a592:	2d00      	cmp	r5, #0
 801a594:	fb04 6615 	mls	r6, r4, r5, r6
 801a598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a59c:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a5a0:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a5a4:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a5a8:	dd12      	ble.n	801a5d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a5aa:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a5ae:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a5b2:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a5b6:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5be:	bf14      	ite	ne
 801a5c0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a5c4:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a5c8:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a5cc:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a5d0:	fb05 f204 	mul.w	r2, r5, r4
 801a5d4:	1abf      	subs	r7, r7, r2
 801a5d6:	4494      	add	ip, r2
 801a5d8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a5dc:	4411      	add	r1, r2
 801a5de:	eb09 020c 	add.w	r2, r9, ip
 801a5e2:	b209      	sxth	r1, r1
 801a5e4:	443a      	add	r2, r7
 801a5e6:	428a      	cmp	r2, r1
 801a5e8:	bfc4      	itt	gt
 801a5ea:	eba1 0209 	subgt.w	r2, r1, r9
 801a5ee:	eba2 070c 	subgt.w	r7, r2, ip
 801a5f2:	2f00      	cmp	r7, #0
 801a5f4:	dd50      	ble.n	801a698 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a5f6:	fb97 f1f4 	sdiv	r1, r7, r4
 801a5fa:	fb04 7211 	mls	r2, r4, r1, r7
 801a5fe:	b90a      	cbnz	r2, 801a604 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a600:	3901      	subs	r1, #1
 801a602:	4622      	mov	r2, r4
 801a604:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a608:	6840      	ldr	r0, [r0, #4]
 801a60a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a60e:	44b6      	add	lr, r6
 801a610:	f8d0 a000 	ldr.w	sl, [r0]
 801a614:	2900      	cmp	r1, #0
 801a616:	bfcc      	ite	gt
 801a618:	46a1      	movgt	r9, r4
 801a61a:	4691      	movle	r9, r2
 801a61c:	900b      	str	r0, [sp, #44]	; 0x2c
 801a61e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a620:	fb04 e505 	mla	r5, r4, r5, lr
 801a624:	eef0 6a42 	vmov.f32	s13, s4
 801a628:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a62c:	9008      	str	r0, [sp, #32]
 801a62e:	eeb0 7a61 	vmov.f32	s14, s3
 801a632:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a634:	695b      	ldr	r3, [r3, #20]
 801a636:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a63a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a63e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a642:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a644:	445b      	add	r3, fp
 801a646:	9307      	str	r3, [sp, #28]
 801a648:	ee16 3a90 	vmov	r3, s13
 801a64c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a650:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a654:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a658:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a65c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a660:	ee17 7a90 	vmov	r7, s15
 801a664:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a668:	fb97 f7f4 	sdiv	r7, r7, r4
 801a66c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a670:	ee17 ca90 	vmov	ip, s15
 801a674:	fb9c fcf4 	sdiv	ip, ip, r4
 801a678:	fb0c 3306 	mla	r3, ip, r6, r3
 801a67c:	9302      	str	r3, [sp, #8]
 801a67e:	ee17 3a10 	vmov	r3, s14
 801a682:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a686:	fb07 3706 	mla	r7, r7, r6, r3
 801a68a:	eba9 0306 	sub.w	r3, r9, r6
 801a68e:	e9cd 4700 	strd	r4, r7, [sp]
 801a692:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a696:	47a0      	blx	r4
 801a698:	b00d      	add	sp, #52	; 0x34
 801a69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a69e:	2500      	movs	r5, #0
 801a6a0:	462e      	mov	r6, r5
 801a6a2:	e799      	b.n	801a5d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a6a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6a8:	b0db      	sub	sp, #364	; 0x16c
 801a6aa:	461d      	mov	r5, r3
 801a6ac:	4614      	mov	r4, r2
 801a6ae:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a6b2:	910f      	str	r1, [sp, #60]	; 0x3c
 801a6b4:	4629      	mov	r1, r5
 801a6b6:	930a      	str	r3, [sp, #40]	; 0x28
 801a6b8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a6bc:	9009      	str	r0, [sp, #36]	; 0x24
 801a6be:	930b      	str	r3, [sp, #44]	; 0x2c
 801a6c0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a6c4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a6c8:	9310      	str	r3, [sp, #64]	; 0x40
 801a6ca:	6803      	ldr	r3, [r0, #0]
 801a6cc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801a6ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a6d2:	47b8      	blx	r7
 801a6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6d6:	6058      	str	r0, [r3, #4]
 801a6d8:	2800      	cmp	r0, #0
 801a6da:	f000 83a1 	beq.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6de:	682b      	ldr	r3, [r5, #0]
 801a6e0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a6e4:	ed94 7a02 	vldr	s14, [r4, #8]
 801a6e8:	9314      	str	r3, [sp, #80]	; 0x50
 801a6ea:	686b      	ldr	r3, [r5, #4]
 801a6ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a6f0:	9315      	str	r3, [sp, #84]	; 0x54
 801a6f2:	4bc1      	ldr	r3, [pc, #772]	; (801a9f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a6f4:	7819      	ldrb	r1, [r3, #0]
 801a6f6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a6fa:	2900      	cmp	r1, #0
 801a6fc:	bf16      	itet	ne
 801a6fe:	4619      	movne	r1, r3
 801a700:	4611      	moveq	r1, r2
 801a702:	4613      	movne	r3, r2
 801a704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a708:	9116      	str	r1, [sp, #88]	; 0x58
 801a70a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a70e:	f240 8387 	bls.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a712:	ed94 7a07 	vldr	s14, [r4, #28]
 801a716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a71e:	f240 837f 	bls.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a722:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a72e:	f240 8377 	bls.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a732:	6822      	ldr	r2, [r4, #0]
 801a734:	4bb1      	ldr	r3, [pc, #708]	; (801a9fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a736:	429a      	cmp	r2, r3
 801a738:	f2c0 8372 	blt.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a73c:	49b0      	ldr	r1, [pc, #704]	; (801aa00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a73e:	6963      	ldr	r3, [r4, #20]
 801a740:	428a      	cmp	r2, r1
 801a742:	f300 836d 	bgt.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a746:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a74a:	48ae      	ldr	r0, [pc, #696]	; (801aa04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a74c:	33ff      	adds	r3, #255	; 0xff
 801a74e:	4283      	cmp	r3, r0
 801a750:	f200 8366 	bhi.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a756:	4dac      	ldr	r5, [pc, #688]	; (801aa08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a758:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a75c:	33ff      	adds	r3, #255	; 0xff
 801a75e:	42ab      	cmp	r3, r5
 801a760:	f200 835e 	bhi.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a764:	6862      	ldr	r2, [r4, #4]
 801a766:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a76a:	33ff      	adds	r3, #255	; 0xff
 801a76c:	4283      	cmp	r3, r0
 801a76e:	f200 8357 	bhi.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a772:	69a1      	ldr	r1, [r4, #24]
 801a774:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a778:	33ff      	adds	r3, #255	; 0xff
 801a77a:	4283      	cmp	r3, r0
 801a77c:	f200 8350 	bhi.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a780:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a782:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a786:	30ff      	adds	r0, #255	; 0xff
 801a788:	42a8      	cmp	r0, r5
 801a78a:	f200 8349 	bhi.w	801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a78e:	428a      	cmp	r2, r1
 801a790:	f280 8110 	bge.w	801a9b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a794:	429a      	cmp	r2, r3
 801a796:	f300 8119 	bgt.w	801a9cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a79a:	4299      	cmp	r1, r3
 801a79c:	f280 811d 	bge.w	801a9da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a7a0:	2502      	movs	r5, #2
 801a7a2:	2701      	movs	r7, #1
 801a7a4:	46a9      	mov	r9, r5
 801a7a6:	46b8      	mov	r8, r7
 801a7a8:	f04f 0a00 	mov.w	sl, #0
 801a7ac:	4621      	mov	r1, r4
 801a7ae:	a849      	add	r0, sp, #292	; 0x124
 801a7b0:	f003 fcbe 	bl	801e130 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a7b4:	4622      	mov	r2, r4
 801a7b6:	4653      	mov	r3, sl
 801a7b8:	a949      	add	r1, sp, #292	; 0x124
 801a7ba:	f8cd 9000 	str.w	r9, [sp]
 801a7be:	a819      	add	r0, sp, #100	; 0x64
 801a7c0:	f003 fde6 	bl	801e390 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a7c4:	4622      	mov	r2, r4
 801a7c6:	4653      	mov	r3, sl
 801a7c8:	a949      	add	r1, sp, #292	; 0x124
 801a7ca:	f8cd 8000 	str.w	r8, [sp]
 801a7ce:	a829      	add	r0, sp, #164	; 0xa4
 801a7d0:	f003 fdde 	bl	801e390 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a7d4:	4643      	mov	r3, r8
 801a7d6:	4622      	mov	r2, r4
 801a7d8:	a949      	add	r1, sp, #292	; 0x124
 801a7da:	f8cd 9000 	str.w	r9, [sp]
 801a7de:	a839      	add	r0, sp, #228	; 0xe4
 801a7e0:	f003 fdd6 	bl	801e390 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a7e4:	42af      	cmp	r7, r5
 801a7e6:	af12      	add	r7, sp, #72	; 0x48
 801a7e8:	bfb7      	itett	lt
 801a7ea:	2300      	movlt	r3, #0
 801a7ec:	2301      	movge	r3, #1
 801a7ee:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a7f0:	ac19      	addlt	r4, sp, #100	; 0x64
 801a7f2:	bfb1      	iteee	lt
 801a7f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a7f6:	ad19      	addge	r5, sp, #100	; 0x64
 801a7f8:	930e      	strge	r3, [sp, #56]	; 0x38
 801a7fa:	ac29      	addge	r4, sp, #164	; 0xa4
 801a7fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a7fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a802:	e887 0003 	stmia.w	r7, {r0, r1}
 801a806:	b928      	cbnz	r0, 801a814 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a808:	4b80      	ldr	r3, [pc, #512]	; (801aa0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a80a:	6818      	ldr	r0, [r3, #0]
 801a80c:	6803      	ldr	r3, [r0, #0]
 801a80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a810:	4798      	blx	r3
 801a812:	6038      	str	r0, [r7, #0]
 801a814:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a816:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a81a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a81e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a820:	930c      	str	r3, [sp, #48]	; 0x30
 801a822:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a824:	6963      	ldr	r3, [r4, #20]
 801a826:	440b      	add	r3, r1
 801a828:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a82c:	4408      	add	r0, r1
 801a82e:	b200      	sxth	r0, r0
 801a830:	4283      	cmp	r3, r0
 801a832:	900d      	str	r0, [sp, #52]	; 0x34
 801a834:	f280 80dd 	bge.w	801a9f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a838:	428b      	cmp	r3, r1
 801a83a:	da08      	bge.n	801a84e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a83c:	2a00      	cmp	r2, #0
 801a83e:	dd06      	ble.n	801a84e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a840:	1acb      	subs	r3, r1, r3
 801a842:	429a      	cmp	r2, r3
 801a844:	f2c0 80e4 	blt.w	801aa10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a848:	2b00      	cmp	r3, #0
 801a84a:	f300 80e2 	bgt.w	801aa12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a84e:	6967      	ldr	r7, [r4, #20]
 801a850:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a856:	443b      	add	r3, r7
 801a858:	461f      	mov	r7, r3
 801a85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a85c:	1bdf      	subs	r7, r3, r7
 801a85e:	4297      	cmp	r7, r2
 801a860:	bfa8      	it	ge
 801a862:	4617      	movge	r7, r2
 801a864:	2f00      	cmp	r7, #0
 801a866:	f340 8166 	ble.w	801ab36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a86a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a86c:	6829      	ldr	r1, [r5, #0]
 801a86e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a872:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a876:	4411      	add	r1, r2
 801a878:	6820      	ldr	r0, [r4, #0]
 801a87a:	4299      	cmp	r1, r3
 801a87c:	dd1a      	ble.n	801a8b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a87e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a882:	4402      	add	r2, r0
 801a884:	440b      	add	r3, r1
 801a886:	b21b      	sxth	r3, r3
 801a888:	429a      	cmp	r2, r3
 801a88a:	dc13      	bgt.n	801a8b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a88c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a88e:	a912      	add	r1, sp, #72	; 0x48
 801a890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a892:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	9206      	str	r2, [sp, #24]
 801a898:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a89a:	9500      	str	r5, [sp, #0]
 801a89c:	9205      	str	r2, [sp, #20]
 801a89e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8a0:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a8a4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a8a6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a8aa:	aa49      	add	r2, sp, #292	; 0x124
 801a8ac:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a8b0:	4623      	mov	r3, r4
 801a8b2:	47c8      	blx	r9
 801a8b4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a8b8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a8bc:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a8c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a8c4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a8c8:	68a1      	ldr	r1, [r4, #8]
 801a8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a8ce:	ed94 6a08 	vldr	s12, [r4, #32]
 801a8d2:	edd4 6a07 	vldr	s13, [r4, #28]
 801a8d6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a8da:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a8de:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a8e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a8e6:	edc4 6a07 	vstr	s13, [r4, #28]
 801a8ea:	441a      	add	r2, r3
 801a8ec:	6963      	ldr	r3, [r4, #20]
 801a8ee:	3301      	adds	r3, #1
 801a8f0:	6022      	str	r2, [r4, #0]
 801a8f2:	6163      	str	r3, [r4, #20]
 801a8f4:	69a3      	ldr	r3, [r4, #24]
 801a8f6:	3b01      	subs	r3, #1
 801a8f8:	61a3      	str	r3, [r4, #24]
 801a8fa:	6923      	ldr	r3, [r4, #16]
 801a8fc:	440b      	add	r3, r1
 801a8fe:	68e1      	ldr	r1, [r4, #12]
 801a900:	428b      	cmp	r3, r1
 801a902:	6123      	str	r3, [r4, #16]
 801a904:	db15      	blt.n	801a932 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a906:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a90a:	3201      	adds	r2, #1
 801a90c:	1a5b      	subs	r3, r3, r1
 801a90e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a912:	6022      	str	r2, [r4, #0]
 801a914:	6123      	str	r3, [r4, #16]
 801a916:	edc4 6a07 	vstr	s13, [r4, #28]
 801a91a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a91e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a922:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a926:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a92a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a92e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a932:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a936:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a93a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a93e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a942:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a946:	68a9      	ldr	r1, [r5, #8]
 801a948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a94c:	ed95 6a08 	vldr	s12, [r5, #32]
 801a950:	edd5 6a07 	vldr	s13, [r5, #28]
 801a954:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a958:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a95c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a960:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a964:	edc5 6a07 	vstr	s13, [r5, #28]
 801a968:	441a      	add	r2, r3
 801a96a:	696b      	ldr	r3, [r5, #20]
 801a96c:	3301      	adds	r3, #1
 801a96e:	602a      	str	r2, [r5, #0]
 801a970:	616b      	str	r3, [r5, #20]
 801a972:	69ab      	ldr	r3, [r5, #24]
 801a974:	3b01      	subs	r3, #1
 801a976:	61ab      	str	r3, [r5, #24]
 801a978:	692b      	ldr	r3, [r5, #16]
 801a97a:	440b      	add	r3, r1
 801a97c:	68e9      	ldr	r1, [r5, #12]
 801a97e:	428b      	cmp	r3, r1
 801a980:	612b      	str	r3, [r5, #16]
 801a982:	db15      	blt.n	801a9b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a984:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a988:	3201      	adds	r2, #1
 801a98a:	1a5b      	subs	r3, r3, r1
 801a98c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a990:	602a      	str	r2, [r5, #0]
 801a992:	612b      	str	r3, [r5, #16]
 801a994:	edc5 6a07 	vstr	s13, [r5, #28]
 801a998:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a99c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a9a0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a9a4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a9a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a9ac:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a9b0:	3f01      	subs	r7, #1
 801a9b2:	e757      	b.n	801a864 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a9b4:	4299      	cmp	r1, r3
 801a9b6:	dc13      	bgt.n	801a9e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a9b8:	429a      	cmp	r2, r3
 801a9ba:	da14      	bge.n	801a9e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a9bc:	2502      	movs	r5, #2
 801a9be:	2703      	movs	r7, #3
 801a9c0:	f04f 0800 	mov.w	r8, #0
 801a9c4:	46a9      	mov	r9, r5
 801a9c6:	f04f 0a01 	mov.w	sl, #1
 801a9ca:	e6ef      	b.n	801a7ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a9cc:	2501      	movs	r5, #1
 801a9ce:	2700      	movs	r7, #0
 801a9d0:	46a9      	mov	r9, r5
 801a9d2:	46b8      	mov	r8, r7
 801a9d4:	f04f 0a02 	mov.w	sl, #2
 801a9d8:	e6e8      	b.n	801a7ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a9da:	2501      	movs	r5, #1
 801a9dc:	2702      	movs	r7, #2
 801a9de:	e6e1      	b.n	801a7a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a9e0:	2500      	movs	r5, #0
 801a9e2:	2701      	movs	r7, #1
 801a9e4:	e7f4      	b.n	801a9d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a9e6:	2702      	movs	r7, #2
 801a9e8:	2503      	movs	r5, #3
 801a9ea:	f04f 0900 	mov.w	r9, #0
 801a9ee:	46b8      	mov	r8, r7
 801a9f0:	e7e9      	b.n	801a9c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a9f2:	4613      	mov	r3, r2
 801a9f4:	e728      	b.n	801a848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a9f6:	bf00      	nop
 801a9f8:	20015fb4 	.word	0x20015fb4
 801a9fc:	fffd8f01 	.word	0xfffd8f01
 801aa00:	00027100 	.word	0x00027100
 801aa04:	0004e1ff 	.word	0x0004e1ff
 801aa08:	0004e1fe 	.word	0x0004e1fe
 801aa0c:	20015fbc 	.word	0x20015fbc
 801aa10:	4613      	mov	r3, r2
 801aa12:	992b      	ldr	r1, [sp, #172]	; 0xac
 801aa14:	469e      	mov	lr, r3
 801aa16:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801aa18:	469c      	mov	ip, r3
 801aa1a:	9111      	str	r1, [sp, #68]	; 0x44
 801aa1c:	f04f 0900 	mov.w	r9, #0
 801aa20:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801aa24:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801aa28:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801aa2c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801aa30:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801aa34:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801aa38:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801aa3c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801aa40:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801aa44:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801aa48:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801aa4c:	f1bc 0f00 	cmp.w	ip, #0
 801aa50:	d147      	bne.n	801aae2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801aa52:	eb03 0c07 	add.w	ip, r3, r7
 801aa56:	1ad7      	subs	r7, r2, r3
 801aa58:	f1b9 0f00 	cmp.w	r9, #0
 801aa5c:	d009      	beq.n	801aa72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801aa5e:	9029      	str	r0, [sp, #164]	; 0xa4
 801aa60:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801aa64:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801aa68:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801aa6c:	912d      	str	r1, [sp, #180]	; 0xb4
 801aa6e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801aa72:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801aa74:	f04f 0800 	mov.w	r8, #0
 801aa78:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801aa7c:	9111      	str	r1, [sp, #68]	; 0x44
 801aa7e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801aa82:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801aa86:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801aa8a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801aa8e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801aa92:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801aa96:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801aa9a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801aa9e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801aaa2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801aaa6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801aaaa:	f1be 0f00 	cmp.w	lr, #0
 801aaae:	d031      	beq.n	801ab14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801aab0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801aab2:	4450      	add	r0, sl
 801aab4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801aab8:	4431      	add	r1, r6
 801aaba:	ee37 7a04 	vadd.f32	s14, s14, s8
 801aabe:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801aac2:	4549      	cmp	r1, r9
 801aac4:	db08      	blt.n	801aad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801aac6:	ee77 7a85 	vadd.f32	s15, s15, s10
 801aaca:	3001      	adds	r0, #1
 801aacc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801aad0:	eba1 0109 	sub.w	r1, r1, r9
 801aad4:	ee37 7a06 	vadd.f32	s14, s14, s12
 801aad8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801aadc:	f04f 0801 	mov.w	r8, #1
 801aae0:	e7e3      	b.n	801aaaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801aae2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801aae4:	4450      	add	r0, sl
 801aae6:	ee37 7a24 	vadd.f32	s14, s14, s9
 801aaea:	4431      	add	r1, r6
 801aaec:	ee77 7a84 	vadd.f32	s15, s15, s8
 801aaf0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801aaf4:	4541      	cmp	r1, r8
 801aaf6:	db08      	blt.n	801ab0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801aaf8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801aafc:	3001      	adds	r0, #1
 801aafe:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ab02:	eba1 0108 	sub.w	r1, r1, r8
 801ab06:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ab0a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ab0e:	f04f 0901 	mov.w	r9, #1
 801ab12:	e79b      	b.n	801aa4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801ab14:	449c      	add	ip, r3
 801ab16:	1aff      	subs	r7, r7, r3
 801ab18:	f1b8 0f00 	cmp.w	r8, #0
 801ab1c:	d009      	beq.n	801ab32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801ab1e:	9019      	str	r0, [sp, #100]	; 0x64
 801ab20:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ab24:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ab28:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801ab2c:	911d      	str	r1, [sp, #116]	; 0x74
 801ab2e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801ab32:	1ad2      	subs	r2, r2, r3
 801ab34:	e68b      	b.n	801a84e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ab36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab38:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	f000 80d1 	beq.w	801ace2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801ab40:	ad19      	add	r5, sp, #100	; 0x64
 801ab42:	ac39      	add	r4, sp, #228	; 0xe4
 801ab44:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ab46:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801ab4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ab4e:	930c      	str	r3, [sp, #48]	; 0x30
 801ab50:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ab52:	6963      	ldr	r3, [r4, #20]
 801ab54:	440b      	add	r3, r1
 801ab56:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801ab5a:	4408      	add	r0, r1
 801ab5c:	b200      	sxth	r0, r0
 801ab5e:	4283      	cmp	r3, r0
 801ab60:	900d      	str	r0, [sp, #52]	; 0x34
 801ab62:	f280 80c1 	bge.w	801ace8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801ab66:	428b      	cmp	r3, r1
 801ab68:	da08      	bge.n	801ab7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ab6a:	2a00      	cmp	r2, #0
 801ab6c:	dd06      	ble.n	801ab7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ab6e:	1acb      	subs	r3, r1, r3
 801ab70:	429a      	cmp	r2, r3
 801ab72:	f2c0 80bb 	blt.w	801acec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	f300 80b9 	bgt.w	801acee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801ab7c:	6967      	ldr	r7, [r4, #20]
 801ab7e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801ab82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab84:	443b      	add	r3, r7
 801ab86:	461f      	mov	r7, r3
 801ab88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab8a:	1bdf      	subs	r7, r3, r7
 801ab8c:	4297      	cmp	r7, r2
 801ab8e:	bfa8      	it	ge
 801ab90:	4617      	movge	r7, r2
 801ab92:	2f00      	cmp	r7, #0
 801ab94:	f340 813c 	ble.w	801ae10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801ab98:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ab9a:	6829      	ldr	r1, [r5, #0]
 801ab9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aba0:	f9bb 3000 	ldrsh.w	r3, [fp]
 801aba4:	4411      	add	r1, r2
 801aba6:	6820      	ldr	r0, [r4, #0]
 801aba8:	4299      	cmp	r1, r3
 801abaa:	dd1a      	ble.n	801abe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801abac:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801abb0:	4402      	add	r2, r0
 801abb2:	440b      	add	r3, r1
 801abb4:	b21b      	sxth	r3, r3
 801abb6:	429a      	cmp	r2, r3
 801abb8:	dc13      	bgt.n	801abe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801abba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801abbc:	a912      	add	r1, sp, #72	; 0x48
 801abbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	9206      	str	r2, [sp, #24]
 801abc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801abc8:	9500      	str	r5, [sp, #0]
 801abca:	9205      	str	r2, [sp, #20]
 801abcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801abce:	e9cd b203 	strd	fp, r2, [sp, #12]
 801abd2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801abd4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801abd8:	aa49      	add	r2, sp, #292	; 0x124
 801abda:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801abde:	4623      	mov	r3, r4
 801abe0:	47c8      	blx	r9
 801abe2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801abe6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801abea:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801abee:	ee37 7a27 	vadd.f32	s14, s14, s15
 801abf2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801abf6:	68a1      	ldr	r1, [r4, #8]
 801abf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801abfc:	ed94 6a08 	vldr	s12, [r4, #32]
 801ac00:	edd4 6a07 	vldr	s13, [r4, #28]
 801ac04:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ac08:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ac0c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ac10:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ac14:	edc4 6a07 	vstr	s13, [r4, #28]
 801ac18:	441a      	add	r2, r3
 801ac1a:	6963      	ldr	r3, [r4, #20]
 801ac1c:	3301      	adds	r3, #1
 801ac1e:	6022      	str	r2, [r4, #0]
 801ac20:	6163      	str	r3, [r4, #20]
 801ac22:	69a3      	ldr	r3, [r4, #24]
 801ac24:	3b01      	subs	r3, #1
 801ac26:	61a3      	str	r3, [r4, #24]
 801ac28:	6923      	ldr	r3, [r4, #16]
 801ac2a:	440b      	add	r3, r1
 801ac2c:	68e1      	ldr	r1, [r4, #12]
 801ac2e:	428b      	cmp	r3, r1
 801ac30:	6123      	str	r3, [r4, #16]
 801ac32:	db15      	blt.n	801ac60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801ac34:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801ac38:	3201      	adds	r2, #1
 801ac3a:	1a5b      	subs	r3, r3, r1
 801ac3c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ac40:	6022      	str	r2, [r4, #0]
 801ac42:	6123      	str	r3, [r4, #16]
 801ac44:	edc4 6a07 	vstr	s13, [r4, #28]
 801ac48:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801ac4c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ac50:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ac54:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801ac58:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac5c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ac60:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801ac64:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801ac68:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801ac6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ac70:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801ac74:	68a9      	ldr	r1, [r5, #8]
 801ac76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ac7a:	ed95 6a08 	vldr	s12, [r5, #32]
 801ac7e:	edd5 6a07 	vldr	s13, [r5, #28]
 801ac82:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ac86:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ac8a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ac8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ac92:	edc5 6a07 	vstr	s13, [r5, #28]
 801ac96:	441a      	add	r2, r3
 801ac98:	696b      	ldr	r3, [r5, #20]
 801ac9a:	3301      	adds	r3, #1
 801ac9c:	602a      	str	r2, [r5, #0]
 801ac9e:	616b      	str	r3, [r5, #20]
 801aca0:	69ab      	ldr	r3, [r5, #24]
 801aca2:	3b01      	subs	r3, #1
 801aca4:	61ab      	str	r3, [r5, #24]
 801aca6:	692b      	ldr	r3, [r5, #16]
 801aca8:	440b      	add	r3, r1
 801acaa:	68e9      	ldr	r1, [r5, #12]
 801acac:	428b      	cmp	r3, r1
 801acae:	612b      	str	r3, [r5, #16]
 801acb0:	db15      	blt.n	801acde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801acb2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801acb6:	3201      	adds	r2, #1
 801acb8:	1a5b      	subs	r3, r3, r1
 801acba:	ee76 6a26 	vadd.f32	s13, s12, s13
 801acbe:	602a      	str	r2, [r5, #0]
 801acc0:	612b      	str	r3, [r5, #16]
 801acc2:	edc5 6a07 	vstr	s13, [r5, #28]
 801acc6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801acca:	ee36 7a87 	vadd.f32	s14, s13, s14
 801acce:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801acd2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801acd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801acda:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801acde:	3f01      	subs	r7, #1
 801ace0:	e757      	b.n	801ab92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801ace2:	ad39      	add	r5, sp, #228	; 0xe4
 801ace4:	ac19      	add	r4, sp, #100	; 0x64
 801ace6:	e72d      	b.n	801ab44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801ace8:	4613      	mov	r3, r2
 801acea:	e744      	b.n	801ab76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801acec:	4613      	mov	r3, r2
 801acee:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801acf0:	469e      	mov	lr, r3
 801acf2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801acf6:	461f      	mov	r7, r3
 801acf8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801acfc:	f04f 0900 	mov.w	r9, #0
 801ad00:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801ad04:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801ad08:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801ad0c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801ad10:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801ad14:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801ad16:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801ad1a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801ad1e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801ad22:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801ad26:	960e      	str	r6, [sp, #56]	; 0x38
 801ad28:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801ad2c:	2f00      	cmp	r7, #0
 801ad2e:	d146      	bne.n	801adbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801ad30:	449c      	add	ip, r3
 801ad32:	1ad7      	subs	r7, r2, r3
 801ad34:	f1b9 0f00 	cmp.w	r9, #0
 801ad38:	d009      	beq.n	801ad4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801ad3a:	9039      	str	r0, [sp, #228]	; 0xe4
 801ad3c:	913d      	str	r1, [sp, #244]	; 0xf4
 801ad3e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801ad42:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801ad46:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801ad4a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801ad4e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ad50:	f04f 0800 	mov.w	r8, #0
 801ad54:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ad58:	910e      	str	r1, [sp, #56]	; 0x38
 801ad5a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ad5e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ad62:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ad66:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ad6a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ad6e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ad72:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ad76:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ad7a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ad7e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ad82:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ad86:	f1be 0f00 	cmp.w	lr, #0
 801ad8a:	d030      	beq.n	801adee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801ad8c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ad8e:	4450      	add	r0, sl
 801ad90:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ad94:	4431      	add	r1, r6
 801ad96:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ad9a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ad9e:	4549      	cmp	r1, r9
 801ada0:	db08      	blt.n	801adb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801ada2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ada6:	3001      	adds	r0, #1
 801ada8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801adac:	eba1 0109 	sub.w	r1, r1, r9
 801adb0:	ee37 7a06 	vadd.f32	s14, s14, s12
 801adb4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801adb8:	f04f 0801 	mov.w	r8, #1
 801adbc:	e7e3      	b.n	801ad86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801adbe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801adc0:	4450      	add	r0, sl
 801adc2:	ee37 7a24 	vadd.f32	s14, s14, s9
 801adc6:	4431      	add	r1, r6
 801adc8:	ee77 7a84 	vadd.f32	s15, s15, s8
 801adcc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801add0:	4541      	cmp	r1, r8
 801add2:	db08      	blt.n	801ade6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801add4:	ee76 6a85 	vadd.f32	s13, s13, s10
 801add8:	3001      	adds	r0, #1
 801adda:	ee37 7a25 	vadd.f32	s14, s14, s11
 801adde:	eba1 0108 	sub.w	r1, r1, r8
 801ade2:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ade6:	3f01      	subs	r7, #1
 801ade8:	f04f 0901 	mov.w	r9, #1
 801adec:	e79e      	b.n	801ad2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801adee:	449c      	add	ip, r3
 801adf0:	1aff      	subs	r7, r7, r3
 801adf2:	f1b8 0f00 	cmp.w	r8, #0
 801adf6:	d009      	beq.n	801ae0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801adf8:	9019      	str	r0, [sp, #100]	; 0x64
 801adfa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801adfe:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ae02:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801ae06:	911d      	str	r1, [sp, #116]	; 0x74
 801ae08:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801ae0c:	1ad2      	subs	r2, r2, r3
 801ae0e:	e6b5      	b.n	801ab7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ae10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	b923      	cbnz	r3, 801ae20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ae16:	4b04      	ldr	r3, [pc, #16]	; (801ae28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801ae18:	6818      	ldr	r0, [r3, #0]
 801ae1a:	6803      	ldr	r3, [r0, #0]
 801ae1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae1e:	4798      	blx	r3
 801ae20:	b05b      	add	sp, #364	; 0x16c
 801ae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae26:	bf00      	nop
 801ae28:	20015fbc 	.word	0x20015fbc

0801ae2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801ae2c:	b570      	push	{r4, r5, r6, lr}
 801ae2e:	4604      	mov	r4, r0
 801ae30:	2500      	movs	r5, #0
 801ae32:	9805      	ldr	r0, [sp, #20]
 801ae34:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801ae38:	6061      	str	r1, [r4, #4]
 801ae3a:	8263      	strh	r3, [r4, #18]
 801ae3c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801ae40:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801ae44:	8025      	strh	r5, [r4, #0]
 801ae46:	7221      	strb	r1, [r4, #8]
 801ae48:	7266      	strb	r6, [r4, #9]
 801ae4a:	60e0      	str	r0, [r4, #12]
 801ae4c:	8222      	strh	r2, [r4, #16]
 801ae4e:	82a3      	strh	r3, [r4, #20]
 801ae50:	82e5      	strh	r5, [r4, #22]
 801ae52:	8325      	strh	r5, [r4, #24]
 801ae54:	8365      	strh	r5, [r4, #26]
 801ae56:	83a5      	strh	r5, [r4, #28]
 801ae58:	83e5      	strh	r5, [r4, #30]
 801ae5a:	8425      	strh	r5, [r4, #32]
 801ae5c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801ae60:	b32e      	cbz	r6, 801aeae <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801ae62:	6803      	ldr	r3, [r0, #0]
 801ae64:	695b      	ldr	r3, [r3, #20]
 801ae66:	4798      	blx	r3
 801ae68:	4606      	mov	r6, r0
 801ae6a:	b300      	cbz	r0, 801aeae <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801ae6c:	68e0      	ldr	r0, [r4, #12]
 801ae6e:	4631      	mov	r1, r6
 801ae70:	6803      	ldr	r3, [r0, #0]
 801ae72:	68db      	ldr	r3, [r3, #12]
 801ae74:	4798      	blx	r3
 801ae76:	4605      	mov	r5, r0
 801ae78:	b1c8      	cbz	r0, 801aeae <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801ae7a:	7b43      	ldrb	r3, [r0, #13]
 801ae7c:	7a82      	ldrb	r2, [r0, #10]
 801ae7e:	005b      	lsls	r3, r3, #1
 801ae80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ae84:	4313      	orrs	r3, r2
 801ae86:	8423      	strh	r3, [r4, #32]
 801ae88:	7a63      	ldrb	r3, [r4, #9]
 801ae8a:	2b06      	cmp	r3, #6
 801ae8c:	d10f      	bne.n	801aeae <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801ae8e:	68e0      	ldr	r0, [r4, #12]
 801ae90:	462a      	mov	r2, r5
 801ae92:	4631      	mov	r1, r6
 801ae94:	6803      	ldr	r3, [r0, #0]
 801ae96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae98:	4798      	blx	r3
 801ae9a:	7b6b      	ldrb	r3, [r5, #13]
 801ae9c:	005b      	lsls	r3, r3, #1
 801ae9e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aea2:	7aab      	ldrb	r3, [r5, #10]
 801aea4:	4313      	orrs	r3, r2
 801aea6:	4418      	add	r0, r3
 801aea8:	8c23      	ldrh	r3, [r4, #32]
 801aeaa:	4418      	add	r0, r3
 801aeac:	8420      	strh	r0, [r4, #32]
 801aeae:	4620      	mov	r0, r4
 801aeb0:	bd70      	pop	{r4, r5, r6, pc}

0801aeb2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801aeb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeb6:	2400      	movs	r4, #0
 801aeb8:	b085      	sub	sp, #20
 801aeba:	4681      	mov	r9, r0
 801aebc:	4688      	mov	r8, r1
 801aebe:	4692      	mov	sl, r2
 801aec0:	469b      	mov	fp, r3
 801aec2:	4627      	mov	r7, r4
 801aec4:	4625      	mov	r5, r4
 801aec6:	4626      	mov	r6, r4
 801aec8:	4554      	cmp	r4, sl
 801aeca:	da2a      	bge.n	801af22 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801aecc:	2300      	movs	r3, #0
 801aece:	9303      	str	r3, [sp, #12]
 801aed0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801aed4:	429d      	cmp	r5, r3
 801aed6:	d004      	beq.n	801aee2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801aed8:	f242 030b 	movw	r3, #8203	; 0x200b
 801aedc:	429d      	cmp	r5, r3
 801aede:	bf18      	it	ne
 801aee0:	462f      	movne	r7, r5
 801aee2:	ab03      	add	r3, sp, #12
 801aee4:	4642      	mov	r2, r8
 801aee6:	4659      	mov	r1, fp
 801aee8:	4648      	mov	r0, r9
 801aeea:	f002 ff37 	bl	801dd5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aeee:	4605      	mov	r5, r0
 801aef0:	b1b8      	cbz	r0, 801af22 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801aef2:	280a      	cmp	r0, #10
 801aef4:	d015      	beq.n	801af22 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801aef6:	9a03      	ldr	r2, [sp, #12]
 801aef8:	b18a      	cbz	r2, 801af1e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801aefa:	7b50      	ldrb	r0, [r2, #13]
 801aefc:	4639      	mov	r1, r7
 801aefe:	7a93      	ldrb	r3, [r2, #10]
 801af00:	0040      	lsls	r0, r0, #1
 801af02:	8895      	ldrh	r5, [r2, #4]
 801af04:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801af08:	4303      	orrs	r3, r0
 801af0a:	4640      	mov	r0, r8
 801af0c:	9301      	str	r3, [sp, #4]
 801af0e:	f8d8 3000 	ldr.w	r3, [r8]
 801af12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af14:	4798      	blx	r3
 801af16:	9b01      	ldr	r3, [sp, #4]
 801af18:	4418      	add	r0, r3
 801af1a:	4406      	add	r6, r0
 801af1c:	b2b6      	uxth	r6, r6
 801af1e:	3401      	adds	r4, #1
 801af20:	e7d2      	b.n	801aec8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801af22:	4630      	mov	r0, r6
 801af24:	b005      	add	sp, #20
 801af26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801af2a:	2a02      	cmp	r2, #2
 801af2c:	b530      	push	{r4, r5, lr}
 801af2e:	d011      	beq.n	801af54 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801af30:	2a03      	cmp	r2, #3
 801af32:	d01c      	beq.n	801af6e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801af34:	2a01      	cmp	r2, #1
 801af36:	d10c      	bne.n	801af52 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801af38:	888b      	ldrh	r3, [r1, #4]
 801af3a:	8801      	ldrh	r1, [r0, #0]
 801af3c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801af40:	1a5b      	subs	r3, r3, r1
 801af42:	8844      	ldrh	r4, [r0, #2]
 801af44:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801af48:	1a9b      	subs	r3, r3, r2
 801af4a:	8004      	strh	r4, [r0, #0]
 801af4c:	8081      	strh	r1, [r0, #4]
 801af4e:	8043      	strh	r3, [r0, #2]
 801af50:	80c2      	strh	r2, [r0, #6]
 801af52:	bd30      	pop	{r4, r5, pc}
 801af54:	88cb      	ldrh	r3, [r1, #6]
 801af56:	8842      	ldrh	r2, [r0, #2]
 801af58:	1a9b      	subs	r3, r3, r2
 801af5a:	88c2      	ldrh	r2, [r0, #6]
 801af5c:	1a9b      	subs	r3, r3, r2
 801af5e:	888a      	ldrh	r2, [r1, #4]
 801af60:	8801      	ldrh	r1, [r0, #0]
 801af62:	8043      	strh	r3, [r0, #2]
 801af64:	1a52      	subs	r2, r2, r1
 801af66:	8881      	ldrh	r1, [r0, #4]
 801af68:	1a52      	subs	r2, r2, r1
 801af6a:	8002      	strh	r2, [r0, #0]
 801af6c:	e7f1      	b.n	801af52 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801af6e:	88cb      	ldrh	r3, [r1, #6]
 801af70:	8841      	ldrh	r1, [r0, #2]
 801af72:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801af76:	1a5b      	subs	r3, r3, r1
 801af78:	f9b0 5000 	ldrsh.w	r5, [r0]
 801af7c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801af80:	1a9b      	subs	r3, r3, r2
 801af82:	8045      	strh	r5, [r0, #2]
 801af84:	8082      	strh	r2, [r0, #4]
 801af86:	8003      	strh	r3, [r0, #0]
 801af88:	80c4      	strh	r4, [r0, #6]
 801af8a:	e7e2      	b.n	801af52 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801af8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801af8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af90:	b09f      	sub	sp, #124	; 0x7c
 801af92:	9116      	str	r1, [sp, #88]	; 0x58
 801af94:	9317      	str	r3, [sp, #92]	; 0x5c
 801af96:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801af98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801af9a:	8809      	ldrh	r1, [r1, #0]
 801af9c:	889b      	ldrh	r3, [r3, #4]
 801af9e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801afa2:	440b      	add	r3, r1
 801afa4:	9212      	str	r2, [sp, #72]	; 0x48
 801afa6:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801afaa:	b21b      	sxth	r3, r3
 801afac:	9011      	str	r0, [sp, #68]	; 0x44
 801afae:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801afb2:	9310      	str	r3, [sp, #64]	; 0x40
 801afb4:	f8d8 3000 	ldr.w	r3, [r8]
 801afb8:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 801afbc:	7b19      	ldrb	r1, [r3, #12]
 801afbe:	7adb      	ldrb	r3, [r3, #11]
 801afc0:	9114      	str	r1, [sp, #80]	; 0x50
 801afc2:	9315      	str	r3, [sp, #84]	; 0x54
 801afc4:	2a00      	cmp	r2, #0
 801afc6:	d06a      	beq.n	801b09e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801afc8:	f898 3010 	ldrb.w	r3, [r8, #16]
 801afcc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801afce:	2b06      	cmp	r3, #6
 801afd0:	bf14      	ite	ne
 801afd2:	2301      	movne	r3, #1
 801afd4:	2302      	moveq	r3, #2
 801afd6:	4413      	add	r3, r2
 801afd8:	f04f 0900 	mov.w	r9, #0
 801afdc:	930f      	str	r3, [sp, #60]	; 0x3c
 801afde:	464c      	mov	r4, r9
 801afe0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801afe4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801afe8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801afec:	4293      	cmp	r3, r2
 801afee:	f280 808f 	bge.w	801b110 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801aff2:	2300      	movs	r3, #0
 801aff4:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801aff8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801affc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b000:	429c      	cmp	r4, r3
 801b002:	d006      	beq.n	801b012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801b004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b006:	f242 020b 	movw	r2, #8203	; 0x200b
 801b00a:	4294      	cmp	r4, r2
 801b00c:	bf18      	it	ne
 801b00e:	4623      	movne	r3, r4
 801b010:	930d      	str	r3, [sp, #52]	; 0x34
 801b012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b014:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801b016:	f8d8 2000 	ldr.w	r2, [r8]
 801b01a:	428b      	cmp	r3, r1
 801b01c:	db41      	blt.n	801b0a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801b01e:	6813      	ldr	r3, [r2, #0]
 801b020:	4610      	mov	r0, r2
 801b022:	695b      	ldr	r3, [r3, #20]
 801b024:	4798      	blx	r3
 801b026:	4604      	mov	r4, r0
 801b028:	f8d8 0000 	ldr.w	r0, [r8]
 801b02c:	aa1d      	add	r2, sp, #116	; 0x74
 801b02e:	4621      	mov	r1, r4
 801b030:	6803      	ldr	r3, [r0, #0]
 801b032:	689d      	ldr	r5, [r3, #8]
 801b034:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b038:	47a8      	blx	r5
 801b03a:	901c      	str	r0, [sp, #112]	; 0x70
 801b03c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b040:	429c      	cmp	r4, r3
 801b042:	f000 80ec 	beq.w	801b21e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b046:	f242 030b 	movw	r3, #8203	; 0x200b
 801b04a:	429c      	cmp	r4, r3
 801b04c:	f000 80e7 	beq.w	801b21e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b050:	2c00      	cmp	r4, #0
 801b052:	f000 80f9 	beq.w	801b248 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801b056:	2c0a      	cmp	r4, #10
 801b058:	d060      	beq.n	801b11c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801b05a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b05c:	b36a      	cbz	r2, 801b0ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801b05e:	8894      	ldrh	r4, [r2, #4]
 801b060:	f1bb 0f00 	cmp.w	fp, #0
 801b064:	d03b      	beq.n	801b0de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801b066:	f892 900d 	ldrb.w	r9, [r2, #13]
 801b06a:	f1bb 0f01 	cmp.w	fp, #1
 801b06e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b072:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b076:	f892 900a 	ldrb.w	r9, [r2, #10]
 801b07a:	ea49 0903 	orr.w	r9, r9, r3
 801b07e:	d134      	bne.n	801b0ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801b080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b082:	eba6 0609 	sub.w	r6, r6, r9
 801b086:	2b00      	cmp	r3, #0
 801b088:	d14f      	bne.n	801b12a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801b08a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b08c:	eb09 0306 	add.w	r3, r9, r6
 801b090:	4413      	add	r3, r2
 801b092:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b094:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b098:	4293      	cmp	r3, r2
 801b09a:	da51      	bge.n	801b140 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801b09c:	e038      	b.n	801b110 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801b09e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b0a0:	e79a      	b.n	801afd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801b0a2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b0a6:	4659      	mov	r1, fp
 801b0a8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b0aa:	9301      	str	r3, [sp, #4]
 801b0ac:	ab1d      	add	r3, sp, #116	; 0x74
 801b0ae:	9300      	str	r3, [sp, #0]
 801b0b0:	ab1c      	add	r3, sp, #112	; 0x70
 801b0b2:	f002 fe9c 	bl	801ddee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b0b6:	4604      	mov	r4, r0
 801b0b8:	e7c0      	b.n	801b03c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801b0ba:	f8d8 0000 	ldr.w	r0, [r8]
 801b0be:	6803      	ldr	r3, [r0, #0]
 801b0c0:	691b      	ldr	r3, [r3, #16]
 801b0c2:	4798      	blx	r3
 801b0c4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b0c8:	4298      	cmp	r0, r3
 801b0ca:	f000 80a8 	beq.w	801b21e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b0ce:	f242 030b 	movw	r3, #8203	; 0x200b
 801b0d2:	4298      	cmp	r0, r3
 801b0d4:	f000 80a3 	beq.w	801b21e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b0d8:	f1bb 0f00 	cmp.w	fp, #0
 801b0dc:	d100      	bne.n	801b0e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801b0de:	444e      	add	r6, r9
 801b0e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b0e2:	2a00      	cmp	r2, #0
 801b0e4:	d1bf      	bne.n	801b066 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801b0e6:	4691      	mov	r9, r2
 801b0e8:	e099      	b.n	801b21e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b0ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	f000 80ad 	beq.w	801b24c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801b0f2:	f1bb 0f00 	cmp.w	fp, #0
 801b0f6:	d118      	bne.n	801b12a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801b0f8:	f8d8 0000 	ldr.w	r0, [r8]
 801b0fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b0fe:	6803      	ldr	r3, [r0, #0]
 801b100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b102:	4798      	blx	r3
 801b104:	4406      	add	r6, r0
 801b106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b108:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b10a:	1af3      	subs	r3, r6, r3
 801b10c:	4293      	cmp	r3, r2
 801b10e:	dd17      	ble.n	801b140 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801b110:	2c00      	cmp	r4, #0
 801b112:	f000 8099 	beq.w	801b248 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801b116:	2c0a      	cmp	r4, #10
 801b118:	f040 8087 	bne.w	801b22a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 801b11c:	240a      	movs	r4, #10
 801b11e:	fab4 f084 	clz	r0, r4
 801b122:	0940      	lsrs	r0, r0, #5
 801b124:	b01f      	add	sp, #124	; 0x7c
 801b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b12a:	f8d8 0000 	ldr.w	r0, [r8]
 801b12e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b130:	6803      	ldr	r3, [r0, #0]
 801b132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b134:	4798      	blx	r3
 801b136:	f1bb 0f01 	cmp.w	fp, #1
 801b13a:	eba6 0600 	sub.w	r6, r6, r0
 801b13e:	d0a4      	beq.n	801b08a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801b140:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b142:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b144:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b148:	f9b3 7000 	ldrsh.w	r7, [r3]
 801b14c:	7b43      	ldrb	r3, [r0, #13]
 801b14e:	4431      	add	r1, r6
 801b150:	015b      	lsls	r3, r3, #5
 801b152:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b156:	7983      	ldrb	r3, [r0, #6]
 801b158:	4313      	orrs	r3, r2
 801b15a:	440b      	add	r3, r1
 801b15c:	42bb      	cmp	r3, r7
 801b15e:	db5e      	blt.n	801b21e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b160:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b162:	4299      	cmp	r1, r3
 801b164:	da5b      	bge.n	801b21e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b166:	f8d8 0000 	ldr.w	r0, [r8]
 801b16a:	42b7      	cmp	r7, r6
 801b16c:	6803      	ldr	r3, [r0, #0]
 801b16e:	bfcc      	ite	gt
 801b170:	1bbf      	subgt	r7, r7, r6
 801b172:	2700      	movle	r7, #0
 801b174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b176:	bfc8      	it	gt
 801b178:	b2bf      	uxthgt	r7, r7
 801b17a:	4798      	blx	r3
 801b17c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b17e:	7b5a      	ldrb	r2, [r3, #13]
 801b180:	00d1      	lsls	r1, r2, #3
 801b182:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801b186:	7a19      	ldrb	r1, [r3, #8]
 801b188:	4329      	orrs	r1, r5
 801b18a:	0655      	lsls	r5, r2, #25
 801b18c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801b18e:	bf48      	it	mi
 801b190:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b194:	4405      	add	r5, r0
 801b196:	bf48      	it	mi
 801b198:	b209      	sxthmi	r1, r1
 801b19a:	1a6d      	subs	r5, r5, r1
 801b19c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b19e:	b2ad      	uxth	r5, r5
 801b1a0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b1a4:	fa0f fa85 	sxth.w	sl, r5
 801b1a8:	4551      	cmp	r1, sl
 801b1aa:	dd3c      	ble.n	801b226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801b1ac:	0112      	lsls	r2, r2, #4
 801b1ae:	79d8      	ldrb	r0, [r3, #7]
 801b1b0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b1b4:	4302      	orrs	r2, r0
 801b1b6:	4492      	add	sl, r2
 801b1b8:	4551      	cmp	r1, sl
 801b1ba:	dc30      	bgt.n	801b21e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b1bc:	1b4d      	subs	r5, r1, r5
 801b1be:	468a      	mov	sl, r1
 801b1c0:	b22d      	sxth	r5, r5
 801b1c2:	9319      	str	r3, [sp, #100]	; 0x64
 801b1c4:	b2ad      	uxth	r5, r5
 801b1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b1c8:	f8d8 0000 	ldr.w	r0, [r8]
 801b1cc:	681a      	ldr	r2, [r3, #0]
 801b1ce:	6801      	ldr	r1, [r0, #0]
 801b1d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801b1d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b1d4:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1d6:	9218      	str	r2, [sp, #96]	; 0x60
 801b1d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801b1da:	4788      	blx	r1
 801b1dc:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b1e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b1e2:	910b      	str	r1, [sp, #44]	; 0x2c
 801b1e4:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b1e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b1ea:	910a      	str	r1, [sp, #40]	; 0x28
 801b1ec:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b1f0:	9109      	str	r1, [sp, #36]	; 0x24
 801b1f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b1f6:	9305      	str	r3, [sp, #20]
 801b1f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b1fa:	9206      	str	r2, [sp, #24]
 801b1fc:	9304      	str	r3, [sp, #16]
 801b1fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b200:	f8cd a004 	str.w	sl, [sp, #4]
 801b204:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801b208:	4437      	add	r7, r6
 801b20a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b20c:	b23f      	sxth	r7, r7
 801b20e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b212:	9700      	str	r7, [sp, #0]
 801b214:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b216:	681a      	ldr	r2, [r3, #0]
 801b218:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b21a:	685b      	ldr	r3, [r3, #4]
 801b21c:	47a8      	blx	r5
 801b21e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b220:	3301      	adds	r3, #1
 801b222:	930e      	str	r3, [sp, #56]	; 0x38
 801b224:	e6e0      	b.n	801afe8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801b226:	2500      	movs	r5, #0
 801b228:	e7cb      	b.n	801b1c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801b22a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b22c:	3501      	adds	r5, #1
 801b22e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b230:	429d      	cmp	r5, r3
 801b232:	f6bf af74 	bge.w	801b11e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801b236:	4659      	mov	r1, fp
 801b238:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b23a:	f7e9 fefd 	bl	8005038 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b23e:	4604      	mov	r4, r0
 801b240:	b110      	cbz	r0, 801b248 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801b242:	280a      	cmp	r0, #10
 801b244:	d1f2      	bne.n	801b22c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801b246:	e769      	b.n	801b11c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801b248:	2400      	movs	r4, #0
 801b24a:	e768      	b.n	801b11e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801b24c:	f1bb 0f00 	cmp.w	fp, #0
 801b250:	f43f af59 	beq.w	801b106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801b254:	e774      	b.n	801b140 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801b256 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b256:	b530      	push	{r4, r5, lr}
 801b258:	8ac4      	ldrh	r4, [r0, #22]
 801b25a:	8b45      	ldrh	r5, [r0, #26]
 801b25c:	8343      	strh	r3, [r0, #26]
 801b25e:	442c      	add	r4, r5
 801b260:	1ae4      	subs	r4, r4, r3
 801b262:	8b83      	ldrh	r3, [r0, #28]
 801b264:	82c4      	strh	r4, [r0, #22]
 801b266:	8b04      	ldrh	r4, [r0, #24]
 801b268:	4422      	add	r2, r4
 801b26a:	440c      	add	r4, r1
 801b26c:	1a59      	subs	r1, r3, r1
 801b26e:	83c2      	strh	r2, [r0, #30]
 801b270:	8304      	strh	r4, [r0, #24]
 801b272:	8381      	strh	r1, [r0, #28]
 801b274:	bd30      	pop	{r4, r5, pc}

0801b276 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801b276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b27a:	4604      	mov	r4, r0
 801b27c:	8a47      	ldrh	r7, [r0, #18]
 801b27e:	68c0      	ldr	r0, [r0, #12]
 801b280:	b085      	sub	sp, #20
 801b282:	6803      	ldr	r3, [r0, #0]
 801b284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b286:	4798      	blx	r3
 801b288:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801b28c:	7a63      	ldrb	r3, [r4, #9]
 801b28e:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801b292:	3b01      	subs	r3, #1
 801b294:	42b7      	cmp	r7, r6
 801b296:	bfac      	ite	ge
 801b298:	f04f 0900 	movge.w	r9, #0
 801b29c:	f04f 0901 	movlt.w	r9, #1
 801b2a0:	2b05      	cmp	r3, #5
 801b2a2:	d804      	bhi.n	801b2ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801b2a4:	e8df f003 	tbb	[pc, r3]
 801b2a8:	470f0854 	.word	0x470f0854
 801b2ac:	4c4c      	.short	0x4c4c
 801b2ae:	2500      	movs	r5, #0
 801b2b0:	46a9      	mov	r9, r5
 801b2b2:	462e      	mov	r6, r5
 801b2b4:	462f      	mov	r7, r5
 801b2b6:	e00e      	b.n	801b2d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801b2b8:	42b7      	cmp	r7, r6
 801b2ba:	f04f 0500 	mov.w	r5, #0
 801b2be:	bfb4      	ite	lt
 801b2c0:	2600      	movlt	r6, #0
 801b2c2:	2601      	movge	r6, #1
 801b2c4:	e7f6      	b.n	801b2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801b2c6:	42b7      	cmp	r7, r6
 801b2c8:	464d      	mov	r5, r9
 801b2ca:	f04f 0900 	mov.w	r9, #0
 801b2ce:	bfb4      	ite	lt
 801b2d0:	2600      	movlt	r6, #0
 801b2d2:	2601      	movge	r6, #1
 801b2d4:	464f      	mov	r7, r9
 801b2d6:	f04f 0800 	mov.w	r8, #0
 801b2da:	f8a4 8016 	strh.w	r8, [r4, #22]
 801b2de:	f8a4 8018 	strh.w	r8, [r4, #24]
 801b2e2:	f8cd 8004 	str.w	r8, [sp, #4]
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	9303      	str	r3, [sp, #12]
 801b2ea:	8823      	ldrh	r3, [r4, #0]
 801b2ec:	2b20      	cmp	r3, #32
 801b2ee:	d033      	beq.n	801b358 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801b2f0:	f242 010b 	movw	r1, #8203	; 0x200b
 801b2f4:	1a5a      	subs	r2, r3, r1
 801b2f6:	f1d2 0a00 	rsbs	sl, r2, #0
 801b2fa:	eb4a 0a02 	adc.w	sl, sl, r2
 801b2fe:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b302:	4293      	cmp	r3, r2
 801b304:	d008      	beq.n	801b318 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801b306:	428b      	cmp	r3, r1
 801b308:	9a01      	ldr	r2, [sp, #4]
 801b30a:	bf0e      	itee	eq
 801b30c:	f04f 0a01 	moveq.w	sl, #1
 801b310:	461a      	movne	r2, r3
 801b312:	f04f 0a00 	movne.w	sl, #0
 801b316:	9201      	str	r2, [sp, #4]
 801b318:	ab03      	add	r3, sp, #12
 801b31a:	68e2      	ldr	r2, [r4, #12]
 801b31c:	7a21      	ldrb	r1, [r4, #8]
 801b31e:	6860      	ldr	r0, [r4, #4]
 801b320:	f002 fd1c 	bl	801dd5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b324:	8020      	strh	r0, [r4, #0]
 801b326:	b9d8      	cbnz	r0, 801b360 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801b328:	8ba2      	ldrh	r2, [r4, #28]
 801b32a:	2300      	movs	r3, #0
 801b32c:	4611      	mov	r1, r2
 801b32e:	4620      	mov	r0, r4
 801b330:	f7ff ff91 	bl	801b256 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b334:	e06e      	b.n	801b414 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801b336:	2500      	movs	r5, #0
 801b338:	2701      	movs	r7, #1
 801b33a:	46a9      	mov	r9, r5
 801b33c:	462e      	mov	r6, r5
 801b33e:	e7ca      	b.n	801b2d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801b340:	42b7      	cmp	r7, r6
 801b342:	f04f 0500 	mov.w	r5, #0
 801b346:	bfb4      	ite	lt
 801b348:	2700      	movlt	r7, #0
 801b34a:	2701      	movge	r7, #1
 801b34c:	462e      	mov	r6, r5
 801b34e:	e7c2      	b.n	801b2d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801b350:	2500      	movs	r5, #0
 801b352:	2601      	movs	r6, #1
 801b354:	46a9      	mov	r9, r5
 801b356:	e7ad      	b.n	801b2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801b358:	9301      	str	r3, [sp, #4]
 801b35a:	f04f 0a01 	mov.w	sl, #1
 801b35e:	e7db      	b.n	801b318 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801b360:	8b63      	ldrh	r3, [r4, #26]
 801b362:	280a      	cmp	r0, #10
 801b364:	f103 0301 	add.w	r3, r3, #1
 801b368:	8363      	strh	r3, [r4, #26]
 801b36a:	d0dd      	beq.n	801b328 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801b36c:	9a03      	ldr	r2, [sp, #12]
 801b36e:	bb62      	cbnz	r2, 801b3ca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801b370:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b374:	4298      	cmp	r0, r3
 801b376:	d003      	beq.n	801b380 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801b378:	f242 030b 	movw	r3, #8203	; 0x200b
 801b37c:	4298      	cmp	r0, r3
 801b37e:	d1b2      	bne.n	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b380:	8823      	ldrh	r3, [r4, #0]
 801b382:	8ba1      	ldrh	r1, [r4, #28]
 801b384:	2b20      	cmp	r3, #32
 801b386:	d003      	beq.n	801b390 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801b388:	f242 000b 	movw	r0, #8203	; 0x200b
 801b38c:	4283      	cmp	r3, r0
 801b38e:	d131      	bne.n	801b3f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801b390:	f1ba 0f00 	cmp.w	sl, #0
 801b394:	bf0a      	itet	eq
 801b396:	4688      	moveq	r8, r1
 801b398:	4650      	movne	r0, sl
 801b39a:	2001      	moveq	r0, #1
 801b39c:	440a      	add	r2, r1
 801b39e:	8b23      	ldrh	r3, [r4, #24]
 801b3a0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b3a4:	b292      	uxth	r2, r2
 801b3a6:	83a2      	strh	r2, [r4, #28]
 801b3a8:	4413      	add	r3, r2
 801b3aa:	f1b9 0f00 	cmp.w	r9, #0
 801b3ae:	d102      	bne.n	801b3b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801b3b0:	2d00      	cmp	r5, #0
 801b3b2:	d042      	beq.n	801b43a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801b3b4:	b300      	cbz	r0, 801b3f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801b3b6:	8c21      	ldrh	r1, [r4, #32]
 801b3b8:	4419      	add	r1, r3
 801b3ba:	458c      	cmp	ip, r1
 801b3bc:	da37      	bge.n	801b42e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801b3be:	8ae1      	ldrh	r1, [r4, #22]
 801b3c0:	2900      	cmp	r1, #0
 801b3c2:	d034      	beq.n	801b42e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801b3c4:	4563      	cmp	r3, ip
 801b3c6:	dd8e      	ble.n	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b3c8:	e01d      	b.n	801b406 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801b3ca:	8893      	ldrh	r3, [r2, #4]
 801b3cc:	9901      	ldr	r1, [sp, #4]
 801b3ce:	8023      	strh	r3, [r4, #0]
 801b3d0:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801b3d4:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801b3d8:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 801b3dc:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801b3e0:	ea4b 0b00 	orr.w	fp, fp, r0
 801b3e4:	68e0      	ldr	r0, [r4, #12]
 801b3e6:	6803      	ldr	r3, [r0, #0]
 801b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3ea:	4798      	blx	r3
 801b3ec:	eb0b 0200 	add.w	r2, fp, r0
 801b3f0:	b292      	uxth	r2, r2
 801b3f2:	e7c5      	b.n	801b380 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801b3f4:	2000      	movs	r0, #0
 801b3f6:	e7d1      	b.n	801b39c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801b3f8:	4563      	cmp	r3, ip
 801b3fa:	f77f af74 	ble.w	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b3fe:	8ae3      	ldrh	r3, [r4, #22]
 801b400:	2b00      	cmp	r3, #0
 801b402:	f43f af70 	beq.w	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b406:	2301      	movs	r3, #1
 801b408:	8c22      	ldrh	r2, [r4, #32]
 801b40a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801b40e:	8be3      	ldrh	r3, [r4, #30]
 801b410:	4413      	add	r3, r2
 801b412:	83e3      	strh	r3, [r4, #30]
 801b414:	68e0      	ldr	r0, [r4, #12]
 801b416:	6803      	ldr	r3, [r0, #0]
 801b418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b41a:	4798      	blx	r3
 801b41c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801b420:	4418      	add	r0, r3
 801b422:	8a63      	ldrh	r3, [r4, #18]
 801b424:	1a18      	subs	r0, r3, r0
 801b426:	8260      	strh	r0, [r4, #18]
 801b428:	b005      	add	sp, #20
 801b42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b42e:	2300      	movs	r3, #0
 801b430:	4611      	mov	r1, r2
 801b432:	4620      	mov	r0, r4
 801b434:	f7ff ff0f 	bl	801b256 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b438:	e755      	b.n	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b43a:	4563      	cmp	r3, ip
 801b43c:	dd14      	ble.n	801b468 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801b43e:	b117      	cbz	r7, 801b446 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801b440:	2301      	movs	r3, #1
 801b442:	460a      	mov	r2, r1
 801b444:	e772      	b.n	801b32c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801b446:	2e00      	cmp	r6, #0
 801b448:	f43f af4d 	beq.w	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b44c:	2800      	cmp	r0, #0
 801b44e:	f47f af4a 	bne.w	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b452:	f1ba 0f00 	cmp.w	sl, #0
 801b456:	d002      	beq.n	801b45e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801b458:	2301      	movs	r3, #1
 801b45a:	4642      	mov	r2, r8
 801b45c:	e767      	b.n	801b32e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801b45e:	8ae3      	ldrh	r3, [r4, #22]
 801b460:	2b00      	cmp	r3, #0
 801b462:	f43f af40 	beq.w	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b466:	e7d5      	b.n	801b414 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801b468:	2800      	cmp	r0, #0
 801b46a:	f47f af3c 	bne.w	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b46e:	f1ba 0f00 	cmp.w	sl, #0
 801b472:	f43f af38 	beq.w	801b2e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b476:	2301      	movs	r3, #1
 801b478:	4642      	mov	r2, r8
 801b47a:	e7da      	b.n	801b432 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801b47c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b47e:	4605      	mov	r5, r0
 801b480:	b08f      	sub	sp, #60	; 0x3c
 801b482:	4617      	mov	r7, r2
 801b484:	461c      	mov	r4, r3
 801b486:	460e      	mov	r6, r1
 801b488:	b1d1      	cbz	r1, 801b4c0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	4620      	mov	r0, r4
 801b48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b490:	4798      	blx	r3
 801b492:	4240      	negs	r0, r0
 801b494:	9603      	str	r6, [sp, #12]
 801b496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b49a:	b200      	sxth	r0, r0
 801b49c:	9700      	str	r7, [sp, #0]
 801b49e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b4a2:	4629      	mov	r1, r5
 801b4a4:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801b4a8:	2401      	movs	r4, #1
 801b4aa:	a805      	add	r0, sp, #20
 801b4ac:	f7ff fcbe 	bl	801ae2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801b4b0:	a805      	add	r0, sp, #20
 801b4b2:	f7ff fee0 	bl	801b276 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b4b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b4ba:	b163      	cbz	r3, 801b4d6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801b4bc:	3401      	adds	r4, #1
 801b4be:	e7f7      	b.n	801b4b0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b4c0:	2401      	movs	r4, #1
 801b4c2:	f002 fd17 	bl	801def4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b4c6:	280a      	cmp	r0, #10
 801b4c8:	4628      	mov	r0, r5
 801b4ca:	bf08      	it	eq
 801b4cc:	3401      	addeq	r4, #1
 801b4ce:	f002 fd11 	bl	801def4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b4d2:	2800      	cmp	r0, #0
 801b4d4:	d1f7      	bne.n	801b4c6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801b4d6:	b2a0      	uxth	r0, r4
 801b4d8:	b00f      	add	sp, #60	; 0x3c
 801b4da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b4dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4e0:	b0e3      	sub	sp, #396	; 0x18c
 801b4e2:	461c      	mov	r4, r3
 801b4e4:	4683      	mov	fp, r0
 801b4e6:	4688      	mov	r8, r1
 801b4e8:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	f000 810f 	beq.w	801b70e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b4f0:	6823      	ldr	r3, [r4, #0]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	f000 810b 	beq.w	801b70e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b4f8:	7ba3      	ldrb	r3, [r4, #14]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	f000 8107 	beq.w	801b70e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b500:	ad0a      	add	r5, sp, #40	; 0x28
 801b502:	6810      	ldr	r0, [r2, #0]
 801b504:	6851      	ldr	r1, [r2, #4]
 801b506:	462b      	mov	r3, r5
 801b508:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801b50c:	c303      	stmia	r3!, {r0, r1}
 801b50e:	2100      	movs	r1, #0
 801b510:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b514:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801b518:	4628      	mov	r0, r5
 801b51a:	910c      	str	r1, [sp, #48]	; 0x30
 801b51c:	a90c      	add	r1, sp, #48	; 0x30
 801b51e:	79a2      	ldrb	r2, [r4, #6]
 801b520:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b524:	f7ff fd01 	bl	801af2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b528:	a90c      	add	r1, sp, #48	; 0x30
 801b52a:	79a2      	ldrb	r2, [r4, #6]
 801b52c:	4608      	mov	r0, r1
 801b52e:	f7ff fcfc 	bl	801af2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b532:	a817      	add	r0, sp, #92	; 0x5c
 801b534:	f002 f8b2 	bl	801d69c <_ZN8touchgfx12TextProviderC1Ev>
 801b538:	6820      	ldr	r0, [r4, #0]
 801b53a:	6803      	ldr	r3, [r0, #0]
 801b53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b53e:	4798      	blx	r3
 801b540:	4606      	mov	r6, r0
 801b542:	6820      	ldr	r0, [r4, #0]
 801b544:	6803      	ldr	r3, [r0, #0]
 801b546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b548:	4798      	blx	r3
 801b54a:	4633      	mov	r3, r6
 801b54c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801b54e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801b550:	9000      	str	r0, [sp, #0]
 801b552:	a817      	add	r0, sp, #92	; 0x5c
 801b554:	f002 f8fd 	bl	801d752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b558:	6820      	ldr	r0, [r4, #0]
 801b55a:	f894 a004 	ldrb.w	sl, [r4, #4]
 801b55e:	6803      	ldr	r3, [r0, #0]
 801b560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b562:	4798      	blx	r3
 801b564:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801b568:	6823      	ldr	r3, [r4, #0]
 801b56a:	4607      	mov	r7, r0
 801b56c:	4406      	add	r6, r0
 801b56e:	a830      	add	r0, sp, #192	; 0xc0
 801b570:	f893 9009 	ldrb.w	r9, [r3, #9]
 801b574:	f002 f892 	bl	801d69c <_ZN8touchgfx12TextProviderC1Ev>
 801b578:	7c23      	ldrb	r3, [r4, #16]
 801b57a:	b17b      	cbz	r3, 801b59c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801b57c:	6820      	ldr	r0, [r4, #0]
 801b57e:	6803      	ldr	r3, [r0, #0]
 801b580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b582:	4798      	blx	r3
 801b584:	9009      	str	r0, [sp, #36]	; 0x24
 801b586:	6820      	ldr	r0, [r4, #0]
 801b588:	6802      	ldr	r2, [r0, #0]
 801b58a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b58c:	4790      	blx	r2
 801b58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b590:	9000      	str	r0, [sp, #0]
 801b592:	a830      	add	r0, sp, #192	; 0xc0
 801b594:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801b596:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801b598:	f002 f8db 	bl	801d752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b59c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b5a0:	a80e      	add	r0, sp, #56	; 0x38
 801b5a2:	7be2      	ldrb	r2, [r4, #15]
 801b5a4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801b5a8:	1a8a      	subs	r2, r1, r2
 801b5aa:	7c21      	ldrb	r1, [r4, #16]
 801b5ac:	9103      	str	r1, [sp, #12]
 801b5ae:	b292      	uxth	r2, r2
 801b5b0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801b5b4:	9102      	str	r1, [sp, #8]
 801b5b6:	6821      	ldr	r1, [r4, #0]
 801b5b8:	9101      	str	r1, [sp, #4]
 801b5ba:	7961      	ldrb	r1, [r4, #5]
 801b5bc:	9100      	str	r1, [sp, #0]
 801b5be:	a930      	add	r1, sp, #192	; 0xc0
 801b5c0:	f7ff fc34 	bl	801ae2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801b5c4:	2e00      	cmp	r6, #0
 801b5c6:	dc5b      	bgt.n	801b680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801b5c8:	af17      	add	r7, sp, #92	; 0x5c
 801b5ca:	f04f 0900 	mov.w	r9, #0
 801b5ce:	7c23      	ldrb	r3, [r4, #16]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	f000 80ae 	beq.w	801b732 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801b5d6:	a80e      	add	r0, sp, #56	; 0x38
 801b5d8:	f7ff fe4d 	bl	801b276 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b5dc:	f1ba 0f00 	cmp.w	sl, #0
 801b5e0:	f000 80a2 	beq.w	801b728 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801b5e4:	7c23      	ldrb	r3, [r4, #16]
 801b5e6:	2264      	movs	r2, #100	; 0x64
 801b5e8:	4639      	mov	r1, r7
 801b5ea:	a849      	add	r0, sp, #292	; 0x124
 801b5ec:	9309      	str	r3, [sp, #36]	; 0x24
 801b5ee:	f00f fb71 	bl	802acd4 <memcpy>
 801b5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	f000 80a4 	beq.w	801b742 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801b5fa:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801b5fe:	7922      	ldrb	r2, [r4, #4]
 801b600:	2a01      	cmp	r2, #1
 801b602:	f040 8087 	bne.w	801b714 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b606:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801b60a:	1ac0      	subs	r0, r0, r3
 801b60c:	2302      	movs	r3, #2
 801b60e:	fb90 f0f3 	sdiv	r0, r0, r3
 801b612:	b200      	sxth	r0, r0
 801b614:	7c23      	ldrb	r3, [r4, #16]
 801b616:	2b00      	cmp	r3, #0
 801b618:	f000 8088 	beq.w	801b72c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 801b61c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801b620:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801b624:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b628:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b62c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801b630:	2100      	movs	r1, #0
 801b632:	4410      	add	r0, r2
 801b634:	4642      	mov	r2, r8
 801b636:	b200      	sxth	r0, r0
 801b638:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801b63c:	9000      	str	r0, [sp, #0]
 801b63e:	4658      	mov	r0, fp
 801b640:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801b644:	f7ff fca2 	bl	801af8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b648:	2800      	cmp	r0, #0
 801b64a:	d160      	bne.n	801b70e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b64c:	b2b2      	uxth	r2, r6
 801b64e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b652:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801b656:	4413      	add	r3, r2
 801b658:	1a8a      	subs	r2, r1, r2
 801b65a:	b21b      	sxth	r3, r3
 801b65c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801b660:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801b664:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b668:	2a00      	cmp	r2, #0
 801b66a:	d150      	bne.n	801b70e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b66c:	6822      	ldr	r2, [r4, #0]
 801b66e:	8869      	ldrh	r1, [r5, #2]
 801b670:	7a12      	ldrb	r2, [r2, #8]
 801b672:	1a9b      	subs	r3, r3, r2
 801b674:	88ea      	ldrh	r2, [r5, #6]
 801b676:	440a      	add	r2, r1
 801b678:	b212      	sxth	r2, r2
 801b67a:	4293      	cmp	r3, r2
 801b67c:	dda7      	ble.n	801b5ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801b67e:	e046      	b.n	801b70e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b680:	7c23      	ldrb	r3, [r4, #16]
 801b682:	444f      	add	r7, r9
 801b684:	b1c3      	cbz	r3, 801b6b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801b686:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801b68a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b68e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b692:	443b      	add	r3, r7
 801b694:	4293      	cmp	r3, r2
 801b696:	da97      	bge.n	801b5c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801b698:	a80e      	add	r0, sp, #56	; 0x38
 801b69a:	f7ff fdec 	bl	801b276 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b69e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801b6a2:	3b01      	subs	r3, #1
 801b6a4:	b29b      	uxth	r3, r3
 801b6a6:	454b      	cmp	r3, r9
 801b6a8:	9309      	str	r3, [sp, #36]	; 0x24
 801b6aa:	d021      	beq.n	801b6f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801b6ac:	7961      	ldrb	r1, [r4, #5]
 801b6ae:	a817      	add	r0, sp, #92	; 0x5c
 801b6b0:	f7e9 fcc2 	bl	8005038 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6b6:	e7f4      	b.n	801b6a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801b6b8:	fa1f f986 	uxth.w	r9, r6
 801b6bc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b6c0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b6c4:	443b      	add	r3, r7
 801b6c6:	4293      	cmp	r3, r2
 801b6c8:	f6bf af7e 	bge.w	801b5c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801b6cc:	a817      	add	r0, sp, #92	; 0x5c
 801b6ce:	f002 fc11 	bl	801def4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b6d2:	b1e0      	cbz	r0, 801b70e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b6d4:	280a      	cmp	r0, #10
 801b6d6:	d1f1      	bne.n	801b6bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801b6d8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b6dc:	444b      	add	r3, r9
 801b6de:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b6e2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801b6e6:	eba3 0309 	sub.w	r3, r3, r9
 801b6ea:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b6ee:	e7e5      	b.n	801b6bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801b6f0:	b2b3      	uxth	r3, r6
 801b6f2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b6f6:	441a      	add	r2, r3
 801b6f8:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801b6fc:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801b700:	1ad3      	subs	r3, r2, r3
 801b702:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b706:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d1bd      	bne.n	801b68a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801b70e:	b063      	add	sp, #396	; 0x18c
 801b710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b714:	2a02      	cmp	r2, #2
 801b716:	d105      	bne.n	801b724 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801b718:	7be2      	ldrb	r2, [r4, #15]
 801b71a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801b71e:	1a80      	subs	r0, r0, r2
 801b720:	1ac0      	subs	r0, r0, r3
 801b722:	e776      	b.n	801b612 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801b724:	2000      	movs	r0, #0
 801b726:	e775      	b.n	801b614 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801b728:	7be0      	ldrb	r0, [r4, #15]
 801b72a:	e773      	b.n	801b614 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801b72c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b730:	e776      	b.n	801b620 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801b732:	f1ba 0f00 	cmp.w	sl, #0
 801b736:	d0f7      	beq.n	801b728 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801b738:	2264      	movs	r2, #100	; 0x64
 801b73a:	4639      	mov	r1, r7
 801b73c:	a849      	add	r0, sp, #292	; 0x124
 801b73e:	f00f fac9 	bl	802acd4 <memcpy>
 801b742:	2300      	movs	r3, #0
 801b744:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b748:	6821      	ldr	r1, [r4, #0]
 801b74a:	a849      	add	r0, sp, #292	; 0x124
 801b74c:	f7ff fbb1 	bl	801aeb2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b750:	b203      	sxth	r3, r0
 801b752:	e754      	b.n	801b5fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801b754 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b754:	2b03      	cmp	r3, #3
 801b756:	d818      	bhi.n	801b78a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801b758:	e8df f003 	tbb	[pc, r3]
 801b75c:	130d0602 	.word	0x130d0602
 801b760:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b764:	1850      	adds	r0, r2, r1
 801b766:	4770      	bx	lr
 801b768:	8803      	ldrh	r3, [r0, #0]
 801b76a:	8880      	ldrh	r0, [r0, #4]
 801b76c:	4418      	add	r0, r3
 801b76e:	b200      	sxth	r0, r0
 801b770:	1a80      	subs	r0, r0, r2
 801b772:	3801      	subs	r0, #1
 801b774:	4770      	bx	lr
 801b776:	8803      	ldrh	r3, [r0, #0]
 801b778:	8880      	ldrh	r0, [r0, #4]
 801b77a:	4418      	add	r0, r3
 801b77c:	b200      	sxth	r0, r0
 801b77e:	1a40      	subs	r0, r0, r1
 801b780:	e7f7      	b.n	801b772 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b782:	f9b0 0000 	ldrsh.w	r0, [r0]
 801b786:	4410      	add	r0, r2
 801b788:	4770      	bx	lr
 801b78a:	2000      	movs	r0, #0
 801b78c:	4770      	bx	lr

0801b78e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b78e:	2b03      	cmp	r3, #3
 801b790:	d817      	bhi.n	801b7c2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801b792:	e8df f003 	tbb	[pc, r3]
 801b796:	0602      	.short	0x0602
 801b798:	1009      	.short	0x1009
 801b79a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b79e:	1850      	adds	r0, r2, r1
 801b7a0:	4770      	bx	lr
 801b7a2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b7a6:	e7fa      	b.n	801b79e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801b7a8:	8843      	ldrh	r3, [r0, #2]
 801b7aa:	88c0      	ldrh	r0, [r0, #6]
 801b7ac:	4418      	add	r0, r3
 801b7ae:	b200      	sxth	r0, r0
 801b7b0:	1a80      	subs	r0, r0, r2
 801b7b2:	3801      	subs	r0, #1
 801b7b4:	4770      	bx	lr
 801b7b6:	8843      	ldrh	r3, [r0, #2]
 801b7b8:	88c0      	ldrh	r0, [r0, #6]
 801b7ba:	4418      	add	r0, r3
 801b7bc:	b200      	sxth	r0, r0
 801b7be:	1a40      	subs	r0, r0, r1
 801b7c0:	e7f7      	b.n	801b7b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b7c2:	2000      	movs	r0, #0
 801b7c4:	4770      	bx	lr
	...

0801b7c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b7c8:	4b01      	ldr	r3, [pc, #4]	; (801b7d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	601a      	str	r2, [r3, #0]
 801b7ce:	4770      	bx	lr
 801b7d0:	20015fc4 	.word	0x20015fc4

0801b7d4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b7d4:	4603      	mov	r3, r0
 801b7d6:	b1c8      	cbz	r0, 801b80c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b7d8:	0c02      	lsrs	r2, r0, #16
 801b7da:	0412      	lsls	r2, r2, #16
 801b7dc:	b9a2      	cbnz	r2, 801b808 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b7de:	0403      	lsls	r3, r0, #16
 801b7e0:	2010      	movs	r0, #16
 801b7e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b7e6:	bf04      	itt	eq
 801b7e8:	021b      	lsleq	r3, r3, #8
 801b7ea:	3008      	addeq	r0, #8
 801b7ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b7f0:	bf04      	itt	eq
 801b7f2:	011b      	lsleq	r3, r3, #4
 801b7f4:	3004      	addeq	r0, #4
 801b7f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b7fa:	bf04      	itt	eq
 801b7fc:	009b      	lsleq	r3, r3, #2
 801b7fe:	3002      	addeq	r0, #2
 801b800:	2b00      	cmp	r3, #0
 801b802:	db04      	blt.n	801b80e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b804:	3001      	adds	r0, #1
 801b806:	4770      	bx	lr
 801b808:	2000      	movs	r0, #0
 801b80a:	e7ea      	b.n	801b7e2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b80c:	2020      	movs	r0, #32
 801b80e:	4770      	bx	lr

0801b810 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b814:	b087      	sub	sp, #28
 801b816:	4681      	mov	r9, r0
 801b818:	4698      	mov	r8, r3
 801b81a:	4610      	mov	r0, r2
 801b81c:	460d      	mov	r5, r1
 801b81e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801b822:	b981      	cbnz	r1, 801b846 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b824:	b14b      	cbz	r3, 801b83a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b826:	460b      	mov	r3, r1
 801b828:	464a      	mov	r2, r9
 801b82a:	4641      	mov	r1, r8
 801b82c:	e9cd 4700 	strd	r4, r7, [sp]
 801b830:	f7ff ffee 	bl	801b810 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b834:	b007      	add	sp, #28
 801b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b83a:	f04f 33ff 	mov.w	r3, #4294967295
 801b83e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b842:	603b      	str	r3, [r7, #0]
 801b844:	e7f6      	b.n	801b834 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b846:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b84a:	d107      	bne.n	801b85c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b84c:	fb09 f602 	mul.w	r6, r9, r2
 801b850:	fbb6 f0f4 	udiv	r0, r6, r4
 801b854:	fb04 6610 	mls	r6, r4, r0, r6
 801b858:	603e      	str	r6, [r7, #0]
 801b85a:	e7eb      	b.n	801b834 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b85c:	2601      	movs	r6, #1
 801b85e:	fa09 fb01 	lsl.w	fp, r9, r1
 801b862:	408e      	lsls	r6, r1
 801b864:	fbbb f3f4 	udiv	r3, fp, r4
 801b868:	3e01      	subs	r6, #1
 801b86a:	9302      	str	r3, [sp, #8]
 801b86c:	fb0a f303 	mul.w	r3, sl, r3
 801b870:	4016      	ands	r6, r2
 801b872:	9303      	str	r3, [sp, #12]
 801b874:	4630      	mov	r0, r6
 801b876:	f7ff ffad 	bl	801b7d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b87a:	464a      	mov	r2, r9
 801b87c:	460b      	mov	r3, r1
 801b87e:	4601      	mov	r1, r0
 801b880:	4630      	mov	r0, r6
 801b882:	e9cd 4700 	strd	r4, r7, [sp]
 801b886:	f7ff ffc3 	bl	801b810 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b88a:	9b02      	ldr	r3, [sp, #8]
 801b88c:	4606      	mov	r6, r0
 801b88e:	eb05 0108 	add.w	r1, r5, r8
 801b892:	fb04 bb13 	mls	fp, r4, r3, fp
 801b896:	4658      	mov	r0, fp
 801b898:	f7ff ff9c 	bl	801b7d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b89c:	ab05      	add	r3, sp, #20
 801b89e:	465a      	mov	r2, fp
 801b8a0:	e9cd 4300 	strd	r4, r3, [sp]
 801b8a4:	4603      	mov	r3, r0
 801b8a6:	4650      	mov	r0, sl
 801b8a8:	f7ff ffb2 	bl	801b810 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b8ac:	6839      	ldr	r1, [r7, #0]
 801b8ae:	9a05      	ldr	r2, [sp, #20]
 801b8b0:	9b03      	ldr	r3, [sp, #12]
 801b8b2:	4411      	add	r1, r2
 801b8b4:	fbb1 f2f4 	udiv	r2, r1, r4
 801b8b8:	18d3      	adds	r3, r2, r3
 801b8ba:	fb04 1412 	mls	r4, r4, r2, r1
 801b8be:	441e      	add	r6, r3
 801b8c0:	603c      	str	r4, [r7, #0]
 801b8c2:	4430      	add	r0, r6
 801b8c4:	e7b6      	b.n	801b834 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801b8c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b8c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8ca:	b085      	sub	sp, #20
 801b8cc:	f1b0 0900 	subs.w	r9, r0, #0
 801b8d0:	461d      	mov	r5, r3
 801b8d2:	4617      	mov	r7, r2
 801b8d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b8d6:	bfbb      	ittet	lt
 801b8d8:	f1c9 0900 	rsblt	r9, r9, #0
 801b8dc:	f04f 36ff 	movlt.w	r6, #4294967295
 801b8e0:	2601      	movge	r6, #1
 801b8e2:	6823      	ldrlt	r3, [r4, #0]
 801b8e4:	bfbc      	itt	lt
 801b8e6:	425b      	neglt	r3, r3
 801b8e8:	6023      	strlt	r3, [r4, #0]
 801b8ea:	2a00      	cmp	r2, #0
 801b8ec:	da04      	bge.n	801b8f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b8ee:	6823      	ldr	r3, [r4, #0]
 801b8f0:	4257      	negs	r7, r2
 801b8f2:	4276      	negs	r6, r6
 801b8f4:	425b      	negs	r3, r3
 801b8f6:	6023      	str	r3, [r4, #0]
 801b8f8:	2d00      	cmp	r5, #0
 801b8fa:	4638      	mov	r0, r7
 801b8fc:	bfba      	itte	lt
 801b8fe:	426d      	neglt	r5, r5
 801b900:	f04f 38ff 	movlt.w	r8, #4294967295
 801b904:	f04f 0801 	movge.w	r8, #1
 801b908:	f7ff ff64 	bl	801b7d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b90c:	ab03      	add	r3, sp, #12
 801b90e:	463a      	mov	r2, r7
 801b910:	e9cd 5300 	strd	r5, r3, [sp]
 801b914:	4603      	mov	r3, r0
 801b916:	4648      	mov	r0, r9
 801b918:	f7ff ff7a 	bl	801b810 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b91c:	6823      	ldr	r3, [r4, #0]
 801b91e:	9a03      	ldr	r2, [sp, #12]
 801b920:	4546      	cmp	r6, r8
 801b922:	441a      	add	r2, r3
 801b924:	fb92 f3f5 	sdiv	r3, r2, r5
 801b928:	4418      	add	r0, r3
 801b92a:	fb05 2313 	mls	r3, r5, r3, r2
 801b92e:	bf18      	it	ne
 801b930:	4240      	negne	r0, r0
 801b932:	1c72      	adds	r2, r6, #1
 801b934:	6023      	str	r3, [r4, #0]
 801b936:	d105      	bne.n	801b944 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b938:	2b00      	cmp	r3, #0
 801b93a:	f1c3 0200 	rsb	r2, r3, #0
 801b93e:	db0b      	blt.n	801b958 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b940:	6022      	str	r2, [r4, #0]
 801b942:	e006      	b.n	801b952 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b944:	2e01      	cmp	r6, #1
 801b946:	d104      	bne.n	801b952 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b948:	2b00      	cmp	r3, #0
 801b94a:	da02      	bge.n	801b952 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b94c:	442b      	add	r3, r5
 801b94e:	3801      	subs	r0, #1
 801b950:	6023      	str	r3, [r4, #0]
 801b952:	b005      	add	sp, #20
 801b954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b958:	3801      	subs	r0, #1
 801b95a:	1b52      	subs	r2, r2, r5
 801b95c:	e7f0      	b.n	801b940 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801b960 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b960:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b964:	4c1c      	ldr	r4, [pc, #112]	; (801b9d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b966:	4605      	mov	r5, r0
 801b968:	6807      	ldr	r7, [r0, #0]
 801b96a:	69a3      	ldr	r3, [r4, #24]
 801b96c:	b92b      	cbnz	r3, 801b97a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b96e:	6840      	ldr	r0, [r0, #4]
 801b970:	e9c5 7000 	strd	r7, r0, [r5]
 801b974:	b004      	add	sp, #16
 801b976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b97a:	f04f 0802 	mov.w	r8, #2
 801b97e:	68a2      	ldr	r2, [r4, #8]
 801b980:	ae04      	add	r6, sp, #16
 801b982:	6820      	ldr	r0, [r4, #0]
 801b984:	fb93 f1f8 	sdiv	r1, r3, r8
 801b988:	440a      	add	r2, r1
 801b98a:	69e1      	ldr	r1, [r4, #28]
 801b98c:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b990:	463a      	mov	r2, r7
 801b992:	9600      	str	r6, [sp, #0]
 801b994:	f7ff ff97 	bl	801b8c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b998:	69a3      	ldr	r3, [r4, #24]
 801b99a:	4607      	mov	r7, r0
 801b99c:	686a      	ldr	r2, [r5, #4]
 801b99e:	6a21      	ldr	r1, [r4, #32]
 801b9a0:	9600      	str	r6, [sp, #0]
 801b9a2:	6860      	ldr	r0, [r4, #4]
 801b9a4:	f7ff ff8f 	bl	801b8c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b9a8:	69a3      	ldr	r3, [r4, #24]
 801b9aa:	6962      	ldr	r2, [r4, #20]
 801b9ac:	4407      	add	r7, r0
 801b9ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b9b0:	9600      	str	r6, [sp, #0]
 801b9b2:	68e0      	ldr	r0, [r4, #12]
 801b9b4:	fb93 f8f8 	sdiv	r8, r3, r8
 801b9b8:	4442      	add	r2, r8
 801b9ba:	9203      	str	r2, [sp, #12]
 801b9bc:	682a      	ldr	r2, [r5, #0]
 801b9be:	f7ff ff82 	bl	801b8c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b9c2:	4680      	mov	r8, r0
 801b9c4:	9600      	str	r6, [sp, #0]
 801b9c6:	69a3      	ldr	r3, [r4, #24]
 801b9c8:	686a      	ldr	r2, [r5, #4]
 801b9ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b9cc:	6920      	ldr	r0, [r4, #16]
 801b9ce:	f7ff ff7a 	bl	801b8c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b9d2:	4440      	add	r0, r8
 801b9d4:	e7cc      	b.n	801b970 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b9d6:	bf00      	nop
 801b9d8:	20015fc8 	.word	0x20015fc8

0801b9dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b9dc:	4b07      	ldr	r3, [pc, #28]	; (801b9fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b9de:	781b      	ldrb	r3, [r3, #0]
 801b9e0:	2b01      	cmp	r3, #1
 801b9e2:	d109      	bne.n	801b9f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b9e4:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b9e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b9ec:	8003      	strh	r3, [r0, #0]
 801b9ee:	4b04      	ldr	r3, [pc, #16]	; (801ba00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b9f0:	881b      	ldrh	r3, [r3, #0]
 801b9f2:	3b01      	subs	r3, #1
 801b9f4:	1a9b      	subs	r3, r3, r2
 801b9f6:	800b      	strh	r3, [r1, #0]
 801b9f8:	4770      	bx	lr
 801b9fa:	bf00      	nop
 801b9fc:	20015fb4 	.word	0x20015fb4
 801ba00:	20015fb0 	.word	0x20015fb0

0801ba04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ba04:	4b07      	ldr	r3, [pc, #28]	; (801ba24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ba06:	b510      	push	{r4, lr}
 801ba08:	781b      	ldrb	r3, [r3, #0]
 801ba0a:	2b01      	cmp	r3, #1
 801ba0c:	d108      	bne.n	801ba20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ba0e:	4b06      	ldr	r3, [pc, #24]	; (801ba28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801ba10:	880c      	ldrh	r4, [r1, #0]
 801ba12:	881b      	ldrh	r3, [r3, #0]
 801ba14:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ba18:	3b01      	subs	r3, #1
 801ba1a:	1b1b      	subs	r3, r3, r4
 801ba1c:	8003      	strh	r3, [r0, #0]
 801ba1e:	800a      	strh	r2, [r1, #0]
 801ba20:	bd10      	pop	{r4, pc}
 801ba22:	bf00      	nop
 801ba24:	20015fb4 	.word	0x20015fb4
 801ba28:	20015fb0 	.word	0x20015fb0

0801ba2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801ba2c:	4b0a      	ldr	r3, [pc, #40]	; (801ba58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801ba2e:	b510      	push	{r4, lr}
 801ba30:	781b      	ldrb	r3, [r3, #0]
 801ba32:	2b01      	cmp	r3, #1
 801ba34:	d10e      	bne.n	801ba54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801ba36:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ba3a:	8843      	ldrh	r3, [r0, #2]
 801ba3c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ba40:	18ca      	adds	r2, r1, r3
 801ba42:	4b06      	ldr	r3, [pc, #24]	; (801ba5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801ba44:	8044      	strh	r4, [r0, #2]
 801ba46:	881b      	ldrh	r3, [r3, #0]
 801ba48:	1a9b      	subs	r3, r3, r2
 801ba4a:	8003      	strh	r3, [r0, #0]
 801ba4c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ba50:	8081      	strh	r1, [r0, #4]
 801ba52:	80c3      	strh	r3, [r0, #6]
 801ba54:	bd10      	pop	{r4, pc}
 801ba56:	bf00      	nop
 801ba58:	20015fb4 	.word	0x20015fb4
 801ba5c:	20015fb0 	.word	0x20015fb0

0801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ba60:	4b08      	ldr	r3, [pc, #32]	; (801ba84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801ba62:	781b      	ldrb	r3, [r3, #0]
 801ba64:	2b01      	cmp	r3, #1
 801ba66:	d10c      	bne.n	801ba82 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801ba68:	8803      	ldrh	r3, [r0, #0]
 801ba6a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801ba6e:	8842      	ldrh	r2, [r0, #2]
 801ba70:	8002      	strh	r2, [r0, #0]
 801ba72:	185a      	adds	r2, r3, r1
 801ba74:	4b04      	ldr	r3, [pc, #16]	; (801ba88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ba76:	881b      	ldrh	r3, [r3, #0]
 801ba78:	1a9b      	subs	r3, r3, r2
 801ba7a:	8043      	strh	r3, [r0, #2]
 801ba7c:	88c3      	ldrh	r3, [r0, #6]
 801ba7e:	80c1      	strh	r1, [r0, #6]
 801ba80:	8083      	strh	r3, [r0, #4]
 801ba82:	4770      	bx	lr
 801ba84:	20015fb4 	.word	0x20015fb4
 801ba88:	20015fb0 	.word	0x20015fb0

0801ba8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ba8c:	4b07      	ldr	r3, [pc, #28]	; (801baac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ba8e:	b510      	push	{r4, lr}
 801ba90:	781b      	ldrb	r3, [r3, #0]
 801ba92:	2b01      	cmp	r3, #1
 801ba94:	d108      	bne.n	801baa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ba96:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ba9a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ba9e:	8003      	strh	r3, [r0, #0]
 801baa0:	8893      	ldrh	r3, [r2, #4]
 801baa2:	3b01      	subs	r3, #1
 801baa4:	1b1b      	subs	r3, r3, r4
 801baa6:	800b      	strh	r3, [r1, #0]
 801baa8:	bd10      	pop	{r4, pc}
 801baaa:	bf00      	nop
 801baac:	20015fb4 	.word	0x20015fb4

0801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801bab0:	4b0a      	ldr	r3, [pc, #40]	; (801badc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801bab2:	460a      	mov	r2, r1
 801bab4:	b510      	push	{r4, lr}
 801bab6:	781b      	ldrb	r3, [r3, #0]
 801bab8:	2b01      	cmp	r3, #1
 801baba:	d10d      	bne.n	801bad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801babc:	8881      	ldrh	r1, [r0, #4]
 801babe:	8803      	ldrh	r3, [r0, #0]
 801bac0:	440b      	add	r3, r1
 801bac2:	4601      	mov	r1, r0
 801bac4:	3b01      	subs	r3, #1
 801bac6:	f821 3b02 	strh.w	r3, [r1], #2
 801baca:	f7ff ffdf 	bl	801ba8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801bace:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bad2:	88c2      	ldrh	r2, [r0, #6]
 801bad4:	80c3      	strh	r3, [r0, #6]
 801bad6:	8082      	strh	r2, [r0, #4]
 801bad8:	bd10      	pop	{r4, pc}
 801bada:	bf00      	nop
 801badc:	20015fb4 	.word	0x20015fb4

0801bae0 <_ZN8touchgfx11Application13requestRedrawEv>:
 801bae0:	4b06      	ldr	r3, [pc, #24]	; (801bafc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801bae2:	2100      	movs	r1, #0
 801bae4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bae8:	4b05      	ldr	r3, [pc, #20]	; (801bb00 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801baea:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801baee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801baf2:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801baf6:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801bafa:	4770      	bx	lr
 801bafc:	20015fb0 	.word	0x20015fb0
 801bb00:	20015fb2 	.word	0x20015fb2

0801bb04 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801bb04:	4b03      	ldr	r3, [pc, #12]	; (801bb14 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801bb06:	6818      	ldr	r0, [r3, #0]
 801bb08:	b110      	cbz	r0, 801bb10 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801bb0a:	6803      	ldr	r3, [r0, #0]
 801bb0c:	699b      	ldr	r3, [r3, #24]
 801bb0e:	4718      	bx	r3
 801bb10:	4770      	bx	lr
 801bb12:	bf00      	nop
 801bb14:	20015ff8 	.word	0x20015ff8

0801bb18 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801bb18:	4770      	bx	lr
	...

0801bb1c <_ZN8touchgfx11Application4drawEv>:
 801bb1c:	4b09      	ldr	r3, [pc, #36]	; (801bb44 <_ZN8touchgfx11Application4drawEv+0x28>)
 801bb1e:	b507      	push	{r0, r1, r2, lr}
 801bb20:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb24:	2100      	movs	r1, #0
 801bb26:	4b08      	ldr	r3, [pc, #32]	; (801bb48 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801bb28:	9100      	str	r1, [sp, #0]
 801bb2a:	4669      	mov	r1, sp
 801bb2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb30:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bb34:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bb38:	6803      	ldr	r3, [r0, #0]
 801bb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb3c:	4798      	blx	r3
 801bb3e:	b003      	add	sp, #12
 801bb40:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb44:	20015fb0 	.word	0x20015fb0
 801bb48:	20015fb2 	.word	0x20015fb2

0801bb4c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801bb4c:	4b03      	ldr	r3, [pc, #12]	; (801bb5c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801bb4e:	6818      	ldr	r0, [r3, #0]
 801bb50:	b110      	cbz	r0, 801bb58 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801bb52:	6803      	ldr	r3, [r0, #0]
 801bb54:	69db      	ldr	r3, [r3, #28]
 801bb56:	4718      	bx	r3
 801bb58:	4770      	bx	lr
 801bb5a:	bf00      	nop
 801bb5c:	20015ff8 	.word	0x20015ff8

0801bb60 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801bb60:	4b03      	ldr	r3, [pc, #12]	; (801bb70 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801bb62:	6818      	ldr	r0, [r3, #0]
 801bb64:	b110      	cbz	r0, 801bb6c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801bb66:	6803      	ldr	r3, [r0, #0]
 801bb68:	6a1b      	ldr	r3, [r3, #32]
 801bb6a:	4718      	bx	r3
 801bb6c:	4770      	bx	lr
 801bb6e:	bf00      	nop
 801bb70:	20015ff8 	.word	0x20015ff8

0801bb74 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801bb74:	2300      	movs	r3, #0
 801bb76:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801bb7a:	4770      	bx	lr

0801bb7c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801bb7c:	4b03      	ldr	r3, [pc, #12]	; (801bb8c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801bb7e:	6818      	ldr	r0, [r3, #0]
 801bb80:	b110      	cbz	r0, 801bb88 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801bb82:	6803      	ldr	r3, [r0, #0]
 801bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb86:	4718      	bx	r3
 801bb88:	4770      	bx	lr
 801bb8a:	bf00      	nop
 801bb8c:	20015ff8 	.word	0x20015ff8

0801bb90 <_ZN8touchgfx11ApplicationD1Ev>:
 801bb90:	4770      	bx	lr

0801bb92 <_ZN8touchgfx11ApplicationD0Ev>:
 801bb92:	b510      	push	{r4, lr}
 801bb94:	4604      	mov	r4, r0
 801bb96:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801bb9a:	f00e fef4 	bl	802a986 <_ZdlPvj>
 801bb9e:	4620      	mov	r0, r4
 801bba0:	bd10      	pop	{r4, pc}

0801bba2 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801bba2:	b510      	push	{r4, lr}
 801bba4:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bba8:	888a      	ldrh	r2, [r1, #4]
 801bbaa:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bbae:	4422      	add	r2, r4
 801bbb0:	b212      	sxth	r2, r2
 801bbb2:	4293      	cmp	r3, r2
 801bbb4:	da15      	bge.n	801bbe2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bbb6:	8882      	ldrh	r2, [r0, #4]
 801bbb8:	4413      	add	r3, r2
 801bbba:	b21b      	sxth	r3, r3
 801bbbc:	429c      	cmp	r4, r3
 801bbbe:	da10      	bge.n	801bbe2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bbc0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801bbc4:	88c9      	ldrh	r1, [r1, #6]
 801bbc6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bbca:	4419      	add	r1, r3
 801bbcc:	b209      	sxth	r1, r1
 801bbce:	428a      	cmp	r2, r1
 801bbd0:	da07      	bge.n	801bbe2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bbd2:	88c0      	ldrh	r0, [r0, #6]
 801bbd4:	4410      	add	r0, r2
 801bbd6:	b200      	sxth	r0, r0
 801bbd8:	4283      	cmp	r3, r0
 801bbda:	bfac      	ite	ge
 801bbdc:	2000      	movge	r0, #0
 801bbde:	2001      	movlt	r0, #1
 801bbe0:	bd10      	pop	{r4, pc}
 801bbe2:	2000      	movs	r0, #0
 801bbe4:	e7fc      	b.n	801bbe0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801bbe6 <_ZN8touchgfx4Rect10restrictToEss>:
 801bbe6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	b510      	push	{r4, lr}
 801bbee:	da04      	bge.n	801bbfa <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801bbf0:	8884      	ldrh	r4, [r0, #4]
 801bbf2:	4423      	add	r3, r4
 801bbf4:	8083      	strh	r3, [r0, #4]
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	8003      	strh	r3, [r0, #0]
 801bbfa:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bbfe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bc02:	1b09      	subs	r1, r1, r4
 801bc04:	428b      	cmp	r3, r1
 801bc06:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bc0a:	bfc8      	it	gt
 801bc0c:	8081      	strhgt	r1, [r0, #4]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	da04      	bge.n	801bc1c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801bc12:	88c1      	ldrh	r1, [r0, #6]
 801bc14:	440b      	add	r3, r1
 801bc16:	80c3      	strh	r3, [r0, #6]
 801bc18:	2300      	movs	r3, #0
 801bc1a:	8043      	strh	r3, [r0, #2]
 801bc1c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801bc20:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801bc24:	1a52      	subs	r2, r2, r1
 801bc26:	4293      	cmp	r3, r2
 801bc28:	bfc8      	it	gt
 801bc2a:	80c2      	strhgt	r2, [r0, #6]
 801bc2c:	bd10      	pop	{r4, pc}
	...

0801bc30 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801bc30:	4b10      	ldr	r3, [pc, #64]	; (801bc74 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801bc32:	b510      	push	{r4, lr}
 801bc34:	460c      	mov	r4, r1
 801bc36:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc3a:	4b0f      	ldr	r3, [pc, #60]	; (801bc78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801bc3c:	4620      	mov	r0, r4
 801bc3e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bc42:	f7ff ffd0 	bl	801bbe6 <_ZN8touchgfx4Rect10restrictToEss>
 801bc46:	4b0d      	ldr	r3, [pc, #52]	; (801bc7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801bc48:	6818      	ldr	r0, [r3, #0]
 801bc4a:	b190      	cbz	r0, 801bc72 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801bc4c:	6803      	ldr	r3, [r0, #0]
 801bc4e:	4621      	mov	r1, r4
 801bc50:	689b      	ldr	r3, [r3, #8]
 801bc52:	4798      	blx	r3
 801bc54:	4b0a      	ldr	r3, [pc, #40]	; (801bc80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801bc56:	6818      	ldr	r0, [r3, #0]
 801bc58:	b118      	cbz	r0, 801bc62 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801bc5a:	6803      	ldr	r3, [r0, #0]
 801bc5c:	4621      	mov	r1, r4
 801bc5e:	689b      	ldr	r3, [r3, #8]
 801bc60:	4798      	blx	r3
 801bc62:	4b08      	ldr	r3, [pc, #32]	; (801bc84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801bc64:	4621      	mov	r1, r4
 801bc66:	6818      	ldr	r0, [r3, #0]
 801bc68:	6803      	ldr	r3, [r0, #0]
 801bc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc6e:	69db      	ldr	r3, [r3, #28]
 801bc70:	4718      	bx	r3
 801bc72:	bd10      	pop	{r4, pc}
 801bc74:	20015fb2 	.word	0x20015fb2
 801bc78:	20015fb0 	.word	0x20015fb0
 801bc7c:	20015ff8 	.word	0x20015ff8
 801bc80:	20015ff4 	.word	0x20015ff4
 801bc84:	20015fbc 	.word	0x20015fbc

0801bc88 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc8a:	4606      	mov	r6, r0
 801bc8c:	4608      	mov	r0, r1
 801bc8e:	460f      	mov	r7, r1
 801bc90:	f7fc fe91 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc94:	b9e8      	cbnz	r0, 801bcd2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bc96:	f9b7 5000 	ldrsh.w	r5, [r7]
 801bc9a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801bc9e:	42a5      	cmp	r5, r4
 801bca0:	db17      	blt.n	801bcd2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bca2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801bca6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	db11      	blt.n	801bcd2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bcae:	88b9      	ldrh	r1, [r7, #4]
 801bcb0:	440d      	add	r5, r1
 801bcb2:	88b1      	ldrh	r1, [r6, #4]
 801bcb4:	440c      	add	r4, r1
 801bcb6:	b22d      	sxth	r5, r5
 801bcb8:	b224      	sxth	r4, r4
 801bcba:	42a5      	cmp	r5, r4
 801bcbc:	dc09      	bgt.n	801bcd2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bcbe:	88f8      	ldrh	r0, [r7, #6]
 801bcc0:	4410      	add	r0, r2
 801bcc2:	88f2      	ldrh	r2, [r6, #6]
 801bcc4:	4413      	add	r3, r2
 801bcc6:	b200      	sxth	r0, r0
 801bcc8:	b21b      	sxth	r3, r3
 801bcca:	4298      	cmp	r0, r3
 801bccc:	bfcc      	ite	gt
 801bcce:	2000      	movgt	r0, #0
 801bcd0:	2001      	movle	r0, #1
 801bcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bcd4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcd6:	4604      	mov	r4, r0
 801bcd8:	4608      	mov	r0, r1
 801bcda:	460d      	mov	r5, r1
 801bcdc:	f7fc fe6b 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bce0:	b978      	cbnz	r0, 801bd02 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801bce2:	4620      	mov	r0, r4
 801bce4:	f7fc fe67 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bce8:	f9b5 6000 	ldrsh.w	r6, [r5]
 801bcec:	b150      	cbz	r0, 801bd04 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801bcee:	8026      	strh	r6, [r4, #0]
 801bcf0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bcf4:	8063      	strh	r3, [r4, #2]
 801bcf6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801bcfa:	80a3      	strh	r3, [r4, #4]
 801bcfc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bd00:	80e3      	strh	r3, [r4, #6]
 801bd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd04:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bd08:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801bd0c:	42b1      	cmp	r1, r6
 801bd0e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bd12:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801bd16:	460f      	mov	r7, r1
 801bd18:	88ed      	ldrh	r5, [r5, #6]
 801bd1a:	bfa8      	it	ge
 801bd1c:	4637      	movge	r7, r6
 801bd1e:	4293      	cmp	r3, r2
 801bd20:	4618      	mov	r0, r3
 801bd22:	4466      	add	r6, ip
 801bd24:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801bd28:	bfa8      	it	ge
 801bd2a:	4610      	movge	r0, r2
 801bd2c:	442a      	add	r2, r5
 801bd2e:	88e5      	ldrh	r5, [r4, #6]
 801bd30:	4461      	add	r1, ip
 801bd32:	b236      	sxth	r6, r6
 801bd34:	8027      	strh	r7, [r4, #0]
 801bd36:	442b      	add	r3, r5
 801bd38:	b209      	sxth	r1, r1
 801bd3a:	b212      	sxth	r2, r2
 801bd3c:	8060      	strh	r0, [r4, #2]
 801bd3e:	b21b      	sxth	r3, r3
 801bd40:	428e      	cmp	r6, r1
 801bd42:	bfac      	ite	ge
 801bd44:	ebc7 0106 	rsbge	r1, r7, r6
 801bd48:	ebc7 0101 	rsblt	r1, r7, r1
 801bd4c:	429a      	cmp	r2, r3
 801bd4e:	bfac      	ite	ge
 801bd50:	ebc0 0202 	rsbge	r2, r0, r2
 801bd54:	ebc0 0203 	rsblt	r2, r0, r3
 801bd58:	80a1      	strh	r1, [r4, #4]
 801bd5a:	80e2      	strh	r2, [r4, #6]
 801bd5c:	e7d1      	b.n	801bd02 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801bd60 <_ZN8touchgfx11Application11getInstanceEv>:
 801bd60:	4b01      	ldr	r3, [pc, #4]	; (801bd68 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801bd62:	6818      	ldr	r0, [r3, #0]
 801bd64:	4770      	bx	lr
 801bd66:	bf00      	nop
 801bd68:	20016008 	.word	0x20016008

0801bd6c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801bd6c:	2300      	movs	r3, #0
 801bd6e:	b510      	push	{r4, lr}
 801bd70:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801bd74:	4604      	mov	r4, r0
 801bd76:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801bd7a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801bd7e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801bd82:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801bd86:	429a      	cmp	r2, r3
 801bd88:	d90e      	bls.n	801bda8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801bd8a:	18e2      	adds	r2, r4, r3
 801bd8c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801bd90:	b122      	cbz	r2, 801bd9c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801bd92:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801bd96:	6803      	ldr	r3, [r0, #0]
 801bd98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd9a:	4798      	blx	r3
 801bd9c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801bda0:	3301      	adds	r3, #1
 801bda2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801bda6:	e7ea      	b.n	801bd7e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801bda8:	bd10      	pop	{r4, pc}

0801bdaa <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801bdaa:	2300      	movs	r3, #0
 801bdac:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801bdb0:	30a4      	adds	r0, #164	; 0xa4
 801bdb2:	f820 3c24 	strh.w	r3, [r0, #-36]
 801bdb6:	f802 3b01 	strb.w	r3, [r2], #1
 801bdba:	4282      	cmp	r2, r0
 801bdbc:	d1fb      	bne.n	801bdb6 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801bdbe:	4770      	bx	lr

0801bdc0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801bdc0:	b570      	push	{r4, r5, r6, lr}
 801bdc2:	4c0b      	ldr	r4, [pc, #44]	; (801bdf0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801bdc4:	4605      	mov	r5, r0
 801bdc6:	460e      	mov	r6, r1
 801bdc8:	6820      	ldr	r0, [r4, #0]
 801bdca:	b110      	cbz	r0, 801bdd2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801bdcc:	6803      	ldr	r3, [r0, #0]
 801bdce:	695b      	ldr	r3, [r3, #20]
 801bdd0:	4798      	blx	r3
 801bdd2:	1d28      	adds	r0, r5, #4
 801bdd4:	f7ff ffe9 	bl	801bdaa <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801bdd8:	6026      	str	r6, [r4, #0]
 801bdda:	6833      	ldr	r3, [r6, #0]
 801bddc:	4630      	mov	r0, r6
 801bdde:	68db      	ldr	r3, [r3, #12]
 801bde0:	4798      	blx	r3
 801bde2:	682b      	ldr	r3, [r5, #0]
 801bde4:	4628      	mov	r0, r5
 801bde6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bde8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bdec:	4718      	bx	r3
 801bdee:	bf00      	nop
 801bdf0:	20015ff8 	.word	0x20015ff8

0801bdf4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801bdf4:	2300      	movs	r3, #0
 801bdf6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801bdfa:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801bdfe:	461a      	mov	r2, r3
 801be00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be02:	461c      	mov	r4, r3
 801be04:	461d      	mov	r5, r3
 801be06:	459c      	cmp	ip, r3
 801be08:	dd1a      	ble.n	801be40 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801be0a:	18c6      	adds	r6, r0, r3
 801be0c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801be10:	b16e      	cbz	r6, 801be2e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801be12:	429a      	cmp	r2, r3
 801be14:	d008      	beq.n	801be28 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801be16:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801be1a:	fa1f fe82 	uxth.w	lr, r2
 801be1e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801be22:	1887      	adds	r7, r0, r2
 801be24:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801be28:	3201      	adds	r2, #1
 801be2a:	3301      	adds	r3, #1
 801be2c:	e7eb      	b.n	801be06 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801be2e:	4299      	cmp	r1, r3
 801be30:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801be34:	bfa8      	it	ge
 801be36:	3501      	addge	r5, #1
 801be38:	429e      	cmp	r6, r3
 801be3a:	bfc8      	it	gt
 801be3c:	3401      	addgt	r4, #1
 801be3e:	e7f4      	b.n	801be2a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801be40:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801be44:	1b49      	subs	r1, r1, r5
 801be46:	1b1b      	subs	r3, r3, r4
 801be48:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801be4c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801be50:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801be54:	4293      	cmp	r3, r2
 801be56:	dd03      	ble.n	801be60 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801be58:	3b01      	subs	r3, #1
 801be5a:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801be5e:	e7f7      	b.n	801be50 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801be60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801be64 <_ZN8touchgfx11Application15handleTickEventEv>:
 801be64:	b570      	push	{r4, r5, r6, lr}
 801be66:	4d16      	ldr	r5, [pc, #88]	; (801bec0 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801be68:	4604      	mov	r4, r0
 801be6a:	6828      	ldr	r0, [r5, #0]
 801be6c:	b140      	cbz	r0, 801be80 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801be6e:	7a03      	ldrb	r3, [r0, #8]
 801be70:	b933      	cbnz	r3, 801be80 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801be72:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801be76:	6803      	ldr	r3, [r0, #0]
 801be78:	689b      	ldr	r3, [r3, #8]
 801be7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be7e:	4718      	bx	r3
 801be80:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801be84:	4e0f      	ldr	r6, [pc, #60]	; (801bec4 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801be86:	b973      	cbnz	r3, 801bea6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801be88:	b168      	cbz	r0, 801bea6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801be8a:	7a03      	ldrb	r3, [r0, #8]
 801be8c:	b15b      	cbz	r3, 801bea6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801be8e:	6830      	ldr	r0, [r6, #0]
 801be90:	b110      	cbz	r0, 801be98 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801be92:	6803      	ldr	r3, [r0, #0]
 801be94:	691b      	ldr	r3, [r3, #16]
 801be96:	4798      	blx	r3
 801be98:	6828      	ldr	r0, [r5, #0]
 801be9a:	6803      	ldr	r3, [r0, #0]
 801be9c:	68db      	ldr	r3, [r3, #12]
 801be9e:	4798      	blx	r3
 801bea0:	2301      	movs	r3, #1
 801bea2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801bea6:	3404      	adds	r4, #4
 801bea8:	4620      	mov	r0, r4
 801beaa:	f7ff ff5f 	bl	801bd6c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801beae:	4620      	mov	r0, r4
 801beb0:	f7ff ffa0 	bl	801bdf4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801beb4:	6830      	ldr	r0, [r6, #0]
 801beb6:	b110      	cbz	r0, 801bebe <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801beb8:	6803      	ldr	r3, [r0, #0]
 801beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bebc:	e7dd      	b.n	801be7a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801bebe:	bd70      	pop	{r4, r5, r6, pc}
 801bec0:	20015ffc 	.word	0x20015ffc
 801bec4:	20015ff8 	.word	0x20015ff8

0801bec8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801bec8:	4603      	mov	r3, r0
 801beca:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801bece:	2200      	movs	r2, #0
 801bed0:	801a      	strh	r2, [r3, #0]
 801bed2:	3308      	adds	r3, #8
 801bed4:	f823 2c06 	strh.w	r2, [r3, #-6]
 801bed8:	f823 2c04 	strh.w	r2, [r3, #-4]
 801bedc:	f823 2c02 	strh.w	r2, [r3, #-2]
 801bee0:	428b      	cmp	r3, r1
 801bee2:	d1f5      	bne.n	801bed0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801bee4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801bee8:	4770      	bx	lr
	...

0801beec <_ZN8touchgfx11ApplicationC1Ev>:
 801beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beee:	4b1d      	ldr	r3, [pc, #116]	; (801bf64 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801bef0:	4606      	mov	r6, r0
 801bef2:	4604      	mov	r4, r0
 801bef4:	2500      	movs	r5, #0
 801bef6:	f846 3b04 	str.w	r3, [r6], #4
 801befa:	22a8      	movs	r2, #168	; 0xa8
 801befc:	2100      	movs	r1, #0
 801befe:	4630      	mov	r0, r6
 801bf00:	f00e fef6 	bl	802acf0 <memset>
 801bf04:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801bf08:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801bf0c:	4f16      	ldr	r7, [pc, #88]	; (801bf68 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801bf0e:	f7ff ffdb 	bl	801bec8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bf12:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801bf16:	f7ff ffd7 	bl	801bec8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bf1a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801bf1e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801bf22:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801bf26:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801bf2a:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801bf2e:	490f      	ldr	r1, [pc, #60]	; (801bf6c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801bf30:	480f      	ldr	r0, [pc, #60]	; (801bf70 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801bf32:	f00e fc1f 	bl	802a774 <CRC_Lock>
 801bf36:	4b0f      	ldr	r3, [pc, #60]	; (801bf74 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801bf38:	b158      	cbz	r0, 801bf52 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801bf3a:	801d      	strh	r5, [r3, #0]
 801bf3c:	2300      	movs	r3, #0
 801bf3e:	4a0e      	ldr	r2, [pc, #56]	; (801bf78 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801bf40:	4630      	mov	r0, r6
 801bf42:	6013      	str	r3, [r2, #0]
 801bf44:	4a0d      	ldr	r2, [pc, #52]	; (801bf7c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801bf46:	603b      	str	r3, [r7, #0]
 801bf48:	6013      	str	r3, [r2, #0]
 801bf4a:	f7ff ff2e 	bl	801bdaa <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801bf4e:	4620      	mov	r0, r4
 801bf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bf56:	2002      	movs	r0, #2
 801bf58:	801a      	strh	r2, [r3, #0]
 801bf5a:	6038      	str	r0, [r7, #0]
 801bf5c:	f001 fa24 	bl	801d3a8 <_ZN8touchgfx6Screen4drawEv>
 801bf60:	e7ec      	b.n	801bf3c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801bf62:	bf00      	nop
 801bf64:	08030724 	.word	0x08030724
 801bf68:	20015ff8 	.word	0x20015ff8
 801bf6c:	b5e8b5cd 	.word	0xb5e8b5cd
 801bf70:	f407a5c2 	.word	0xf407a5c2
 801bf74:	20000044 	.word	0x20000044
 801bf78:	20016008 	.word	0x20016008
 801bf7c:	20015ffc 	.word	0x20015ffc

0801bf80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bf80:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801bf84:	3b01      	subs	r3, #1
 801bf86:	b29b      	uxth	r3, r3
 801bf88:	428b      	cmp	r3, r1
 801bf8a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801bf8e:	b510      	push	{r4, lr}
 801bf90:	d908      	bls.n	801bfa4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801bf92:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801bf96:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801bf9a:	681a      	ldr	r2, [r3, #0]
 801bf9c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801bfa0:	685a      	ldr	r2, [r3, #4]
 801bfa2:	6062      	str	r2, [r4, #4]
 801bfa4:	bd10      	pop	{r4, pc}
	...

0801bfa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801bfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfac:	b08f      	sub	sp, #60	; 0x3c
 801bfae:	4b8f      	ldr	r3, [pc, #572]	; (801c1ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801bfb0:	4683      	mov	fp, r0
 801bfb2:	ac0a      	add	r4, sp, #40	; 0x28
 801bfb4:	e884 0006 	stmia.w	r4, {r1, r2}
 801bfb8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bfbc:	4620      	mov	r0, r4
 801bfbe:	4b8c      	ldr	r3, [pc, #560]	; (801c1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801bfc0:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bfc4:	f7ff fe0f 	bl	801bbe6 <_ZN8touchgfx4Rect10restrictToEss>
 801bfc8:	4620      	mov	r0, r4
 801bfca:	f7fc fcf4 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bfce:	2800      	cmp	r0, #0
 801bfd0:	d16a      	bne.n	801c0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801bfd2:	9403      	str	r4, [sp, #12]
 801bfd4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801bfd8:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801bfdc:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801bfe0:	9301      	str	r3, [sp, #4]
 801bfe2:	35a4      	adds	r5, #164	; 0xa4
 801bfe4:	b15c      	cbz	r4, 801bffe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801bfe6:	4629      	mov	r1, r5
 801bfe8:	9803      	ldr	r0, [sp, #12]
 801bfea:	f7ff fe4d 	bl	801bc88 <_ZNK8touchgfx4Rect8includesERKS0_>
 801bfee:	3c01      	subs	r4, #1
 801bff0:	b118      	cbz	r0, 801bffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801bff2:	b2a1      	uxth	r1, r4
 801bff4:	9801      	ldr	r0, [sp, #4]
 801bff6:	f7ff ffc3 	bl	801bf80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bffa:	3d08      	subs	r5, #8
 801bffc:	e7f2      	b.n	801bfe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801bffe:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801c002:	f108 33ff 	add.w	r3, r8, #4294967295
 801c006:	f8cd 8010 	str.w	r8, [sp, #16]
 801c00a:	9302      	str	r3, [sp, #8]
 801c00c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801c010:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801c014:	9306      	str	r3, [sp, #24]
 801c016:	445c      	add	r4, fp
 801c018:	2500      	movs	r5, #0
 801c01a:	4626      	mov	r6, r4
 801c01c:	f8cd 8014 	str.w	r8, [sp, #20]
 801c020:	462f      	mov	r7, r5
 801c022:	9b05      	ldr	r3, [sp, #20]
 801c024:	2b00      	cmp	r3, #0
 801c026:	d073      	beq.n	801c110 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801c028:	9903      	ldr	r1, [sp, #12]
 801c02a:	4630      	mov	r0, r6
 801c02c:	f7ff fdb9 	bl	801bba2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c030:	b350      	cbz	r0, 801c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801c032:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801c036:	f9b6 c000 	ldrsh.w	ip, [r6]
 801c03a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801c03e:	45e6      	cmp	lr, ip
 801c040:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801c044:	db33      	blt.n	801c0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801c046:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801c04a:	88b3      	ldrh	r3, [r6, #4]
 801c04c:	4472      	add	r2, lr
 801c04e:	4463      	add	r3, ip
 801c050:	b212      	sxth	r2, r2
 801c052:	b21b      	sxth	r3, r3
 801c054:	429a      	cmp	r2, r3
 801c056:	dc2a      	bgt.n	801c0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801c058:	fa1f f289 	uxth.w	r2, r9
 801c05c:	88f3      	ldrh	r3, [r6, #6]
 801c05e:	45ca      	cmp	sl, r9
 801c060:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801c064:	4413      	add	r3, r2
 801c066:	fa1f fc8a 	uxth.w	ip, sl
 801c06a:	b29b      	uxth	r3, r3
 801c06c:	fa0f fe83 	sxth.w	lr, r3
 801c070:	db0f      	blt.n	801c092 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801c072:	eba3 030c 	sub.w	r3, r3, ip
 801c076:	1ac9      	subs	r1, r1, r3
 801c078:	b209      	sxth	r1, r1
 801c07a:	2900      	cmp	r1, #0
 801c07c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c080:	dd12      	ble.n	801c0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c082:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801c086:	4605      	mov	r5, r0
 801c088:	9b05      	ldr	r3, [sp, #20]
 801c08a:	3e08      	subs	r6, #8
 801c08c:	3b01      	subs	r3, #1
 801c08e:	9305      	str	r3, [sp, #20]
 801c090:	e7c7      	b.n	801c022 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c092:	4461      	add	r1, ip
 801c094:	b209      	sxth	r1, r1
 801c096:	4571      	cmp	r1, lr
 801c098:	dc38      	bgt.n	801c10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c09a:	eba2 020c 	sub.w	r2, r2, ip
 801c09e:	b212      	sxth	r2, r2
 801c0a0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801c0a4:	2a00      	cmp	r2, #0
 801c0a6:	dcee      	bgt.n	801c086 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801c0a8:	b00f      	add	sp, #60	; 0x3c
 801c0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ae:	45ca      	cmp	sl, r9
 801c0b0:	db2c      	blt.n	801c10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c0b2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801c0b6:	449a      	add	sl, r3
 801c0b8:	88f3      	ldrh	r3, [r6, #6]
 801c0ba:	4499      	add	r9, r3
 801c0bc:	fa0f fa8a 	sxth.w	sl, sl
 801c0c0:	fa0f f989 	sxth.w	r9, r9
 801c0c4:	45ca      	cmp	sl, r9
 801c0c6:	dc21      	bgt.n	801c10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c0c8:	fa1f f28c 	uxth.w	r2, ip
 801c0cc:	88b3      	ldrh	r3, [r6, #4]
 801c0ce:	45e6      	cmp	lr, ip
 801c0d0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c0d4:	4413      	add	r3, r2
 801c0d6:	fa1f f98e 	uxth.w	r9, lr
 801c0da:	b29b      	uxth	r3, r3
 801c0dc:	fa0f fa83 	sxth.w	sl, r3
 801c0e0:	db0a      	blt.n	801c0f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801c0e2:	eba3 0309 	sub.w	r3, r3, r9
 801c0e6:	1ac9      	subs	r1, r1, r3
 801c0e8:	b209      	sxth	r1, r1
 801c0ea:	2900      	cmp	r1, #0
 801c0ec:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801c0f0:	ddda      	ble.n	801c0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c0f2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c0f6:	e7c6      	b.n	801c086 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801c0f8:	4449      	add	r1, r9
 801c0fa:	b209      	sxth	r1, r1
 801c0fc:	4551      	cmp	r1, sl
 801c0fe:	dc05      	bgt.n	801c10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c100:	eba2 0209 	sub.w	r2, r2, r9
 801c104:	b212      	sxth	r2, r2
 801c106:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801c10a:	e7cb      	b.n	801c0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801c10c:	4607      	mov	r7, r0
 801c10e:	e7bb      	b.n	801c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801c110:	2d00      	cmp	r5, #0
 801c112:	d181      	bne.n	801c018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801c114:	2f00      	cmp	r7, #0
 801c116:	f000 81dd 	beq.w	801c4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c11a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801c11e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801c122:	b2b3      	uxth	r3, r6
 801c124:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801c128:	b2b9      	uxth	r1, r7
 801c12a:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801c12e:	441a      	add	r2, r3
 801c130:	448a      	add	sl, r1
 801c132:	9105      	str	r1, [sp, #20]
 801c134:	b292      	uxth	r2, r2
 801c136:	fa1f fa8a 	uxth.w	sl, sl
 801c13a:	fa0f f882 	sxth.w	r8, r2
 801c13e:	fa0f f98a 	sxth.w	r9, sl
 801c142:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801c146:	9b04      	ldr	r3, [sp, #16]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d053      	beq.n	801c1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c14c:	9903      	ldr	r1, [sp, #12]
 801c14e:	4620      	mov	r0, r4
 801c150:	f7ff fd27 	bl	801bba2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c154:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c158:	b1c0      	cbz	r0, 801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c15a:	f9b4 e000 	ldrsh.w	lr, [r4]
 801c15e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801c162:	4576      	cmp	r6, lr
 801c164:	dc23      	bgt.n	801c1ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c166:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c16a:	44f4      	add	ip, lr
 801c16c:	fa0f fc8c 	sxth.w	ip, ip
 801c170:	45e0      	cmp	r8, ip
 801c172:	db1c      	blt.n	801c1ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c174:	428f      	cmp	r7, r1
 801c176:	fa1f fc81 	uxth.w	ip, r1
 801c17a:	88e1      	ldrh	r1, [r4, #6]
 801c17c:	dc0d      	bgt.n	801c19a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801c17e:	ebaa 0c0c 	sub.w	ip, sl, ip
 801c182:	f8a4 9002 	strh.w	r9, [r4, #2]
 801c186:	eba1 010c 	sub.w	r1, r1, ip
 801c18a:	80e1      	strh	r1, [r4, #6]
 801c18c:	4628      	mov	r0, r5
 801c18e:	9904      	ldr	r1, [sp, #16]
 801c190:	3c08      	subs	r4, #8
 801c192:	4605      	mov	r5, r0
 801c194:	3901      	subs	r1, #1
 801c196:	9104      	str	r1, [sp, #16]
 801c198:	e7d3      	b.n	801c142 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801c19a:	4461      	add	r1, ip
 801c19c:	b209      	sxth	r1, r1
 801c19e:	4549      	cmp	r1, r9
 801c1a0:	dcf5      	bgt.n	801c18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c1a2:	9905      	ldr	r1, [sp, #20]
 801c1a4:	eba1 0c0c 	sub.w	ip, r1, ip
 801c1a8:	f8a4 c006 	strh.w	ip, [r4, #6]
 801c1ac:	e7ee      	b.n	801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c1ae:	428f      	cmp	r7, r1
 801c1b0:	dced      	bgt.n	801c18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c1b2:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801c1b6:	4461      	add	r1, ip
 801c1b8:	b209      	sxth	r1, r1
 801c1ba:	4589      	cmp	r9, r1
 801c1bc:	dbe7      	blt.n	801c18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c1be:	4576      	cmp	r6, lr
 801c1c0:	fa1f fc8e 	uxth.w	ip, lr
 801c1c4:	88a1      	ldrh	r1, [r4, #4]
 801c1c6:	dc07      	bgt.n	801c1d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801c1c8:	eba2 0c0c 	sub.w	ip, r2, ip
 801c1cc:	f8a4 8000 	strh.w	r8, [r4]
 801c1d0:	eba1 010c 	sub.w	r1, r1, ip
 801c1d4:	80a1      	strh	r1, [r4, #4]
 801c1d6:	e7d9      	b.n	801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c1d8:	4461      	add	r1, ip
 801c1da:	b209      	sxth	r1, r1
 801c1dc:	4588      	cmp	r8, r1
 801c1de:	dbd6      	blt.n	801c18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c1e0:	eba3 0c0c 	sub.w	ip, r3, ip
 801c1e4:	f8a4 c004 	strh.w	ip, [r4, #4]
 801c1e8:	e7d0      	b.n	801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c1ea:	bf00      	nop
 801c1ec:	20015fb2 	.word	0x20015fb2
 801c1f0:	20015fb0 	.word	0x20015fb0
 801c1f4:	2d00      	cmp	r5, #0
 801c1f6:	f000 816d 	beq.w	801c4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c1fa:	9b06      	ldr	r3, [sp, #24]
 801c1fc:	445b      	add	r3, fp
 801c1fe:	461c      	mov	r4, r3
 801c200:	9b02      	ldr	r3, [sp, #8]
 801c202:	3301      	adds	r3, #1
 801c204:	f000 8166 	beq.w	801c4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c208:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801c20c:	9803      	ldr	r0, [sp, #12]
 801c20e:	4629      	mov	r1, r5
 801c210:	f7ff fd3a 	bl	801bc88 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c214:	b120      	cbz	r0, 801c220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801c216:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c21a:	9801      	ldr	r0, [sp, #4]
 801c21c:	f7ff feb0 	bl	801bf80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c220:	9903      	ldr	r1, [sp, #12]
 801c222:	4628      	mov	r0, r5
 801c224:	f7ff fcbd 	bl	801bba2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c228:	2800      	cmp	r0, #0
 801c22a:	f000 809c 	beq.w	801c366 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801c22e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801c232:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801c236:	fa1f f189 	uxth.w	r1, r9
 801c23a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801c23e:	9309      	str	r3, [sp, #36]	; 0x24
 801c240:	eb01 0c03 	add.w	ip, r1, r3
 801c244:	b283      	uxth	r3, r0
 801c246:	4548      	cmp	r0, r9
 801c248:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801c24c:	fa1f fa8c 	uxth.w	sl, ip
 801c250:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801c254:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801c258:	eb03 050c 	add.w	r5, r3, ip
 801c25c:	b2ad      	uxth	r5, r5
 801c25e:	9505      	str	r5, [sp, #20]
 801c260:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801c264:	9504      	str	r5, [sp, #16]
 801c266:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801c26a:	f340 8099 	ble.w	801c3a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801c26e:	1a5b      	subs	r3, r3, r1
 801c270:	4596      	cmp	lr, r2
 801c272:	fa0f f08a 	sxth.w	r0, sl
 801c276:	b29b      	uxth	r3, r3
 801c278:	b21e      	sxth	r6, r3
 801c27a:	dd2e      	ble.n	801c2da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801c27c:	9f02      	ldr	r7, [sp, #8]
 801c27e:	fa1f fe8e 	uxth.w	lr, lr
 801c282:	b292      	uxth	r2, r2
 801c284:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801c288:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801c28c:	9f04      	ldr	r7, [sp, #16]
 801c28e:	ebae 0102 	sub.w	r1, lr, r2
 801c292:	44a6      	add	lr, r4
 801c294:	1a3f      	subs	r7, r7, r0
 801c296:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801c29a:	b289      	uxth	r1, r1
 801c29c:	4402      	add	r2, r0
 801c29e:	fa0f fe8e 	sxth.w	lr, lr
 801c2a2:	b20d      	sxth	r5, r1
 801c2a4:	b212      	sxth	r2, r2
 801c2a6:	436f      	muls	r7, r5
 801c2a8:	ebae 0202 	sub.w	r2, lr, r2
 801c2ac:	4372      	muls	r2, r6
 801c2ae:	4297      	cmp	r7, r2
 801c2b0:	db09      	blt.n	801c2c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801c2b2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801c2b6:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801c2ba:	449c      	add	ip, r3
 801c2bc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c2c0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801c2c4:	e686      	b.n	801bfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c2c6:	4421      	add	r1, r4
 801c2c8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801c2cc:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801c2d0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c2d4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c2d8:	e67c      	b.n	801bfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c2da:	9f04      	ldr	r7, [sp, #16]
 801c2dc:	42b8      	cmp	r0, r7
 801c2de:	da27      	bge.n	801c330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801c2e0:	9902      	ldr	r1, [sp, #8]
 801c2e2:	1a3f      	subs	r7, r7, r0
 801c2e4:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801c2e8:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801c2ec:	eb05 010e 	add.w	r1, r5, lr
 801c2f0:	fa1f f881 	uxth.w	r8, r1
 801c2f4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801c2f8:	4411      	add	r1, r2
 801c2fa:	fa0f f988 	sxth.w	r9, r8
 801c2fe:	eba2 020e 	sub.w	r2, r2, lr
 801c302:	eba1 0108 	sub.w	r1, r1, r8
 801c306:	4372      	muls	r2, r6
 801c308:	b289      	uxth	r1, r1
 801c30a:	fa0f f881 	sxth.w	r8, r1
 801c30e:	fb08 f707 	mul.w	r7, r8, r7
 801c312:	42ba      	cmp	r2, r7
 801c314:	dc06      	bgt.n	801c324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801c316:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801c31a:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801c31e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801c322:	e7ca      	b.n	801c2ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801c324:	4429      	add	r1, r5
 801c326:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801c32a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c32e:	e651      	b.n	801bfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c330:	9805      	ldr	r0, [sp, #20]
 801c332:	2d06      	cmp	r5, #6
 801c334:	ebaa 0000 	sub.w	r0, sl, r0
 801c338:	b280      	uxth	r0, r0
 801c33a:	fa0f fe80 	sxth.w	lr, r0
 801c33e:	d817      	bhi.n	801c370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801c340:	9b04      	ldr	r3, [sp, #16]
 801c342:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801c346:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801c34a:	1c6b      	adds	r3, r5, #1
 801c34c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801c350:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801c354:	9b01      	ldr	r3, [sp, #4]
 801c356:	9801      	ldr	r0, [sp, #4]
 801c358:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c35c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801c360:	805a      	strh	r2, [r3, #2]
 801c362:	809e      	strh	r6, [r3, #4]
 801c364:	80d9      	strh	r1, [r3, #6]
 801c366:	9b02      	ldr	r3, [sp, #8]
 801c368:	3c08      	subs	r4, #8
 801c36a:	3b01      	subs	r3, #1
 801c36c:	9302      	str	r3, [sp, #8]
 801c36e:	e747      	b.n	801c200 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801c370:	9a02      	ldr	r2, [sp, #8]
 801c372:	45b6      	cmp	lr, r6
 801c374:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c378:	db0d      	blt.n	801c396 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c37a:	449c      	add	ip, r3
 801c37c:	445a      	add	r2, fp
 801c37e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801c382:	fa1f fc8c 	uxth.w	ip, ip
 801c386:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801c38a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801c38e:	448c      	add	ip, r1
 801c390:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801c394:	e61e      	b.n	801bfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c396:	445a      	add	r2, fp
 801c398:	4484      	add	ip, r0
 801c39a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801c39e:	e78f      	b.n	801c2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c3a0:	fa1f f18e 	uxth.w	r1, lr
 801c3a4:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801c3a8:	b293      	uxth	r3, r2
 801c3aa:	4596      	cmp	lr, r2
 801c3ac:	eb01 0806 	add.w	r8, r1, r6
 801c3b0:	9306      	str	r3, [sp, #24]
 801c3b2:	fa1f f888 	uxth.w	r8, r8
 801c3b6:	9f06      	ldr	r7, [sp, #24]
 801c3b8:	fa0f f388 	sxth.w	r3, r8
 801c3bc:	9307      	str	r3, [sp, #28]
 801c3be:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801c3c2:	443b      	add	r3, r7
 801c3c4:	b29b      	uxth	r3, r3
 801c3c6:	9308      	str	r3, [sp, #32]
 801c3c8:	da24      	bge.n	801c414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801c3ca:	9905      	ldr	r1, [sp, #20]
 801c3cc:	eba3 0308 	sub.w	r3, r3, r8
 801c3d0:	eba2 020e 	sub.w	r2, r2, lr
 801c3d4:	eba9 0000 	sub.w	r0, r9, r0
 801c3d8:	ebaa 0401 	sub.w	r4, sl, r1
 801c3dc:	b29b      	uxth	r3, r3
 801c3de:	b2a4      	uxth	r4, r4
 801c3e0:	b219      	sxth	r1, r3
 801c3e2:	b225      	sxth	r5, r4
 801c3e4:	4348      	muls	r0, r1
 801c3e6:	436a      	muls	r2, r5
 801c3e8:	4282      	cmp	r2, r0
 801c3ea:	9a02      	ldr	r2, [sp, #8]
 801c3ec:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c3f0:	445a      	add	r2, fp
 801c3f2:	dc06      	bgt.n	801c402 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801c3f4:	9b07      	ldr	r3, [sp, #28]
 801c3f6:	44a4      	add	ip, r4
 801c3f8:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801c3fc:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801c400:	e75e      	b.n	801c2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c402:	9904      	ldr	r1, [sp, #16]
 801c404:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801c408:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801c40c:	4433      	add	r3, r6
 801c40e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c412:	e5df      	b.n	801bfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c414:	9f06      	ldr	r7, [sp, #24]
 801c416:	9b04      	ldr	r3, [sp, #16]
 801c418:	1bc9      	subs	r1, r1, r7
 801c41a:	fa0f f78a 	sxth.w	r7, sl
 801c41e:	b289      	uxth	r1, r1
 801c420:	429f      	cmp	r7, r3
 801c422:	fa0f fe81 	sxth.w	lr, r1
 801c426:	dd23      	ble.n	801c470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801c428:	9a05      	ldr	r2, [sp, #20]
 801c42a:	eba9 0000 	sub.w	r0, r9, r0
 801c42e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c432:	ebaa 0202 	sub.w	r2, sl, r2
 801c436:	9d07      	ldr	r5, [sp, #28]
 801c438:	fb0e f000 	mul.w	r0, lr, r0
 801c43c:	b292      	uxth	r2, r2
 801c43e:	eba5 0a03 	sub.w	sl, r5, r3
 801c442:	9b02      	ldr	r3, [sp, #8]
 801c444:	b214      	sxth	r4, r2
 801c446:	00db      	lsls	r3, r3, #3
 801c448:	fb04 fa0a 	mul.w	sl, r4, sl
 801c44c:	445b      	add	r3, fp
 801c44e:	4550      	cmp	r0, sl
 801c450:	db03      	blt.n	801c45a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801c452:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801c456:	4494      	add	ip, r2
 801c458:	e732      	b.n	801c2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c45a:	9a04      	ldr	r2, [sp, #16]
 801c45c:	4431      	add	r1, r6
 801c45e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801c462:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801c466:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801c46a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c46e:	e75c      	b.n	801c32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801c470:	9b08      	ldr	r3, [sp, #32]
 801c472:	2d06      	cmp	r5, #6
 801c474:	eba3 0308 	sub.w	r3, r3, r8
 801c478:	b29b      	uxth	r3, r3
 801c47a:	b218      	sxth	r0, r3
 801c47c:	d813      	bhi.n	801c4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801c47e:	9b07      	ldr	r3, [sp, #28]
 801c480:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801c484:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801c488:	1c6b      	adds	r3, r5, #1
 801c48a:	9901      	ldr	r1, [sp, #4]
 801c48c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801c490:	9b01      	ldr	r3, [sp, #4]
 801c492:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801c496:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c49a:	805a      	strh	r2, [r3, #2]
 801c49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c49e:	f8a3 e006 	strh.w	lr, [r3, #6]
 801c4a2:	809a      	strh	r2, [r3, #4]
 801c4a4:	e75f      	b.n	801c366 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801c4a6:	9c02      	ldr	r4, [sp, #8]
 801c4a8:	4570      	cmp	r0, lr
 801c4aa:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c4ae:	db0d      	blt.n	801c4cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801c4b0:	4431      	add	r1, r6
 801c4b2:	9b06      	ldr	r3, [sp, #24]
 801c4b4:	445c      	add	r4, fp
 801c4b6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c4ba:	b289      	uxth	r1, r1
 801c4bc:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801c4c0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c4c4:	4419      	add	r1, r3
 801c4c6:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801c4ca:	e583      	b.n	801bfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c4cc:	445c      	add	r4, fp
 801c4ce:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801c4d2:	e79b      	b.n	801c40c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801c4d4:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801c4d8:	2e07      	cmp	r6, #7
 801c4da:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801c4de:	d812      	bhi.n	801c506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801c4e0:	1c75      	adds	r5, r6, #1
 801c4e2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801c4e6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801c4ea:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801c4ee:	9d01      	ldr	r5, [sp, #4]
 801c4f0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c4f4:	442c      	add	r4, r5
 801c4f6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801c4fa:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801c4fe:	8061      	strh	r1, [r4, #2]
 801c500:	80a2      	strh	r2, [r4, #4]
 801c502:	80e3      	strh	r3, [r4, #6]
 801c504:	e5d0      	b.n	801c0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c506:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801c50a:	3e01      	subs	r6, #1
 801c50c:	445c      	add	r4, fp
 801c50e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801c512:	f04f 37ff 	mov.w	r7, #4294967295
 801c516:	2500      	movs	r5, #0
 801c518:	9305      	str	r3, [sp, #20]
 801c51a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801c51e:	1e72      	subs	r2, r6, #1
 801c520:	9302      	str	r3, [sp, #8]
 801c522:	4691      	mov	r9, r2
 801c524:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801c528:	9304      	str	r3, [sp, #16]
 801c52a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801c52e:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c532:	6818      	ldr	r0, [r3, #0]
 801c534:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801c538:	9207      	str	r2, [sp, #28]
 801c53a:	bf16      	itet	ne
 801c53c:	9905      	ldrne	r1, [sp, #20]
 801c53e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801c542:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801c546:	9306      	str	r3, [sp, #24]
 801c548:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c54c:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801c550:	fb18 f801 	smulbb	r8, r8, r1
 801c554:	6859      	ldr	r1, [r3, #4]
 801c556:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c55a:	4671      	mov	r1, lr
 801c55c:	a80c      	add	r0, sp, #48	; 0x30
 801c55e:	f7ff fbb9 	bl	801bcd4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c562:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801c566:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801c56a:	f04f 0c08 	mov.w	ip, #8
 801c56e:	9b04      	ldr	r3, [sp, #16]
 801c570:	9a02      	ldr	r2, [sp, #8]
 801c572:	fb10 f001 	smulbb	r0, r0, r1
 801c576:	fb02 8803 	mla	r8, r2, r3, r8
 801c57a:	eba0 0108 	sub.w	r1, r0, r8
 801c57e:	fb90 f0fc 	sdiv	r0, r0, ip
 801c582:	4288      	cmp	r0, r1
 801c584:	dc20      	bgt.n	801c5c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801c586:	4551      	cmp	r1, sl
 801c588:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c58c:	da03      	bge.n	801c596 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801c58e:	b1d9      	cbz	r1, 801c5c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801c590:	468a      	mov	sl, r1
 801c592:	464f      	mov	r7, r9
 801c594:	4635      	mov	r5, r6
 801c596:	f109 39ff 	add.w	r9, r9, #4294967295
 801c59a:	f119 0f02 	cmn.w	r9, #2
 801c59e:	d1c6      	bne.n	801c52e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801c5a0:	4616      	mov	r6, r2
 801c5a2:	3201      	adds	r2, #1
 801c5a4:	f1a4 0408 	sub.w	r4, r4, #8
 801c5a8:	d1b7      	bne.n	801c51a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801c5aa:	9b01      	ldr	r3, [sp, #4]
 801c5ac:	b2ac      	uxth	r4, r5
 801c5ae:	00ed      	lsls	r5, r5, #3
 801c5b0:	1958      	adds	r0, r3, r5
 801c5b2:	1c7b      	adds	r3, r7, #1
 801c5b4:	d10b      	bne.n	801c5ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801c5b6:	4601      	mov	r1, r0
 801c5b8:	9803      	ldr	r0, [sp, #12]
 801c5ba:	f7ff fb8b 	bl	801bcd4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c5be:	4621      	mov	r1, r4
 801c5c0:	9801      	ldr	r0, [sp, #4]
 801c5c2:	f7ff fcdd 	bl	801bf80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c5c6:	e505      	b.n	801bfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c5c8:	464f      	mov	r7, r9
 801c5ca:	4635      	mov	r5, r6
 801c5cc:	e7ed      	b.n	801c5aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801c5ce:	9b01      	ldr	r3, [sp, #4]
 801c5d0:	00ff      	lsls	r7, r7, #3
 801c5d2:	445d      	add	r5, fp
 801c5d4:	19d9      	adds	r1, r3, r7
 801c5d6:	445f      	add	r7, fp
 801c5d8:	f7ff fb7c 	bl	801bcd4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c5dc:	9b03      	ldr	r3, [sp, #12]
 801c5de:	cb03      	ldmia	r3!, {r0, r1}
 801c5e0:	9b03      	ldr	r3, [sp, #12]
 801c5e2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801c5e6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801c5ea:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801c5ee:	6869      	ldr	r1, [r5, #4]
 801c5f0:	c303      	stmia	r3!, {r0, r1}
 801c5f2:	e7e4      	b.n	801c5be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0801c5f4 <_ZN8touchgfx11Application10invalidateEv>:
 801c5f4:	4b09      	ldr	r3, [pc, #36]	; (801c61c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801c5f6:	b082      	sub	sp, #8
 801c5f8:	2100      	movs	r1, #0
 801c5fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c5fe:	4b08      	ldr	r3, [pc, #32]	; (801c620 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801c600:	9100      	str	r1, [sp, #0]
 801c602:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c606:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c60a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c60e:	ab02      	add	r3, sp, #8
 801c610:	e913 0006 	ldmdb	r3, {r1, r2}
 801c614:	b002      	add	sp, #8
 801c616:	f7ff bcc7 	b.w	801bfa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c61a:	bf00      	nop
 801c61c:	20015fb0 	.word	0x20015fb0
 801c620:	20015fb2 	.word	0x20015fb2

0801c624 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801c624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c628:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801c62c:	b09b      	sub	sp, #108	; 0x6c
 801c62e:	4604      	mov	r4, r0
 801c630:	4630      	mov	r0, r6
 801c632:	f7fc f9c0 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c636:	4605      	mov	r5, r0
 801c638:	b940      	cbnz	r0, 801c64c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801c63a:	4620      	mov	r0, r4
 801c63c:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c640:	f7ff fcb2 	bl	801bfa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c644:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801c648:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801c64c:	4bc8      	ldr	r3, [pc, #800]	; (801c970 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d03e      	beq.n	801c6d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801c654:	4dc7      	ldr	r5, [pc, #796]	; (801c974 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801c656:	4628      	mov	r0, r5
 801c658:	f7fc f9ad 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c65c:	4606      	mov	r6, r0
 801c65e:	2800      	cmp	r0, #0
 801c660:	d137      	bne.n	801c6d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801c662:	4628      	mov	r0, r5
 801c664:	f7ff f9e2 	bl	801ba2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c668:	6829      	ldr	r1, [r5, #0]
 801c66a:	686a      	ldr	r2, [r5, #4]
 801c66c:	4620      	mov	r0, r4
 801c66e:	f7ff fc9b 	bl	801bfa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c672:	802e      	strh	r6, [r5, #0]
 801c674:	806e      	strh	r6, [r5, #2]
 801c676:	80ae      	strh	r6, [r5, #4]
 801c678:	80ee      	strh	r6, [r5, #6]
 801c67a:	ae09      	add	r6, sp, #36	; 0x24
 801c67c:	4630      	mov	r0, r6
 801c67e:	f7ff fc23 	bl	801bec8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c682:	4abd      	ldr	r2, [pc, #756]	; (801c978 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801c684:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801c688:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801c68c:	8815      	ldrh	r5, [r2, #0]
 801c68e:	9202      	str	r2, [sp, #8]
 801c690:	462b      	mov	r3, r5
 801c692:	429f      	cmp	r7, r3
 801c694:	d924      	bls.n	801c6e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801c696:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801c69a:	2907      	cmp	r1, #7
 801c69c:	d816      	bhi.n	801c6cc <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801c69e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801c6a2:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801c6a6:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801c6aa:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801c6ae:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801c6b2:	1c4a      	adds	r2, r1, #1
 801c6b4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801c6b8:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801c6bc:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801c6c0:	f8a2 9002 	strh.w	r9, [r2, #2]
 801c6c4:	f8a2 e004 	strh.w	lr, [r2, #4]
 801c6c8:	f8a2 c006 	strh.w	ip, [r2, #6]
 801c6cc:	3301      	adds	r3, #1
 801c6ce:	b29b      	uxth	r3, r3
 801c6d0:	e7df      	b.n	801c692 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801c6d2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d1cf      	bne.n	801c67a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801c6da:	b01b      	add	sp, #108	; 0x6c
 801c6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6e0:	462f      	mov	r7, r5
 801c6e2:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801c6e6:	42bb      	cmp	r3, r7
 801c6e8:	d90b      	bls.n	801c702 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801c6ea:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801c6ee:	3701      	adds	r7, #1
 801c6f0:	4620      	mov	r0, r4
 801c6f2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801c6f6:	b2bf      	uxth	r7, r7
 801c6f8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801c6fc:	f7ff fc54 	bl	801bfa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c700:	e7ef      	b.n	801c6e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801c702:	4a9e      	ldr	r2, [pc, #632]	; (801c97c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801c704:	6813      	ldr	r3, [r2, #0]
 801c706:	4690      	mov	r8, r2
 801c708:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c70c:	2b01      	cmp	r3, #1
 801c70e:	f040 80e4 	bne.w	801c8da <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801c712:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c716:	4629      	mov	r1, r5
 801c718:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801c71c:	2500      	movs	r5, #0
 801c71e:	33ae      	adds	r3, #174	; 0xae
 801c720:	428f      	cmp	r7, r1
 801c722:	f103 0308 	add.w	r3, r3, #8
 801c726:	dd0a      	ble.n	801c73e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801c728:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c72c:	3101      	adds	r1, #1
 801c72e:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801c732:	4402      	add	r2, r0
 801c734:	b212      	sxth	r2, r2
 801c736:	4295      	cmp	r5, r2
 801c738:	bfb8      	it	lt
 801c73a:	4615      	movlt	r5, r2
 801c73c:	e7f0      	b.n	801c720 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801c73e:	4b90      	ldr	r3, [pc, #576]	; (801c980 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801c740:	f8df b238 	ldr.w	fp, [pc, #568]	; 801c97c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801c744:	881b      	ldrh	r3, [r3, #0]
 801c746:	46d8      	mov	r8, fp
 801c748:	2b0f      	cmp	r3, #15
 801c74a:	bf8c      	ite	hi
 801c74c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801c750:	f04f 0a01 	movls.w	sl, #1
 801c754:	2300      	movs	r3, #0
 801c756:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c75a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801c75e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801c762:	4438      	add	r0, r7
 801c764:	b207      	sxth	r7, r0
 801c766:	f8db 0000 	ldr.w	r0, [fp]
 801c76a:	42bd      	cmp	r5, r7
 801c76c:	6803      	ldr	r3, [r0, #0]
 801c76e:	f340 8084 	ble.w	801c87a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801c772:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c776:	4798      	blx	r3
 801c778:	eb07 030a 	add.w	r3, r7, sl
 801c77c:	4298      	cmp	r0, r3
 801c77e:	da07      	bge.n	801c790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801c780:	4285      	cmp	r5, r0
 801c782:	dd05      	ble.n	801c790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801c784:	4287      	cmp	r7, r0
 801c786:	dd6d      	ble.n	801c864 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c788:	2f00      	cmp	r7, #0
 801c78a:	dd6b      	ble.n	801c864 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c78c:	4628      	mov	r0, r5
 801c78e:	e004      	b.n	801c79a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801c790:	4287      	cmp	r7, r0
 801c792:	dcfb      	bgt.n	801c78c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801c794:	42a8      	cmp	r0, r5
 801c796:	bfa8      	it	ge
 801c798:	4628      	movge	r0, r5
 801c79a:	4b7a      	ldr	r3, [pc, #488]	; (801c984 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801c79c:	1bc0      	subs	r0, r0, r7
 801c79e:	2200      	movs	r2, #0
 801c7a0:	f8ad 7016 	strh.w	r7, [sp, #22]
 801c7a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c7a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c7ac:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c7b0:	9b02      	ldr	r3, [sp, #8]
 801c7b2:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c7b6:	881f      	ldrh	r7, [r3, #0]
 801c7b8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c7bc:	42bb      	cmp	r3, r7
 801c7be:	d9cc      	bls.n	801c75a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801c7c0:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801c7c4:	ab07      	add	r3, sp, #28
 801c7c6:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801c7ca:	6851      	ldr	r1, [r2, #4]
 801c7cc:	c303      	stmia	r3!, {r0, r1}
 801c7ce:	a905      	add	r1, sp, #20
 801c7d0:	a807      	add	r0, sp, #28
 801c7d2:	f7ff f9e6 	bl	801bba2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c7d6:	2800      	cmp	r0, #0
 801c7d8:	d04c      	beq.n	801c874 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801c7da:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801c7de:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801c7e2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801c7e6:	4686      	mov	lr, r0
 801c7e8:	4290      	cmp	r0, r2
 801c7ea:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801c7ee:	4448      	add	r0, r9
 801c7f0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801c7f4:	bfb8      	it	lt
 801c7f6:	4696      	movlt	lr, r2
 801c7f8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c7fc:	444a      	add	r2, r9
 801c7fe:	b280      	uxth	r0, r0
 801c800:	4299      	cmp	r1, r3
 801c802:	468c      	mov	ip, r1
 801c804:	b292      	uxth	r2, r2
 801c806:	9303      	str	r3, [sp, #12]
 801c808:	bfb8      	it	lt
 801c80a:	469c      	movlt	ip, r3
 801c80c:	b203      	sxth	r3, r0
 801c80e:	fa0f f982 	sxth.w	r9, r2
 801c812:	f8ad e01c 	strh.w	lr, [sp, #28]
 801c816:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c81a:	454b      	cmp	r3, r9
 801c81c:	bfb8      	it	lt
 801c81e:	4602      	movlt	r2, r0
 801c820:	9b03      	ldr	r3, [sp, #12]
 801c822:	eba2 020e 	sub.w	r2, r2, lr
 801c826:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c82a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c82e:	4411      	add	r1, r2
 801c830:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c834:	4413      	add	r3, r2
 801c836:	b289      	uxth	r1, r1
 801c838:	b29b      	uxth	r3, r3
 801c83a:	b208      	sxth	r0, r1
 801c83c:	b21a      	sxth	r2, r3
 801c83e:	4290      	cmp	r0, r2
 801c840:	bfb8      	it	lt
 801c842:	460b      	movlt	r3, r1
 801c844:	eba3 030c 	sub.w	r3, r3, ip
 801c848:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c84c:	a807      	add	r0, sp, #28
 801c84e:	f7fc f8b2 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c852:	b920      	cbnz	r0, 801c85e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801c854:	6823      	ldr	r3, [r4, #0]
 801c856:	a907      	add	r1, sp, #28
 801c858:	4620      	mov	r0, r4
 801c85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c85c:	4798      	blx	r3
 801c85e:	3701      	adds	r7, #1
 801c860:	b2bf      	uxth	r7, r7
 801c862:	e7a9      	b.n	801c7b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801c864:	f8d8 0000 	ldr.w	r0, [r8]
 801c868:	2101      	movs	r1, #1
 801c86a:	6803      	ldr	r3, [r0, #0]
 801c86c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c870:	4798      	blx	r3
 801c872:	e772      	b.n	801c75a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801c874:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801c878:	e7e8      	b.n	801c84c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801c87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c87c:	4798      	blx	r3
 801c87e:	4b42      	ldr	r3, [pc, #264]	; (801c988 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801c880:	781b      	ldrb	r3, [r3, #0]
 801c882:	2b00      	cmp	r3, #0
 801c884:	f43f af29 	beq.w	801c6da <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801c888:	2300      	movs	r3, #0
 801c88a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801c88e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801c892:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801c896:	9b02      	ldr	r3, [sp, #8]
 801c898:	881b      	ldrh	r3, [r3, #0]
 801c89a:	429d      	cmp	r5, r3
 801c89c:	f67f af1d 	bls.w	801c6da <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801c8a0:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801c8a4:	2907      	cmp	r1, #7
 801c8a6:	d815      	bhi.n	801c8d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801c8a8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801c8ac:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801c8b0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801c8b4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801c8b8:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801c8bc:	1c4a      	adds	r2, r1, #1
 801c8be:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801c8c2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801c8c6:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801c8ca:	f8a2 e002 	strh.w	lr, [r2, #2]
 801c8ce:	f8a2 c004 	strh.w	ip, [r2, #4]
 801c8d2:	80d7      	strh	r7, [r2, #6]
 801c8d4:	3301      	adds	r3, #1
 801c8d6:	b29b      	uxth	r3, r3
 801c8d8:	e7df      	b.n	801c89a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801c8da:	2b02      	cmp	r3, #2
 801c8dc:	f040 8135 	bne.w	801cb4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801c8e0:	4b2a      	ldr	r3, [pc, #168]	; (801c98c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801c8e2:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801c8e6:	781b      	ldrb	r3, [r3, #0]
 801c8e8:	2b01      	cmp	r3, #1
 801c8ea:	f000 809c 	beq.w	801ca26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801c8ee:	9b02      	ldr	r3, [sp, #8]
 801c8f0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801c8f4:	f8b3 b000 	ldrh.w	fp, [r3]
 801c8f8:	f10b 0b01 	add.w	fp, fp, #1
 801c8fc:	fa1f fb8b 	uxth.w	fp, fp
 801c900:	2a00      	cmp	r2, #0
 801c902:	d0bc      	beq.n	801c87e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c904:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801c908:	4659      	mov	r1, fp
 801c90a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801c90e:	f04f 0800 	mov.w	r8, #0
 801c912:	441d      	add	r5, r3
 801c914:	b22d      	sxth	r5, r5
 801c916:	b28b      	uxth	r3, r1
 801c918:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801c91c:	429a      	cmp	r2, r3
 801c91e:	f240 80c0 	bls.w	801caa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801c922:	4427      	add	r7, r4
 801c924:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801c928:	4608      	mov	r0, r1
 801c92a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801c92e:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801c932:	4563      	cmp	r3, ip
 801c934:	f340 80a2 	ble.w	801ca7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801c938:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 801c93c:	4465      	add	r5, ip
 801c93e:	b22d      	sxth	r5, r5
 801c940:	429d      	cmp	r5, r3
 801c942:	bfa8      	it	ge
 801c944:	461d      	movge	r5, r3
 801c946:	3101      	adds	r1, #1
 801c948:	4680      	mov	r8, r0
 801c94a:	e7e4      	b.n	801c916 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801c94c:	d10b      	bne.n	801c966 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801c94e:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801c952:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801c956:	458c      	cmp	ip, r1
 801c958:	bfb4      	ite	lt
 801c95a:	469c      	movlt	ip, r3
 801c95c:	46bc      	movge	ip, r7
 801c95e:	4572      	cmp	r2, lr
 801c960:	bfb8      	it	lt
 801c962:	4672      	movlt	r2, lr
 801c964:	e087      	b.n	801ca76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801c966:	428a      	cmp	r2, r1
 801c968:	46bc      	mov	ip, r7
 801c96a:	bfb8      	it	lt
 801c96c:	460a      	movlt	r2, r1
 801c96e:	e082      	b.n	801ca76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801c970:	20015ff4 	.word	0x20015ff4
 801c974:	20016000 	.word	0x20016000
 801c978:	20000044 	.word	0x20000044
 801c97c:	20015fbc 	.word	0x20015fbc
 801c980:	20015fb2 	.word	0x20015fb2
 801c984:	20015fb0 	.word	0x20015fb0
 801c988:	20015fba 	.word	0x20015fba
 801c98c:	20015fb4 	.word	0x20015fb4
 801c990:	1961      	adds	r1, r4, r5
 801c992:	ab07      	add	r3, sp, #28
 801c994:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801c998:	6849      	ldr	r1, [r1, #4]
 801c99a:	c303      	stmia	r3!, {r0, r1}
 801c99c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c9a0:	a807      	add	r0, sp, #28
 801c9a2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c9a6:	2b13      	cmp	r3, #19
 801c9a8:	440b      	add	r3, r1
 801c9aa:	bfd8      	it	le
 801c9ac:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c9b0:	1a9b      	subs	r3, r3, r2
 801c9b2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c9b6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c9ba:	f7ff f851 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9be:	a807      	add	r0, sp, #28
 801c9c0:	f7fb fff9 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c9c4:	bb78      	cbnz	r0, 801ca26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801c9c6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c9ca:	4425      	add	r5, r4
 801c9cc:	f8d8 0000 	ldr.w	r0, [r8]
 801c9d0:	f1bc 0f14 	cmp.w	ip, #20
 801c9d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c9d8:	f8d0 e000 	ldr.w	lr, [r0]
 801c9dc:	bfa8      	it	ge
 801c9de:	f04f 0c14 	movge.w	ip, #20
 801c9e2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c9e6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c9ea:	fa1f fc8c 	uxth.w	ip, ip
 801c9ee:	f8cd c000 	str.w	ip, [sp]
 801c9f2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801c9f6:	47d0      	blx	sl
 801c9f8:	4682      	mov	sl, r0
 801c9fa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c9fe:	a807      	add	r0, sp, #28
 801ca00:	f7ff f814 	bl	801ba2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ca04:	6823      	ldr	r3, [r4, #0]
 801ca06:	4620      	mov	r0, r4
 801ca08:	a907      	add	r1, sp, #28
 801ca0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca0c:	4798      	blx	r3
 801ca0e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801ca12:	eba0 000a 	sub.w	r0, r0, sl
 801ca16:	b200      	sxth	r0, r0
 801ca18:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801ca1c:	b918      	cbnz	r0, 801ca26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801ca1e:	b2b9      	uxth	r1, r7
 801ca20:	4648      	mov	r0, r9
 801ca22:	f7ff faad 	bl	801bf80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ca26:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801ca2a:	f1bb 0f00 	cmp.w	fp, #0
 801ca2e:	f43f af26 	beq.w	801c87e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801ca32:	9b02      	ldr	r3, [sp, #8]
 801ca34:	2700      	movs	r7, #0
 801ca36:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801ca3a:	881b      	ldrh	r3, [r3, #0]
 801ca3c:	3301      	adds	r3, #1
 801ca3e:	b29b      	uxth	r3, r3
 801ca40:	b299      	uxth	r1, r3
 801ca42:	00fd      	lsls	r5, r7, #3
 801ca44:	458b      	cmp	fp, r1
 801ca46:	d9a3      	bls.n	801c990 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801ca48:	4425      	add	r5, r4
 801ca4a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801ca4e:	469c      	mov	ip, r3
 801ca50:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801ca54:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801ca58:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801ca5c:	4408      	add	r0, r1
 801ca5e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801ca62:	4471      	add	r1, lr
 801ca64:	b200      	sxth	r0, r0
 801ca66:	b209      	sxth	r1, r1
 801ca68:	4288      	cmp	r0, r1
 801ca6a:	f6bf af6f 	bge.w	801c94c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801ca6e:	4586      	cmp	lr, r0
 801ca70:	4672      	mov	r2, lr
 801ca72:	bfb8      	it	lt
 801ca74:	4602      	movlt	r2, r0
 801ca76:	3301      	adds	r3, #1
 801ca78:	4667      	mov	r7, ip
 801ca7a:	e7e1      	b.n	801ca40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801ca7c:	d10c      	bne.n	801ca98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801ca7e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801ca82:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801ca86:	4287      	cmp	r7, r0
 801ca88:	bfb4      	ite	lt
 801ca8a:	4608      	movlt	r0, r1
 801ca8c:	4640      	movge	r0, r8
 801ca8e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801ca92:	443b      	add	r3, r7
 801ca94:	b21b      	sxth	r3, r3
 801ca96:	e753      	b.n	801c940 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801ca98:	4565      	cmp	r5, ip
 801ca9a:	4640      	mov	r0, r8
 801ca9c:	bfa8      	it	ge
 801ca9e:	4665      	movge	r5, ip
 801caa0:	e751      	b.n	801c946 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801caa2:	eb09 0007 	add.w	r0, r9, r7
 801caa6:	4427      	add	r7, r4
 801caa8:	9203      	str	r2, [sp, #12]
 801caaa:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801caae:	f1ba 0f13 	cmp.w	sl, #19
 801cab2:	bfde      	ittt	le
 801cab4:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801cab8:	4455      	addle	r5, sl
 801caba:	b22d      	sxthle	r5, r5
 801cabc:	f7fb ff7b 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cac0:	9a03      	ldr	r2, [sp, #12]
 801cac2:	2800      	cmp	r0, #0
 801cac4:	f47f af1c 	bne.w	801c900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801cac8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801cacc:	fa1f fa8a 	uxth.w	sl, sl
 801cad0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cad4:	1aad      	subs	r5, r5, r2
 801cad6:	4829      	ldr	r0, [pc, #164]	; (801cb7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801cad8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801cadc:	2d14      	cmp	r5, #20
 801cade:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801cae2:	6800      	ldr	r0, [r0, #0]
 801cae4:	bfa8      	it	ge
 801cae6:	2514      	movge	r5, #20
 801cae8:	f8ad 101c 	strh.w	r1, [sp, #28]
 801caec:	f8ad 201e 	strh.w	r2, [sp, #30]
 801caf0:	b289      	uxth	r1, r1
 801caf2:	f8ad 3020 	strh.w	r3, [sp, #32]
 801caf6:	b2ad      	uxth	r5, r5
 801caf8:	f8d0 c000 	ldr.w	ip, [r0]
 801cafc:	b292      	uxth	r2, r2
 801cafe:	4555      	cmp	r5, sl
 801cb00:	bf94      	ite	ls
 801cb02:	9500      	strls	r5, [sp, #0]
 801cb04:	f8cd a000 	strhi.w	sl, [sp]
 801cb08:	b29b      	uxth	r3, r3
 801cb0a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801cb0e:	47a8      	blx	r5
 801cb10:	6823      	ldr	r3, [r4, #0]
 801cb12:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cb16:	a907      	add	r1, sp, #28
 801cb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb1a:	4620      	mov	r0, r4
 801cb1c:	4798      	blx	r3
 801cb1e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801cb22:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cb26:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801cb2a:	1a5b      	subs	r3, r3, r1
 801cb2c:	440a      	add	r2, r1
 801cb2e:	b21b      	sxth	r3, r3
 801cb30:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801cb34:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	f47f aed8 	bne.w	801c8ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801cb3e:	fa1f f188 	uxth.w	r1, r8
 801cb42:	4648      	mov	r0, r9
 801cb44:	f7ff fa1c 	bl	801bf80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cb48:	e6d1      	b.n	801c8ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801cb4a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801cb4e:	42ab      	cmp	r3, r5
 801cb50:	f67f ae95 	bls.w	801c87e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801cb54:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801cb58:	ab07      	add	r3, sp, #28
 801cb5a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801cb5e:	6851      	ldr	r1, [r2, #4]
 801cb60:	c303      	stmia	r3!, {r0, r1}
 801cb62:	a807      	add	r0, sp, #28
 801cb64:	f7fb ff27 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cb68:	b920      	cbnz	r0, 801cb74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801cb6a:	6823      	ldr	r3, [r4, #0]
 801cb6c:	a907      	add	r1, sp, #28
 801cb6e:	4620      	mov	r0, r4
 801cb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb72:	4798      	blx	r3
 801cb74:	3501      	adds	r5, #1
 801cb76:	b2ad      	uxth	r5, r5
 801cb78:	e7e7      	b.n	801cb4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801cb7a:	bf00      	nop
 801cb7c:	20015fbc 	.word	0x20015fbc

0801cb80 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801cb80:	4b03      	ldr	r3, [pc, #12]	; (801cb90 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801cb82:	2200      	movs	r2, #0
 801cb84:	801a      	strh	r2, [r3, #0]
 801cb86:	805a      	strh	r2, [r3, #2]
 801cb88:	809a      	strh	r2, [r3, #4]
 801cb8a:	80da      	strh	r2, [r3, #6]
 801cb8c:	4770      	bx	lr
 801cb8e:	bf00      	nop
 801cb90:	20016000 	.word	0x20016000

0801cb94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb98:	b09d      	sub	sp, #116	; 0x74
 801cb9a:	4606      	mov	r6, r0
 801cb9c:	4614      	mov	r4, r2
 801cb9e:	468a      	mov	sl, r1
 801cba0:	a803      	add	r0, sp, #12
 801cba2:	461d      	mov	r5, r3
 801cba4:	f000 fd7a 	bl	801d69c <_ZN8touchgfx12TextProviderC1Ev>
 801cba8:	6833      	ldr	r3, [r6, #0]
 801cbaa:	4630      	mov	r0, r6
 801cbac:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801cbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cbb2:	4798      	blx	r3
 801cbb4:	6833      	ldr	r3, [r6, #0]
 801cbb6:	4607      	mov	r7, r0
 801cbb8:	4630      	mov	r0, r6
 801cbba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cbbc:	4798      	blx	r3
 801cbbe:	462a      	mov	r2, r5
 801cbc0:	2500      	movs	r5, #0
 801cbc2:	4621      	mov	r1, r4
 801cbc4:	9000      	str	r0, [sp, #0]
 801cbc6:	463b      	mov	r3, r7
 801cbc8:	462c      	mov	r4, r5
 801cbca:	46a9      	mov	r9, r5
 801cbcc:	46a8      	mov	r8, r5
 801cbce:	a803      	add	r0, sp, #12
 801cbd0:	f000 fdbf 	bl	801d752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cbd4:	2300      	movs	r3, #0
 801cbd6:	9302      	str	r3, [sp, #8]
 801cbd8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801cbdc:	429c      	cmp	r4, r3
 801cbde:	d002      	beq.n	801cbe6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801cbe0:	455c      	cmp	r4, fp
 801cbe2:	bf18      	it	ne
 801cbe4:	4625      	movne	r5, r4
 801cbe6:	ab02      	add	r3, sp, #8
 801cbe8:	4632      	mov	r2, r6
 801cbea:	4651      	mov	r1, sl
 801cbec:	a803      	add	r0, sp, #12
 801cbee:	f001 f8b5 	bl	801dd5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cbf2:	4604      	mov	r4, r0
 801cbf4:	b108      	cbz	r0, 801cbfa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801cbf6:	280a      	cmp	r0, #10
 801cbf8:	d10a      	bne.n	801cc10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801cbfa:	45c1      	cmp	r9, r8
 801cbfc:	bf38      	it	cc
 801cbfe:	46c1      	movcc	r9, r8
 801cc00:	f04f 0800 	mov.w	r8, #0
 801cc04:	2c00      	cmp	r4, #0
 801cc06:	d1e5      	bne.n	801cbd4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801cc08:	4648      	mov	r0, r9
 801cc0a:	b01d      	add	sp, #116	; 0x74
 801cc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc10:	9a02      	ldr	r2, [sp, #8]
 801cc12:	2a00      	cmp	r2, #0
 801cc14:	d0de      	beq.n	801cbd4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801cc16:	7b57      	ldrb	r7, [r2, #13]
 801cc18:	4629      	mov	r1, r5
 801cc1a:	6833      	ldr	r3, [r6, #0]
 801cc1c:	007f      	lsls	r7, r7, #1
 801cc1e:	8894      	ldrh	r4, [r2, #4]
 801cc20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc22:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801cc26:	7a97      	ldrb	r7, [r2, #10]
 801cc28:	4307      	orrs	r7, r0
 801cc2a:	4630      	mov	r0, r6
 801cc2c:	4798      	blx	r3
 801cc2e:	4438      	add	r0, r7
 801cc30:	4480      	add	r8, r0
 801cc32:	fa1f f888 	uxth.w	r8, r8
 801cc36:	e7e5      	b.n	801cc04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801cc38 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801cc38:	b508      	push	{r3, lr}
 801cc3a:	6803      	ldr	r3, [r0, #0]
 801cc3c:	68db      	ldr	r3, [r3, #12]
 801cc3e:	4798      	blx	r3
 801cc40:	b128      	cbz	r0, 801cc4e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801cc42:	7b43      	ldrb	r3, [r0, #13]
 801cc44:	7a80      	ldrb	r0, [r0, #10]
 801cc46:	005b      	lsls	r3, r3, #1
 801cc48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cc4c:	4318      	orrs	r0, r3
 801cc4e:	bd08      	pop	{r3, pc}

0801cc50 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801cc50:	b40e      	push	{r1, r2, r3}
 801cc52:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc54:	b09e      	sub	sp, #120	; 0x78
 801cc56:	4605      	mov	r5, r0
 801cc58:	ab23      	add	r3, sp, #140	; 0x8c
 801cc5a:	a805      	add	r0, sp, #20
 801cc5c:	f853 4b04 	ldr.w	r4, [r3], #4
 801cc60:	9303      	str	r3, [sp, #12]
 801cc62:	f000 fd1b 	bl	801d69c <_ZN8touchgfx12TextProviderC1Ev>
 801cc66:	682b      	ldr	r3, [r5, #0]
 801cc68:	4628      	mov	r0, r5
 801cc6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cc6c:	4798      	blx	r3
 801cc6e:	682b      	ldr	r3, [r5, #0]
 801cc70:	4606      	mov	r6, r0
 801cc72:	4628      	mov	r0, r5
 801cc74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc76:	4798      	blx	r3
 801cc78:	4633      	mov	r3, r6
 801cc7a:	4621      	mov	r1, r4
 801cc7c:	ae1e      	add	r6, sp, #120	; 0x78
 801cc7e:	2400      	movs	r4, #0
 801cc80:	9000      	str	r0, [sp, #0]
 801cc82:	9a03      	ldr	r2, [sp, #12]
 801cc84:	a805      	add	r0, sp, #20
 801cc86:	f000 fd64 	bl	801d752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cc8a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801cc8e:	462a      	mov	r2, r5
 801cc90:	4633      	mov	r3, r6
 801cc92:	4621      	mov	r1, r4
 801cc94:	a805      	add	r0, sp, #20
 801cc96:	f001 f861 	bl	801dd5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cc9a:	b300      	cbz	r0, 801ccde <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801cc9c:	280a      	cmp	r0, #10
 801cc9e:	d01a      	beq.n	801ccd6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801cca0:	9f04      	ldr	r7, [sp, #16]
 801cca2:	b1c7      	cbz	r7, 801ccd6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801cca4:	7b78      	ldrb	r0, [r7, #13]
 801cca6:	7a3b      	ldrb	r3, [r7, #8]
 801cca8:	00c1      	lsls	r1, r0, #3
 801ccaa:	88ea      	ldrh	r2, [r5, #6]
 801ccac:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ccb0:	4319      	orrs	r1, r3
 801ccb2:	0643      	lsls	r3, r0, #25
 801ccb4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ccb8:	bf48      	it	mi
 801ccba:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801ccbe:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ccc2:	bf48      	it	mi
 801ccc4:	b219      	sxthmi	r1, r3
 801ccc6:	79fb      	ldrb	r3, [r7, #7]
 801ccc8:	4303      	orrs	r3, r0
 801ccca:	4413      	add	r3, r2
 801cccc:	1a5b      	subs	r3, r3, r1
 801ccce:	b21b      	sxth	r3, r3
 801ccd0:	429c      	cmp	r4, r3
 801ccd2:	bfb8      	it	lt
 801ccd4:	461c      	movlt	r4, r3
 801ccd6:	4633      	mov	r3, r6
 801ccd8:	462a      	mov	r2, r5
 801ccda:	2100      	movs	r1, #0
 801ccdc:	e7da      	b.n	801cc94 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801ccde:	b2a0      	uxth	r0, r4
 801cce0:	b01e      	add	sp, #120	; 0x78
 801cce2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cce6:	b003      	add	sp, #12
 801cce8:	4770      	bx	lr

0801ccea <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801ccea:	7a43      	ldrb	r3, [r0, #9]
 801ccec:	8880      	ldrh	r0, [r0, #4]
 801ccee:	4418      	add	r0, r3
 801ccf0:	b280      	uxth	r0, r0
 801ccf2:	4770      	bx	lr

0801ccf4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ccf4:	6803      	ldr	r3, [r0, #0]
 801ccf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccf8:	4718      	bx	r3

0801ccfa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ccfa:	b40e      	push	{r1, r2, r3}
 801ccfc:	b570      	push	{r4, r5, r6, lr}
 801ccfe:	b09d      	sub	sp, #116	; 0x74
 801cd00:	4604      	mov	r4, r0
 801cd02:	ab21      	add	r3, sp, #132	; 0x84
 801cd04:	a803      	add	r0, sp, #12
 801cd06:	f853 5b04 	ldr.w	r5, [r3], #4
 801cd0a:	9302      	str	r3, [sp, #8]
 801cd0c:	f000 fcc6 	bl	801d69c <_ZN8touchgfx12TextProviderC1Ev>
 801cd10:	6823      	ldr	r3, [r4, #0]
 801cd12:	4620      	mov	r0, r4
 801cd14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd16:	4798      	blx	r3
 801cd18:	6823      	ldr	r3, [r4, #0]
 801cd1a:	4606      	mov	r6, r0
 801cd1c:	4620      	mov	r0, r4
 801cd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd20:	2401      	movs	r4, #1
 801cd22:	4798      	blx	r3
 801cd24:	4633      	mov	r3, r6
 801cd26:	9000      	str	r0, [sp, #0]
 801cd28:	4629      	mov	r1, r5
 801cd2a:	9a02      	ldr	r2, [sp, #8]
 801cd2c:	a803      	add	r0, sp, #12
 801cd2e:	f000 fd10 	bl	801d752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cd32:	a803      	add	r0, sp, #12
 801cd34:	f001 f8de 	bl	801def4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cd38:	b2a3      	uxth	r3, r4
 801cd3a:	b138      	cbz	r0, 801cd4c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801cd3c:	280a      	cmp	r0, #10
 801cd3e:	a803      	add	r0, sp, #12
 801cd40:	bf04      	itt	eq
 801cd42:	3301      	addeq	r3, #1
 801cd44:	b21c      	sxtheq	r4, r3
 801cd46:	f001 f8d5 	bl	801def4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cd4a:	e7f5      	b.n	801cd38 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cd4c:	4618      	mov	r0, r3
 801cd4e:	b01d      	add	sp, #116	; 0x74
 801cd50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cd54:	b003      	add	sp, #12
 801cd56:	4770      	bx	lr

0801cd58 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cd58:	b40e      	push	{r1, r2, r3}
 801cd5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd5c:	b09e      	sub	sp, #120	; 0x78
 801cd5e:	4604      	mov	r4, r0
 801cd60:	ab23      	add	r3, sp, #140	; 0x8c
 801cd62:	a805      	add	r0, sp, #20
 801cd64:	f853 5b04 	ldr.w	r5, [r3], #4
 801cd68:	9303      	str	r3, [sp, #12]
 801cd6a:	f000 fc97 	bl	801d69c <_ZN8touchgfx12TextProviderC1Ev>
 801cd6e:	6823      	ldr	r3, [r4, #0]
 801cd70:	4620      	mov	r0, r4
 801cd72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd74:	4798      	blx	r3
 801cd76:	6823      	ldr	r3, [r4, #0]
 801cd78:	4606      	mov	r6, r0
 801cd7a:	4620      	mov	r0, r4
 801cd7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd7e:	4798      	blx	r3
 801cd80:	4633      	mov	r3, r6
 801cd82:	4629      	mov	r1, r5
 801cd84:	9000      	str	r0, [sp, #0]
 801cd86:	9a03      	ldr	r2, [sp, #12]
 801cd88:	a805      	add	r0, sp, #20
 801cd8a:	f000 fce2 	bl	801d752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cd8e:	ad1e      	add	r5, sp, #120	; 0x78
 801cd90:	2100      	movs	r1, #0
 801cd92:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801cd96:	4622      	mov	r2, r4
 801cd98:	a805      	add	r0, sp, #20
 801cd9a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801cd9e:	462b      	mov	r3, r5
 801cda0:	f000 ffdc 	bl	801dd5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cda4:	b1d8      	cbz	r0, 801cdde <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801cda6:	280a      	cmp	r0, #10
 801cda8:	d012      	beq.n	801cdd0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801cdaa:	9804      	ldr	r0, [sp, #16]
 801cdac:	b180      	cbz	r0, 801cdd0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801cdae:	7b47      	ldrb	r7, [r0, #13]
 801cdb0:	88e2      	ldrh	r2, [r4, #6]
 801cdb2:	00fb      	lsls	r3, r7, #3
 801cdb4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cdb8:	7a03      	ldrb	r3, [r0, #8]
 801cdba:	430b      	orrs	r3, r1
 801cdbc:	0679      	lsls	r1, r7, #25
 801cdbe:	bf44      	itt	mi
 801cdc0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cdc4:	b21b      	sxthmi	r3, r3
 801cdc6:	1ad3      	subs	r3, r2, r3
 801cdc8:	b21b      	sxth	r3, r3
 801cdca:	429e      	cmp	r6, r3
 801cdcc:	bfa8      	it	ge
 801cdce:	461e      	movge	r6, r3
 801cdd0:	462b      	mov	r3, r5
 801cdd2:	4622      	mov	r2, r4
 801cdd4:	2100      	movs	r1, #0
 801cdd6:	a805      	add	r0, sp, #20
 801cdd8:	f000 ffc0 	bl	801dd5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cddc:	e7e2      	b.n	801cda4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801cdde:	4630      	mov	r0, r6
 801cde0:	b01e      	add	sp, #120	; 0x78
 801cde2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cde6:	b003      	add	sp, #12
 801cde8:	4770      	bx	lr

0801cdea <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cdea:	b513      	push	{r0, r1, r4, lr}
 801cdec:	6803      	ldr	r3, [r0, #0]
 801cdee:	2400      	movs	r4, #0
 801cdf0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cdf4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cdf8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cdfc:	4669      	mov	r1, sp
 801cdfe:	691b      	ldr	r3, [r3, #16]
 801ce00:	9400      	str	r4, [sp, #0]
 801ce02:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ce06:	4798      	blx	r3
 801ce08:	b002      	add	sp, #8
 801ce0a:	bd10      	pop	{r4, pc}

0801ce0c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ce0c:	b538      	push	{r3, r4, r5, lr}
 801ce0e:	680b      	ldr	r3, [r1, #0]
 801ce10:	460c      	mov	r4, r1
 801ce12:	4605      	mov	r5, r0
 801ce14:	68db      	ldr	r3, [r3, #12]
 801ce16:	4798      	blx	r3
 801ce18:	6823      	ldr	r3, [r4, #0]
 801ce1a:	4620      	mov	r0, r4
 801ce1c:	4629      	mov	r1, r5
 801ce1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce20:	4798      	blx	r3
 801ce22:	4628      	mov	r0, r5
 801ce24:	bd38      	pop	{r3, r4, r5, pc}

0801ce26 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ce26:	b410      	push	{r4}
 801ce28:	880a      	ldrh	r2, [r1, #0]
 801ce2a:	8884      	ldrh	r4, [r0, #4]
 801ce2c:	4422      	add	r2, r4
 801ce2e:	800a      	strh	r2, [r1, #0]
 801ce30:	884a      	ldrh	r2, [r1, #2]
 801ce32:	88c4      	ldrh	r4, [r0, #6]
 801ce34:	4422      	add	r2, r4
 801ce36:	804a      	strh	r2, [r1, #2]
 801ce38:	6940      	ldr	r0, [r0, #20]
 801ce3a:	b120      	cbz	r0, 801ce46 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ce3c:	6803      	ldr	r3, [r0, #0]
 801ce3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce44:	4718      	bx	r3
 801ce46:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce4a:	4770      	bx	lr

0801ce4c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ce4c:	b570      	push	{r4, r5, r6, lr}
 801ce4e:	8882      	ldrh	r2, [r0, #4]
 801ce50:	460c      	mov	r4, r1
 801ce52:	880b      	ldrh	r3, [r1, #0]
 801ce54:	4605      	mov	r5, r0
 801ce56:	4413      	add	r3, r2
 801ce58:	800b      	strh	r3, [r1, #0]
 801ce5a:	884b      	ldrh	r3, [r1, #2]
 801ce5c:	88c2      	ldrh	r2, [r0, #6]
 801ce5e:	4413      	add	r3, r2
 801ce60:	804b      	strh	r3, [r1, #2]
 801ce62:	1d01      	adds	r1, r0, #4
 801ce64:	4620      	mov	r0, r4
 801ce66:	f7fb fd63 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 801ce6a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	dd0b      	ble.n	801ce8a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ce72:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	dd07      	ble.n	801ce8a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ce7a:	6968      	ldr	r0, [r5, #20]
 801ce7c:	b128      	cbz	r0, 801ce8a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ce7e:	6803      	ldr	r3, [r0, #0]
 801ce80:	4621      	mov	r1, r4
 801ce82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ce88:	4718      	bx	r3
 801ce8a:	bd70      	pop	{r4, r5, r6, pc}

0801ce8c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ce8c:	b570      	push	{r4, r5, r6, lr}
 801ce8e:	8882      	ldrh	r2, [r0, #4]
 801ce90:	460c      	mov	r4, r1
 801ce92:	880b      	ldrh	r3, [r1, #0]
 801ce94:	4605      	mov	r5, r0
 801ce96:	4413      	add	r3, r2
 801ce98:	800b      	strh	r3, [r1, #0]
 801ce9a:	884b      	ldrh	r3, [r1, #2]
 801ce9c:	88c2      	ldrh	r2, [r0, #6]
 801ce9e:	4413      	add	r3, r2
 801cea0:	804b      	strh	r3, [r1, #2]
 801cea2:	1d01      	adds	r1, r0, #4
 801cea4:	4620      	mov	r0, r4
 801cea6:	f7fb fd43 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 801ceaa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	dd18      	ble.n	801cee4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ceb2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	dd14      	ble.n	801cee4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ceba:	6968      	ldr	r0, [r5, #20]
 801cebc:	b128      	cbz	r0, 801ceca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801cebe:	6803      	ldr	r3, [r0, #0]
 801cec0:	4621      	mov	r1, r4
 801cec2:	691b      	ldr	r3, [r3, #16]
 801cec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cec8:	4718      	bx	r3
 801ceca:	4b07      	ldr	r3, [pc, #28]	; (801cee8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	3304      	adds	r3, #4
 801ced0:	429d      	cmp	r5, r3
 801ced2:	d107      	bne.n	801cee4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ced4:	f7fe ff44 	bl	801bd60 <_ZN8touchgfx11Application11getInstanceEv>
 801ced8:	6821      	ldr	r1, [r4, #0]
 801ceda:	6862      	ldr	r2, [r4, #4]
 801cedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cee0:	f7ff b862 	b.w	801bfa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801cee4:	bd70      	pop	{r4, r5, r6, pc}
 801cee6:	bf00      	nop
 801cee8:	20015ff8 	.word	0x20015ff8

0801ceec <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ceec:	b570      	push	{r4, r5, r6, lr}
 801ceee:	4604      	mov	r4, r0
 801cef0:	4616      	mov	r6, r2
 801cef2:	460d      	mov	r5, r1
 801cef4:	b901      	cbnz	r1, 801cef8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801cef6:	b192      	cbz	r2, 801cf1e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801cef8:	6823      	ldr	r3, [r4, #0]
 801cefa:	4620      	mov	r0, r4
 801cefc:	699b      	ldr	r3, [r3, #24]
 801cefe:	4798      	blx	r3
 801cf00:	88e2      	ldrh	r2, [r4, #6]
 801cf02:	88a1      	ldrh	r1, [r4, #4]
 801cf04:	4620      	mov	r0, r4
 801cf06:	4432      	add	r2, r6
 801cf08:	4429      	add	r1, r5
 801cf0a:	b212      	sxth	r2, r2
 801cf0c:	b209      	sxth	r1, r1
 801cf0e:	f7e6 fd06 	bl	800391e <_ZN8touchgfx8Drawable5setXYEss>
 801cf12:	6823      	ldr	r3, [r4, #0]
 801cf14:	4620      	mov	r0, r4
 801cf16:	699b      	ldr	r3, [r3, #24]
 801cf18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf1c:	4718      	bx	r3
 801cf1e:	bd70      	pop	{r4, r5, r6, pc}

0801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801cf20:	b510      	push	{r4, lr}
 801cf22:	2300      	movs	r3, #0
 801cf24:	4604      	mov	r4, r0
 801cf26:	4608      	mov	r0, r1
 801cf28:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801cf2c:	8023      	strh	r3, [r4, #0]
 801cf2e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cf32:	8063      	strh	r3, [r4, #2]
 801cf34:	6803      	ldr	r3, [r0, #0]
 801cf36:	80a1      	strh	r1, [r4, #4]
 801cf38:	4621      	mov	r1, r4
 801cf3a:	80e2      	strh	r2, [r4, #6]
 801cf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf3e:	4798      	blx	r3
 801cf40:	4620      	mov	r0, r4
 801cf42:	bd10      	pop	{r4, pc}

0801cf44 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801cf44:	b530      	push	{r4, r5, lr}
 801cf46:	8083      	strh	r3, [r0, #4]
 801cf48:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801cf4c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801cf50:	80c3      	strh	r3, [r0, #6]
 801cf52:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801cf56:	6141      	str	r1, [r0, #20]
 801cf58:	7203      	strb	r3, [r0, #8]
 801cf5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801cf5e:	8302      	strh	r2, [r0, #24]
 801cf60:	7243      	strb	r3, [r0, #9]
 801cf62:	7a83      	ldrb	r3, [r0, #10]
 801cf64:	f365 0306 	bfi	r3, r5, #0, #7
 801cf68:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801cf6c:	f365 13c7 	bfi	r3, r5, #7, #1
 801cf70:	7283      	strb	r3, [r0, #10]
 801cf72:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801cf76:	72c3      	strb	r3, [r0, #11]
 801cf78:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801cf7c:	7303      	strb	r3, [r0, #12]
 801cf7e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801cf82:	81c3      	strh	r3, [r0, #14]
 801cf84:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801cf88:	8203      	strh	r3, [r0, #16]
 801cf8a:	4b01      	ldr	r3, [pc, #4]	; (801cf90 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801cf8c:	6003      	str	r3, [r0, #0]
 801cf8e:	bd30      	pop	{r4, r5, pc}
 801cf90:	08030770 	.word	0x08030770

0801cf94 <_ZNK8touchgfx9ConstFont4findEt>:
 801cf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf96:	6944      	ldr	r4, [r0, #20]
 801cf98:	b3bc      	cbz	r4, 801d00a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cf9a:	88a3      	ldrh	r3, [r4, #4]
 801cf9c:	8b02      	ldrh	r2, [r0, #24]
 801cf9e:	1acb      	subs	r3, r1, r3
 801cfa0:	f102 32ff 	add.w	r2, r2, #4294967295
 801cfa4:	d431      	bmi.n	801d00a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cfa6:	4293      	cmp	r3, r2
 801cfa8:	dd0c      	ble.n	801cfc4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801cfaa:	230e      	movs	r3, #14
 801cfac:	fb03 4302 	mla	r3, r3, r2, r4
 801cfb0:	889b      	ldrh	r3, [r3, #4]
 801cfb2:	1a5b      	subs	r3, r3, r1
 801cfb4:	1ad3      	subs	r3, r2, r3
 801cfb6:	429a      	cmp	r2, r3
 801cfb8:	db27      	blt.n	801d00a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	bfbc      	itt	lt
 801cfbe:	2302      	movlt	r3, #2
 801cfc0:	fb92 f3f3 	sdivlt	r3, r2, r3
 801cfc4:	2500      	movs	r5, #0
 801cfc6:	260e      	movs	r6, #14
 801cfc8:	4295      	cmp	r5, r2
 801cfca:	dc1e      	bgt.n	801d00a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cfcc:	fb06 4003 	mla	r0, r6, r3, r4
 801cfd0:	8887      	ldrh	r7, [r0, #4]
 801cfd2:	42b9      	cmp	r1, r7
 801cfd4:	d01a      	beq.n	801d00c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801cfd6:	d20d      	bcs.n	801cff4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801cfd8:	1e5a      	subs	r2, r3, #1
 801cfda:	4295      	cmp	r5, r2
 801cfdc:	dc15      	bgt.n	801d00a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cfde:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801cfe2:	1a5b      	subs	r3, r3, r1
 801cfe4:	1ad3      	subs	r3, r2, r3
 801cfe6:	429a      	cmp	r2, r3
 801cfe8:	db0f      	blt.n	801d00a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cfea:	429d      	cmp	r5, r3
 801cfec:	ddec      	ble.n	801cfc8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cfee:	1953      	adds	r3, r2, r5
 801cff0:	105b      	asrs	r3, r3, #1
 801cff2:	e7e9      	b.n	801cfc8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cff4:	1c5d      	adds	r5, r3, #1
 801cff6:	42aa      	cmp	r2, r5
 801cff8:	db07      	blt.n	801d00a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cffa:	8a43      	ldrh	r3, [r0, #18]
 801cffc:	1acb      	subs	r3, r1, r3
 801cffe:	442b      	add	r3, r5
 801d000:	429d      	cmp	r5, r3
 801d002:	dc02      	bgt.n	801d00a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d004:	429a      	cmp	r2, r3
 801d006:	dadf      	bge.n	801cfc8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d008:	e7f1      	b.n	801cfee <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801d00a:	2000      	movs	r0, #0
 801d00c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d00e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801d00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d010:	4604      	mov	r4, r0
 801d012:	4617      	mov	r7, r2
 801d014:	461e      	mov	r6, r3
 801d016:	b911      	cbnz	r1, 801d01e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d018:	2500      	movs	r5, #0
 801d01a:	4628      	mov	r0, r5
 801d01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d01e:	290a      	cmp	r1, #10
 801d020:	d0fa      	beq.n	801d018 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d022:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801d026:	4291      	cmp	r1, r2
 801d028:	d0f6      	beq.n	801d018 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d02a:	f242 020b 	movw	r2, #8203	; 0x200b
 801d02e:	4291      	cmp	r1, r2
 801d030:	d0f2      	beq.n	801d018 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d032:	f7ff ffaf 	bl	801cf94 <_ZNK8touchgfx9ConstFont4findEt>
 801d036:	4605      	mov	r5, r0
 801d038:	b950      	cbnz	r0, 801d050 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801d03a:	6823      	ldr	r3, [r4, #0]
 801d03c:	4620      	mov	r0, r4
 801d03e:	691b      	ldr	r3, [r3, #16]
 801d040:	4798      	blx	r3
 801d042:	4601      	mov	r1, r0
 801d044:	4620      	mov	r0, r4
 801d046:	f7ff ffa5 	bl	801cf94 <_ZNK8touchgfx9ConstFont4findEt>
 801d04a:	4605      	mov	r5, r0
 801d04c:	2800      	cmp	r0, #0
 801d04e:	d0e3      	beq.n	801d018 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d050:	6823      	ldr	r3, [r4, #0]
 801d052:	4629      	mov	r1, r5
 801d054:	4620      	mov	r0, r4
 801d056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d058:	4798      	blx	r3
 801d05a:	6038      	str	r0, [r7, #0]
 801d05c:	6823      	ldr	r3, [r4, #0]
 801d05e:	4620      	mov	r0, r4
 801d060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d062:	4798      	blx	r3
 801d064:	7030      	strb	r0, [r6, #0]
 801d066:	e7d8      	b.n	801d01a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801d068 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801d068:	2000      	movs	r0, #0
 801d06a:	4770      	bx	lr

0801d06c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801d06c:	2001      	movs	r0, #1
 801d06e:	4770      	bx	lr

0801d070 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801d070:	2002      	movs	r0, #2
 801d072:	4770      	bx	lr

0801d074 <_ZN8touchgfx6ScreenD1Ev>:
 801d074:	4770      	bx	lr

0801d076 <_ZN8touchgfx12GestureEventD1Ev>:
 801d076:	4770      	bx	lr

0801d078 <_ZN8touchgfx9DragEventD1Ev>:
 801d078:	4770      	bx	lr

0801d07a <_ZN8touchgfx10ClickEventD1Ev>:
 801d07a:	4770      	bx	lr

0801d07c <_ZN8touchgfx10ClickEventD0Ev>:
 801d07c:	b510      	push	{r4, lr}
 801d07e:	4604      	mov	r4, r0
 801d080:	210c      	movs	r1, #12
 801d082:	f00d fc80 	bl	802a986 <_ZdlPvj>
 801d086:	4620      	mov	r0, r4
 801d088:	bd10      	pop	{r4, pc}

0801d08a <_ZN8touchgfx9DragEventD0Ev>:
 801d08a:	b510      	push	{r4, lr}
 801d08c:	4604      	mov	r4, r0
 801d08e:	2110      	movs	r1, #16
 801d090:	f00d fc79 	bl	802a986 <_ZdlPvj>
 801d094:	4620      	mov	r0, r4
 801d096:	bd10      	pop	{r4, pc}

0801d098 <_ZN8touchgfx12GestureEventD0Ev>:
 801d098:	b510      	push	{r4, lr}
 801d09a:	4604      	mov	r4, r0
 801d09c:	210c      	movs	r1, #12
 801d09e:	f00d fc72 	bl	802a986 <_ZdlPvj>
 801d0a2:	4620      	mov	r0, r4
 801d0a4:	bd10      	pop	{r4, pc}

0801d0a6 <_ZN8touchgfx6ScreenD0Ev>:
 801d0a6:	b510      	push	{r4, lr}
 801d0a8:	4604      	mov	r4, r0
 801d0aa:	213c      	movs	r1, #60	; 0x3c
 801d0ac:	f00d fc6b 	bl	802a986 <_ZdlPvj>
 801d0b0:	4620      	mov	r0, r4
 801d0b2:	bd10      	pop	{r4, pc}

0801d0b4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d0b4:	b530      	push	{r4, r5, lr}
 801d0b6:	460d      	mov	r5, r1
 801d0b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d0ba:	b087      	sub	sp, #28
 801d0bc:	4604      	mov	r4, r0
 801d0be:	b301      	cbz	r1, 801d102 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d0c0:	a801      	add	r0, sp, #4
 801d0c2:	f7ff ff2d 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d0c6:	892a      	ldrh	r2, [r5, #8]
 801d0c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d0cc:	7928      	ldrb	r0, [r5, #4]
 801d0ce:	1ad2      	subs	r2, r2, r3
 801d0d0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d0d2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d0d6:	441a      	add	r2, r3
 801d0d8:	896b      	ldrh	r3, [r5, #10]
 801d0da:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d0de:	f88d 0010 	strb.w	r0, [sp, #16]
 801d0e2:	1b5b      	subs	r3, r3, r5
 801d0e4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801d0e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d0e8:	442b      	add	r3, r5
 801d0ea:	4d07      	ldr	r5, [pc, #28]	; (801d108 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d0ec:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d0f0:	a903      	add	r1, sp, #12
 801d0f2:	9503      	str	r5, [sp, #12]
 801d0f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d0f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d0fc:	6803      	ldr	r3, [r0, #0]
 801d0fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d100:	4798      	blx	r3
 801d102:	b007      	add	sp, #28
 801d104:	bd30      	pop	{r4, r5, pc}
 801d106:	bf00      	nop
 801d108:	080307f8 	.word	0x080307f8

0801d10c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d110:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801d112:	b08a      	sub	sp, #40	; 0x28
 801d114:	4604      	mov	r4, r0
 801d116:	460d      	mov	r5, r1
 801d118:	b113      	cbz	r3, 801d120 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801d11a:	790b      	ldrb	r3, [r1, #4]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d044      	beq.n	801d1aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d120:	f104 0804 	add.w	r8, r4, #4
 801d124:	a803      	add	r0, sp, #12
 801d126:	4641      	mov	r1, r8
 801d128:	f7ff fefa 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d12c:	792b      	ldrb	r3, [r5, #4]
 801d12e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d132:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801d136:	b983      	cbnz	r3, 801d15a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801d138:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801d13c:	892a      	ldrh	r2, [r5, #8]
 801d13e:	88e9      	ldrh	r1, [r5, #6]
 801d140:	4640      	mov	r0, r8
 801d142:	1b92      	subs	r2, r2, r6
 801d144:	9301      	str	r3, [sp, #4]
 801d146:	1bc9      	subs	r1, r1, r7
 801d148:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801d14c:	b212      	sxth	r2, r2
 801d14e:	9300      	str	r3, [sp, #0]
 801d150:	b209      	sxth	r1, r1
 801d152:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d156:	f7fb fb09 	bl	801876c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d15a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d15c:	b329      	cbz	r1, 801d1aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d15e:	a805      	add	r0, sp, #20
 801d160:	f7ff fede 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d164:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d168:	792b      	ldrb	r3, [r5, #4]
 801d16a:	a907      	add	r1, sp, #28
 801d16c:	1abf      	subs	r7, r7, r2
 801d16e:	88ea      	ldrh	r2, [r5, #6]
 801d170:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d172:	4417      	add	r7, r2
 801d174:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801d176:	f88d 3020 	strb.w	r3, [sp, #32]
 801d17a:	4417      	add	r7, r2
 801d17c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d180:	1ab6      	subs	r6, r6, r2
 801d182:	892a      	ldrh	r2, [r5, #8]
 801d184:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801d188:	4416      	add	r6, r2
 801d18a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d18c:	4416      	add	r6, r2
 801d18e:	4a08      	ldr	r2, [pc, #32]	; (801d1b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d190:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d194:	2600      	movs	r6, #0
 801d196:	9207      	str	r2, [sp, #28]
 801d198:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801d19c:	6803      	ldr	r3, [r0, #0]
 801d19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d1a0:	4798      	blx	r3
 801d1a2:	792b      	ldrb	r3, [r5, #4]
 801d1a4:	b10b      	cbz	r3, 801d1aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d1a6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d1aa:	b00a      	add	sp, #40	; 0x28
 801d1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1b0:	080307d0 	.word	0x080307d0

0801d1b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1b8:	460c      	mov	r4, r1
 801d1ba:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d1bc:	b088      	sub	sp, #32
 801d1be:	4605      	mov	r5, r0
 801d1c0:	2900      	cmp	r1, #0
 801d1c2:	d06d      	beq.n	801d2a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d1c4:	4668      	mov	r0, sp
 801d1c6:	f7ff feab 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d1ca:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801d1cc:	88e3      	ldrh	r3, [r4, #6]
 801d1ce:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d1d2:	440b      	add	r3, r1
 801d1d4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d1d8:	b21b      	sxth	r3, r3
 801d1da:	4543      	cmp	r3, r8
 801d1dc:	db31      	blt.n	801d242 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d1de:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d1e2:	44c4      	add	ip, r8
 801d1e4:	fa0f fc8c 	sxth.w	ip, ip
 801d1e8:	4563      	cmp	r3, ip
 801d1ea:	da2a      	bge.n	801d242 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d1ec:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801d1ee:	8926      	ldrh	r6, [r4, #8]
 801d1f0:	4416      	add	r6, r2
 801d1f2:	b236      	sxth	r6, r6
 801d1f4:	42be      	cmp	r6, r7
 801d1f6:	db24      	blt.n	801d242 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d1f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d1fc:	4438      	add	r0, r7
 801d1fe:	b200      	sxth	r0, r0
 801d200:	4286      	cmp	r6, r0
 801d202:	da1e      	bge.n	801d242 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d204:	8963      	ldrh	r3, [r4, #10]
 801d206:	4419      	add	r1, r3
 801d208:	b209      	sxth	r1, r1
 801d20a:	4541      	cmp	r1, r8
 801d20c:	db08      	blt.n	801d220 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d20e:	4561      	cmp	r1, ip
 801d210:	da06      	bge.n	801d220 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d212:	89a3      	ldrh	r3, [r4, #12]
 801d214:	441a      	add	r2, r3
 801d216:	b212      	sxth	r2, r2
 801d218:	42ba      	cmp	r2, r7
 801d21a:	db01      	blt.n	801d220 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d21c:	4282      	cmp	r2, r0
 801d21e:	db10      	blt.n	801d242 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d220:	4b21      	ldr	r3, [pc, #132]	; (801d2a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d222:	a904      	add	r1, sp, #16
 801d224:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d226:	9304      	str	r3, [sp, #16]
 801d228:	2302      	movs	r3, #2
 801d22a:	f88d 3014 	strb.w	r3, [sp, #20]
 801d22e:	2300      	movs	r3, #0
 801d230:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d234:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d238:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d23c:	6803      	ldr	r3, [r0, #0]
 801d23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d240:	4798      	blx	r3
 801d242:	1d29      	adds	r1, r5, #4
 801d244:	a802      	add	r0, sp, #8
 801d246:	f7ff fe6b 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d24a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d24e:	88e0      	ldrh	r0, [r4, #6]
 801d250:	eba3 0808 	sub.w	r8, r3, r8
 801d254:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d258:	7921      	ldrb	r1, [r4, #4]
 801d25a:	fa1f f888 	uxth.w	r8, r8
 801d25e:	1bdf      	subs	r7, r3, r7
 801d260:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d264:	b2bb      	uxth	r3, r7
 801d266:	4440      	add	r0, r8
 801d268:	8922      	ldrh	r2, [r4, #8]
 801d26a:	8967      	ldrh	r7, [r4, #10]
 801d26c:	4460      	add	r0, ip
 801d26e:	89a4      	ldrh	r4, [r4, #12]
 801d270:	441a      	add	r2, r3
 801d272:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d274:	44b8      	add	r8, r7
 801d276:	4423      	add	r3, r4
 801d278:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d27c:	4432      	add	r2, r6
 801d27e:	44e0      	add	r8, ip
 801d280:	4433      	add	r3, r6
 801d282:	4c0a      	ldr	r4, [pc, #40]	; (801d2ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d284:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d286:	f88d 1014 	strb.w	r1, [sp, #20]
 801d28a:	a904      	add	r1, sp, #16
 801d28c:	9404      	str	r4, [sp, #16]
 801d28e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d292:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d296:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d29a:	6803      	ldr	r3, [r0, #0]
 801d29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d29e:	4798      	blx	r3
 801d2a0:	b008      	add	sp, #32
 801d2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2a6:	bf00      	nop
 801d2a8:	080307d0 	.word	0x080307d0
 801d2ac:	080307e4 	.word	0x080307e4

0801d2b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d2b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d2b2:	4604      	mov	r4, r0
 801d2b4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d2b8:	3201      	adds	r2, #1
 801d2ba:	d112      	bne.n	801d2e2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d2bc:	2500      	movs	r5, #0
 801d2be:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d2c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d2c6:	6803      	ldr	r3, [r0, #0]
 801d2c8:	9500      	str	r5, [sp, #0]
 801d2ca:	466d      	mov	r5, sp
 801d2cc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d2d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d2d4:	4629      	mov	r1, r5
 801d2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2d8:	4798      	blx	r3
 801d2da:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d2de:	e884 0003 	stmia.w	r4, {r0, r1}
 801d2e2:	4620      	mov	r0, r4
 801d2e4:	b003      	add	sp, #12
 801d2e6:	bd30      	pop	{r4, r5, pc}

0801d2e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d2e8:	b513      	push	{r0, r1, r4, lr}
 801d2ea:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d2ee:	4604      	mov	r4, r0
 801d2f0:	3301      	adds	r3, #1
 801d2f2:	d109      	bne.n	801d308 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d2f4:	4601      	mov	r1, r0
 801d2f6:	4668      	mov	r0, sp
 801d2f8:	f7ff fe12 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d2fc:	f8bd 3000 	ldrh.w	r3, [sp]
 801d300:	8423      	strh	r3, [r4, #32]
 801d302:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d306:	8463      	strh	r3, [r4, #34]	; 0x22
 801d308:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d30c:	b002      	add	sp, #8
 801d30e:	bd10      	pop	{r4, pc}

0801d310 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d310:	b513      	push	{r0, r1, r4, lr}
 801d312:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d316:	4604      	mov	r4, r0
 801d318:	3301      	adds	r3, #1
 801d31a:	d109      	bne.n	801d330 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d31c:	4601      	mov	r1, r0
 801d31e:	4668      	mov	r0, sp
 801d320:	f7ff fdfe 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d324:	f8bd 3000 	ldrh.w	r3, [sp]
 801d328:	8423      	strh	r3, [r4, #32]
 801d32a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d32e:	8463      	strh	r3, [r4, #34]	; 0x22
 801d330:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d334:	b002      	add	sp, #8
 801d336:	bd10      	pop	{r4, pc}

0801d338 <_ZN8touchgfx6ScreenC1Ev>:
 801d338:	b570      	push	{r4, r5, r6, lr}
 801d33a:	4b17      	ldr	r3, [pc, #92]	; (801d398 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d33c:	4605      	mov	r5, r0
 801d33e:	4a17      	ldr	r2, [pc, #92]	; (801d39c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d340:	2101      	movs	r1, #1
 801d342:	f845 3b04 	str.w	r3, [r5], #4
 801d346:	2300      	movs	r3, #0
 801d348:	6042      	str	r2, [r0, #4]
 801d34a:	4604      	mov	r4, r0
 801d34c:	8103      	strh	r3, [r0, #8]
 801d34e:	8143      	strh	r3, [r0, #10]
 801d350:	8183      	strh	r3, [r0, #12]
 801d352:	81c3      	strh	r3, [r0, #14]
 801d354:	8203      	strh	r3, [r0, #16]
 801d356:	8243      	strh	r3, [r0, #18]
 801d358:	8283      	strh	r3, [r0, #20]
 801d35a:	82c3      	strh	r3, [r0, #22]
 801d35c:	6203      	str	r3, [r0, #32]
 801d35e:	8483      	strh	r3, [r0, #36]	; 0x24
 801d360:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d362:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801d366:	6343      	str	r3, [r0, #52]	; 0x34
 801d368:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801d36c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801d370:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d374:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801d378:	4b09      	ldr	r3, [pc, #36]	; (801d3a0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d37a:	4628      	mov	r0, r5
 801d37c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d380:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801d382:	4a08      	ldr	r2, [pc, #32]	; (801d3a4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d384:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d388:	4798      	blx	r3
 801d38a:	6863      	ldr	r3, [r4, #4]
 801d38c:	4628      	mov	r0, r5
 801d38e:	4631      	mov	r1, r6
 801d390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d392:	4798      	blx	r3
 801d394:	4620      	mov	r0, r4
 801d396:	bd70      	pop	{r4, r5, r6, pc}
 801d398:	0803080c 	.word	0x0803080c
 801d39c:	08030500 	.word	0x08030500
 801d3a0:	20015fb2 	.word	0x20015fb2
 801d3a4:	20015fb0 	.word	0x20015fb0

0801d3a8 <_ZN8touchgfx6Screen4drawEv>:
 801d3a8:	4b09      	ldr	r3, [pc, #36]	; (801d3d0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d3aa:	b507      	push	{r0, r1, r2, lr}
 801d3ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d3b0:	2100      	movs	r1, #0
 801d3b2:	4b08      	ldr	r3, [pc, #32]	; (801d3d4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d3b4:	9100      	str	r1, [sp, #0]
 801d3b6:	4669      	mov	r1, sp
 801d3b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3bc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d3c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d3c4:	6803      	ldr	r3, [r0, #0]
 801d3c6:	689b      	ldr	r3, [r3, #8]
 801d3c8:	4798      	blx	r3
 801d3ca:	b003      	add	sp, #12
 801d3cc:	f85d fb04 	ldr.w	pc, [sp], #4
 801d3d0:	20015fb0 	.word	0x20015fb0
 801d3d4:	20015fb2 	.word	0x20015fb2

0801d3d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d3e0:	b089      	sub	sp, #36	; 0x24
 801d3e2:	4680      	mov	r8, r0
 801d3e4:	460c      	mov	r4, r1
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	4615      	mov	r5, r2
 801d3ea:	dd0e      	ble.n	801d40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d3ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	dd0a      	ble.n	801d40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d3f4:	4628      	mov	r0, r5
 801d3f6:	f7ff ff5b 	bl	801d2b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d3fa:	4621      	mov	r1, r4
 801d3fc:	f7fe fbd1 	bl	801bba2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d400:	69eb      	ldr	r3, [r5, #28]
 801d402:	b928      	cbnz	r0, 801d410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d404:	461d      	mov	r5, r3
 801d406:	2b00      	cmp	r3, #0
 801d408:	d1f4      	bne.n	801d3f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d40a:	b009      	add	sp, #36	; 0x24
 801d40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d410:	ae04      	add	r6, sp, #16
 801d412:	2b00      	cmp	r3, #0
 801d414:	f000 80b5 	beq.w	801d582 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d418:	682b      	ldr	r3, [r5, #0]
 801d41a:	4629      	mov	r1, r5
 801d41c:	a802      	add	r0, sp, #8
 801d41e:	68db      	ldr	r3, [r3, #12]
 801d420:	4798      	blx	r3
 801d422:	4628      	mov	r0, r5
 801d424:	f7ff ff60 	bl	801d2e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d428:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d42c:	4407      	add	r7, r0
 801d42e:	4628      	mov	r0, r5
 801d430:	f7ff ff6e 	bl	801d310 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d434:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d438:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d43c:	b23f      	sxth	r7, r7
 801d43e:	4418      	add	r0, r3
 801d440:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d444:	4621      	mov	r1, r4
 801d446:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d44a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d44e:	4630      	mov	r0, r6
 801d450:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d454:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d458:	f7fb fa6a 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 801d45c:	4628      	mov	r0, r5
 801d45e:	f7ff ff27 	bl	801d2b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d462:	ab06      	add	r3, sp, #24
 801d464:	4602      	mov	r2, r0
 801d466:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d46a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d46e:	4611      	mov	r1, r2
 801d470:	4618      	mov	r0, r3
 801d472:	f7fb fa5d 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 801d476:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d47a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d47e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d482:	4299      	cmp	r1, r3
 801d484:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d488:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d48c:	d10b      	bne.n	801d4a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d48e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d492:	4552      	cmp	r2, sl
 801d494:	d107      	bne.n	801d4a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d496:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d49a:	455a      	cmp	r2, fp
 801d49c:	d103      	bne.n	801d4a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d49e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d4a2:	454a      	cmp	r2, r9
 801d4a4:	d06d      	beq.n	801d582 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d4a6:	f1bb 0f00 	cmp.w	fp, #0
 801d4aa:	dd65      	ble.n	801d578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d4ac:	f1b9 0f00 	cmp.w	r9, #0
 801d4b0:	dd62      	ble.n	801d578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d4b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d4b6:	fa1f f08a 	uxth.w	r0, sl
 801d4ba:	4552      	cmp	r2, sl
 801d4bc:	9000      	str	r0, [sp, #0]
 801d4be:	da12      	bge.n	801d4e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d4c0:	9301      	str	r3, [sp, #4]
 801d4c2:	9b00      	ldr	r3, [sp, #0]
 801d4c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d4c8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d4cc:	1a9a      	subs	r2, r3, r2
 801d4ce:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d4d2:	4631      	mov	r1, r6
 801d4d4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d4d8:	4640      	mov	r0, r8
 801d4da:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d4de:	69ea      	ldr	r2, [r5, #28]
 801d4e0:	f7ff ff7a 	bl	801d3d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d4e4:	9b01      	ldr	r3, [sp, #4]
 801d4e6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d4ea:	b29f      	uxth	r7, r3
 801d4ec:	429a      	cmp	r2, r3
 801d4ee:	da0d      	bge.n	801d50c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d4f0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d4f4:	1aba      	subs	r2, r7, r2
 801d4f6:	f8ad a012 	strh.w	sl, [sp, #18]
 801d4fa:	4631      	mov	r1, r6
 801d4fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d500:	4640      	mov	r0, r8
 801d502:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d506:	69ea      	ldr	r2, [r5, #28]
 801d508:	f7ff ff66 	bl	801d3d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d50c:	8822      	ldrh	r2, [r4, #0]
 801d50e:	445f      	add	r7, fp
 801d510:	88a3      	ldrh	r3, [r4, #4]
 801d512:	b2bf      	uxth	r7, r7
 801d514:	4413      	add	r3, r2
 801d516:	b23a      	sxth	r2, r7
 801d518:	b29b      	uxth	r3, r3
 801d51a:	b219      	sxth	r1, r3
 801d51c:	4291      	cmp	r1, r2
 801d51e:	dd0d      	ble.n	801d53c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d520:	1bdb      	subs	r3, r3, r7
 801d522:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d526:	f8ad a012 	strh.w	sl, [sp, #18]
 801d52a:	4631      	mov	r1, r6
 801d52c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d530:	4640      	mov	r0, r8
 801d532:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d536:	69ea      	ldr	r2, [r5, #28]
 801d538:	f7ff ff4e 	bl	801d3d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d53c:	88e2      	ldrh	r2, [r4, #6]
 801d53e:	8863      	ldrh	r3, [r4, #2]
 801d540:	4413      	add	r3, r2
 801d542:	9a00      	ldr	r2, [sp, #0]
 801d544:	444a      	add	r2, r9
 801d546:	b29b      	uxth	r3, r3
 801d548:	fa1f f982 	uxth.w	r9, r2
 801d54c:	b219      	sxth	r1, r3
 801d54e:	fa0f f289 	sxth.w	r2, r9
 801d552:	428a      	cmp	r2, r1
 801d554:	da15      	bge.n	801d582 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d556:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d55a:	eba3 0309 	sub.w	r3, r3, r9
 801d55e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d562:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d566:	4631      	mov	r1, r6
 801d568:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d56c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d570:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d574:	69ea      	ldr	r2, [r5, #28]
 801d576:	e001      	b.n	801d57c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d578:	69ea      	ldr	r2, [r5, #28]
 801d57a:	4621      	mov	r1, r4
 801d57c:	4640      	mov	r0, r8
 801d57e:	f7ff ff2b 	bl	801d3d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d582:	4628      	mov	r0, r5
 801d584:	f7ff fe94 	bl	801d2b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d588:	6861      	ldr	r1, [r4, #4]
 801d58a:	4602      	mov	r2, r0
 801d58c:	4633      	mov	r3, r6
 801d58e:	6820      	ldr	r0, [r4, #0]
 801d590:	c303      	stmia	r3!, {r0, r1}
 801d592:	4611      	mov	r1, r2
 801d594:	4630      	mov	r0, r6
 801d596:	f7fb f9cb 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 801d59a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	f77f af33 	ble.w	801d40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d5a4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	f77f af2e 	ble.w	801d40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d5ae:	4628      	mov	r0, r5
 801d5b0:	f7ff fe9a 	bl	801d2e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d5b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d5b8:	1a18      	subs	r0, r3, r0
 801d5ba:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d5be:	4628      	mov	r0, r5
 801d5c0:	f7ff fea6 	bl	801d310 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d5c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d5c8:	4631      	mov	r1, r6
 801d5ca:	1a18      	subs	r0, r3, r0
 801d5cc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d5d0:	4628      	mov	r0, r5
 801d5d2:	682b      	ldr	r3, [r5, #0]
 801d5d4:	689b      	ldr	r3, [r3, #8]
 801d5d6:	4798      	blx	r3
 801d5d8:	e717      	b.n	801d40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d5da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d5da:	b570      	push	{r4, r5, r6, lr}
 801d5dc:	1d06      	adds	r6, r0, #4
 801d5de:	b086      	sub	sp, #24
 801d5e0:	460c      	mov	r4, r1
 801d5e2:	2300      	movs	r3, #0
 801d5e4:	4631      	mov	r1, r6
 801d5e6:	4605      	mov	r5, r0
 801d5e8:	a802      	add	r0, sp, #8
 801d5ea:	9301      	str	r3, [sp, #4]
 801d5ec:	f7ff fc98 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d5f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d5f4:	8822      	ldrh	r2, [r4, #0]
 801d5f6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d5fa:	1ad2      	subs	r2, r2, r3
 801d5fc:	8863      	ldrh	r3, [r4, #2]
 801d5fe:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d602:	1a5b      	subs	r3, r3, r1
 801d604:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d608:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d60c:	aa01      	add	r2, sp, #4
 801d60e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d612:	4630      	mov	r0, r6
 801d614:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d618:	a904      	add	r1, sp, #16
 801d61a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d61e:	f7fb fa5f 	bl	8018ae0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d622:	9a01      	ldr	r2, [sp, #4]
 801d624:	b11a      	cbz	r2, 801d62e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d626:	4621      	mov	r1, r4
 801d628:	4628      	mov	r0, r5
 801d62a:	f7ff fed5 	bl	801d3d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d62e:	b006      	add	sp, #24
 801d630:	bd70      	pop	{r4, r5, r6, pc}

0801d632 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d632:	4602      	mov	r2, r0
 801d634:	b530      	push	{r4, r5, lr}
 801d636:	4604      	mov	r4, r0
 801d638:	b085      	sub	sp, #20
 801d63a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d63e:	460d      	mov	r5, r1
 801d640:	466b      	mov	r3, sp
 801d642:	6851      	ldr	r1, [r2, #4]
 801d644:	c303      	stmia	r3!, {r0, r1}
 801d646:	4629      	mov	r1, r5
 801d648:	4668      	mov	r0, sp
 801d64a:	f7fb f971 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 801d64e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d652:	b12b      	cbz	r3, 801d660 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d654:	4669      	mov	r1, sp
 801d656:	4620      	mov	r0, r4
 801d658:	f7ff ffbf 	bl	801d5da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d65c:	b005      	add	sp, #20
 801d65e:	bd30      	pop	{r4, r5, pc}
 801d660:	3404      	adds	r4, #4
 801d662:	a802      	add	r0, sp, #8
 801d664:	4621      	mov	r1, r4
 801d666:	f7ff fc5b 	bl	801cf20 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d66a:	f8bd 3000 	ldrh.w	r3, [sp]
 801d66e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d672:	4669      	mov	r1, sp
 801d674:	4620      	mov	r0, r4
 801d676:	1a9b      	subs	r3, r3, r2
 801d678:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d67c:	f8ad 3000 	strh.w	r3, [sp]
 801d680:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d684:	1a9b      	subs	r3, r3, r2
 801d686:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d68a:	f7fb f9f0 	bl	8018a6e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d68e:	e7e5      	b.n	801d65c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d690 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d690:	460b      	mov	r3, r1
 801d692:	680a      	ldr	r2, [r1, #0]
 801d694:	1d01      	adds	r1, r0, #4
 801d696:	6992      	ldr	r2, [r2, #24]
 801d698:	4618      	mov	r0, r3
 801d69a:	4710      	bx	r2

0801d69c <_ZN8touchgfx12TextProviderC1Ev>:
 801d69c:	b538      	push	{r3, r4, r5, lr}
 801d69e:	2500      	movs	r5, #0
 801d6a0:	2302      	movs	r3, #2
 801d6a2:	4604      	mov	r4, r0
 801d6a4:	220e      	movs	r2, #14
 801d6a6:	7403      	strb	r3, [r0, #16]
 801d6a8:	4629      	mov	r1, r5
 801d6aa:	6145      	str	r5, [r0, #20]
 801d6ac:	7605      	strb	r5, [r0, #24]
 801d6ae:	83c5      	strh	r5, [r0, #30]
 801d6b0:	8405      	strh	r5, [r0, #32]
 801d6b2:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d6b4:	8705      	strh	r5, [r0, #56]	; 0x38
 801d6b6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801d6b8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801d6bc:	e9c0 5500 	strd	r5, r5, [r0]
 801d6c0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801d6c4:	304c      	adds	r0, #76	; 0x4c
 801d6c6:	f00d fb13 	bl	802acf0 <memset>
 801d6ca:	2301      	movs	r3, #1
 801d6cc:	4620      	mov	r0, r4
 801d6ce:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801d6d2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d6d6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801d6da:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801d6de:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801d6e2:	f7e7 fceb 	bl	80050bc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d6e6:	4620      	mov	r0, r4
 801d6e8:	bd38      	pop	{r3, r4, r5, pc}

0801d6ea <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801d6ea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d6ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d6f0:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801d6f2:	fab0 f080 	clz	r0, r0
 801d6f6:	0940      	lsrs	r0, r0, #5
 801d6f8:	4770      	bx	lr

0801d6fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d6fa:	b530      	push	{r4, r5, lr}
 801d6fc:	2500      	movs	r5, #0
 801d6fe:	2401      	movs	r4, #1
 801d700:	6843      	ldr	r3, [r0, #4]
 801d702:	b913      	cbnz	r3, 801d70a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d704:	6803      	ldr	r3, [r0, #0]
 801d706:	b313      	cbz	r3, 801d74e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d708:	6043      	str	r3, [r0, #4]
 801d70a:	7e03      	ldrb	r3, [r0, #24]
 801d70c:	b143      	cbz	r3, 801d720 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d70e:	6943      	ldr	r3, [r0, #20]
 801d710:	b12b      	cbz	r3, 801d71e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d712:	881a      	ldrh	r2, [r3, #0]
 801d714:	b11a      	cbz	r2, 801d71e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d716:	1c9a      	adds	r2, r3, #2
 801d718:	6142      	str	r2, [r0, #20]
 801d71a:	8818      	ldrh	r0, [r3, #0]
 801d71c:	bd30      	pop	{r4, r5, pc}
 801d71e:	7605      	strb	r5, [r0, #24]
 801d720:	6843      	ldr	r3, [r0, #4]
 801d722:	8819      	ldrh	r1, [r3, #0]
 801d724:	b199      	cbz	r1, 801d74e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d726:	1c9a      	adds	r2, r3, #2
 801d728:	2902      	cmp	r1, #2
 801d72a:	6042      	str	r2, [r0, #4]
 801d72c:	d1f5      	bne.n	801d71a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d72e:	7c03      	ldrb	r3, [r0, #16]
 801d730:	2b01      	cmp	r3, #1
 801d732:	d8e5      	bhi.n	801d700 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d734:	1c5a      	adds	r2, r3, #1
 801d736:	3302      	adds	r3, #2
 801d738:	7402      	strb	r2, [r0, #16]
 801d73a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d73e:	6143      	str	r3, [r0, #20]
 801d740:	2b00      	cmp	r3, #0
 801d742:	d0dd      	beq.n	801d700 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d744:	881b      	ldrh	r3, [r3, #0]
 801d746:	2b00      	cmp	r3, #0
 801d748:	d0da      	beq.n	801d700 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d74a:	7604      	strb	r4, [r0, #24]
 801d74c:	e7d8      	b.n	801d700 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d74e:	2000      	movs	r0, #0
 801d750:	e7e4      	b.n	801d71c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d752:	6001      	str	r1, [r0, #0]
 801d754:	2100      	movs	r1, #0
 801d756:	b430      	push	{r4, r5}
 801d758:	6041      	str	r1, [r0, #4]
 801d75a:	6815      	ldr	r5, [r2, #0]
 801d75c:	6085      	str	r5, [r0, #8]
 801d75e:	6852      	ldr	r2, [r2, #4]
 801d760:	6443      	str	r3, [r0, #68]	; 0x44
 801d762:	9b02      	ldr	r3, [sp, #8]
 801d764:	60c2      	str	r2, [r0, #12]
 801d766:	7401      	strb	r1, [r0, #16]
 801d768:	6141      	str	r1, [r0, #20]
 801d76a:	7601      	strb	r1, [r0, #24]
 801d76c:	8701      	strh	r1, [r0, #56]	; 0x38
 801d76e:	8401      	strh	r1, [r0, #32]
 801d770:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801d774:	6483      	str	r3, [r0, #72]	; 0x48
 801d776:	bc30      	pop	{r4, r5}
 801d778:	f7e7 bca0 	b.w	80050bc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d77c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801d77c:	b408      	push	{r3}
 801d77e:	b510      	push	{r4, lr}
 801d780:	b085      	sub	sp, #20
 801d782:	ac07      	add	r4, sp, #28
 801d784:	f854 3b04 	ldr.w	r3, [r4], #4
 801d788:	9300      	str	r3, [sp, #0]
 801d78a:	4613      	mov	r3, r2
 801d78c:	4622      	mov	r2, r4
 801d78e:	9403      	str	r4, [sp, #12]
 801d790:	f7ff ffdf 	bl	801d752 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d794:	b005      	add	sp, #20
 801d796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d79a:	b001      	add	sp, #4
 801d79c:	4770      	bx	lr

0801d79e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d79e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7a0:	4605      	mov	r5, r0
 801d7a2:	4608      	mov	r0, r1
 801d7a4:	b1f1      	cbz	r1, 801d7e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d7a6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801d7aa:	460b      	mov	r3, r1
 801d7ac:	f101 0708 	add.w	r7, r1, #8
 801d7b0:	4622      	mov	r2, r4
 801d7b2:	6818      	ldr	r0, [r3, #0]
 801d7b4:	3308      	adds	r3, #8
 801d7b6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d7ba:	4626      	mov	r6, r4
 801d7bc:	42bb      	cmp	r3, r7
 801d7be:	c603      	stmia	r6!, {r0, r1}
 801d7c0:	4634      	mov	r4, r6
 801d7c2:	d1f6      	bne.n	801d7b2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d7c4:	6818      	ldr	r0, [r3, #0]
 801d7c6:	6030      	str	r0, [r6, #0]
 801d7c8:	4610      	mov	r0, r2
 801d7ca:	889b      	ldrh	r3, [r3, #4]
 801d7cc:	80b3      	strh	r3, [r6, #4]
 801d7ce:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801d7d2:	015b      	lsls	r3, r3, #5
 801d7d4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d7d8:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801d7dc:	430b      	orrs	r3, r1
 801d7de:	425b      	negs	r3, r3
 801d7e0:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801d7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d7e6:	b538      	push	{r3, r4, r5, lr}
 801d7e8:	460c      	mov	r4, r1
 801d7ea:	6811      	ldr	r1, [r2, #0]
 801d7ec:	4610      	mov	r0, r2
 801d7ee:	68cd      	ldr	r5, [r1, #12]
 801d7f0:	4619      	mov	r1, r3
 801d7f2:	47a8      	blx	r5
 801d7f4:	2800      	cmp	r0, #0
 801d7f6:	bf08      	it	eq
 801d7f8:	4620      	moveq	r0, r4
 801d7fa:	bd38      	pop	{r3, r4, r5, pc}

0801d7fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7fe:	4604      	mov	r4, r0
 801d800:	4615      	mov	r5, r2
 801d802:	4608      	mov	r0, r1
 801d804:	b93a      	cbnz	r2, 801d816 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d806:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d80a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801d80e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801d812:	4628      	mov	r0, r5
 801d814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d816:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d81a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801d81e:	8893      	ldrh	r3, [r2, #4]
 801d820:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d824:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d828:	79ee      	ldrb	r6, [r5, #7]
 801d82a:	4316      	orrs	r6, r2
 801d82c:	19da      	adds	r2, r3, r7
 801d82e:	b291      	uxth	r1, r2
 801d830:	b2b7      	uxth	r7, r6
 801d832:	291d      	cmp	r1, #29
 801d834:	d87b      	bhi.n	801d92e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801d836:	2201      	movs	r2, #1
 801d838:	10f6      	asrs	r6, r6, #3
 801d83a:	408a      	lsls	r2, r1
 801d83c:	4974      	ldr	r1, [pc, #464]	; (801da10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801d83e:	420a      	tst	r2, r1
 801d840:	d12e      	bne.n	801d8a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801d842:	f412 7f60 	tst.w	r2, #896	; 0x380
 801d846:	d072      	beq.n	801d92e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801d848:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801d84c:	462b      	mov	r3, r5
 801d84e:	f105 0e08 	add.w	lr, r5, #8
 801d852:	4615      	mov	r5, r2
 801d854:	6818      	ldr	r0, [r3, #0]
 801d856:	3308      	adds	r3, #8
 801d858:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d85c:	4694      	mov	ip, r2
 801d85e:	4573      	cmp	r3, lr
 801d860:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d864:	4662      	mov	r2, ip
 801d866:	d1f5      	bne.n	801d854 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801d868:	6818      	ldr	r0, [r3, #0]
 801d86a:	f8cc 0000 	str.w	r0, [ip]
 801d86e:	889b      	ldrh	r3, [r3, #4]
 801d870:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d874:	b2b3      	uxth	r3, r6
 801d876:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801d87a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801d87e:	1aca      	subs	r2, r1, r3
 801d880:	1bcf      	subs	r7, r1, r7
 801d882:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801d886:	b292      	uxth	r2, r2
 801d888:	1afb      	subs	r3, r7, r3
 801d88a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801d88e:	10d2      	asrs	r2, r2, #3
 801d890:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801d894:	4302      	orrs	r2, r0
 801d896:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801d89a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d89e:	e7b8      	b.n	801d812 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d8a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d8a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d8a6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801d8a8:	f640 6333 	movw	r3, #3635	; 0xe33
 801d8ac:	4299      	cmp	r1, r3
 801d8ae:	d110      	bne.n	801d8d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801d8b0:	6803      	ldr	r3, [r0, #0]
 801d8b2:	68db      	ldr	r3, [r3, #12]
 801d8b4:	4798      	blx	r3
 801d8b6:	7b41      	ldrb	r1, [r0, #13]
 801d8b8:	00cb      	lsls	r3, r1, #3
 801d8ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d8be:	7a03      	ldrb	r3, [r0, #8]
 801d8c0:	0648      	lsls	r0, r1, #25
 801d8c2:	ea43 0302 	orr.w	r3, r3, r2
 801d8c6:	bf44      	itt	mi
 801d8c8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d8cc:	b21b      	sxthmi	r3, r3
 801d8ce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d8d2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801d8d6:	462a      	mov	r2, r5
 801d8d8:	f105 0c08 	add.w	ip, r5, #8
 801d8dc:	443b      	add	r3, r7
 801d8de:	4433      	add	r3, r6
 801d8e0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801d8e4:	b29b      	uxth	r3, r3
 801d8e6:	4635      	mov	r5, r6
 801d8e8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d8ec:	6810      	ldr	r0, [r2, #0]
 801d8ee:	3208      	adds	r2, #8
 801d8f0:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d8f4:	4637      	mov	r7, r6
 801d8f6:	4562      	cmp	r2, ip
 801d8f8:	c703      	stmia	r7!, {r0, r1}
 801d8fa:	463e      	mov	r6, r7
 801d8fc:	d1f6      	bne.n	801d8ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801d8fe:	6810      	ldr	r0, [r2, #0]
 801d900:	6038      	str	r0, [r7, #0]
 801d902:	8892      	ldrh	r2, [r2, #4]
 801d904:	80ba      	strh	r2, [r7, #4]
 801d906:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d90a:	10db      	asrs	r3, r3, #3
 801d90c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d910:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d914:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d918:	4313      	orrs	r3, r2
 801d91a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801d91e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d922:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d926:	1a9b      	subs	r3, r3, r2
 801d928:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d92c:	e771      	b.n	801d812 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d92e:	f023 0204 	bic.w	r2, r3, #4
 801d932:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d936:	428a      	cmp	r2, r1
 801d938:	d003      	beq.n	801d942 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801d93a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d93e:	4293      	cmp	r3, r2
 801d940:	d120      	bne.n	801d984 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801d942:	3b01      	subs	r3, #1
 801d944:	4602      	mov	r2, r0
 801d946:	4629      	mov	r1, r5
 801d948:	4620      	mov	r0, r4
 801d94a:	b29b      	uxth	r3, r3
 801d94c:	f7ff ff4b 	bl	801d7e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d950:	7b41      	ldrb	r1, [r0, #13]
 801d952:	00cb      	lsls	r3, r1, #3
 801d954:	0649      	lsls	r1, r1, #25
 801d956:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d95a:	7a03      	ldrb	r3, [r0, #8]
 801d95c:	ea43 0302 	orr.w	r3, r3, r2
 801d960:	bf44      	itt	mi
 801d962:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d966:	b21b      	sxthmi	r3, r3
 801d968:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d96c:	7b6b      	ldrb	r3, [r5, #13]
 801d96e:	7aaa      	ldrb	r2, [r5, #10]
 801d970:	005b      	lsls	r3, r3, #1
 801d972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d976:	4313      	orrs	r3, r2
 801d978:	115a      	asrs	r2, r3, #5
 801d97a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d97e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d982:	e035      	b.n	801d9f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801d984:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d988:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d98c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d990:	7a2a      	ldrb	r2, [r5, #8]
 801d992:	ea42 0201 	orr.w	r2, r2, r1
 801d996:	f640 6109 	movw	r1, #3593	; 0xe09
 801d99a:	bf1c      	itt	ne
 801d99c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d9a0:	b212      	sxthne	r2, r2
 801d9a2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d9a6:	f023 0210 	bic.w	r2, r3, #16
 801d9aa:	428a      	cmp	r2, r1
 801d9ac:	d003      	beq.n	801d9b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801d9ae:	f640 6213 	movw	r2, #3603	; 0xe13
 801d9b2:	4293      	cmp	r3, r2
 801d9b4:	d129      	bne.n	801da0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801d9b6:	7b6e      	ldrb	r6, [r5, #13]
 801d9b8:	4629      	mov	r1, r5
 801d9ba:	0076      	lsls	r6, r6, #1
 801d9bc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d9c0:	7aae      	ldrb	r6, [r5, #10]
 801d9c2:	4316      	orrs	r6, r2
 801d9c4:	f640 6213 	movw	r2, #3603	; 0xe13
 801d9c8:	4293      	cmp	r3, r2
 801d9ca:	4602      	mov	r2, r0
 801d9cc:	4620      	mov	r0, r4
 801d9ce:	bf16      	itet	ne
 801d9d0:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d9d4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d9d8:	b29b      	uxthne	r3, r3
 801d9da:	f7ff ff04 	bl	801d7e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d9de:	7b43      	ldrb	r3, [r0, #13]
 801d9e0:	7a82      	ldrb	r2, [r0, #10]
 801d9e2:	005b      	lsls	r3, r3, #1
 801d9e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d9e8:	4313      	orrs	r3, r2
 801d9ea:	1af6      	subs	r6, r6, r3
 801d9ec:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801d9f0:	7b69      	ldrb	r1, [r5, #13]
 801d9f2:	00cb      	lsls	r3, r1, #3
 801d9f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d9f8:	7a2b      	ldrb	r3, [r5, #8]
 801d9fa:	4313      	orrs	r3, r2
 801d9fc:	064a      	lsls	r2, r1, #25
 801d9fe:	bf44      	itt	mi
 801da00:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801da04:	b21b      	sxthmi	r3, r3
 801da06:	1bdb      	subs	r3, r3, r7
 801da08:	e747      	b.n	801d89a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801da0a:	2300      	movs	r3, #0
 801da0c:	e7b7      	b.n	801d97e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801da0e:	bf00      	nop
 801da10:	3fc00079 	.word	0x3fc00079

0801da14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801da14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da18:	4604      	mov	r4, r0
 801da1a:	b942      	cbnz	r2, 801da2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801da1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801da20:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801da24:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801da28:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801da2c:	e047      	b.n	801dabe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801da2e:	7b51      	ldrb	r1, [r2, #13]
 801da30:	8893      	ldrh	r3, [r2, #4]
 801da32:	010d      	lsls	r5, r1, #4
 801da34:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801da38:	79d5      	ldrb	r5, [r2, #7]
 801da3a:	4305      	orrs	r5, r0
 801da3c:	2d04      	cmp	r5, #4
 801da3e:	bfcc      	ite	gt
 801da40:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801da44:	f04f 0e01 	movle.w	lr, #1
 801da48:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801da4c:	f200 80ab 	bhi.w	801dba6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801da50:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801da54:	4283      	cmp	r3, r0
 801da56:	d216      	bcs.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801da58:	f240 605b 	movw	r0, #1627	; 0x65b
 801da5c:	4283      	cmp	r3, r0
 801da5e:	d859      	bhi.n	801db14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801da60:	f240 6057 	movw	r0, #1623	; 0x657
 801da64:	4283      	cmp	r3, r0
 801da66:	d20e      	bcs.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801da68:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801da6c:	d24a      	bcs.n	801db04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801da6e:	f240 604e 	movw	r0, #1614	; 0x64e
 801da72:	4283      	cmp	r3, r0
 801da74:	d207      	bcs.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801da76:	f240 601a 	movw	r0, #1562	; 0x61a
 801da7a:	4283      	cmp	r3, r0
 801da7c:	d02a      	beq.n	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801da7e:	d821      	bhi.n	801dac4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801da80:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801da84:	d35b      	bcc.n	801db3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801da86:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801da8a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801da8e:	f040 80d0 	bne.w	801dc32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801da92:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801da96:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801da9a:	f040 80ca 	bne.w	801dc32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801da9e:	00cb      	lsls	r3, r1, #3
 801daa0:	0649      	lsls	r1, r1, #25
 801daa2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801daa6:	7a13      	ldrb	r3, [r2, #8]
 801daa8:	ea43 0300 	orr.w	r3, r3, r0
 801daac:	bf44      	itt	mi
 801daae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dab2:	b21b      	sxthmi	r3, r3
 801dab4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dab8:	1b5d      	subs	r5, r3, r5
 801daba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801dabe:	4610      	mov	r0, r2
 801dac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dac4:	f240 604b 	movw	r0, #1611	; 0x64b
 801dac8:	4283      	cmp	r3, r0
 801daca:	d338      	bcc.n	801db3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801dacc:	f240 604c 	movw	r0, #1612	; 0x64c
 801dad0:	4283      	cmp	r3, r0
 801dad2:	d9d8      	bls.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dad4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801dad8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801dadc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dae0:	f040 80f3 	bne.w	801dcca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801dae4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dae8:	f040 80ef 	bne.w	801dcca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801daec:	00cb      	lsls	r3, r1, #3
 801daee:	064e      	lsls	r6, r1, #25
 801daf0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801daf4:	7a13      	ldrb	r3, [r2, #8]
 801daf6:	ea43 0300 	orr.w	r3, r3, r0
 801dafa:	bf44      	itt	mi
 801dafc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801db00:	b21b      	sxthmi	r3, r3
 801db02:	e7d9      	b.n	801dab8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801db04:	f240 6054 	movw	r0, #1620	; 0x654
 801db08:	4283      	cmp	r3, r0
 801db0a:	d8e3      	bhi.n	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801db0c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801db10:	d9e0      	bls.n	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801db12:	e7b8      	b.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db14:	f240 6074 	movw	r0, #1652	; 0x674
 801db18:	4283      	cmp	r3, r0
 801db1a:	d0b4      	beq.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db1c:	d82d      	bhi.n	801db7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801db1e:	f240 605e 	movw	r0, #1630	; 0x65e
 801db22:	4283      	cmp	r3, r0
 801db24:	d804      	bhi.n	801db30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801db26:	f240 605d 	movw	r0, #1629	; 0x65d
 801db2a:	4283      	cmp	r3, r0
 801db2c:	d3d2      	bcc.n	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801db2e:	e7aa      	b.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db30:	f240 605f 	movw	r0, #1631	; 0x65f
 801db34:	4283      	cmp	r3, r0
 801db36:	d0cd      	beq.n	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801db38:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801db3c:	d0a3      	beq.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db3e:	00cb      	lsls	r3, r1, #3
 801db40:	0649      	lsls	r1, r1, #25
 801db42:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801db46:	7a13      	ldrb	r3, [r2, #8]
 801db48:	ea43 0300 	orr.w	r3, r3, r0
 801db4c:	bf44      	itt	mi
 801db4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801db52:	b21b      	sxthmi	r3, r3
 801db54:	1b5d      	subs	r5, r3, r5
 801db56:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801db5a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801db5e:	7b53      	ldrb	r3, [r2, #13]
 801db60:	015b      	lsls	r3, r3, #5
 801db62:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801db66:	7993      	ldrb	r3, [r2, #6]
 801db68:	430b      	orrs	r3, r1
 801db6a:	2105      	movs	r1, #5
 801db6c:	005b      	lsls	r3, r3, #1
 801db6e:	fb93 f3f1 	sdiv	r3, r3, r1
 801db72:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801db76:	440b      	add	r3, r1
 801db78:	e756      	b.n	801da28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801db7a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801db7e:	4283      	cmp	r3, r0
 801db80:	d809      	bhi.n	801db96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801db82:	f240 60df 	movw	r0, #1759	; 0x6df
 801db86:	4283      	cmp	r3, r0
 801db88:	f4bf af7d 	bcs.w	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db8c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801db90:	2b05      	cmp	r3, #5
 801db92:	d8d4      	bhi.n	801db3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801db94:	e777      	b.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db96:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801db9a:	4283      	cmp	r3, r0
 801db9c:	d09a      	beq.n	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801db9e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801dba2:	4283      	cmp	r3, r0
 801dba4:	e7ca      	b.n	801db3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801dba6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801dbaa:	d22b      	bcs.n	801dc04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801dbac:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801dbb0:	4283      	cmp	r3, r0
 801dbb2:	d28f      	bcs.n	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dbb4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801dbb8:	4283      	cmp	r3, r0
 801dbba:	d816      	bhi.n	801dbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801dbbc:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801dbc0:	4283      	cmp	r3, r0
 801dbc2:	f4bf af60 	bcs.w	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dbc6:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801dbca:	4283      	cmp	r3, r0
 801dbcc:	d80a      	bhi.n	801dbe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801dbce:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801dbd2:	4283      	cmp	r3, r0
 801dbd4:	f4bf af57 	bcs.w	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dbd8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801dbdc:	4283      	cmp	r3, r0
 801dbde:	f43f af79 	beq.w	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dbe2:	e7ac      	b.n	801db3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801dbe4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801dbe8:	e7f8      	b.n	801dbdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801dbea:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801dbee:	4283      	cmp	r3, r0
 801dbf0:	d802      	bhi.n	801dbf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801dbf2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801dbf6:	e798      	b.n	801db2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801dbf8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801dbfc:	4283      	cmp	r3, r0
 801dbfe:	f47f af42 	bne.w	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dc02:	e767      	b.n	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dc04:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801dc08:	4283      	cmp	r3, r0
 801dc0a:	f43f af63 	beq.w	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dc0e:	d802      	bhi.n	801dc16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801dc10:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801dc14:	e7f2      	b.n	801dbfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801dc16:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801dc1a:	4283      	cmp	r3, r0
 801dc1c:	d805      	bhi.n	801dc2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801dc1e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801dc22:	4283      	cmp	r3, r0
 801dc24:	f4ff af2f 	bcc.w	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dc28:	e754      	b.n	801dad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dc2a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801dc2e:	4283      	cmp	r3, r0
 801dc30:	e7af      	b.n	801db92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801dc32:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801dc36:	4617      	mov	r7, r2
 801dc38:	f102 0808 	add.w	r8, r2, #8
 801dc3c:	4666      	mov	r6, ip
 801dc3e:	6838      	ldr	r0, [r7, #0]
 801dc40:	3708      	adds	r7, #8
 801dc42:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801dc46:	46e6      	mov	lr, ip
 801dc48:	4547      	cmp	r7, r8
 801dc4a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801dc4e:	46f4      	mov	ip, lr
 801dc50:	d1f5      	bne.n	801dc3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801dc52:	6838      	ldr	r0, [r7, #0]
 801dc54:	f8ce 0000 	str.w	r0, [lr]
 801dc58:	88b9      	ldrh	r1, [r7, #4]
 801dc5a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801dc5e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801dc62:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dc66:	d009      	beq.n	801dc7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801dc68:	7b51      	ldrb	r1, [r2, #13]
 801dc6a:	7992      	ldrb	r2, [r2, #6]
 801dc6c:	0149      	lsls	r1, r1, #5
 801dc6e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dc72:	4311      	orrs	r1, r2
 801dc74:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dc78:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801dc7c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dc80:	b2ad      	uxth	r5, r5
 801dc82:	d00d      	beq.n	801dca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801dc84:	442b      	add	r3, r5
 801dc86:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dc8a:	b29b      	uxth	r3, r3
 801dc8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dc90:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dc94:	10db      	asrs	r3, r3, #3
 801dc96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dc9a:	4313      	orrs	r3, r2
 801dc9c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dca0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801dca4:	00cb      	lsls	r3, r1, #3
 801dca6:	064f      	lsls	r7, r1, #25
 801dca8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dcac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801dcb0:	ea43 0302 	orr.w	r3, r3, r2
 801dcb4:	bf44      	itt	mi
 801dcb6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dcba:	b21b      	sxthmi	r3, r3
 801dcbc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dcc0:	1b5b      	subs	r3, r3, r5
 801dcc2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801dcc6:	4632      	mov	r2, r6
 801dcc8:	e6f9      	b.n	801dabe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801dcca:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801dcce:	4617      	mov	r7, r2
 801dcd0:	f102 0908 	add.w	r9, r2, #8
 801dcd4:	4666      	mov	r6, ip
 801dcd6:	6838      	ldr	r0, [r7, #0]
 801dcd8:	3708      	adds	r7, #8
 801dcda:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801dcde:	46e0      	mov	r8, ip
 801dce0:	454f      	cmp	r7, r9
 801dce2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801dce6:	46c4      	mov	ip, r8
 801dce8:	d1f5      	bne.n	801dcd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801dcea:	6838      	ldr	r0, [r7, #0]
 801dcec:	f8c8 0000 	str.w	r0, [r8]
 801dcf0:	88b9      	ldrh	r1, [r7, #4]
 801dcf2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801dcf6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801dcfa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dcfe:	d009      	beq.n	801dd14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801dd00:	7b51      	ldrb	r1, [r2, #13]
 801dd02:	7992      	ldrb	r2, [r2, #6]
 801dd04:	0149      	lsls	r1, r1, #5
 801dd06:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dd0a:	4311      	orrs	r1, r2
 801dd0c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dd10:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801dd14:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dd18:	d00e      	beq.n	801dd38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801dd1a:	eba3 030e 	sub.w	r3, r3, lr
 801dd1e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dd22:	b29b      	uxth	r3, r3
 801dd24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dd28:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dd2c:	10db      	asrs	r3, r3, #3
 801dd2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dd32:	4313      	orrs	r3, r2
 801dd34:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dd38:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801dd3c:	00cb      	lsls	r3, r1, #3
 801dd3e:	0648      	lsls	r0, r1, #25
 801dd40:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dd44:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801dd48:	ea43 0302 	orr.w	r3, r3, r2
 801dd4c:	bf44      	itt	mi
 801dd4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dd52:	b21b      	sxthmi	r3, r3
 801dd54:	1b5d      	subs	r5, r3, r5
 801dd56:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801dd5a:	e7b4      	b.n	801dcc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801dd5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd60:	461e      	mov	r6, r3
 801dd62:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801dd64:	4604      	mov	r4, r0
 801dd66:	4617      	mov	r7, r2
 801dd68:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dd6c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801dd70:	f7e7 f962 	bl	8005038 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dd74:	4605      	mov	r5, r0
 801dd76:	b918      	cbnz	r0, 801dd80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801dd78:	6030      	str	r0, [r6, #0]
 801dd7a:	4628      	mov	r0, r5
 801dd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd80:	683b      	ldr	r3, [r7, #0]
 801dd82:	4601      	mov	r1, r0
 801dd84:	4638      	mov	r0, r7
 801dd86:	68db      	ldr	r3, [r3, #12]
 801dd88:	4798      	blx	r3
 801dd8a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801dd8e:	4602      	mov	r2, r0
 801dd90:	6030      	str	r0, [r6, #0]
 801dd92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dd96:	d213      	bcs.n	801ddc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801dd98:	4643      	mov	r3, r8
 801dd9a:	4639      	mov	r1, r7
 801dd9c:	4620      	mov	r0, r4
 801dd9e:	f7ff fe39 	bl	801da14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801dda2:	6030      	str	r0, [r6, #0]
 801dda4:	6833      	ldr	r3, [r6, #0]
 801dda6:	b143      	cbz	r3, 801ddba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801dda8:	7b5a      	ldrb	r2, [r3, #13]
 801ddaa:	7a9b      	ldrb	r3, [r3, #10]
 801ddac:	0052      	lsls	r2, r2, #1
 801ddae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ddb2:	4313      	orrs	r3, r2
 801ddb4:	bf0c      	ite	eq
 801ddb6:	2301      	moveq	r3, #1
 801ddb8:	2300      	movne	r3, #0
 801ddba:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ddbe:	e7dc      	b.n	801dd7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801ddc0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ddc4:	b29b      	uxth	r3, r3
 801ddc6:	2b7f      	cmp	r3, #127	; 0x7f
 801ddc8:	d804      	bhi.n	801ddd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801ddca:	4639      	mov	r1, r7
 801ddcc:	4620      	mov	r0, r4
 801ddce:	f7ff fd15 	bl	801d7fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ddd2:	e7e6      	b.n	801dda2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801ddd4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d0e3      	beq.n	801dda4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801dddc:	f640 1302 	movw	r3, #2306	; 0x902
 801dde0:	429d      	cmp	r5, r3
 801dde2:	d1df      	bne.n	801dda4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801dde4:	4601      	mov	r1, r0
 801dde6:	4620      	mov	r0, r4
 801dde8:	f7ff fcd9 	bl	801d79e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ddec:	e7d9      	b.n	801dda2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801ddee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ddee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ddf2:	461e      	mov	r6, r3
 801ddf4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ddf6:	4604      	mov	r4, r0
 801ddf8:	4617      	mov	r7, r2
 801ddfa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ddfe:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801de02:	f7e7 f919 	bl	8005038 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801de06:	4605      	mov	r5, r0
 801de08:	b918      	cbnz	r0, 801de12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801de0a:	6030      	str	r0, [r6, #0]
 801de0c:	4628      	mov	r0, r5
 801de0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de12:	683b      	ldr	r3, [r7, #0]
 801de14:	4601      	mov	r1, r0
 801de16:	4638      	mov	r0, r7
 801de18:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801de1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801de20:	47c8      	blx	r9
 801de22:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801de26:	4602      	mov	r2, r0
 801de28:	6030      	str	r0, [r6, #0]
 801de2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801de2e:	d213      	bcs.n	801de58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801de30:	4643      	mov	r3, r8
 801de32:	4639      	mov	r1, r7
 801de34:	4620      	mov	r0, r4
 801de36:	f7ff fded 	bl	801da14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801de3a:	6030      	str	r0, [r6, #0]
 801de3c:	6833      	ldr	r3, [r6, #0]
 801de3e:	b143      	cbz	r3, 801de52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801de40:	7b5a      	ldrb	r2, [r3, #13]
 801de42:	7a9b      	ldrb	r3, [r3, #10]
 801de44:	0052      	lsls	r2, r2, #1
 801de46:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801de4a:	4313      	orrs	r3, r2
 801de4c:	bf0c      	ite	eq
 801de4e:	2301      	moveq	r3, #1
 801de50:	2300      	movne	r3, #0
 801de52:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801de56:	e7d9      	b.n	801de0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801de58:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801de5c:	b29b      	uxth	r3, r3
 801de5e:	2b7f      	cmp	r3, #127	; 0x7f
 801de60:	d804      	bhi.n	801de6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801de62:	4639      	mov	r1, r7
 801de64:	4620      	mov	r0, r4
 801de66:	f7ff fcc9 	bl	801d7fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801de6a:	e7e6      	b.n	801de3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801de6c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801de70:	2b00      	cmp	r3, #0
 801de72:	d0e3      	beq.n	801de3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801de74:	f640 1302 	movw	r3, #2306	; 0x902
 801de78:	429d      	cmp	r5, r3
 801de7a:	d1df      	bne.n	801de3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801de7c:	4601      	mov	r1, r0
 801de7e:	4620      	mov	r0, r4
 801de80:	f7ff fc8d 	bl	801d79e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801de84:	e7d9      	b.n	801de3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801de86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801de86:	b510      	push	{r4, lr}
 801de88:	4604      	mov	r4, r0
 801de8a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801de8e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801de90:	b1e1      	cbz	r1, 801decc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801de92:	2b0a      	cmp	r3, #10
 801de94:	d02d      	beq.n	801def2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801de96:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801de98:	3901      	subs	r1, #1
 801de9a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801de9e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801dea0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801dea4:	1c51      	adds	r1, r2, #1
 801dea6:	b289      	uxth	r1, r1
 801dea8:	2901      	cmp	r1, #1
 801deaa:	bf8a      	itet	hi
 801deac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801deb0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801deb2:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801deb4:	1c5a      	adds	r2, r3, #1
 801deb6:	8722      	strh	r2, [r4, #56]	; 0x38
 801deb8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801deba:	4413      	add	r3, r2
 801debc:	b29b      	uxth	r3, r3
 801debe:	2b09      	cmp	r3, #9
 801dec0:	bf88      	it	hi
 801dec2:	3b0a      	subhi	r3, #10
 801dec4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dec8:	8458      	strh	r0, [r3, #34]	; 0x22
 801deca:	e7de      	b.n	801de8a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801decc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dece:	2b0a      	cmp	r3, #10
 801ded0:	d00f      	beq.n	801def2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ded2:	4620      	mov	r0, r4
 801ded4:	f7ff fc11 	bl	801d6fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ded8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801deda:	1c5a      	adds	r2, r3, #1
 801dedc:	8722      	strh	r2, [r4, #56]	; 0x38
 801dede:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801dee0:	4413      	add	r3, r2
 801dee2:	b29b      	uxth	r3, r3
 801dee4:	2b09      	cmp	r3, #9
 801dee6:	bf88      	it	hi
 801dee8:	3b0a      	subhi	r3, #10
 801deea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801deee:	8458      	strh	r0, [r3, #34]	; 0x22
 801def0:	e7ec      	b.n	801decc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801def2:	bd10      	pop	{r4, pc}

0801def4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801def4:	b538      	push	{r3, r4, r5, lr}
 801def6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801def8:	4604      	mov	r4, r0
 801defa:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801defe:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801df00:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801df02:	3a01      	subs	r2, #1
 801df04:	8702      	strh	r2, [r0, #56]	; 0x38
 801df06:	1c5a      	adds	r2, r3, #1
 801df08:	b292      	uxth	r2, r2
 801df0a:	2a09      	cmp	r2, #9
 801df0c:	bf8a      	itet	hi
 801df0e:	3b09      	subhi	r3, #9
 801df10:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801df12:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801df14:	f7ff ffb7 	bl	801de86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801df18:	8c23      	ldrh	r3, [r4, #32]
 801df1a:	2b01      	cmp	r3, #1
 801df1c:	bf9c      	itt	ls
 801df1e:	3301      	addls	r3, #1
 801df20:	8423      	strhls	r3, [r4, #32]
 801df22:	8be3      	ldrh	r3, [r4, #30]
 801df24:	b90b      	cbnz	r3, 801df2a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801df26:	2302      	movs	r3, #2
 801df28:	83e3      	strh	r3, [r4, #30]
 801df2a:	8be3      	ldrh	r3, [r4, #30]
 801df2c:	4628      	mov	r0, r5
 801df2e:	3b01      	subs	r3, #1
 801df30:	b29b      	uxth	r3, r3
 801df32:	83e3      	strh	r3, [r4, #30]
 801df34:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801df38:	8365      	strh	r5, [r4, #26]
 801df3a:	bd38      	pop	{r3, r4, r5, pc}

0801df3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801df3c:	428a      	cmp	r2, r1
 801df3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df42:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801df44:	d932      	bls.n	801dfac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801df46:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801df48:	1a54      	subs	r4, r2, r1
 801df4a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801df4e:	19ee      	adds	r6, r5, r7
 801df50:	fa1f fe84 	uxth.w	lr, r4
 801df54:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801df58:	3e01      	subs	r6, #1
 801df5a:	b2b4      	uxth	r4, r6
 801df5c:	eba4 090e 	sub.w	r9, r4, lr
 801df60:	fa1f f989 	uxth.w	r9, r9
 801df64:	2c09      	cmp	r4, #9
 801df66:	4626      	mov	r6, r4
 801df68:	bf88      	it	hi
 801df6a:	f1a4 060a 	subhi.w	r6, r4, #10
 801df6e:	f1bc 0f00 	cmp.w	ip, #0
 801df72:	f104 34ff 	add.w	r4, r4, #4294967295
 801df76:	bf08      	it	eq
 801df78:	f04f 0c02 	moveq.w	ip, #2
 801df7c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801df80:	b2a4      	uxth	r4, r4
 801df82:	f10c 3cff 	add.w	ip, ip, #4294967295
 801df86:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801df8a:	454c      	cmp	r4, r9
 801df8c:	fa1f fc8c 	uxth.w	ip, ip
 801df90:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801df94:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801df98:	d1e4      	bne.n	801df64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801df9a:	eba5 050e 	sub.w	r5, r5, lr
 801df9e:	eb0e 0408 	add.w	r4, lr, r8
 801dfa2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801dfa6:	8705      	strh	r5, [r0, #56]	; 0x38
 801dfa8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801dfac:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801dfae:	250a      	movs	r5, #10
 801dfb0:	1a64      	subs	r4, r4, r1
 801dfb2:	4439      	add	r1, r7
 801dfb4:	b289      	uxth	r1, r1
 801dfb6:	8704      	strh	r4, [r0, #56]	; 0x38
 801dfb8:	2909      	cmp	r1, #9
 801dfba:	bf88      	it	hi
 801dfbc:	390a      	subhi	r1, #10
 801dfbe:	86c1      	strh	r1, [r0, #54]	; 0x36
 801dfc0:	b18a      	cbz	r2, 801dfe6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801dfc2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801dfc4:	3a01      	subs	r2, #1
 801dfc6:	3101      	adds	r1, #1
 801dfc8:	b292      	uxth	r2, r2
 801dfca:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801dfce:	8701      	strh	r1, [r0, #56]	; 0x38
 801dfd0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801dfd2:	b901      	cbnz	r1, 801dfd6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801dfd4:	86c5      	strh	r5, [r0, #54]	; 0x36
 801dfd6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801dfd8:	3901      	subs	r1, #1
 801dfda:	b289      	uxth	r1, r1
 801dfdc:	86c1      	strh	r1, [r0, #54]	; 0x36
 801dfde:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dfe2:	844c      	strh	r4, [r1, #34]	; 0x22
 801dfe4:	e7ec      	b.n	801dfc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801dfe6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfea:	f7ff bf4c 	b.w	801de86 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801dfee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801dfee:	b570      	push	{r4, r5, r6, lr}
 801dff0:	2500      	movs	r5, #0
 801dff2:	4295      	cmp	r5, r2
 801dff4:	d011      	beq.n	801e01a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801dff6:	8bc4      	ldrh	r4, [r0, #30]
 801dff8:	f831 6b02 	ldrh.w	r6, [r1], #2
 801dffc:	4414      	add	r4, r2
 801dffe:	3c01      	subs	r4, #1
 801e000:	1b64      	subs	r4, r4, r5
 801e002:	b2a4      	uxth	r4, r4
 801e004:	2c01      	cmp	r4, #1
 801e006:	bf88      	it	hi
 801e008:	3c02      	subhi	r4, #2
 801e00a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e00e:	8b64      	ldrh	r4, [r4, #26]
 801e010:	42b4      	cmp	r4, r6
 801e012:	d117      	bne.n	801e044 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801e014:	3501      	adds	r5, #1
 801e016:	b2ad      	uxth	r5, r5
 801e018:	e7eb      	b.n	801dff2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801e01a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e01e:	2400      	movs	r4, #0
 801e020:	4413      	add	r3, r2
 801e022:	b2a2      	uxth	r2, r4
 801e024:	429a      	cmp	r2, r3
 801e026:	da0f      	bge.n	801e048 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801e028:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801e02a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e02e:	3401      	adds	r4, #1
 801e030:	4432      	add	r2, r6
 801e032:	b292      	uxth	r2, r2
 801e034:	2a09      	cmp	r2, #9
 801e036:	bf88      	it	hi
 801e038:	3a0a      	subhi	r2, #10
 801e03a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e03e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801e040:	42aa      	cmp	r2, r5
 801e042:	d0ee      	beq.n	801e022 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801e044:	2000      	movs	r0, #0
 801e046:	bd70      	pop	{r4, r5, r6, pc}
 801e048:	2001      	movs	r0, #1
 801e04a:	e7fc      	b.n	801e046 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801e04c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e04c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e050:	4605      	mov	r5, r0
 801e052:	4616      	mov	r6, r2
 801e054:	1c8c      	adds	r4, r1, #2
 801e056:	8809      	ldrh	r1, [r1, #0]
 801e058:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e05c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e060:	42b3      	cmp	r3, r6
 801e062:	d124      	bne.n	801e0ae <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e064:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e068:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e06c:	f001 070f 	and.w	r7, r1, #15
 801e070:	4652      	mov	r2, sl
 801e072:	f8cd 8000 	str.w	r8, [sp]
 801e076:	464b      	mov	r3, r9
 801e078:	4621      	mov	r1, r4
 801e07a:	4628      	mov	r0, r5
 801e07c:	f7ff ffb7 	bl	801dfee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e080:	4683      	mov	fp, r0
 801e082:	b168      	cbz	r0, 801e0a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e084:	eb0a 0109 	add.w	r1, sl, r9
 801e088:	463a      	mov	r2, r7
 801e08a:	4628      	mov	r0, r5
 801e08c:	4441      	add	r1, r8
 801e08e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e092:	4649      	mov	r1, r9
 801e094:	f7ff ff52 	bl	801df3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e098:	4658      	mov	r0, fp
 801e09a:	b003      	add	sp, #12
 801e09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0a0:	eb07 010a 	add.w	r1, r7, sl
 801e0a4:	4449      	add	r1, r9
 801e0a6:	4441      	add	r1, r8
 801e0a8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e0ac:	e7d2      	b.n	801e054 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e0ae:	f04f 0b00 	mov.w	fp, #0
 801e0b2:	e7f1      	b.n	801e098 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e0b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e0b4:	b570      	push	{r4, r5, r6, lr}
 801e0b6:	8810      	ldrh	r0, [r2, #0]
 801e0b8:	4298      	cmp	r0, r3
 801e0ba:	d817      	bhi.n	801e0ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e0bc:	1e48      	subs	r0, r1, #1
 801e0be:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e0c2:	4298      	cmp	r0, r3
 801e0c4:	d312      	bcc.n	801e0ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e0c6:	2400      	movs	r4, #0
 801e0c8:	428c      	cmp	r4, r1
 801e0ca:	d20f      	bcs.n	801e0ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e0cc:	1860      	adds	r0, r4, r1
 801e0ce:	1040      	asrs	r0, r0, #1
 801e0d0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e0d4:	0085      	lsls	r5, r0, #2
 801e0d6:	42b3      	cmp	r3, r6
 801e0d8:	d902      	bls.n	801e0e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e0da:	3001      	adds	r0, #1
 801e0dc:	b284      	uxth	r4, r0
 801e0de:	e7f3      	b.n	801e0c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e0e0:	d201      	bcs.n	801e0e6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e0e2:	b281      	uxth	r1, r0
 801e0e4:	e7f0      	b.n	801e0c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e0e6:	442a      	add	r2, r5
 801e0e8:	8850      	ldrh	r0, [r2, #2]
 801e0ea:	bd70      	pop	{r4, r5, r6, pc}
 801e0ec:	2000      	movs	r0, #0
 801e0ee:	e7fc      	b.n	801e0ea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e0f0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0f4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801e0f6:	4604      	mov	r4, r0
 801e0f8:	260b      	movs	r6, #11
 801e0fa:	886f      	ldrh	r7, [r5, #2]
 801e0fc:	087f      	lsrs	r7, r7, #1
 801e0fe:	3e01      	subs	r6, #1
 801e100:	d013      	beq.n	801e12a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801e102:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e104:	462a      	mov	r2, r5
 801e106:	4639      	mov	r1, r7
 801e108:	4620      	mov	r0, r4
 801e10a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e10e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e112:	4643      	mov	r3, r8
 801e114:	f7ff ffce 	bl	801e0b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e118:	b138      	cbz	r0, 801e12a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801e11a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e11e:	4642      	mov	r2, r8
 801e120:	4620      	mov	r0, r4
 801e122:	f7ff ff93 	bl	801e04c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e126:	2800      	cmp	r0, #0
 801e128:	d1e9      	bne.n	801e0fe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801e130 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e130:	b570      	push	{r4, r5, r6, lr}
 801e132:	694a      	ldr	r2, [r1, #20]
 801e134:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801e136:	684b      	ldr	r3, [r1, #4]
 801e138:	1b54      	subs	r4, r2, r5
 801e13a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801e13c:	f000 8106 	beq.w	801e34c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e140:	1b9b      	subs	r3, r3, r6
 801e142:	d003      	beq.n	801e14c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e144:	4363      	muls	r3, r4
 801e146:	2210      	movs	r2, #16
 801e148:	fb93 f3f2 	sdiv	r3, r3, r2
 801e14c:	680c      	ldr	r4, [r1, #0]
 801e14e:	698a      	ldr	r2, [r1, #24]
 801e150:	1b65      	subs	r5, r4, r5
 801e152:	f000 80fd 	beq.w	801e350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e156:	1b92      	subs	r2, r2, r6
 801e158:	d003      	beq.n	801e162 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e15a:	436a      	muls	r2, r5
 801e15c:	2410      	movs	r4, #16
 801e15e:	fb92 f2f4 	sdiv	r2, r2, r4
 801e162:	1a9b      	subs	r3, r3, r2
 801e164:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801e38c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e16c:	460a      	mov	r2, r1
 801e16e:	ee07 3a90 	vmov	s15, r3
 801e172:	f100 040c 	add.w	r4, r0, #12
 801e176:	4603      	mov	r3, r0
 801e178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e17c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e180:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e184:	eeb1 6a43 	vneg.f32	s12, s6
 801e188:	edd2 7a02 	vldr	s15, [r2, #8]
 801e18c:	3214      	adds	r2, #20
 801e18e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e192:	ece3 6a01 	vstmia	r3!, {s13}
 801e196:	429c      	cmp	r4, r3
 801e198:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e19c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e1a0:	edc3 7a02 	vstr	s15, [r3, #8]
 801e1a4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e1a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e1ac:	edc3 7a05 	vstr	s15, [r3, #20]
 801e1b0:	d1ea      	bne.n	801e188 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e1b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e1b4:	698b      	ldr	r3, [r1, #24]
 801e1b6:	edd0 4a02 	vldr	s9, [r0, #8]
 801e1ba:	1a9b      	subs	r3, r3, r2
 801e1bc:	edd0 3a00 	vldr	s7, [r0]
 801e1c0:	edd0 6a01 	vldr	s13, [r0, #4]
 801e1c4:	ee07 3a90 	vmov	s15, r3
 801e1c8:	684b      	ldr	r3, [r1, #4]
 801e1ca:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e1ce:	ed90 5a05 	vldr	s10, [r0, #20]
 801e1d2:	1a9b      	subs	r3, r3, r2
 801e1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e1d8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e1dc:	ed90 2a03 	vldr	s4, [r0, #12]
 801e1e0:	ee07 3a10 	vmov	s14, r3
 801e1e4:	edd0 5a04 	vldr	s11, [r0, #16]
 801e1e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e1ec:	ed90 1a07 	vldr	s2, [r0, #28]
 801e1f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e1f4:	edd0 2a06 	vldr	s5, [r0, #24]
 801e1f8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e1fc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e200:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e204:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e208:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e20c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e210:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801e214:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e216:	694a      	ldr	r2, [r1, #20]
 801e218:	1b13      	subs	r3, r2, r4
 801e21a:	ee07 3a10 	vmov	s14, r3
 801e21e:	680b      	ldr	r3, [r1, #0]
 801e220:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e224:	1b1b      	subs	r3, r3, r4
 801e226:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e22a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e22e:	ee07 3a10 	vmov	s14, r3
 801e232:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e236:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e23a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e23e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e242:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801e246:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e248:	698b      	ldr	r3, [r1, #24]
 801e24a:	1a9b      	subs	r3, r3, r2
 801e24c:	ee06 3a90 	vmov	s13, r3
 801e250:	684b      	ldr	r3, [r1, #4]
 801e252:	1a9b      	subs	r3, r3, r2
 801e254:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e258:	ee07 3a10 	vmov	s14, r3
 801e25c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e260:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e264:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e268:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e26c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e270:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e274:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801e278:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e27a:	694a      	ldr	r2, [r1, #20]
 801e27c:	1b13      	subs	r3, r2, r4
 801e27e:	ee07 3a10 	vmov	s14, r3
 801e282:	680b      	ldr	r3, [r1, #0]
 801e284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e288:	1b1b      	subs	r3, r3, r4
 801e28a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e28e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e292:	ee07 3a10 	vmov	s14, r3
 801e296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e29a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e29e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e2a2:	edd0 5a08 	vldr	s11, [r0, #32]
 801e2a6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e2aa:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e2ae:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e2b2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801e2b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e2b8:	698b      	ldr	r3, [r1, #24]
 801e2ba:	1a9b      	subs	r3, r3, r2
 801e2bc:	ee07 3a10 	vmov	s14, r3
 801e2c0:	684b      	ldr	r3, [r1, #4]
 801e2c2:	1a9b      	subs	r3, r3, r2
 801e2c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e2c8:	ee01 3a90 	vmov	s3, r3
 801e2cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e2d0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e2d4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e2d8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e2dc:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e2e0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e2e4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e2e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e2ea:	694a      	ldr	r2, [r1, #20]
 801e2ec:	1b13      	subs	r3, r2, r4
 801e2ee:	ee03 3a10 	vmov	s6, r3
 801e2f2:	680b      	ldr	r3, [r1, #0]
 801e2f4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e2f8:	1b1b      	subs	r3, r3, r4
 801e2fa:	ee23 3a04 	vmul.f32	s6, s6, s8
 801e2fe:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801e302:	ee03 3a10 	vmov	s6, r3
 801e306:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e30a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e30e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e312:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e316:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e31a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801e31e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e322:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e32a:	dd13      	ble.n	801e354 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e32c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e330:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e334:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e336:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e33a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e342:	dd15      	ble.n	801e370 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e348:	6403      	str	r3, [r0, #64]	; 0x40
 801e34a:	bd70      	pop	{r4, r5, r6, pc}
 801e34c:	4623      	mov	r3, r4
 801e34e:	e6fd      	b.n	801e14c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e350:	462a      	mov	r2, r5
 801e352:	e706      	b.n	801e162 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e354:	d502      	bpl.n	801e35c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e356:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e35a:	e7e9      	b.n	801e330 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e35c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e360:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e364:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e36c:	dade      	bge.n	801e32c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e36e:	e7f2      	b.n	801e356 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e370:	d502      	bpl.n	801e378 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e372:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e376:	e7e7      	b.n	801e348 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e378:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e37c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e380:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e388:	dadc      	bge.n	801e344 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e38a:	e7f2      	b.n	801e372 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e38c:	3d800000 	.word	0x3d800000

0801e390 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e394:	2714      	movs	r7, #20
 801e396:	435f      	muls	r7, r3
 801e398:	eb02 0c07 	add.w	ip, r2, r7
 801e39c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e3a0:	f115 0e0f 	adds.w	lr, r5, #15
 801e3a4:	f100 80a2 	bmi.w	801e4ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801e3a8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801e3ac:	9c08      	ldr	r4, [sp, #32]
 801e3ae:	2614      	movs	r6, #20
 801e3b0:	f8c0 e014 	str.w	lr, [r0, #20]
 801e3b4:	4366      	muls	r6, r4
 801e3b6:	eb02 0806 	add.w	r8, r2, r6
 801e3ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e3be:	f115 040f 	adds.w	r4, r5, #15
 801e3c2:	f100 809f 	bmi.w	801e504 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801e3c6:	1124      	asrs	r4, r4, #4
 801e3c8:	eba4 040e 	sub.w	r4, r4, lr
 801e3cc:	6184      	str	r4, [r0, #24]
 801e3ce:	2c00      	cmp	r4, #0
 801e3d0:	f000 808a 	beq.w	801e4e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801e3d4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801e3d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801e3dc:	5995      	ldr	r5, [r2, r6]
 801e3de:	eba4 0809 	sub.w	r8, r4, r9
 801e3e2:	59d4      	ldr	r4, [r2, r7]
 801e3e4:	eba5 0a04 	sub.w	sl, r5, r4
 801e3e8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801e3ec:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801e3f0:	fb0e fe05 	mul.w	lr, lr, r5
 801e3f4:	fb0a ee19 	mls	lr, sl, r9, lr
 801e3f8:	fb08 e404 	mla	r4, r8, r4, lr
 801e3fc:	3c01      	subs	r4, #1
 801e3fe:	19a4      	adds	r4, r4, r6
 801e400:	f100 808c 	bmi.w	801e51c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801e404:	fb94 fef6 	sdiv	lr, r4, r6
 801e408:	fb06 441e 	mls	r4, r6, lr, r4
 801e40c:	f8c0 e000 	str.w	lr, [r0]
 801e410:	6104      	str	r4, [r0, #16]
 801e412:	2d00      	cmp	r5, #0
 801e414:	f2c0 8095 	blt.w	801e542 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801e418:	fb95 f4f6 	sdiv	r4, r5, r6
 801e41c:	fb06 5514 	mls	r5, r6, r4, r5
 801e420:	6044      	str	r4, [r0, #4]
 801e422:	6085      	str	r5, [r0, #8]
 801e424:	60c6      	str	r6, [r0, #12]
 801e426:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e42a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801e42e:	6945      	ldr	r5, [r0, #20]
 801e430:	59d2      	ldr	r2, [r2, r7]
 801e432:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801e436:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801e564 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801e43a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801e43e:	ee07 4a10 	vmov	s14, r4
 801e442:	6804      	ldr	r4, [r0, #0]
 801e444:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801e448:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e44c:	ee07 2a90 	vmov	s15, r2
 801e450:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e458:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e45c:	edd3 6a00 	vldr	s13, [r3]
 801e460:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e464:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801e468:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e46c:	edc0 6a07 	vstr	s13, [r0, #28]
 801e470:	edd0 6a01 	vldr	s13, [r0, #4]
 801e474:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801e478:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e47c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801e480:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e484:	ed80 6a08 	vstr	s12, [r0, #32]
 801e488:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801e48a:	6242      	str	r2, [r0, #36]	; 0x24
 801e48c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801e490:	ed93 6a03 	vldr	s12, [r3, #12]
 801e494:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e498:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801e49c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e4a0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801e4a4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801e4a8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801e4ac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e4b0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801e4b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e4b6:	6302      	str	r2, [r0, #48]	; 0x30
 801e4b8:	ed93 6a06 	vldr	s12, [r3, #24]
 801e4bc:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801e4c0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e4c4:	eeb0 7a46 	vmov.f32	s14, s12
 801e4c8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801e4cc:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e4d0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e4d4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801e4d8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801e4dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e4e0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801e4e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801e4e6:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4ec:	2410      	movs	r4, #16
 801e4ee:	f1c5 0501 	rsb	r5, r5, #1
 801e4f2:	fb9e fef4 	sdiv	lr, lr, r4
 801e4f6:	f015 050f 	ands.w	r5, r5, #15
 801e4fa:	bf18      	it	ne
 801e4fc:	2501      	movne	r5, #1
 801e4fe:	ebae 0e05 	sub.w	lr, lr, r5
 801e502:	e753      	b.n	801e3ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801e504:	f04f 0910 	mov.w	r9, #16
 801e508:	f1c5 0501 	rsb	r5, r5, #1
 801e50c:	fb94 f4f9 	sdiv	r4, r4, r9
 801e510:	f015 050f 	ands.w	r5, r5, #15
 801e514:	bf18      	it	ne
 801e516:	2501      	movne	r5, #1
 801e518:	1b64      	subs	r4, r4, r5
 801e51a:	e755      	b.n	801e3c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801e51c:	4264      	negs	r4, r4
 801e51e:	fb94 fef6 	sdiv	lr, r4, r6
 801e522:	f1ce 0800 	rsb	r8, lr, #0
 801e526:	fb06 441e 	mls	r4, r6, lr, r4
 801e52a:	f8c0 8000 	str.w	r8, [r0]
 801e52e:	6104      	str	r4, [r0, #16]
 801e530:	2c00      	cmp	r4, #0
 801e532:	f43f af6e 	beq.w	801e412 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801e536:	ea6f 0e0e 	mvn.w	lr, lr
 801e53a:	1b34      	subs	r4, r6, r4
 801e53c:	f8c0 e000 	str.w	lr, [r0]
 801e540:	e766      	b.n	801e410 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801e542:	426d      	negs	r5, r5
 801e544:	fb95 f4f6 	sdiv	r4, r5, r6
 801e548:	f1c4 0e00 	rsb	lr, r4, #0
 801e54c:	fb06 5514 	mls	r5, r6, r4, r5
 801e550:	f8c0 e004 	str.w	lr, [r0, #4]
 801e554:	6085      	str	r5, [r0, #8]
 801e556:	2d00      	cmp	r5, #0
 801e558:	f43f af64 	beq.w	801e424 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801e55c:	43e4      	mvns	r4, r4
 801e55e:	1b75      	subs	r5, r6, r5
 801e560:	6044      	str	r4, [r0, #4]
 801e562:	e75e      	b.n	801e422 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801e564:	3d800000 	.word	0x3d800000

0801e568 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e568:	4602      	mov	r2, r0
 801e56a:	b148      	cbz	r0, 801e580 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e56c:	2300      	movs	r3, #0
 801e56e:	b298      	uxth	r0, r3
 801e570:	3301      	adds	r3, #1
 801e572:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e576:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e57a:	2900      	cmp	r1, #0
 801e57c:	d1f7      	bne.n	801e56e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e57e:	4770      	bx	lr
 801e580:	4770      	bx	lr

0801e582 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e582:	b530      	push	{r4, r5, lr}
 801e584:	4604      	mov	r4, r0
 801e586:	b159      	cbz	r1, 801e5a0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e588:	b148      	cbz	r0, 801e59e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e58a:	2300      	movs	r3, #0
 801e58c:	b298      	uxth	r0, r3
 801e58e:	4282      	cmp	r2, r0
 801e590:	d905      	bls.n	801e59e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e592:	5ccd      	ldrb	r5, [r1, r3]
 801e594:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e598:	3301      	adds	r3, #1
 801e59a:	2d00      	cmp	r5, #0
 801e59c:	d1f6      	bne.n	801e58c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e59e:	bd30      	pop	{r4, r5, pc}
 801e5a0:	4608      	mov	r0, r1
 801e5a2:	e7fc      	b.n	801e59e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e5a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801e5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5a6:	468c      	mov	ip, r1
 801e5a8:	b08b      	sub	sp, #44	; 0x2c
 801e5aa:	2100      	movs	r1, #0
 801e5ac:	ae01      	add	r6, sp, #4
 801e5ae:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e5b2:	211f      	movs	r1, #31
 801e5b4:	fbb0 f7f3 	udiv	r7, r0, r3
 801e5b8:	fb03 0517 	mls	r5, r3, r7, r0
 801e5bc:	4638      	mov	r0, r7
 801e5be:	b2ec      	uxtb	r4, r5
 801e5c0:	2d09      	cmp	r5, #9
 801e5c2:	bfd4      	ite	le
 801e5c4:	3430      	addle	r4, #48	; 0x30
 801e5c6:	3457      	addgt	r4, #87	; 0x57
 801e5c8:	b2e4      	uxtb	r4, r4
 801e5ca:	558c      	strb	r4, [r1, r6]
 801e5cc:	1e4c      	subs	r4, r1, #1
 801e5ce:	b92f      	cbnz	r7, 801e5dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801e5d0:	4431      	add	r1, r6
 801e5d2:	4660      	mov	r0, ip
 801e5d4:	f7ff ffd5 	bl	801e582 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e5d8:	b00b      	add	sp, #44	; 0x2c
 801e5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5dc:	4621      	mov	r1, r4
 801e5de:	e7e9      	b.n	801e5b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801e5e0 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801e5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5e2:	4607      	mov	r7, r0
 801e5e4:	b08b      	sub	sp, #44	; 0x2c
 801e5e6:	4608      	mov	r0, r1
 801e5e8:	b341      	cbz	r1, 801e63c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e5ea:	1e99      	subs	r1, r3, #2
 801e5ec:	2922      	cmp	r1, #34	; 0x22
 801e5ee:	d825      	bhi.n	801e63c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e5f0:	2100      	movs	r1, #0
 801e5f2:	463c      	mov	r4, r7
 801e5f4:	261f      	movs	r6, #31
 801e5f6:	f10d 0c04 	add.w	ip, sp, #4
 801e5fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e5fe:	1e71      	subs	r1, r6, #1
 801e600:	fb94 fef3 	sdiv	lr, r4, r3
 801e604:	fb03 441e 	mls	r4, r3, lr, r4
 801e608:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e60c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e610:	b2ec      	uxtb	r4, r5
 801e612:	2d09      	cmp	r5, #9
 801e614:	bfd4      	ite	le
 801e616:	3430      	addle	r4, #48	; 0x30
 801e618:	3457      	addgt	r4, #87	; 0x57
 801e61a:	b2e4      	uxtb	r4, r4
 801e61c:	f80c 4006 	strb.w	r4, [ip, r6]
 801e620:	4674      	mov	r4, lr
 801e622:	b96c      	cbnz	r4, 801e640 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e624:	2f00      	cmp	r7, #0
 801e626:	da05      	bge.n	801e634 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e628:	ab0a      	add	r3, sp, #40	; 0x28
 801e62a:	4419      	add	r1, r3
 801e62c:	232d      	movs	r3, #45	; 0x2d
 801e62e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e632:	1eb1      	subs	r1, r6, #2
 801e634:	3101      	adds	r1, #1
 801e636:	4461      	add	r1, ip
 801e638:	f7ff ffa3 	bl	801e582 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e63c:	b00b      	add	sp, #44	; 0x2c
 801e63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e640:	460e      	mov	r6, r1
 801e642:	e7dc      	b.n	801e5fe <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e644 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e648:	b085      	sub	sp, #20
 801e64a:	4691      	mov	r9, r2
 801e64c:	6802      	ldr	r2, [r0, #0]
 801e64e:	4688      	mov	r8, r1
 801e650:	461c      	mov	r4, r3
 801e652:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801e656:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e65a:	4683      	mov	fp, r0
 801e65c:	4610      	mov	r0, r2
 801e65e:	9103      	str	r1, [sp, #12]
 801e660:	9302      	str	r3, [sp, #8]
 801e662:	9201      	str	r2, [sp, #4]
 801e664:	f7ff ff80 	bl	801e568 <_ZN8touchgfx7Unicode6strlenEPKt>
 801e668:	f1b8 0f00 	cmp.w	r8, #0
 801e66c:	bf0c      	ite	eq
 801e66e:	4684      	moveq	ip, r0
 801e670:	f100 0c01 	addne.w	ip, r0, #1
 801e674:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801e678:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801e67c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e67e:	fa1f fc8c 	uxth.w	ip, ip
 801e682:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e684:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801e688:	9903      	ldr	r1, [sp, #12]
 801e68a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e68e:	d041      	beq.n	801e714 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e690:	d834      	bhi.n	801e6fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e692:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801e696:	d059      	beq.n	801e74c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e698:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801e69c:	d03a      	beq.n	801e714 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e69e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801e6a2:	d034      	beq.n	801e70e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e6a4:	2400      	movs	r4, #0
 801e6a6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e6aa:	3a01      	subs	r2, #1
 801e6ac:	b169      	cbz	r1, 801e6ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e6ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e6b0:	458c      	cmp	ip, r1
 801e6b2:	da09      	bge.n	801e6c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e6b4:	eba1 010c 	sub.w	r1, r1, ip
 801e6b8:	b289      	uxth	r1, r1
 801e6ba:	b933      	cbnz	r3, 801e6ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e6bc:	2e00      	cmp	r6, #0
 801e6be:	d051      	beq.n	801e764 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e6c0:	2800      	cmp	r0, #0
 801e6c2:	d04f      	beq.n	801e764 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e6c4:	440c      	add	r4, r1
 801e6c6:	b2a4      	uxth	r4, r4
 801e6c8:	2100      	movs	r1, #0
 801e6ca:	682b      	ldr	r3, [r5, #0]
 801e6cc:	4293      	cmp	r3, r2
 801e6ce:	da07      	bge.n	801e6e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e6d0:	f1b8 0f00 	cmp.w	r8, #0
 801e6d4:	d004      	beq.n	801e6e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e6d6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e6da:	682b      	ldr	r3, [r5, #0]
 801e6dc:	3301      	adds	r3, #1
 801e6de:	602b      	str	r3, [r5, #0]
 801e6e0:	2730      	movs	r7, #48	; 0x30
 801e6e2:	2c00      	cmp	r4, #0
 801e6e4:	d04e      	beq.n	801e784 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e6e6:	682e      	ldr	r6, [r5, #0]
 801e6e8:	3c01      	subs	r4, #1
 801e6ea:	42b2      	cmp	r2, r6
 801e6ec:	b2a4      	uxth	r4, r4
 801e6ee:	dd49      	ble.n	801e784 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e6f0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e6f4:	682b      	ldr	r3, [r5, #0]
 801e6f6:	3301      	adds	r3, #1
 801e6f8:	602b      	str	r3, [r5, #0]
 801e6fa:	e7f2      	b.n	801e6e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e6fc:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801e700:	d01d      	beq.n	801e73e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e702:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801e706:	d002      	beq.n	801e70e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e708:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801e70c:	e7c9      	b.n	801e6a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e70e:	4684      	mov	ip, r0
 801e710:	f04f 0800 	mov.w	r8, #0
 801e714:	2c00      	cmp	r4, #0
 801e716:	d0c6      	beq.n	801e6a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e718:	b947      	cbnz	r7, 801e72c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e71a:	2801      	cmp	r0, #1
 801e71c:	d106      	bne.n	801e72c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e71e:	8814      	ldrh	r4, [r2, #0]
 801e720:	2c30      	cmp	r4, #48	; 0x30
 801e722:	bf02      	ittt	eq
 801e724:	3202      	addeq	r2, #2
 801e726:	4638      	moveq	r0, r7
 801e728:	f8cb 2000 	streq.w	r2, [fp]
 801e72c:	45bc      	cmp	ip, r7
 801e72e:	da14      	bge.n	801e75a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e730:	b2bf      	uxth	r7, r7
 801e732:	eba7 040c 	sub.w	r4, r7, ip
 801e736:	46bc      	mov	ip, r7
 801e738:	b2a4      	uxth	r4, r4
 801e73a:	2600      	movs	r6, #0
 801e73c:	e7b3      	b.n	801e6a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e73e:	4684      	mov	ip, r0
 801e740:	b16c      	cbz	r4, 801e75e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e742:	42b8      	cmp	r0, r7
 801e744:	dd00      	ble.n	801e748 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e746:	b2b8      	uxth	r0, r7
 801e748:	2400      	movs	r4, #0
 801e74a:	e003      	b.n	801e754 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e74c:	f04f 0c01 	mov.w	ip, #1
 801e750:	2400      	movs	r4, #0
 801e752:	4660      	mov	r0, ip
 801e754:	4626      	mov	r6, r4
 801e756:	46a0      	mov	r8, r4
 801e758:	e7a5      	b.n	801e6a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e75a:	2400      	movs	r4, #0
 801e75c:	e7ed      	b.n	801e73a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e75e:	4626      	mov	r6, r4
 801e760:	46a0      	mov	r8, r4
 801e762:	e7a0      	b.n	801e6a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e764:	2900      	cmp	r1, #0
 801e766:	d0b0      	beq.n	801e6ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e768:	2720      	movs	r7, #32
 801e76a:	682e      	ldr	r6, [r5, #0]
 801e76c:	2900      	cmp	r1, #0
 801e76e:	d0ac      	beq.n	801e6ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e770:	3901      	subs	r1, #1
 801e772:	4296      	cmp	r6, r2
 801e774:	b289      	uxth	r1, r1
 801e776:	daa7      	bge.n	801e6c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e778:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e77c:	682b      	ldr	r3, [r5, #0]
 801e77e:	3301      	adds	r3, #1
 801e780:	602b      	str	r3, [r5, #0]
 801e782:	e7f2      	b.n	801e76a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e784:	b188      	cbz	r0, 801e7aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e786:	682b      	ldr	r3, [r5, #0]
 801e788:	3801      	subs	r0, #1
 801e78a:	429a      	cmp	r2, r3
 801e78c:	b280      	uxth	r0, r0
 801e78e:	dd0c      	ble.n	801e7aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e790:	f8db 3000 	ldr.w	r3, [fp]
 801e794:	1c9c      	adds	r4, r3, #2
 801e796:	f8cb 4000 	str.w	r4, [fp]
 801e79a:	881c      	ldrh	r4, [r3, #0]
 801e79c:	682b      	ldr	r3, [r5, #0]
 801e79e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e7a2:	682b      	ldr	r3, [r5, #0]
 801e7a4:	3301      	adds	r3, #1
 801e7a6:	602b      	str	r3, [r5, #0]
 801e7a8:	e7ec      	b.n	801e784 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e7aa:	2620      	movs	r6, #32
 801e7ac:	b151      	cbz	r1, 801e7c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e7ae:	6828      	ldr	r0, [r5, #0]
 801e7b0:	3901      	subs	r1, #1
 801e7b2:	4282      	cmp	r2, r0
 801e7b4:	b289      	uxth	r1, r1
 801e7b6:	dd05      	ble.n	801e7c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e7b8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e7bc:	682b      	ldr	r3, [r5, #0]
 801e7be:	3301      	adds	r3, #1
 801e7c0:	602b      	str	r3, [r5, #0]
 801e7c2:	e7f3      	b.n	801e7ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e7c4:	b005      	add	sp, #20
 801e7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e7ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e7ce:	2400      	movs	r4, #0
 801e7d0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e7d4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801e7d8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801e7dc:	8014      	strh	r4, [r2, #0]
 801e7de:	701c      	strb	r4, [r3, #0]
 801e7e0:	f888 4000 	strb.w	r4, [r8]
 801e7e4:	f88c 4000 	strb.w	r4, [ip]
 801e7e8:	f88e 4000 	strb.w	r4, [lr]
 801e7ec:	703c      	strb	r4, [r7, #0]
 801e7ee:	6804      	ldr	r4, [r0, #0]
 801e7f0:	b1a4      	cbz	r4, 801e81c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e7f2:	8824      	ldrh	r4, [r4, #0]
 801e7f4:	f04f 0901 	mov.w	r9, #1
 801e7f8:	b314      	cbz	r4, 801e840 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e7fa:	2c2b      	cmp	r4, #43	; 0x2b
 801e7fc:	d001      	beq.n	801e802 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e7fe:	2c20      	cmp	r4, #32
 801e800:	d110      	bne.n	801e824 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e802:	8014      	strh	r4, [r2, #0]
 801e804:	6804      	ldr	r4, [r0, #0]
 801e806:	b10c      	cbz	r4, 801e80c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e808:	3402      	adds	r4, #2
 801e80a:	6004      	str	r4, [r0, #0]
 801e80c:	680c      	ldr	r4, [r1, #0]
 801e80e:	b10c      	cbz	r4, 801e814 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e810:	3401      	adds	r4, #1
 801e812:	600c      	str	r4, [r1, #0]
 801e814:	6804      	ldr	r4, [r0, #0]
 801e816:	b17c      	cbz	r4, 801e838 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e818:	8824      	ldrh	r4, [r4, #0]
 801e81a:	e7ed      	b.n	801e7f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e81c:	680c      	ldr	r4, [r1, #0]
 801e81e:	b17c      	cbz	r4, 801e840 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e820:	7824      	ldrb	r4, [r4, #0]
 801e822:	e7e7      	b.n	801e7f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e824:	2c2d      	cmp	r4, #45	; 0x2d
 801e826:	d102      	bne.n	801e82e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e828:	f883 9000 	strb.w	r9, [r3]
 801e82c:	e7ea      	b.n	801e804 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e82e:	2c23      	cmp	r4, #35	; 0x23
 801e830:	d107      	bne.n	801e842 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e832:	f888 9000 	strb.w	r9, [r8]
 801e836:	e7e5      	b.n	801e804 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e838:	680c      	ldr	r4, [r1, #0]
 801e83a:	b10c      	cbz	r4, 801e840 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e83c:	7824      	ldrb	r4, [r4, #0]
 801e83e:	e7db      	b.n	801e7f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e840:	2400      	movs	r4, #0
 801e842:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801e846:	2b09      	cmp	r3, #9
 801e848:	d901      	bls.n	801e84e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e84a:	2c2a      	cmp	r4, #42	; 0x2a
 801e84c:	d122      	bne.n	801e894 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e84e:	2301      	movs	r3, #1
 801e850:	2c30      	cmp	r4, #48	; 0x30
 801e852:	f88e 3000 	strb.w	r3, [lr]
 801e856:	d10d      	bne.n	801e874 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e858:	f88c 3000 	strb.w	r3, [ip]
 801e85c:	6803      	ldr	r3, [r0, #0]
 801e85e:	b10b      	cbz	r3, 801e864 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e860:	3302      	adds	r3, #2
 801e862:	6003      	str	r3, [r0, #0]
 801e864:	680b      	ldr	r3, [r1, #0]
 801e866:	b10b      	cbz	r3, 801e86c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e868:	3301      	adds	r3, #1
 801e86a:	600b      	str	r3, [r1, #0]
 801e86c:	6803      	ldr	r3, [r0, #0]
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d02f      	beq.n	801e8d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e872:	881c      	ldrh	r4, [r3, #0]
 801e874:	2c2a      	cmp	r4, #42	; 0x2a
 801e876:	d135      	bne.n	801e8e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e878:	f04f 33ff 	mov.w	r3, #4294967295
 801e87c:	6033      	str	r3, [r6, #0]
 801e87e:	6803      	ldr	r3, [r0, #0]
 801e880:	b10b      	cbz	r3, 801e886 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e882:	3302      	adds	r3, #2
 801e884:	6003      	str	r3, [r0, #0]
 801e886:	680b      	ldr	r3, [r1, #0]
 801e888:	b10b      	cbz	r3, 801e88e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e88a:	3301      	adds	r3, #1
 801e88c:	600b      	str	r3, [r1, #0]
 801e88e:	6803      	ldr	r3, [r0, #0]
 801e890:	b31b      	cbz	r3, 801e8da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e892:	881c      	ldrh	r4, [r3, #0]
 801e894:	2c2e      	cmp	r4, #46	; 0x2e
 801e896:	d11a      	bne.n	801e8ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e898:	2301      	movs	r3, #1
 801e89a:	703b      	strb	r3, [r7, #0]
 801e89c:	6803      	ldr	r3, [r0, #0]
 801e89e:	b10b      	cbz	r3, 801e8a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e8a0:	3302      	adds	r3, #2
 801e8a2:	6003      	str	r3, [r0, #0]
 801e8a4:	680b      	ldr	r3, [r1, #0]
 801e8a6:	b10b      	cbz	r3, 801e8ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e8a8:	3301      	adds	r3, #1
 801e8aa:	600b      	str	r3, [r1, #0]
 801e8ac:	6803      	ldr	r3, [r0, #0]
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	d036      	beq.n	801e920 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e8b2:	881b      	ldrh	r3, [r3, #0]
 801e8b4:	2b2a      	cmp	r3, #42	; 0x2a
 801e8b6:	d137      	bne.n	801e928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 801e8bc:	602b      	str	r3, [r5, #0]
 801e8be:	6803      	ldr	r3, [r0, #0]
 801e8c0:	b10b      	cbz	r3, 801e8c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e8c2:	3302      	adds	r3, #2
 801e8c4:	6003      	str	r3, [r0, #0]
 801e8c6:	680b      	ldr	r3, [r1, #0]
 801e8c8:	b10b      	cbz	r3, 801e8ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e8ca:	3301      	adds	r3, #1
 801e8cc:	600b      	str	r3, [r1, #0]
 801e8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8d2:	680c      	ldr	r4, [r1, #0]
 801e8d4:	b134      	cbz	r4, 801e8e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e8d6:	7824      	ldrb	r4, [r4, #0]
 801e8d8:	e7cc      	b.n	801e874 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e8da:	680b      	ldr	r3, [r1, #0]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d0f6      	beq.n	801e8ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e8e0:	781c      	ldrb	r4, [r3, #0]
 801e8e2:	e7d7      	b.n	801e894 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e8e4:	2300      	movs	r3, #0
 801e8e6:	220a      	movs	r2, #10
 801e8e8:	6033      	str	r3, [r6, #0]
 801e8ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e8ee:	fa1f f38c 	uxth.w	r3, ip
 801e8f2:	2b09      	cmp	r3, #9
 801e8f4:	d8ce      	bhi.n	801e894 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e8f6:	6833      	ldr	r3, [r6, #0]
 801e8f8:	fb02 c303 	mla	r3, r2, r3, ip
 801e8fc:	6033      	str	r3, [r6, #0]
 801e8fe:	6803      	ldr	r3, [r0, #0]
 801e900:	b10b      	cbz	r3, 801e906 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e902:	3302      	adds	r3, #2
 801e904:	6003      	str	r3, [r0, #0]
 801e906:	680b      	ldr	r3, [r1, #0]
 801e908:	b10b      	cbz	r3, 801e90e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e90a:	3301      	adds	r3, #1
 801e90c:	600b      	str	r3, [r1, #0]
 801e90e:	6803      	ldr	r3, [r0, #0]
 801e910:	b10b      	cbz	r3, 801e916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e912:	881c      	ldrh	r4, [r3, #0]
 801e914:	e7e9      	b.n	801e8ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e916:	680c      	ldr	r4, [r1, #0]
 801e918:	2c00      	cmp	r4, #0
 801e91a:	d0e6      	beq.n	801e8ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e91c:	7824      	ldrb	r4, [r4, #0]
 801e91e:	e7e4      	b.n	801e8ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e920:	680b      	ldr	r3, [r1, #0]
 801e922:	b10b      	cbz	r3, 801e928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e924:	781b      	ldrb	r3, [r3, #0]
 801e926:	e7c5      	b.n	801e8b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e928:	2200      	movs	r2, #0
 801e92a:	240a      	movs	r4, #10
 801e92c:	602a      	str	r2, [r5, #0]
 801e92e:	3b30      	subs	r3, #48	; 0x30
 801e930:	682a      	ldr	r2, [r5, #0]
 801e932:	b29e      	uxth	r6, r3
 801e934:	2e09      	cmp	r6, #9
 801e936:	d813      	bhi.n	801e960 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e938:	fb04 3302 	mla	r3, r4, r2, r3
 801e93c:	602b      	str	r3, [r5, #0]
 801e93e:	6803      	ldr	r3, [r0, #0]
 801e940:	b10b      	cbz	r3, 801e946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e942:	3302      	adds	r3, #2
 801e944:	6003      	str	r3, [r0, #0]
 801e946:	680b      	ldr	r3, [r1, #0]
 801e948:	b10b      	cbz	r3, 801e94e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e94a:	3301      	adds	r3, #1
 801e94c:	600b      	str	r3, [r1, #0]
 801e94e:	6803      	ldr	r3, [r0, #0]
 801e950:	b10b      	cbz	r3, 801e956 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e952:	881b      	ldrh	r3, [r3, #0]
 801e954:	e7eb      	b.n	801e92e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e956:	680b      	ldr	r3, [r1, #0]
 801e958:	2b00      	cmp	r3, #0
 801e95a:	d0e8      	beq.n	801e92e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e95c:	781b      	ldrb	r3, [r3, #0]
 801e95e:	e7e6      	b.n	801e92e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e960:	2a06      	cmp	r2, #6
 801e962:	bfa8      	it	ge
 801e964:	2206      	movge	r2, #6
 801e966:	602a      	str	r2, [r5, #0]
 801e968:	e7b1      	b.n	801e8ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e96a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e96a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e96e:	b0a3      	sub	sp, #140	; 0x8c
 801e970:	2600      	movs	r6, #0
 801e972:	4607      	mov	r7, r0
 801e974:	4688      	mov	r8, r1
 801e976:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801e97a:	4631      	mov	r1, r6
 801e97c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801e97e:	4648      	mov	r0, r9
 801e980:	960d      	str	r6, [sp, #52]	; 0x34
 801e982:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e986:	2242      	movs	r2, #66	; 0x42
 801e988:	f00c f9b2 	bl	802acf0 <memset>
 801e98c:	b15f      	cbz	r7, 801e9a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e98e:	f108 3aff 	add.w	sl, r8, #4294967295
 801e992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e996:	b152      	cbz	r2, 801e9ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e998:	8812      	ldrh	r2, [r2, #0]
 801e99a:	b10a      	cbz	r2, 801e9a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e99c:	459a      	cmp	sl, r3
 801e99e:	dc2e      	bgt.n	801e9fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e9a0:	2200      	movs	r2, #0
 801e9a2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e9a6:	4638      	mov	r0, r7
 801e9a8:	b023      	add	sp, #140	; 0x8c
 801e9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9ae:	9a08      	ldr	r2, [sp, #32]
 801e9b0:	2a00      	cmp	r2, #0
 801e9b2:	d0f5      	beq.n	801e9a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e9b4:	7812      	ldrb	r2, [r2, #0]
 801e9b6:	e7f0      	b.n	801e99a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e9b8:	2d00      	cmp	r5, #0
 801e9ba:	d0ea      	beq.n	801e992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e9bc:	782a      	ldrb	r2, [r5, #0]
 801e9be:	b142      	cbz	r2, 801e9d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e9c0:	2a25      	cmp	r2, #37	; 0x25
 801e9c2:	d001      	beq.n	801e9c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e9c4:	459a      	cmp	sl, r3
 801e9c6:	dc08      	bgt.n	801e9da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e9c8:	f1bb 0f00 	cmp.w	fp, #0
 801e9cc:	d121      	bne.n	801ea12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e9ce:	2d00      	cmp	r5, #0
 801e9d0:	d0df      	beq.n	801e992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e9d2:	782a      	ldrb	r2, [r5, #0]
 801e9d4:	f04f 0b00 	mov.w	fp, #0
 801e9d8:	e01d      	b.n	801ea16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e9da:	f1bb 0f00 	cmp.w	fp, #0
 801e9de:	d077      	beq.n	801ead0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e9e0:	f8bb 2000 	ldrh.w	r2, [fp]
 801e9e4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e9e8:	f1bb 0f00 	cmp.w	fp, #0
 801e9ec:	d002      	beq.n	801e9f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e9ee:	f10b 0202 	add.w	r2, fp, #2
 801e9f2:	9209      	str	r2, [sp, #36]	; 0x24
 801e9f4:	b10d      	cbz	r5, 801e9fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e9f6:	3501      	adds	r5, #1
 801e9f8:	9508      	str	r5, [sp, #32]
 801e9fa:	3301      	adds	r3, #1
 801e9fc:	930d      	str	r3, [sp, #52]	; 0x34
 801e9fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea00:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801ea04:	f1bb 0f00 	cmp.w	fp, #0
 801ea08:	d0d6      	beq.n	801e9b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801ea0a:	f8bb 2000 	ldrh.w	r2, [fp]
 801ea0e:	2a00      	cmp	r2, #0
 801ea10:	d1d6      	bne.n	801e9c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801ea12:	f8bb 2000 	ldrh.w	r2, [fp]
 801ea16:	2a00      	cmp	r2, #0
 801ea18:	d0bb      	beq.n	801e992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ea1a:	459a      	cmp	sl, r3
 801ea1c:	ddb9      	ble.n	801e992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ea1e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801ea22:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801ea26:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801ea2a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801ea2e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801ea32:	960e      	str	r6, [sp, #56]	; 0x38
 801ea34:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801ea38:	960f      	str	r6, [sp, #60]	; 0x3c
 801ea3a:	f1bb 0f00 	cmp.w	fp, #0
 801ea3e:	d002      	beq.n	801ea46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ea40:	f10b 0302 	add.w	r3, fp, #2
 801ea44:	9309      	str	r3, [sp, #36]	; 0x24
 801ea46:	b10d      	cbz	r5, 801ea4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801ea48:	1c6b      	adds	r3, r5, #1
 801ea4a:	9308      	str	r3, [sp, #32]
 801ea4c:	ab0f      	add	r3, sp, #60	; 0x3c
 801ea4e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801ea52:	a908      	add	r1, sp, #32
 801ea54:	a809      	add	r0, sp, #36	; 0x24
 801ea56:	9305      	str	r3, [sp, #20]
 801ea58:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ea5c:	9304      	str	r3, [sp, #16]
 801ea5e:	ab0e      	add	r3, sp, #56	; 0x38
 801ea60:	9303      	str	r3, [sp, #12]
 801ea62:	ab0c      	add	r3, sp, #48	; 0x30
 801ea64:	9302      	str	r3, [sp, #8]
 801ea66:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ea6a:	9301      	str	r3, [sp, #4]
 801ea6c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ea70:	9300      	str	r3, [sp, #0]
 801ea72:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801ea76:	f7ff fea8 	bl	801e7ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801ea7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	bfbf      	itttt	lt
 801ea80:	6823      	ldrlt	r3, [r4, #0]
 801ea82:	3404      	addlt	r4, #4
 801ea84:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ea88:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ea8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	bfbe      	ittt	lt
 801ea90:	6823      	ldrlt	r3, [r4, #0]
 801ea92:	3404      	addlt	r4, #4
 801ea94:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ea98:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ea9c:	bfb8      	it	lt
 801ea9e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801eaa0:	b1d9      	cbz	r1, 801eada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801eaa2:	880b      	ldrh	r3, [r1, #0]
 801eaa4:	2b69      	cmp	r3, #105	; 0x69
 801eaa6:	d01f      	beq.n	801eae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eaa8:	d82f      	bhi.n	801eb0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801eaaa:	2b58      	cmp	r3, #88	; 0x58
 801eaac:	d01c      	beq.n	801eae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eaae:	d818      	bhi.n	801eae2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801eab0:	2b25      	cmp	r3, #37	; 0x25
 801eab2:	d034      	beq.n	801eb1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801eab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eab6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801eaba:	f1bb 0f00 	cmp.w	fp, #0
 801eabe:	f000 80b7 	beq.w	801ec30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801eac2:	f8bb 5000 	ldrh.w	r5, [fp]
 801eac6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801eaca:	3301      	adds	r3, #1
 801eacc:	930d      	str	r3, [sp, #52]	; 0x34
 801eace:	e029      	b.n	801eb24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ead0:	b10d      	cbz	r5, 801ead6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801ead2:	782a      	ldrb	r2, [r5, #0]
 801ead4:	e786      	b.n	801e9e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ead6:	462a      	mov	r2, r5
 801ead8:	e784      	b.n	801e9e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801eada:	2a00      	cmp	r2, #0
 801eadc:	d0ea      	beq.n	801eab4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eade:	7813      	ldrb	r3, [r2, #0]
 801eae0:	e7e0      	b.n	801eaa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801eae2:	3b63      	subs	r3, #99	; 0x63
 801eae4:	2b01      	cmp	r3, #1
 801eae6:	d8e5      	bhi.n	801eab4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eae8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801eaec:	b329      	cbz	r1, 801eb3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801eaee:	880b      	ldrh	r3, [r1, #0]
 801eaf0:	2b69      	cmp	r3, #105	; 0x69
 801eaf2:	d063      	beq.n	801ebbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801eaf4:	d825      	bhi.n	801eb42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801eaf6:	2b63      	cmp	r3, #99	; 0x63
 801eaf8:	d038      	beq.n	801eb6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801eafa:	2b64      	cmp	r3, #100	; 0x64
 801eafc:	d05e      	beq.n	801ebbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801eafe:	2b58      	cmp	r3, #88	; 0x58
 801eb00:	d07a      	beq.n	801ebf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801eb02:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801eb06:	4625      	mov	r5, r4
 801eb08:	e036      	b.n	801eb78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801eb0a:	2b73      	cmp	r3, #115	; 0x73
 801eb0c:	d0ec      	beq.n	801eae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb0e:	d802      	bhi.n	801eb16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801eb10:	2b6f      	cmp	r3, #111	; 0x6f
 801eb12:	d1cf      	bne.n	801eab4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eb14:	e7e8      	b.n	801eae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb16:	2b75      	cmp	r3, #117	; 0x75
 801eb18:	d0e6      	beq.n	801eae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb1a:	2b78      	cmp	r3, #120	; 0x78
 801eb1c:	e7f9      	b.n	801eb12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801eb1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb20:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801eb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb26:	b10b      	cbz	r3, 801eb2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801eb28:	3302      	adds	r3, #2
 801eb2a:	9309      	str	r3, [sp, #36]	; 0x24
 801eb2c:	9b08      	ldr	r3, [sp, #32]
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	f43f af2f 	beq.w	801e992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801eb34:	3301      	adds	r3, #1
 801eb36:	9308      	str	r3, [sp, #32]
 801eb38:	e72b      	b.n	801e992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801eb3a:	2a00      	cmp	r2, #0
 801eb3c:	d0e1      	beq.n	801eb02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eb3e:	7813      	ldrb	r3, [r2, #0]
 801eb40:	e7d6      	b.n	801eaf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801eb42:	2b73      	cmp	r3, #115	; 0x73
 801eb44:	d036      	beq.n	801ebb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801eb46:	d807      	bhi.n	801eb58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801eb48:	2b6f      	cmp	r3, #111	; 0x6f
 801eb4a:	d1da      	bne.n	801eb02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eb4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb4e:	1d25      	adds	r5, r4, #4
 801eb50:	2308      	movs	r3, #8
 801eb52:	eba8 0202 	sub.w	r2, r8, r2
 801eb56:	e049      	b.n	801ebec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801eb58:	2b75      	cmp	r3, #117	; 0x75
 801eb5a:	d042      	beq.n	801ebe2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801eb5c:	2b78      	cmp	r3, #120	; 0x78
 801eb5e:	d1d0      	bne.n	801eb02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eb60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb62:	1d25      	adds	r5, r4, #4
 801eb64:	2310      	movs	r3, #16
 801eb66:	eba8 0202 	sub.w	r2, r8, r2
 801eb6a:	e03f      	b.n	801ebec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801eb6c:	6823      	ldr	r3, [r4, #0]
 801eb6e:	1d25      	adds	r5, r4, #4
 801eb70:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801eb74:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801eb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb7a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	d051      	beq.n	801ec26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801eb82:	881a      	ldrh	r2, [r3, #0]
 801eb84:	a80d      	add	r0, sp, #52	; 0x34
 801eb86:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801eb8a:	462c      	mov	r4, r5
 801eb8c:	9005      	str	r0, [sp, #20]
 801eb8e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801eb92:	9004      	str	r0, [sp, #16]
 801eb94:	980e      	ldr	r0, [sp, #56]	; 0x38
 801eb96:	9003      	str	r0, [sp, #12]
 801eb98:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801eb9c:	9002      	str	r0, [sp, #8]
 801eb9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801eba0:	9001      	str	r0, [sp, #4]
 801eba2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801eba6:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801ebaa:	9000      	str	r0, [sp, #0]
 801ebac:	a810      	add	r0, sp, #64	; 0x40
 801ebae:	f7ff fd49 	bl	801e644 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801ebb2:	e7b7      	b.n	801eb24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ebb4:	1d25      	adds	r5, r4, #4
 801ebb6:	6823      	ldr	r3, [r4, #0]
 801ebb8:	9310      	str	r3, [sp, #64]	; 0x40
 801ebba:	e7dd      	b.n	801eb78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ebbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ebbe:	230a      	movs	r3, #10
 801ebc0:	4649      	mov	r1, r9
 801ebc2:	6820      	ldr	r0, [r4, #0]
 801ebc4:	eba8 0202 	sub.w	r2, r8, r2
 801ebc8:	1d25      	adds	r5, r4, #4
 801ebca:	b292      	uxth	r2, r2
 801ebcc:	f7ff fd08 	bl	801e5e0 <_ZN8touchgfx7Unicode4itoaElPtti>
 801ebd0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ebd4:	2b2d      	cmp	r3, #45	; 0x2d
 801ebd6:	d1cf      	bne.n	801eb78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ebd8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ebdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebde:	3302      	adds	r3, #2
 801ebe0:	e7ea      	b.n	801ebb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801ebe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ebe4:	1d25      	adds	r5, r4, #4
 801ebe6:	230a      	movs	r3, #10
 801ebe8:	eba8 0202 	sub.w	r2, r8, r2
 801ebec:	b292      	uxth	r2, r2
 801ebee:	4649      	mov	r1, r9
 801ebf0:	6820      	ldr	r0, [r4, #0]
 801ebf2:	f7ff fcd7 	bl	801e5a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ebf6:	e7bf      	b.n	801eb78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ebf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ebfa:	2310      	movs	r3, #16
 801ebfc:	4649      	mov	r1, r9
 801ebfe:	6820      	ldr	r0, [r4, #0]
 801ec00:	eba8 0202 	sub.w	r2, r8, r2
 801ec04:	1d25      	adds	r5, r4, #4
 801ec06:	b292      	uxth	r2, r2
 801ec08:	f7ff fccc 	bl	801e5a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ec0c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ec10:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d0af      	beq.n	801eb78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ec18:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ec1c:	2919      	cmp	r1, #25
 801ec1e:	d8f7      	bhi.n	801ec10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ec20:	3b20      	subs	r3, #32
 801ec22:	8013      	strh	r3, [r2, #0]
 801ec24:	e7f4      	b.n	801ec10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ec26:	9a08      	ldr	r2, [sp, #32]
 801ec28:	2a00      	cmp	r2, #0
 801ec2a:	d0ab      	beq.n	801eb84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ec2c:	7812      	ldrb	r2, [r2, #0]
 801ec2e:	e7a9      	b.n	801eb84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ec30:	2d00      	cmp	r5, #0
 801ec32:	f43f af48 	beq.w	801eac6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801ec36:	782d      	ldrb	r5, [r5, #0]
 801ec38:	e745      	b.n	801eac6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801ec3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ec3a:	b507      	push	{r0, r1, r2, lr}
 801ec3c:	9300      	str	r3, [sp, #0]
 801ec3e:	4613      	mov	r3, r2
 801ec40:	2200      	movs	r2, #0
 801ec42:	f7ff fe92 	bl	801e96a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ec46:	b003      	add	sp, #12
 801ec48:	f85d fb04 	ldr.w	pc, [sp], #4

0801ec4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ec4c:	b40c      	push	{r2, r3}
 801ec4e:	b507      	push	{r0, r1, r2, lr}
 801ec50:	ab04      	add	r3, sp, #16
 801ec52:	f853 2b04 	ldr.w	r2, [r3], #4
 801ec56:	9301      	str	r3, [sp, #4]
 801ec58:	f7ff ffef 	bl	801ec3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ec5c:	b003      	add	sp, #12
 801ec5e:	f85d eb04 	ldr.w	lr, [sp], #4
 801ec62:	b002      	add	sp, #8
 801ec64:	4770      	bx	lr
	...

0801ec68 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ec68:	4b01      	ldr	r3, [pc, #4]	; (801ec70 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ec6a:	6018      	str	r0, [r3, #0]
 801ec6c:	4770      	bx	lr
 801ec6e:	bf00      	nop
 801ec70:	2001601c 	.word	0x2001601c

0801ec74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ec74:	4b06      	ldr	r3, [pc, #24]	; (801ec90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ec76:	881a      	ldrh	r2, [r3, #0]
 801ec78:	4282      	cmp	r2, r0
 801ec7a:	d807      	bhi.n	801ec8c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801ec7c:	4b05      	ldr	r3, [pc, #20]	; (801ec94 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801ec7e:	881b      	ldrh	r3, [r3, #0]
 801ec80:	4413      	add	r3, r2
 801ec82:	4298      	cmp	r0, r3
 801ec84:	bfac      	ite	ge
 801ec86:	2000      	movge	r0, #0
 801ec88:	2001      	movlt	r0, #1
 801ec8a:	4770      	bx	lr
 801ec8c:	2000      	movs	r0, #0
 801ec8e:	4770      	bx	lr
 801ec90:	2001603c 	.word	0x2001603c
 801ec94:	20016040 	.word	0x20016040

0801ec98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801ec98:	b508      	push	{r3, lr}
 801ec9a:	4601      	mov	r1, r0
 801ec9c:	f7ff ffea 	bl	801ec74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801eca0:	b118      	cbz	r0, 801ecaa <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801eca2:	4b02      	ldr	r3, [pc, #8]	; (801ecac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801ecaa:	bd08      	pop	{r3, pc}
 801ecac:	20016020 	.word	0x20016020

0801ecb0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ecb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecb2:	4c24      	ldr	r4, [pc, #144]	; (801ed44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801ecb4:	6823      	ldr	r3, [r4, #0]
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	d042      	beq.n	801ed40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ecba:	4a23      	ldr	r2, [pc, #140]	; (801ed48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801ecbc:	4d23      	ldr	r5, [pc, #140]	; (801ed4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801ecbe:	8811      	ldrh	r1, [r2, #0]
 801ecc0:	f8b5 c000 	ldrh.w	ip, [r5]
 801ecc4:	4822      	ldr	r0, [pc, #136]	; (801ed50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ecc6:	4461      	add	r1, ip
 801ecc8:	1c4a      	adds	r2, r1, #1
 801ecca:	008f      	lsls	r7, r1, #2
 801eccc:	f022 0201 	bic.w	r2, r2, #1
 801ecd0:	19de      	adds	r6, r3, r7
 801ecd2:	0412      	lsls	r2, r2, #16
 801ecd4:	6006      	str	r6, [r0, #0]
 801ecd6:	4e1f      	ldr	r6, [pc, #124]	; (801ed54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ecd8:	0c12      	lsrs	r2, r2, #16
 801ecda:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801ecde:	19da      	adds	r2, r3, r7
 801ece0:	6032      	str	r2, [r6, #0]
 801ece2:	220e      	movs	r2, #14
 801ece4:	fb02 f20c 	mul.w	r2, r2, ip
 801ece8:	3203      	adds	r2, #3
 801ecea:	f022 0203 	bic.w	r2, r2, #3
 801ecee:	443a      	add	r2, r7
 801ecf0:	4f19      	ldr	r7, [pc, #100]	; (801ed58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ecf2:	4413      	add	r3, r2
 801ecf4:	603b      	str	r3, [r7, #0]
 801ecf6:	2300      	movs	r3, #0
 801ecf8:	4f18      	ldr	r7, [pc, #96]	; (801ed5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ecfa:	469c      	mov	ip, r3
 801ecfc:	803b      	strh	r3, [r7, #0]
 801ecfe:	4f18      	ldr	r7, [pc, #96]	; (801ed60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ed00:	683f      	ldr	r7, [r7, #0]
 801ed02:	1aba      	subs	r2, r7, r2
 801ed04:	4f17      	ldr	r7, [pc, #92]	; (801ed64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ed06:	603a      	str	r2, [r7, #0]
 801ed08:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801ed0c:	4a16      	ldr	r2, [pc, #88]	; (801ed68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ed0e:	8013      	strh	r3, [r2, #0]
 801ed10:	428b      	cmp	r3, r1
 801ed12:	d10d      	bne.n	801ed30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ed14:	882d      	ldrh	r5, [r5, #0]
 801ed16:	2300      	movs	r3, #0
 801ed18:	6830      	ldr	r0, [r6, #0]
 801ed1a:	240e      	movs	r4, #14
 801ed1c:	429d      	cmp	r5, r3
 801ed1e:	d90f      	bls.n	801ed40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ed20:	fb04 0203 	mla	r2, r4, r3, r0
 801ed24:	3301      	adds	r3, #1
 801ed26:	7b11      	ldrb	r1, [r2, #12]
 801ed28:	f36f 1145 	bfc	r1, #5, #1
 801ed2c:	7311      	strb	r1, [r2, #12]
 801ed2e:	e7f5      	b.n	801ed1c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ed30:	6822      	ldr	r2, [r4, #0]
 801ed32:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ed36:	6802      	ldr	r2, [r0, #0]
 801ed38:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801ed3c:	3301      	adds	r3, #1
 801ed3e:	e7e7      	b.n	801ed10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801ed40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed42:	bf00      	nop
 801ed44:	20016020 	.word	0x20016020
 801ed48:	2001603c 	.word	0x2001603c
 801ed4c:	20016040 	.word	0x20016040
 801ed50:	20016034 	.word	0x20016034
 801ed54:	20016024 	.word	0x20016024
 801ed58:	2001602c 	.word	0x2001602c
 801ed5c:	2001603e 	.word	0x2001603e
 801ed60:	20016028 	.word	0x20016028
 801ed64:	20016038 	.word	0x20016038
 801ed68:	20016030 	.word	0x20016030

0801ed6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ed6c:	4b06      	ldr	r3, [pc, #24]	; (801ed88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	b943      	cbnz	r3, 801ed84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ed72:	b139      	cbz	r1, 801ed84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ed74:	4b05      	ldr	r3, [pc, #20]	; (801ed8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801ed76:	801a      	strh	r2, [r3, #0]
 801ed78:	4b05      	ldr	r3, [pc, #20]	; (801ed90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801ed7a:	6019      	str	r1, [r3, #0]
 801ed7c:	4b05      	ldr	r3, [pc, #20]	; (801ed94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801ed7e:	6018      	str	r0, [r3, #0]
 801ed80:	f7ff bf96 	b.w	801ecb0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ed84:	4770      	bx	lr
 801ed86:	bf00      	nop
 801ed88:	2001602c 	.word	0x2001602c
 801ed8c:	20016040 	.word	0x20016040
 801ed90:	20016028 	.word	0x20016028
 801ed94:	20016020 	.word	0x20016020

0801ed98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ed98:	b470      	push	{r4, r5, r6}
 801ed9a:	4c07      	ldr	r4, [pc, #28]	; (801edb8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ed9c:	4605      	mov	r5, r0
 801ed9e:	4610      	mov	r0, r2
 801eda0:	9a03      	ldr	r2, [sp, #12]
 801eda2:	6826      	ldr	r6, [r4, #0]
 801eda4:	b936      	cbnz	r6, 801edb4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801eda6:	6025      	str	r5, [r4, #0]
 801eda8:	4c04      	ldr	r4, [pc, #16]	; (801edbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801edaa:	8021      	strh	r1, [r4, #0]
 801edac:	4619      	mov	r1, r3
 801edae:	bc70      	pop	{r4, r5, r6}
 801edb0:	f7ff bfdc 	b.w	801ed6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801edb4:	bc70      	pop	{r4, r5, r6}
 801edb6:	4770      	bx	lr
 801edb8:	20016044 	.word	0x20016044
 801edbc:	2001603c 	.word	0x2001603c

0801edc0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801edc0:	4a12      	ldr	r2, [pc, #72]	; (801ee0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801edc2:	8803      	ldrh	r3, [r0, #0]
 801edc4:	8812      	ldrh	r2, [r2, #0]
 801edc6:	4293      	cmp	r3, r2
 801edc8:	d207      	bcs.n	801edda <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801edca:	4a11      	ldr	r2, [pc, #68]	; (801ee10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801edcc:	2114      	movs	r1, #20
 801edce:	6812      	ldr	r2, [r2, #0]
 801edd0:	fb01 2303 	mla	r3, r1, r3, r2
 801edd4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801edd8:	4770      	bx	lr
 801edda:	490e      	ldr	r1, [pc, #56]	; (801ee14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801eddc:	8809      	ldrh	r1, [r1, #0]
 801edde:	4411      	add	r1, r2
 801ede0:	428b      	cmp	r3, r1
 801ede2:	da04      	bge.n	801edee <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801ede4:	1a9b      	subs	r3, r3, r2
 801ede6:	4a0c      	ldr	r2, [pc, #48]	; (801ee18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ede8:	210e      	movs	r1, #14
 801edea:	6812      	ldr	r2, [r2, #0]
 801edec:	e7f0      	b.n	801edd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801edee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801edf2:	4293      	cmp	r3, r2
 801edf4:	d108      	bne.n	801ee08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801edf6:	4b09      	ldr	r3, [pc, #36]	; (801ee1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801edf8:	781b      	ldrb	r3, [r3, #0]
 801edfa:	b91b      	cbnz	r3, 801ee04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801edfc:	4b08      	ldr	r3, [pc, #32]	; (801ee20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801edfe:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ee02:	4770      	bx	lr
 801ee04:	4b07      	ldr	r3, [pc, #28]	; (801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ee06:	e7fa      	b.n	801edfe <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801ee08:	2000      	movs	r0, #0
 801ee0a:	4770      	bx	lr
 801ee0c:	2001603c 	.word	0x2001603c
 801ee10:	20016044 	.word	0x20016044
 801ee14:	20016040 	.word	0x20016040
 801ee18:	20016024 	.word	0x20016024
 801ee1c:	20015fb4 	.word	0x20015fb4
 801ee20:	20015fb6 	.word	0x20015fb6
 801ee24:	20015fb8 	.word	0x20015fb8

0801ee28 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ee28:	4a12      	ldr	r2, [pc, #72]	; (801ee74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801ee2a:	8803      	ldrh	r3, [r0, #0]
 801ee2c:	8812      	ldrh	r2, [r2, #0]
 801ee2e:	4293      	cmp	r3, r2
 801ee30:	d207      	bcs.n	801ee42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801ee32:	4a11      	ldr	r2, [pc, #68]	; (801ee78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801ee34:	2114      	movs	r1, #20
 801ee36:	6812      	ldr	r2, [r2, #0]
 801ee38:	fb01 2303 	mla	r3, r1, r3, r2
 801ee3c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801ee40:	4770      	bx	lr
 801ee42:	490e      	ldr	r1, [pc, #56]	; (801ee7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ee44:	8809      	ldrh	r1, [r1, #0]
 801ee46:	4411      	add	r1, r2
 801ee48:	428b      	cmp	r3, r1
 801ee4a:	da04      	bge.n	801ee56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801ee4c:	1a9b      	subs	r3, r3, r2
 801ee4e:	4a0c      	ldr	r2, [pc, #48]	; (801ee80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ee50:	210e      	movs	r1, #14
 801ee52:	6812      	ldr	r2, [r2, #0]
 801ee54:	e7f0      	b.n	801ee38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801ee56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ee5a:	4293      	cmp	r3, r2
 801ee5c:	d108      	bne.n	801ee70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801ee5e:	4b09      	ldr	r3, [pc, #36]	; (801ee84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ee60:	781b      	ldrb	r3, [r3, #0]
 801ee62:	b91b      	cbnz	r3, 801ee6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801ee64:	4b08      	ldr	r3, [pc, #32]	; (801ee88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ee66:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ee6a:	4770      	bx	lr
 801ee6c:	4b07      	ldr	r3, [pc, #28]	; (801ee8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ee6e:	e7fa      	b.n	801ee66 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801ee70:	2000      	movs	r0, #0
 801ee72:	4770      	bx	lr
 801ee74:	2001603c 	.word	0x2001603c
 801ee78:	20016044 	.word	0x20016044
 801ee7c:	20016040 	.word	0x20016040
 801ee80:	20016024 	.word	0x20016024
 801ee84:	20015fb4 	.word	0x20015fb4
 801ee88:	20015fb8 	.word	0x20015fb8
 801ee8c:	20015fb6 	.word	0x20015fb6

0801ee90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ee90:	4a1f      	ldr	r2, [pc, #124]	; (801ef10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801ee92:	b510      	push	{r4, lr}
 801ee94:	880b      	ldrh	r3, [r1, #0]
 801ee96:	8812      	ldrh	r2, [r2, #0]
 801ee98:	4293      	cmp	r3, r2
 801ee9a:	d213      	bcs.n	801eec4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801ee9c:	4a1d      	ldr	r2, [pc, #116]	; (801ef14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801ee9e:	2114      	movs	r1, #20
 801eea0:	6812      	ldr	r2, [r2, #0]
 801eea2:	fb01 2303 	mla	r3, r1, r3, r2
 801eea6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801eeaa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801eeae:	8a1a      	ldrh	r2, [r3, #16]
 801eeb0:	8a5b      	ldrh	r3, [r3, #18]
 801eeb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801eeb6:	8004      	strh	r4, [r0, #0]
 801eeb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eebc:	8041      	strh	r1, [r0, #2]
 801eebe:	8082      	strh	r2, [r0, #4]
 801eec0:	80c3      	strh	r3, [r0, #6]
 801eec2:	e00e      	b.n	801eee2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801eec4:	4914      	ldr	r1, [pc, #80]	; (801ef18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801eec6:	8809      	ldrh	r1, [r1, #0]
 801eec8:	4411      	add	r1, r2
 801eeca:	428b      	cmp	r3, r1
 801eecc:	da0a      	bge.n	801eee4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801eece:	1a9b      	subs	r3, r3, r2
 801eed0:	4a12      	ldr	r2, [pc, #72]	; (801ef1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801eed2:	210e      	movs	r1, #14
 801eed4:	6812      	ldr	r2, [r2, #0]
 801eed6:	fb01 2303 	mla	r3, r1, r3, r2
 801eeda:	681a      	ldr	r2, [r3, #0]
 801eedc:	6002      	str	r2, [r0, #0]
 801eede:	685a      	ldr	r2, [r3, #4]
 801eee0:	6042      	str	r2, [r0, #4]
 801eee2:	bd10      	pop	{r4, pc}
 801eee4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801eee8:	4293      	cmp	r3, r2
 801eeea:	d10b      	bne.n	801ef04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801eeec:	4b0c      	ldr	r3, [pc, #48]	; (801ef20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801eeee:	f9b3 1000 	ldrsh.w	r1, [r3]
 801eef2:	4b0c      	ldr	r3, [pc, #48]	; (801ef24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801eef4:	8081      	strh	r1, [r0, #4]
 801eef6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801eefa:	2300      	movs	r3, #0
 801eefc:	80c2      	strh	r2, [r0, #6]
 801eefe:	8003      	strh	r3, [r0, #0]
 801ef00:	8043      	strh	r3, [r0, #2]
 801ef02:	e7ee      	b.n	801eee2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801ef04:	2300      	movs	r3, #0
 801ef06:	8003      	strh	r3, [r0, #0]
 801ef08:	8043      	strh	r3, [r0, #2]
 801ef0a:	8083      	strh	r3, [r0, #4]
 801ef0c:	e7d8      	b.n	801eec0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ef0e:	bf00      	nop
 801ef10:	2001603c 	.word	0x2001603c
 801ef14:	20016044 	.word	0x20016044
 801ef18:	20016040 	.word	0x20016040
 801ef1c:	20016024 	.word	0x20016024
 801ef20:	20015fb0 	.word	0x20015fb0
 801ef24:	20015fb2 	.word	0x20015fb2

0801ef28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ef28:	4a17      	ldr	r2, [pc, #92]	; (801ef88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801ef2a:	8803      	ldrh	r3, [r0, #0]
 801ef2c:	8812      	ldrh	r2, [r2, #0]
 801ef2e:	4293      	cmp	r3, r2
 801ef30:	d213      	bcs.n	801ef5a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801ef32:	4a16      	ldr	r2, [pc, #88]	; (801ef8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ef34:	2114      	movs	r1, #20
 801ef36:	6812      	ldr	r2, [r2, #0]
 801ef38:	fb01 2303 	mla	r3, r1, r3, r2
 801ef3c:	8a1a      	ldrh	r2, [r3, #16]
 801ef3e:	8919      	ldrh	r1, [r3, #8]
 801ef40:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ef44:	428a      	cmp	r2, r1
 801ef46:	db1d      	blt.n	801ef84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ef48:	8a58      	ldrh	r0, [r3, #18]
 801ef4a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ef4e:	895b      	ldrh	r3, [r3, #10]
 801ef50:	4298      	cmp	r0, r3
 801ef52:	bfac      	ite	ge
 801ef54:	2000      	movge	r0, #0
 801ef56:	2001      	movlt	r0, #1
 801ef58:	4770      	bx	lr
 801ef5a:	490d      	ldr	r1, [pc, #52]	; (801ef90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ef5c:	8809      	ldrh	r1, [r1, #0]
 801ef5e:	4411      	add	r1, r2
 801ef60:	428b      	cmp	r3, r1
 801ef62:	da0d      	bge.n	801ef80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ef64:	1a9b      	subs	r3, r3, r2
 801ef66:	4a0b      	ldr	r2, [pc, #44]	; (801ef94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ef68:	210e      	movs	r1, #14
 801ef6a:	6812      	ldr	r2, [r2, #0]
 801ef6c:	fb01 2303 	mla	r3, r1, r3, r2
 801ef70:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ef74:	891a      	ldrh	r2, [r3, #8]
 801ef76:	4291      	cmp	r1, r2
 801ef78:	db04      	blt.n	801ef84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ef7a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ef7e:	e7e6      	b.n	801ef4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801ef80:	2000      	movs	r0, #0
 801ef82:	4770      	bx	lr
 801ef84:	2001      	movs	r0, #1
 801ef86:	4770      	bx	lr
 801ef88:	2001603c 	.word	0x2001603c
 801ef8c:	20016044 	.word	0x20016044
 801ef90:	20016040 	.word	0x20016040
 801ef94:	20016024 	.word	0x20016024

0801ef98 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ef98:	4a12      	ldr	r2, [pc, #72]	; (801efe4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ef9a:	8803      	ldrh	r3, [r0, #0]
 801ef9c:	8811      	ldrh	r1, [r2, #0]
 801ef9e:	428b      	cmp	r3, r1
 801efa0:	d20b      	bcs.n	801efba <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801efa2:	4a11      	ldr	r2, [pc, #68]	; (801efe8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801efa4:	6812      	ldr	r2, [r2, #0]
 801efa6:	b112      	cbz	r2, 801efae <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801efa8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801efac:	b9c0      	cbnz	r0, 801efe0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801efae:	4a0f      	ldr	r2, [pc, #60]	; (801efec <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801efb0:	6811      	ldr	r1, [r2, #0]
 801efb2:	2214      	movs	r2, #20
 801efb4:	4353      	muls	r3, r2
 801efb6:	58c8      	ldr	r0, [r1, r3]
 801efb8:	4770      	bx	lr
 801efba:	4a0d      	ldr	r2, [pc, #52]	; (801eff0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801efbc:	8812      	ldrh	r2, [r2, #0]
 801efbe:	440a      	add	r2, r1
 801efc0:	4293      	cmp	r3, r2
 801efc2:	da04      	bge.n	801efce <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801efc4:	4a08      	ldr	r2, [pc, #32]	; (801efe8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801efc6:	6812      	ldr	r2, [r2, #0]
 801efc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801efcc:	4770      	bx	lr
 801efce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801efd2:	4293      	cmp	r3, r2
 801efd4:	d103      	bne.n	801efde <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801efd6:	4b07      	ldr	r3, [pc, #28]	; (801eff4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801efdc:	4770      	bx	lr
 801efde:	2000      	movs	r0, #0
 801efe0:	4770      	bx	lr
 801efe2:	bf00      	nop
 801efe4:	2001603c 	.word	0x2001603c
 801efe8:	20016020 	.word	0x20016020
 801efec:	20016044 	.word	0x20016044
 801eff0:	20016040 	.word	0x20016040
 801eff4:	20015fbc 	.word	0x20015fbc

0801eff8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801eff8:	4b24      	ldr	r3, [pc, #144]	; (801f08c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801effa:	8802      	ldrh	r2, [r0, #0]
 801effc:	8818      	ldrh	r0, [r3, #0]
 801effe:	4282      	cmp	r2, r0
 801f000:	d221      	bcs.n	801f046 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801f002:	4b23      	ldr	r3, [pc, #140]	; (801f090 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801f004:	6819      	ldr	r1, [r3, #0]
 801f006:	2314      	movs	r3, #20
 801f008:	fb03 1302 	mla	r3, r3, r2, r1
 801f00c:	6858      	ldr	r0, [r3, #4]
 801f00e:	2800      	cmp	r0, #0
 801f010:	d03a      	beq.n	801f088 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f012:	4920      	ldr	r1, [pc, #128]	; (801f094 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f014:	6809      	ldr	r1, [r1, #0]
 801f016:	2900      	cmp	r1, #0
 801f018:	d036      	beq.n	801f088 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f01a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f01e:	2900      	cmp	r1, #0
 801f020:	d032      	beq.n	801f088 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f022:	891a      	ldrh	r2, [r3, #8]
 801f024:	8958      	ldrh	r0, [r3, #10]
 801f026:	4350      	muls	r0, r2
 801f028:	7c5a      	ldrb	r2, [r3, #17]
 801f02a:	7cdb      	ldrb	r3, [r3, #19]
 801f02c:	0952      	lsrs	r2, r2, #5
 801f02e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f032:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801f036:	2b0b      	cmp	r3, #11
 801f038:	bf18      	it	ne
 801f03a:	0040      	lslne	r0, r0, #1
 801f03c:	3003      	adds	r0, #3
 801f03e:	f020 0003 	bic.w	r0, r0, #3
 801f042:	4408      	add	r0, r1
 801f044:	4770      	bx	lr
 801f046:	4b14      	ldr	r3, [pc, #80]	; (801f098 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801f048:	881b      	ldrh	r3, [r3, #0]
 801f04a:	4403      	add	r3, r0
 801f04c:	429a      	cmp	r2, r3
 801f04e:	da1a      	bge.n	801f086 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f050:	4b12      	ldr	r3, [pc, #72]	; (801f09c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f052:	1a10      	subs	r0, r2, r0
 801f054:	210e      	movs	r1, #14
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	fb01 3000 	mla	r0, r1, r0, r3
 801f05c:	7b03      	ldrb	r3, [r0, #12]
 801f05e:	f003 031f 	and.w	r3, r3, #31
 801f062:	2b0b      	cmp	r3, #11
 801f064:	d10b      	bne.n	801f07e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801f066:	8903      	ldrh	r3, [r0, #8]
 801f068:	8940      	ldrh	r0, [r0, #10]
 801f06a:	4358      	muls	r0, r3
 801f06c:	4b09      	ldr	r3, [pc, #36]	; (801f094 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f06e:	3003      	adds	r0, #3
 801f070:	6819      	ldr	r1, [r3, #0]
 801f072:	f020 0303 	bic.w	r3, r0, #3
 801f076:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f07a:	4418      	add	r0, r3
 801f07c:	4770      	bx	lr
 801f07e:	2b0d      	cmp	r3, #13
 801f080:	d101      	bne.n	801f086 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f082:	300d      	adds	r0, #13
 801f084:	4770      	bx	lr
 801f086:	2000      	movs	r0, #0
 801f088:	4770      	bx	lr
 801f08a:	bf00      	nop
 801f08c:	2001603c 	.word	0x2001603c
 801f090:	20016044 	.word	0x20016044
 801f094:	20016020 	.word	0x20016020
 801f098:	20016040 	.word	0x20016040
 801f09c:	20016024 	.word	0x20016024

0801f0a0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f0a0:	4a17      	ldr	r2, [pc, #92]	; (801f100 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801f0a2:	b510      	push	{r4, lr}
 801f0a4:	8803      	ldrh	r3, [r0, #0]
 801f0a6:	8812      	ldrh	r2, [r2, #0]
 801f0a8:	4293      	cmp	r3, r2
 801f0aa:	d20c      	bcs.n	801f0c6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f0ac:	4a15      	ldr	r2, [pc, #84]	; (801f104 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801f0ae:	2114      	movs	r1, #20
 801f0b0:	6812      	ldr	r2, [r2, #0]
 801f0b2:	fb01 2303 	mla	r3, r1, r3, r2
 801f0b6:	7c58      	ldrb	r0, [r3, #17]
 801f0b8:	0942      	lsrs	r2, r0, #5
 801f0ba:	7cd8      	ldrb	r0, [r3, #19]
 801f0bc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801f0c0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801f0c4:	bd10      	pop	{r4, pc}
 801f0c6:	4910      	ldr	r1, [pc, #64]	; (801f108 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801f0c8:	8809      	ldrh	r1, [r1, #0]
 801f0ca:	4411      	add	r1, r2
 801f0cc:	428b      	cmp	r3, r1
 801f0ce:	da09      	bge.n	801f0e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801f0d0:	1a9b      	subs	r3, r3, r2
 801f0d2:	4a0e      	ldr	r2, [pc, #56]	; (801f10c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801f0d4:	210e      	movs	r1, #14
 801f0d6:	6812      	ldr	r2, [r2, #0]
 801f0d8:	fb01 2303 	mla	r3, r1, r3, r2
 801f0dc:	7b18      	ldrb	r0, [r3, #12]
 801f0de:	f000 001f 	and.w	r0, r0, #31
 801f0e2:	e7ef      	b.n	801f0c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f0e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f0e8:	4293      	cmp	r3, r2
 801f0ea:	d106      	bne.n	801f0fa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801f0ec:	f7f9 fefe 	bl	8018eec <_ZN8touchgfx3HAL3lcdEv>
 801f0f0:	6803      	ldr	r3, [r0, #0]
 801f0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0f8:	4718      	bx	r3
 801f0fa:	2000      	movs	r0, #0
 801f0fc:	e7e2      	b.n	801f0c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f0fe:	bf00      	nop
 801f100:	2001603c 	.word	0x2001603c
 801f104:	20016044 	.word	0x20016044
 801f108:	20016040 	.word	0x20016040
 801f10c:	20016024 	.word	0x20016024

0801f110 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801f110:	2010      	movs	r0, #16
 801f112:	4770      	bx	lr

0801f114 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801f114:	2000      	movs	r0, #0
 801f116:	4770      	bx	lr

0801f118 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801f118:	4b02      	ldr	r3, [pc, #8]	; (801f124 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801f11a:	8818      	ldrh	r0, [r3, #0]
 801f11c:	0040      	lsls	r0, r0, #1
 801f11e:	b280      	uxth	r0, r0
 801f120:	4770      	bx	lr
 801f122:	bf00      	nop
 801f124:	20015fb6 	.word	0x20015fb6

0801f128 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f128:	2bff      	cmp	r3, #255	; 0xff
 801f12a:	d050      	beq.n	801f1ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801f12c:	2a0b      	cmp	r2, #11
 801f12e:	d04a      	beq.n	801f1c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f130:	d80e      	bhi.n	801f150 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801f132:	2a03      	cmp	r2, #3
 801f134:	d03f      	beq.n	801f1b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801f136:	d804      	bhi.n	801f142 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f138:	2a01      	cmp	r2, #1
 801f13a:	d03e      	beq.n	801f1ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f13c:	d93f      	bls.n	801f1be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f13e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f140:	4770      	bx	lr
 801f142:	2a09      	cmp	r2, #9
 801f144:	d03f      	beq.n	801f1c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f146:	d83c      	bhi.n	801f1c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f148:	2a08      	cmp	r2, #8
 801f14a:	d03a      	beq.n	801f1c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f14c:	2000      	movs	r0, #0
 801f14e:	4770      	bx	lr
 801f150:	2a2f      	cmp	r2, #47	; 0x2f
 801f152:	d024      	beq.n	801f19e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801f154:	d80d      	bhi.n	801f172 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801f156:	2a2d      	cmp	r2, #45	; 0x2d
 801f158:	d014      	beq.n	801f184 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801f15a:	d826      	bhi.n	801f1aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f15c:	2a2c      	cmp	r2, #44	; 0x2c
 801f15e:	d1f5      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f160:	684b      	ldr	r3, [r1, #4]
 801f162:	781b      	ldrb	r3, [r3, #0]
 801f164:	2b01      	cmp	r3, #1
 801f166:	d018      	beq.n	801f19a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801f168:	d323      	bcc.n	801f1b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801f16a:	2b02      	cmp	r3, #2
 801f16c:	d1ee      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f16e:	6880      	ldr	r0, [r0, #8]
 801f170:	4770      	bx	lr
 801f172:	2a31      	cmp	r2, #49	; 0x31
 801f174:	d004      	beq.n	801f180 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801f176:	d328      	bcc.n	801f1ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f178:	2a32      	cmp	r2, #50	; 0x32
 801f17a:	d026      	beq.n	801f1ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f17c:	2a33      	cmp	r2, #51	; 0x33
 801f17e:	d1e5      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f180:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801f182:	4770      	bx	lr
 801f184:	684b      	ldr	r3, [r1, #4]
 801f186:	781b      	ldrb	r3, [r3, #0]
 801f188:	2b01      	cmp	r3, #1
 801f18a:	d004      	beq.n	801f196 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f18c:	d30b      	bcc.n	801f1a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f18e:	2b02      	cmp	r3, #2
 801f190:	d1dc      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f192:	6900      	ldr	r0, [r0, #16]
 801f194:	4770      	bx	lr
 801f196:	6a00      	ldr	r0, [r0, #32]
 801f198:	4770      	bx	lr
 801f19a:	6980      	ldr	r0, [r0, #24]
 801f19c:	4770      	bx	lr
 801f19e:	684b      	ldr	r3, [r1, #4]
 801f1a0:	781b      	ldrb	r3, [r3, #0]
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d1d2      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f1a6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801f1a8:	4770      	bx	lr
 801f1aa:	684b      	ldr	r3, [r1, #4]
 801f1ac:	781b      	ldrb	r3, [r3, #0]
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d1cc      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f1b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801f1b4:	4770      	bx	lr
 801f1b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f1b8:	4770      	bx	lr
 801f1ba:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f1bc:	4770      	bx	lr
 801f1be:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f1c0:	4770      	bx	lr
 801f1c2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801f1c4:	4770      	bx	lr
 801f1c6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801f1c8:	4770      	bx	lr
 801f1ca:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801f1cc:	4770      	bx	lr
 801f1ce:	2a0b      	cmp	r2, #11
 801f1d0:	d049      	beq.n	801f266 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f1d2:	d80e      	bhi.n	801f1f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801f1d4:	2a03      	cmp	r2, #3
 801f1d6:	d040      	beq.n	801f25a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f1d8:	d804      	bhi.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801f1da:	2a01      	cmp	r2, #1
 801f1dc:	d03f      	beq.n	801f25e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801f1de:	d940      	bls.n	801f262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f1e0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801f1e2:	4770      	bx	lr
 801f1e4:	2a09      	cmp	r2, #9
 801f1e6:	d03e      	beq.n	801f266 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f1e8:	d801      	bhi.n	801f1ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801f1ea:	2a08      	cmp	r2, #8
 801f1ec:	d1ae      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f1ee:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801f1f0:	4770      	bx	lr
 801f1f2:	2a2f      	cmp	r2, #47	; 0x2f
 801f1f4:	d024      	beq.n	801f240 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801f1f6:	d80d      	bhi.n	801f214 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f1f8:	2a2d      	cmp	r2, #45	; 0x2d
 801f1fa:	d014      	beq.n	801f226 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801f1fc:	d826      	bhi.n	801f24c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801f1fe:	2a2c      	cmp	r2, #44	; 0x2c
 801f200:	d1a4      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f202:	684b      	ldr	r3, [r1, #4]
 801f204:	781b      	ldrb	r3, [r3, #0]
 801f206:	2b01      	cmp	r3, #1
 801f208:	d018      	beq.n	801f23c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801f20a:	d324      	bcc.n	801f256 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f20c:	2b02      	cmp	r3, #2
 801f20e:	d19d      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f210:	68c0      	ldr	r0, [r0, #12]
 801f212:	4770      	bx	lr
 801f214:	2a31      	cmp	r2, #49	; 0x31
 801f216:	d004      	beq.n	801f222 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801f218:	d327      	bcc.n	801f26a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f21a:	2a32      	cmp	r2, #50	; 0x32
 801f21c:	d025      	beq.n	801f26a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f21e:	2a33      	cmp	r2, #51	; 0x33
 801f220:	d194      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f222:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801f224:	4770      	bx	lr
 801f226:	684b      	ldr	r3, [r1, #4]
 801f228:	781b      	ldrb	r3, [r3, #0]
 801f22a:	2b01      	cmp	r3, #1
 801f22c:	d004      	beq.n	801f238 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801f22e:	d30b      	bcc.n	801f248 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f230:	2b02      	cmp	r3, #2
 801f232:	d18b      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f234:	6940      	ldr	r0, [r0, #20]
 801f236:	4770      	bx	lr
 801f238:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f23a:	4770      	bx	lr
 801f23c:	69c0      	ldr	r0, [r0, #28]
 801f23e:	4770      	bx	lr
 801f240:	684b      	ldr	r3, [r1, #4]
 801f242:	781b      	ldrb	r3, [r3, #0]
 801f244:	2b00      	cmp	r3, #0
 801f246:	d181      	bne.n	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f248:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f24a:	4770      	bx	lr
 801f24c:	684b      	ldr	r3, [r1, #4]
 801f24e:	781b      	ldrb	r3, [r3, #0]
 801f250:	2b00      	cmp	r3, #0
 801f252:	f47f af7b 	bne.w	801f14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f256:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f258:	4770      	bx	lr
 801f25a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f25c:	4770      	bx	lr
 801f25e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f260:	4770      	bx	lr
 801f262:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f264:	4770      	bx	lr
 801f266:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f268:	4770      	bx	lr
 801f26a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801f26c:	4770      	bx	lr

0801f26e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f26e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f272:	b087      	sub	sp, #28
 801f274:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f276:	9205      	str	r2, [sp, #20]
 801f278:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f27c:	9101      	str	r1, [sp, #4]
 801f27e:	9202      	str	r2, [sp, #8]
 801f280:	6841      	ldr	r1, [r0, #4]
 801f282:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f286:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f28a:	fb01 2404 	mla	r4, r1, r4, r2
 801f28e:	6802      	ldr	r2, [r0, #0]
 801f290:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f294:	f8de 2000 	ldr.w	r2, [lr]
 801f298:	9203      	str	r2, [sp, #12]
 801f29a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f29e:	3204      	adds	r2, #4
 801f2a0:	9204      	str	r2, [sp, #16]
 801f2a2:	9a02      	ldr	r2, [sp, #8]
 801f2a4:	43d6      	mvns	r6, r2
 801f2a6:	b2f6      	uxtb	r6, r6
 801f2a8:	9a01      	ldr	r2, [sp, #4]
 801f2aa:	2a00      	cmp	r2, #0
 801f2ac:	dc03      	bgt.n	801f2b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f2ae:	9a05      	ldr	r2, [sp, #20]
 801f2b0:	2a00      	cmp	r2, #0
 801f2b2:	f340 8129 	ble.w	801f508 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f2b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f2b8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f2bc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f2c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f2c2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f2c6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	dd0e      	ble.n	801f2ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f2ce:	1408      	asrs	r0, r1, #16
 801f2d0:	d405      	bmi.n	801f2de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f2d2:	4560      	cmp	r0, ip
 801f2d4:	da03      	bge.n	801f2de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f2d6:	1410      	asrs	r0, r2, #16
 801f2d8:	d401      	bmi.n	801f2de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f2da:	42b8      	cmp	r0, r7
 801f2dc:	db07      	blt.n	801f2ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f2de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f2e0:	3b01      	subs	r3, #1
 801f2e2:	3402      	adds	r4, #2
 801f2e4:	4401      	add	r1, r0
 801f2e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f2e8:	4402      	add	r2, r0
 801f2ea:	e7ee      	b.n	801f2ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f2ec:	d071      	beq.n	801f3d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f2ee:	1e58      	subs	r0, r3, #1
 801f2f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f2f2:	fb05 1500 	mla	r5, r5, r0, r1
 801f2f6:	142d      	asrs	r5, r5, #16
 801f2f8:	d45f      	bmi.n	801f3ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f2fa:	4565      	cmp	r5, ip
 801f2fc:	da5d      	bge.n	801f3ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f2fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f300:	fb05 2000 	mla	r0, r5, r0, r2
 801f304:	1400      	asrs	r0, r0, #16
 801f306:	d458      	bmi.n	801f3ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f308:	42b8      	cmp	r0, r7
 801f30a:	da56      	bge.n	801f3ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f30c:	4699      	mov	r9, r3
 801f30e:	46a2      	mov	sl, r4
 801f310:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801f314:	f1b9 0f00 	cmp.w	r9, #0
 801f318:	dd57      	ble.n	801f3ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f31a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f31e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f322:	9803      	ldr	r0, [sp, #12]
 801f324:	140d      	asrs	r5, r1, #16
 801f326:	f109 39ff 	add.w	r9, r9, #4294967295
 801f32a:	fb07 000c 	mla	r0, r7, ip, r0
 801f32e:	5d40      	ldrb	r0, [r0, r5]
 801f330:	9d04      	ldr	r5, [sp, #16]
 801f332:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f336:	f8ba 5000 	ldrh.w	r5, [sl]
 801f33a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f33e:	122f      	asrs	r7, r5, #8
 801f340:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f344:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f348:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f34c:	00ed      	lsls	r5, r5, #3
 801f34e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f352:	fb17 f706 	smulbb	r7, r7, r6
 801f356:	b2ed      	uxtb	r5, r5
 801f358:	fb18 f806 	smulbb	r8, r8, r6
 801f35c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f360:	10c7      	asrs	r7, r0, #3
 801f362:	fb15 f506 	smulbb	r5, r5, r6
 801f366:	00c0      	lsls	r0, r0, #3
 801f368:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f36c:	fa1f fc8c 	uxth.w	ip, ip
 801f370:	b2c0      	uxtb	r0, r0
 801f372:	fb07 870b 	mla	r7, r7, fp, r8
 801f376:	fb00 500b 	mla	r0, r0, fp, r5
 801f37a:	f10c 0501 	add.w	r5, ip, #1
 801f37e:	b2bf      	uxth	r7, r7
 801f380:	b280      	uxth	r0, r0
 801f382:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f386:	f107 0801 	add.w	r8, r7, #1
 801f38a:	1c45      	adds	r5, r0, #1
 801f38c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f390:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f394:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f398:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f39a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f39e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f3a2:	4401      	add	r1, r0
 801f3a4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f3a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f3aa:	ea45 0c0c 	orr.w	ip, r5, ip
 801f3ae:	4402      	add	r2, r0
 801f3b0:	ea4c 0c08 	orr.w	ip, ip, r8
 801f3b4:	f82a cb02 	strh.w	ip, [sl], #2
 801f3b8:	e7ac      	b.n	801f314 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f3ba:	f04f 0800 	mov.w	r8, #0
 801f3be:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801f3c2:	eb03 0008 	add.w	r0, r3, r8
 801f3c6:	2800      	cmp	r0, #0
 801f3c8:	dc41      	bgt.n	801f44e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f3ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f3d2:	9b01      	ldr	r3, [sp, #4]
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	f340 8097 	ble.w	801f508 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f3da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f3de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3e8:	eef0 6a62 	vmov.f32	s13, s5
 801f3ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f3f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3f8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f3fc:	eef0 6a43 	vmov.f32	s13, s6
 801f400:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f404:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f408:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f40c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f410:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f414:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f418:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f41c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f420:	ee12 2a90 	vmov	r2, s5
 801f424:	eef0 2a47 	vmov.f32	s5, s14
 801f428:	fb92 f3f3 	sdiv	r3, r2, r3
 801f42c:	ee13 2a10 	vmov	r2, s6
 801f430:	9313      	str	r3, [sp, #76]	; 0x4c
 801f432:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f434:	eeb0 3a67 	vmov.f32	s6, s15
 801f438:	fb92 f3f3 	sdiv	r3, r2, r3
 801f43c:	9314      	str	r3, [sp, #80]	; 0x50
 801f43e:	9b01      	ldr	r3, [sp, #4]
 801f440:	9a05      	ldr	r2, [sp, #20]
 801f442:	3b01      	subs	r3, #1
 801f444:	9301      	str	r3, [sp, #4]
 801f446:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f448:	bf08      	it	eq
 801f44a:	4613      	moveq	r3, r2
 801f44c:	e72c      	b.n	801f2a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f44e:	140f      	asrs	r7, r1, #16
 801f450:	d453      	bmi.n	801f4fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f452:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f456:	42bd      	cmp	r5, r7
 801f458:	dd4f      	ble.n	801f4fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f45a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f45e:	d44c      	bmi.n	801f4fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f460:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f464:	4560      	cmp	r0, ip
 801f466:	dd48      	ble.n	801f4fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f468:	9803      	ldr	r0, [sp, #12]
 801f46a:	b22d      	sxth	r5, r5
 801f46c:	fb0c 0505 	mla	r5, ip, r5, r0
 801f470:	5de8      	ldrb	r0, [r5, r7]
 801f472:	9d04      	ldr	r5, [sp, #16]
 801f474:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f478:	f06f 0501 	mvn.w	r5, #1
 801f47c:	fb05 fb08 	mul.w	fp, r5, r8
 801f480:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f484:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f488:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f48c:	122f      	asrs	r7, r5, #8
 801f48e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f492:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f496:	00ed      	lsls	r5, r5, #3
 801f498:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f49c:	fb17 f706 	smulbb	r7, r7, r6
 801f4a0:	b2ed      	uxtb	r5, r5
 801f4a2:	fb19 f906 	smulbb	r9, r9, r6
 801f4a6:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f4aa:	10c7      	asrs	r7, r0, #3
 801f4ac:	fb15 f506 	smulbb	r5, r5, r6
 801f4b0:	00c0      	lsls	r0, r0, #3
 801f4b2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f4b6:	fa1f fc8c 	uxth.w	ip, ip
 801f4ba:	b2c0      	uxtb	r0, r0
 801f4bc:	fb07 970a 	mla	r7, r7, sl, r9
 801f4c0:	fb00 500a 	mla	r0, r0, sl, r5
 801f4c4:	f10c 0501 	add.w	r5, ip, #1
 801f4c8:	b2bf      	uxth	r7, r7
 801f4ca:	b280      	uxth	r0, r0
 801f4cc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f4d0:	f107 0901 	add.w	r9, r7, #1
 801f4d4:	1c45      	adds	r5, r0, #1
 801f4d6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f4da:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f4de:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f4e2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f4e6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f4ea:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f4ee:	ea45 0c0c 	orr.w	ip, r5, ip
 801f4f2:	ea4c 0c09 	orr.w	ip, ip, r9
 801f4f6:	f824 c00b 	strh.w	ip, [r4, fp]
 801f4fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f4fc:	f108 38ff 	add.w	r8, r8, #4294967295
 801f500:	4401      	add	r1, r0
 801f502:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f504:	4402      	add	r2, r0
 801f506:	e75c      	b.n	801f3c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f508:	b007      	add	sp, #28
 801f50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f50e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f50e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f512:	b085      	sub	sp, #20
 801f514:	4693      	mov	fp, r2
 801f516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f51a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f51c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f51e:	6870      	ldr	r0, [r6, #4]
 801f520:	9100      	str	r1, [sp, #0]
 801f522:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f526:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f52a:	fb00 2404 	mla	r4, r0, r4, r2
 801f52e:	6832      	ldr	r2, [r6, #0]
 801f530:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f534:	682a      	ldr	r2, [r5, #0]
 801f536:	9201      	str	r2, [sp, #4]
 801f538:	686a      	ldr	r2, [r5, #4]
 801f53a:	3204      	adds	r2, #4
 801f53c:	9202      	str	r2, [sp, #8]
 801f53e:	9a00      	ldr	r2, [sp, #0]
 801f540:	2a00      	cmp	r2, #0
 801f542:	dc03      	bgt.n	801f54c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f544:	f1bb 0f00 	cmp.w	fp, #0
 801f548:	f340 80a0 	ble.w	801f68c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f54c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f54e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f552:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f556:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f558:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f55c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f560:	2b00      	cmp	r3, #0
 801f562:	dd0c      	ble.n	801f57e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f564:	1406      	asrs	r6, r0, #16
 801f566:	d405      	bmi.n	801f574 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f568:	454e      	cmp	r6, r9
 801f56a:	da03      	bge.n	801f574 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f56c:	1416      	asrs	r6, r2, #16
 801f56e:	d401      	bmi.n	801f574 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f570:	4546      	cmp	r6, r8
 801f572:	db05      	blt.n	801f580 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f574:	4470      	add	r0, lr
 801f576:	4462      	add	r2, ip
 801f578:	3b01      	subs	r3, #1
 801f57a:	3402      	adds	r4, #2
 801f57c:	e7f0      	b.n	801f560 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f57e:	d00f      	beq.n	801f5a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f580:	1e5e      	subs	r6, r3, #1
 801f582:	fb0e 0706 	mla	r7, lr, r6, r0
 801f586:	143f      	asrs	r7, r7, #16
 801f588:	d541      	bpl.n	801f60e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f58a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f58e:	4698      	mov	r8, r3
 801f590:	9603      	str	r6, [sp, #12]
 801f592:	f1b8 0f00 	cmp.w	r8, #0
 801f596:	dc59      	bgt.n	801f64c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f598:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f59c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f5a0:	9b00      	ldr	r3, [sp, #0]
 801f5a2:	2b00      	cmp	r3, #0
 801f5a4:	dd72      	ble.n	801f68c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f5a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f5aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f5b0:	eeb0 6a62 	vmov.f32	s12, s5
 801f5b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f5b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f5c0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f5c4:	eeb0 6a43 	vmov.f32	s12, s6
 801f5c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f5cc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f5d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5e8:	ee12 2a90 	vmov	r2, s5
 801f5ec:	eef0 2a47 	vmov.f32	s5, s14
 801f5f0:	fb92 fef3 	sdiv	lr, r2, r3
 801f5f4:	ee13 2a10 	vmov	r2, s6
 801f5f8:	eeb0 3a67 	vmov.f32	s6, s15
 801f5fc:	fb92 fcf3 	sdiv	ip, r2, r3
 801f600:	9b00      	ldr	r3, [sp, #0]
 801f602:	3b01      	subs	r3, #1
 801f604:	9300      	str	r3, [sp, #0]
 801f606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f608:	bf08      	it	eq
 801f60a:	465b      	moveq	r3, fp
 801f60c:	e797      	b.n	801f53e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f60e:	454f      	cmp	r7, r9
 801f610:	dabb      	bge.n	801f58a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f612:	fb0c 2606 	mla	r6, ip, r6, r2
 801f616:	1436      	asrs	r6, r6, #16
 801f618:	d4b7      	bmi.n	801f58a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f61a:	4546      	cmp	r6, r8
 801f61c:	dab5      	bge.n	801f58a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f61e:	461e      	mov	r6, r3
 801f620:	46a0      	mov	r8, r4
 801f622:	2e00      	cmp	r6, #0
 801f624:	ddb8      	ble.n	801f598 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f626:	1417      	asrs	r7, r2, #16
 801f628:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f62c:	9901      	ldr	r1, [sp, #4]
 801f62e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f632:	4462      	add	r2, ip
 801f634:	4470      	add	r0, lr
 801f636:	fb0a 1707 	mla	r7, sl, r7, r1
 801f63a:	9902      	ldr	r1, [sp, #8]
 801f63c:	3e01      	subs	r6, #1
 801f63e:	f817 7009 	ldrb.w	r7, [r7, r9]
 801f642:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f646:	f828 7b02 	strh.w	r7, [r8], #2
 801f64a:	e7ea      	b.n	801f622 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f64c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f650:	d417      	bmi.n	801f682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f652:	68ae      	ldr	r6, [r5, #8]
 801f654:	454e      	cmp	r6, r9
 801f656:	dd14      	ble.n	801f682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f658:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f65c:	d411      	bmi.n	801f682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f65e:	68ef      	ldr	r7, [r5, #12]
 801f660:	4557      	cmp	r7, sl
 801f662:	dd0e      	ble.n	801f682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f664:	9f01      	ldr	r7, [sp, #4]
 801f666:	b236      	sxth	r6, r6
 801f668:	f06f 0101 	mvn.w	r1, #1
 801f66c:	fb0a 7606 	mla	r6, sl, r6, r7
 801f670:	9f02      	ldr	r7, [sp, #8]
 801f672:	f816 6009 	ldrb.w	r6, [r6, r9]
 801f676:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f67a:	fb01 f608 	mul.w	r6, r1, r8
 801f67e:	9903      	ldr	r1, [sp, #12]
 801f680:	538f      	strh	r7, [r1, r6]
 801f682:	4470      	add	r0, lr
 801f684:	4462      	add	r2, ip
 801f686:	f108 38ff 	add.w	r8, r8, #4294967295
 801f68a:	e782      	b.n	801f592 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f68c:	b005      	add	sp, #20
 801f68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f692 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f696:	b087      	sub	sp, #28
 801f698:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f69a:	9205      	str	r2, [sp, #20]
 801f69c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f6a0:	9102      	str	r1, [sp, #8]
 801f6a2:	9203      	str	r2, [sp, #12]
 801f6a4:	6861      	ldr	r1, [r4, #4]
 801f6a6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f6aa:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f6ae:	fb01 2000 	mla	r0, r1, r0, r2
 801f6b2:	6822      	ldr	r2, [r4, #0]
 801f6b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801f6b8:	9200      	str	r2, [sp, #0]
 801f6ba:	f8dc 2000 	ldr.w	r2, [ip]
 801f6be:	9204      	str	r2, [sp, #16]
 801f6c0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f6c4:	3204      	adds	r2, #4
 801f6c6:	9201      	str	r2, [sp, #4]
 801f6c8:	9a03      	ldr	r2, [sp, #12]
 801f6ca:	43d5      	mvns	r5, r2
 801f6cc:	b2ed      	uxtb	r5, r5
 801f6ce:	9a02      	ldr	r2, [sp, #8]
 801f6d0:	2a00      	cmp	r2, #0
 801f6d2:	dc03      	bgt.n	801f6dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f6d4:	9a05      	ldr	r2, [sp, #20]
 801f6d6:	2a00      	cmp	r2, #0
 801f6d8:	f340 812c 	ble.w	801f934 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f6dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f6de:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f6e2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f6e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6e8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f6ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	dd10      	ble.n	801f716 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f6f4:	140c      	asrs	r4, r1, #16
 801f6f6:	d405      	bmi.n	801f704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f6f8:	4574      	cmp	r4, lr
 801f6fa:	da03      	bge.n	801f704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f6fc:	1414      	asrs	r4, r2, #16
 801f6fe:	d401      	bmi.n	801f704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f700:	42bc      	cmp	r4, r7
 801f702:	db09      	blt.n	801f718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f704:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f706:	3b01      	subs	r3, #1
 801f708:	9800      	ldr	r0, [sp, #0]
 801f70a:	4421      	add	r1, r4
 801f70c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f70e:	3002      	adds	r0, #2
 801f710:	4422      	add	r2, r4
 801f712:	9000      	str	r0, [sp, #0]
 801f714:	e7ec      	b.n	801f6f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f716:	d071      	beq.n	801f7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f718:	1e5c      	subs	r4, r3, #1
 801f71a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f71c:	fb06 1604 	mla	r6, r6, r4, r1
 801f720:	1436      	asrs	r6, r6, #16
 801f722:	d45d      	bmi.n	801f7e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f724:	4576      	cmp	r6, lr
 801f726:	da5b      	bge.n	801f7e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f728:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f72a:	fb06 2404 	mla	r4, r6, r4, r2
 801f72e:	1424      	asrs	r4, r4, #16
 801f730:	d456      	bmi.n	801f7e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f732:	42bc      	cmp	r4, r7
 801f734:	da54      	bge.n	801f7e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f736:	4698      	mov	r8, r3
 801f738:	f8dd 9000 	ldr.w	r9, [sp]
 801f73c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801f740:	f1b8 0f00 	cmp.w	r8, #0
 801f744:	dd54      	ble.n	801f7f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f746:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f74a:	1414      	asrs	r4, r2, #16
 801f74c:	9804      	ldr	r0, [sp, #16]
 801f74e:	140e      	asrs	r6, r1, #16
 801f750:	f108 38ff 	add.w	r8, r8, #4294967295
 801f754:	fb07 0404 	mla	r4, r7, r4, r0
 801f758:	9801      	ldr	r0, [sp, #4]
 801f75a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801f75e:	f8b9 4000 	ldrh.w	r4, [r9]
 801f762:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f766:	1227      	asrs	r7, r4, #8
 801f768:	eb00 0b0e 	add.w	fp, r0, lr
 801f76c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f770:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f774:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f776:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f77a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f77e:	4401      	add	r1, r0
 801f780:	fb16 f60a 	smulbb	r6, r6, sl
 801f784:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f786:	fb1b fb0a 	smulbb	fp, fp, sl
 801f78a:	fb07 6705 	mla	r7, r7, r5, r6
 801f78e:	10e6      	asrs	r6, r4, #3
 801f790:	00e4      	lsls	r4, r4, #3
 801f792:	4402      	add	r2, r0
 801f794:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f798:	b2bf      	uxth	r7, r7
 801f79a:	b2e4      	uxtb	r4, r4
 801f79c:	fb06 b605 	mla	r6, r6, r5, fp
 801f7a0:	fb14 f405 	smulbb	r4, r4, r5
 801f7a4:	b2b6      	uxth	r6, r6
 801f7a6:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801f7aa:	1c7c      	adds	r4, r7, #1
 801f7ac:	f106 0b01 	add.w	fp, r6, #1
 801f7b0:	fa1f fe8e 	uxth.w	lr, lr
 801f7b4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f7b8:	f10e 0401 	add.w	r4, lr, #1
 801f7bc:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f7c0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f7c4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801f7c8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f7cc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f7d0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f7d4:	4327      	orrs	r7, r4
 801f7d6:	ea47 070b 	orr.w	r7, r7, fp
 801f7da:	f829 7b02 	strh.w	r7, [r9], #2
 801f7de:	e7af      	b.n	801f740 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f7e0:	f04f 0e00 	mov.w	lr, #0
 801f7e4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801f7e8:	eb03 040e 	add.w	r4, r3, lr
 801f7ec:	2c00      	cmp	r4, #0
 801f7ee:	dc43      	bgt.n	801f878 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f7f0:	9a00      	ldr	r2, [sp, #0]
 801f7f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f7fa:	9300      	str	r3, [sp, #0]
 801f7fc:	9b02      	ldr	r3, [sp, #8]
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	f340 8098 	ble.w	801f934 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f808:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f80a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f80e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f812:	eef0 6a62 	vmov.f32	s13, s5
 801f816:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f81a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f81e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f822:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f826:	eef0 6a43 	vmov.f32	s13, s6
 801f82a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f82e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f832:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f836:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f83a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f83e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f842:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f846:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f84a:	ee12 2a90 	vmov	r2, s5
 801f84e:	eef0 2a47 	vmov.f32	s5, s14
 801f852:	fb92 f3f3 	sdiv	r3, r2, r3
 801f856:	ee13 2a10 	vmov	r2, s6
 801f85a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f85e:	eeb0 3a67 	vmov.f32	s6, s15
 801f862:	fb92 f3f3 	sdiv	r3, r2, r3
 801f866:	9314      	str	r3, [sp, #80]	; 0x50
 801f868:	9b02      	ldr	r3, [sp, #8]
 801f86a:	9a05      	ldr	r2, [sp, #20]
 801f86c:	3b01      	subs	r3, #1
 801f86e:	9302      	str	r3, [sp, #8]
 801f870:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f872:	bf08      	it	eq
 801f874:	4613      	moveq	r3, r2
 801f876:	e72a      	b.n	801f6ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f878:	140f      	asrs	r7, r1, #16
 801f87a:	d454      	bmi.n	801f926 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f87c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f880:	42be      	cmp	r6, r7
 801f882:	dd50      	ble.n	801f926 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f884:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f888:	d44d      	bmi.n	801f926 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f88a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801f88e:	4544      	cmp	r4, r8
 801f890:	dd49      	ble.n	801f926 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f892:	9c04      	ldr	r4, [sp, #16]
 801f894:	b236      	sxth	r6, r6
 801f896:	f06f 0001 	mvn.w	r0, #1
 801f89a:	fb08 4606 	mla	r6, r8, r6, r4
 801f89e:	9c01      	ldr	r4, [sp, #4]
 801f8a0:	fb00 fa0e 	mul.w	sl, r0, lr
 801f8a4:	9800      	ldr	r0, [sp, #0]
 801f8a6:	f816 8007 	ldrb.w	r8, [r6, r7]
 801f8aa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f8ae:	eb04 0b08 	add.w	fp, r4, r8
 801f8b2:	f830 400a 	ldrh.w	r4, [r0, sl]
 801f8b6:	9801      	ldr	r0, [sp, #4]
 801f8b8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f8bc:	1227      	asrs	r7, r4, #8
 801f8be:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f8c2:	fb16 f609 	smulbb	r6, r6, r9
 801f8c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f8ca:	f810 8008 	ldrb.w	r8, [r0, r8]
 801f8ce:	fb1b fb09 	smulbb	fp, fp, r9
 801f8d2:	fb07 6705 	mla	r7, r7, r5, r6
 801f8d6:	10e6      	asrs	r6, r4, #3
 801f8d8:	00e4      	lsls	r4, r4, #3
 801f8da:	9800      	ldr	r0, [sp, #0]
 801f8dc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f8e0:	b2bf      	uxth	r7, r7
 801f8e2:	b2e4      	uxtb	r4, r4
 801f8e4:	fb06 b605 	mla	r6, r6, r5, fp
 801f8e8:	fb14 f405 	smulbb	r4, r4, r5
 801f8ec:	b2b6      	uxth	r6, r6
 801f8ee:	fb08 4809 	mla	r8, r8, r9, r4
 801f8f2:	1c7c      	adds	r4, r7, #1
 801f8f4:	f106 0b01 	add.w	fp, r6, #1
 801f8f8:	fa1f f888 	uxth.w	r8, r8
 801f8fc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f900:	f108 0401 	add.w	r4, r8, #1
 801f904:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f908:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f90c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801f910:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f914:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f918:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f91c:	4327      	orrs	r7, r4
 801f91e:	ea47 070b 	orr.w	r7, r7, fp
 801f922:	f820 700a 	strh.w	r7, [r0, sl]
 801f926:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f928:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f92c:	4401      	add	r1, r0
 801f92e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f930:	4402      	add	r2, r0
 801f932:	e759      	b.n	801f7e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f934:	b007      	add	sp, #28
 801f936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f93c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f940:	b085      	sub	sp, #20
 801f942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f946:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f948:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f94a:	9203      	str	r2, [sp, #12]
 801f94c:	6870      	ldr	r0, [r6, #4]
 801f94e:	686f      	ldr	r7, [r5, #4]
 801f950:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801f954:	3704      	adds	r7, #4
 801f956:	9101      	str	r1, [sp, #4]
 801f958:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f95c:	fb00 2404 	mla	r4, r0, r4, r2
 801f960:	6832      	ldr	r2, [r6, #0]
 801f962:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f966:	682a      	ldr	r2, [r5, #0]
 801f968:	9202      	str	r2, [sp, #8]
 801f96a:	9a01      	ldr	r2, [sp, #4]
 801f96c:	2a00      	cmp	r2, #0
 801f96e:	dc03      	bgt.n	801f978 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f970:	9a03      	ldr	r2, [sp, #12]
 801f972:	2a00      	cmp	r2, #0
 801f974:	f340 80cc 	ble.w	801fb10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f97a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f97e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f982:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f984:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f988:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	dd0d      	ble.n	801f9ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f990:	1406      	asrs	r6, r0, #16
 801f992:	d405      	bmi.n	801f9a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f994:	454e      	cmp	r6, r9
 801f996:	da03      	bge.n	801f9a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f998:	1416      	asrs	r6, r2, #16
 801f99a:	d401      	bmi.n	801f9a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f99c:	4546      	cmp	r6, r8
 801f99e:	db06      	blt.n	801f9ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f9a0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f9a2:	4460      	add	r0, ip
 801f9a4:	3b01      	subs	r3, #1
 801f9a6:	3402      	adds	r4, #2
 801f9a8:	4432      	add	r2, r6
 801f9aa:	e7ef      	b.n	801f98c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f9ac:	d00f      	beq.n	801f9ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f9ae:	1e5e      	subs	r6, r3, #1
 801f9b0:	fb0c 0e06 	mla	lr, ip, r6, r0
 801f9b4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f9b8:	d543      	bpl.n	801fa42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f9ba:	4698      	mov	r8, r3
 801f9bc:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801f9c0:	f1b8 0f00 	cmp.w	r8, #0
 801f9c4:	dc71      	bgt.n	801faaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801f9c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9ca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f9ce:	9b01      	ldr	r3, [sp, #4]
 801f9d0:	2b00      	cmp	r3, #0
 801f9d2:	f340 809d 	ble.w	801fb10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f9d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9e0:	eeb0 6a62 	vmov.f32	s12, s5
 801f9e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f9e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9f0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f9f4:	eeb0 6a43 	vmov.f32	s12, s6
 801f9f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9fc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fa00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa04:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa08:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa18:	ee12 2a90 	vmov	r2, s5
 801fa1c:	eef0 2a47 	vmov.f32	s5, s14
 801fa20:	fb92 fcf3 	sdiv	ip, r2, r3
 801fa24:	ee13 2a10 	vmov	r2, s6
 801fa28:	eeb0 3a67 	vmov.f32	s6, s15
 801fa2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa30:	9312      	str	r3, [sp, #72]	; 0x48
 801fa32:	9b01      	ldr	r3, [sp, #4]
 801fa34:	9a03      	ldr	r2, [sp, #12]
 801fa36:	3b01      	subs	r3, #1
 801fa38:	9301      	str	r3, [sp, #4]
 801fa3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa3c:	bf08      	it	eq
 801fa3e:	4613      	moveq	r3, r2
 801fa40:	e793      	b.n	801f96a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fa42:	45ce      	cmp	lr, r9
 801fa44:	dab9      	bge.n	801f9ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fa46:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fa48:	fb01 2606 	mla	r6, r1, r6, r2
 801fa4c:	1436      	asrs	r6, r6, #16
 801fa4e:	d4b4      	bmi.n	801f9ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fa50:	4546      	cmp	r6, r8
 801fa52:	dab2      	bge.n	801f9ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fa54:	4698      	mov	r8, r3
 801fa56:	46a2      	mov	sl, r4
 801fa58:	f1b8 0f00 	cmp.w	r8, #0
 801fa5c:	ddb3      	ble.n	801f9c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fa5e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fa62:	1416      	asrs	r6, r2, #16
 801fa64:	9902      	ldr	r1, [sp, #8]
 801fa66:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801fa6a:	f108 38ff 	add.w	r8, r8, #4294967295
 801fa6e:	4460      	add	r0, ip
 801fa70:	fb09 1606 	mla	r6, r9, r6, r1
 801fa74:	4928      	ldr	r1, [pc, #160]	; (801fb18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801fa76:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801fa7a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fa7e:	eb07 0b0e 	add.w	fp, r7, lr
 801fa82:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801fa86:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801fa8a:	00f6      	lsls	r6, r6, #3
 801fa8c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801fa90:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fa92:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fa96:	440a      	add	r2, r1
 801fa98:	ea49 0606 	orr.w	r6, r9, r6
 801fa9c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801faa0:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801faa4:	f82a 6b02 	strh.w	r6, [sl], #2
 801faa8:	e7d6      	b.n	801fa58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801faaa:	ea5f 4920 	movs.w	r9, r0, asr #16
 801faae:	d429      	bmi.n	801fb04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fab0:	68ae      	ldr	r6, [r5, #8]
 801fab2:	454e      	cmp	r6, r9
 801fab4:	dd26      	ble.n	801fb04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fab6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801faba:	d423      	bmi.n	801fb04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fabc:	68e9      	ldr	r1, [r5, #12]
 801fabe:	4559      	cmp	r1, fp
 801fac0:	dd20      	ble.n	801fb04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fac2:	fa0f fe86 	sxth.w	lr, r6
 801fac6:	9902      	ldr	r1, [sp, #8]
 801fac8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801facc:	f06f 0101 	mvn.w	r1, #1
 801fad0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801fad4:	fb01 f908 	mul.w	r9, r1, r8
 801fad8:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801fadc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fae0:	eb07 060e 	add.w	r6, r7, lr
 801fae4:	f896 b002 	ldrb.w	fp, [r6, #2]
 801fae8:	7876      	ldrb	r6, [r6, #1]
 801faea:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801faee:	00f6      	lsls	r6, r6, #3
 801faf0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801faf4:	ea4b 0606 	orr.w	r6, fp, r6
 801faf8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801fafc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801fb00:	f82a 6009 	strh.w	r6, [sl, r9]
 801fb04:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fb06:	4460      	add	r0, ip
 801fb08:	f108 38ff 	add.w	r8, r8, #4294967295
 801fb0c:	440a      	add	r2, r1
 801fb0e:	e757      	b.n	801f9c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fb10:	b005      	add	sp, #20
 801fb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb16:	bf00      	nop
 801fb18:	fffff800 	.word	0xfffff800

0801fb1c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb20:	b087      	sub	sp, #28
 801fb22:	468b      	mov	fp, r1
 801fb24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fb28:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fb2a:	9204      	str	r2, [sp, #16]
 801fb2c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fb30:	6841      	ldr	r1, [r0, #4]
 801fb32:	9205      	str	r2, [sp, #20]
 801fb34:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801fb38:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fb3c:	fb01 2404 	mla	r4, r1, r4, r2
 801fb40:	6802      	ldr	r2, [r0, #0]
 801fb42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fb46:	f8dc 2000 	ldr.w	r2, [ip]
 801fb4a:	9201      	str	r2, [sp, #4]
 801fb4c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fb50:	3204      	adds	r2, #4
 801fb52:	9202      	str	r2, [sp, #8]
 801fb54:	f1bb 0f00 	cmp.w	fp, #0
 801fb58:	dc03      	bgt.n	801fb62 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801fb5a:	9a04      	ldr	r2, [sp, #16]
 801fb5c:	2a00      	cmp	r2, #0
 801fb5e:	f340 8138 	ble.w	801fdd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fb62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fb64:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801fb68:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fb6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb6e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801fb72:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	dd0e      	ble.n	801fb98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fb7a:	1402      	asrs	r2, r0, #16
 801fb7c:	d405      	bmi.n	801fb8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb7e:	42ba      	cmp	r2, r7
 801fb80:	da03      	bge.n	801fb8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb82:	140a      	asrs	r2, r1, #16
 801fb84:	d401      	bmi.n	801fb8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb86:	42b2      	cmp	r2, r6
 801fb88:	db07      	blt.n	801fb9a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fb8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb8c:	3b01      	subs	r3, #1
 801fb8e:	3402      	adds	r4, #2
 801fb90:	4410      	add	r0, r2
 801fb92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb94:	4411      	add	r1, r2
 801fb96:	e7ee      	b.n	801fb76 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fb98:	d019      	beq.n	801fbce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fb9a:	1e5a      	subs	r2, r3, #1
 801fb9c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fb9e:	fb05 0502 	mla	r5, r5, r2, r0
 801fba2:	142d      	asrs	r5, r5, #16
 801fba4:	d409      	bmi.n	801fbba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fba6:	42bd      	cmp	r5, r7
 801fba8:	da07      	bge.n	801fbba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fbaa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fbac:	fb05 1202 	mla	r2, r5, r2, r1
 801fbb0:	1412      	asrs	r2, r2, #16
 801fbb2:	d402      	bmi.n	801fbba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fbb4:	42b2      	cmp	r2, r6
 801fbb6:	f2c0 80ac 	blt.w	801fd12 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fbba:	f04f 0e00 	mov.w	lr, #0
 801fbbe:	eb03 020e 	add.w	r2, r3, lr
 801fbc2:	2a00      	cmp	r2, #0
 801fbc4:	dc3e      	bgt.n	801fc44 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801fbc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fbca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fbce:	f1bb 0f00 	cmp.w	fp, #0
 801fbd2:	f340 80fe 	ble.w	801fdd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fbd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fbda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fbe0:	f1bb 0b01 	subs.w	fp, fp, #1
 801fbe4:	eeb0 6a62 	vmov.f32	s12, s5
 801fbe8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fbec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fbf0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fbf4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fbf8:	eeb0 6a43 	vmov.f32	s12, s6
 801fbfc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc00:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fc04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc08:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc1c:	ee12 2a90 	vmov	r2, s5
 801fc20:	eef0 2a47 	vmov.f32	s5, s14
 801fc24:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc28:	ee13 2a10 	vmov	r2, s6
 801fc2c:	9313      	str	r3, [sp, #76]	; 0x4c
 801fc2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc30:	eeb0 3a67 	vmov.f32	s6, s15
 801fc34:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc38:	9a04      	ldr	r2, [sp, #16]
 801fc3a:	9314      	str	r3, [sp, #80]	; 0x50
 801fc3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc3e:	bf08      	it	eq
 801fc40:	4613      	moveq	r3, r2
 801fc42:	e787      	b.n	801fb54 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fc44:	1406      	asrs	r6, r0, #16
 801fc46:	d45d      	bmi.n	801fd04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc48:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801fc4c:	42b5      	cmp	r5, r6
 801fc4e:	dd59      	ble.n	801fd04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc50:	140f      	asrs	r7, r1, #16
 801fc52:	d457      	bmi.n	801fd04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc54:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fc58:	42ba      	cmp	r2, r7
 801fc5a:	dd53      	ble.n	801fd04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc5c:	9a01      	ldr	r2, [sp, #4]
 801fc5e:	b22d      	sxth	r5, r5
 801fc60:	fb07 2505 	mla	r5, r7, r5, r2
 801fc64:	5daa      	ldrb	r2, [r5, r6]
 801fc66:	9d02      	ldr	r5, [sp, #8]
 801fc68:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fc6c:	0e2e      	lsrs	r6, r5, #24
 801fc6e:	d049      	beq.n	801fd04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc70:	f06f 0201 	mvn.w	r2, #1
 801fc74:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fc78:	fb02 f20e 	mul.w	r2, r2, lr
 801fc7c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801fc80:	9203      	str	r2, [sp, #12]
 801fc82:	9a05      	ldr	r2, [sp, #20]
 801fc84:	ea4f 2728 	mov.w	r7, r8, asr #8
 801fc88:	4356      	muls	r6, r2
 801fc8a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fc8e:	1c72      	adds	r2, r6, #1
 801fc90:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fc94:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fc98:	b2ed      	uxtb	r5, r5
 801fc9a:	1212      	asrs	r2, r2, #8
 801fc9c:	fa1f f982 	uxth.w	r9, r2
 801fca0:	43d2      	mvns	r2, r2
 801fca2:	fb16 f609 	smulbb	r6, r6, r9
 801fca6:	b2d2      	uxtb	r2, r2
 801fca8:	fb15 f509 	smulbb	r5, r5, r9
 801fcac:	fb07 6702 	mla	r7, r7, r2, r6
 801fcb0:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801fcb4:	fb1a fa09 	smulbb	sl, sl, r9
 801fcb8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fcbc:	b2bf      	uxth	r7, r7
 801fcbe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fcc2:	fa5f f888 	uxtb.w	r8, r8
 801fcc6:	fb06 a602 	mla	r6, r6, r2, sl
 801fcca:	fb08 5502 	mla	r5, r8, r2, r5
 801fcce:	1c7a      	adds	r2, r7, #1
 801fcd0:	b2b6      	uxth	r6, r6
 801fcd2:	b2ad      	uxth	r5, r5
 801fcd4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fcd8:	9a03      	ldr	r2, [sp, #12]
 801fcda:	f105 0a01 	add.w	sl, r5, #1
 801fcde:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fce2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fce6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fcea:	ea4a 0707 	orr.w	r7, sl, r7
 801fcee:	f106 0a01 	add.w	sl, r6, #1
 801fcf2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fcf6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fcfa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fcfe:	ea47 070a 	orr.w	r7, r7, sl
 801fd02:	52a7      	strh	r7, [r4, r2]
 801fd04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fd06:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fd0a:	4410      	add	r0, r2
 801fd0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd0e:	4411      	add	r1, r2
 801fd10:	e755      	b.n	801fbbe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fd12:	f04f 0800 	mov.w	r8, #0
 801fd16:	eba3 0208 	sub.w	r2, r3, r8
 801fd1a:	2a00      	cmp	r2, #0
 801fd1c:	f77f af53 	ble.w	801fbc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801fd20:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801fd24:	140a      	asrs	r2, r1, #16
 801fd26:	9f01      	ldr	r7, [sp, #4]
 801fd28:	1405      	asrs	r5, r0, #16
 801fd2a:	fb06 7202 	mla	r2, r6, r2, r7
 801fd2e:	5d52      	ldrb	r2, [r2, r5]
 801fd30:	9d02      	ldr	r5, [sp, #8]
 801fd32:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fd36:	0e2e      	lsrs	r6, r5, #24
 801fd38:	d044      	beq.n	801fdc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fd3a:	9a05      	ldr	r2, [sp, #20]
 801fd3c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fd40:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801fd44:	4356      	muls	r6, r2
 801fd46:	ea4f 272e 	mov.w	r7, lr, asr #8
 801fd4a:	1c72      	adds	r2, r6, #1
 801fd4c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fd50:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fd54:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fd58:	b2ed      	uxtb	r5, r5
 801fd5a:	1212      	asrs	r2, r2, #8
 801fd5c:	fa1f f982 	uxth.w	r9, r2
 801fd60:	43d2      	mvns	r2, r2
 801fd62:	fb16 f609 	smulbb	r6, r6, r9
 801fd66:	b2d2      	uxtb	r2, r2
 801fd68:	fb15 f509 	smulbb	r5, r5, r9
 801fd6c:	fb07 6702 	mla	r7, r7, r2, r6
 801fd70:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fd74:	fb1a fa09 	smulbb	sl, sl, r9
 801fd78:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fd7c:	b2bf      	uxth	r7, r7
 801fd7e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fd82:	fa5f fe8e 	uxtb.w	lr, lr
 801fd86:	fb06 a602 	mla	r6, r6, r2, sl
 801fd8a:	fb0e 5502 	mla	r5, lr, r2, r5
 801fd8e:	1c7a      	adds	r2, r7, #1
 801fd90:	b2b6      	uxth	r6, r6
 801fd92:	b2ad      	uxth	r5, r5
 801fd94:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fd98:	f105 0a01 	add.w	sl, r5, #1
 801fd9c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fda0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fda4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fda8:	ea4a 0707 	orr.w	r7, sl, r7
 801fdac:	f106 0a01 	add.w	sl, r6, #1
 801fdb0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fdb4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fdb8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fdbc:	ea47 070a 	orr.w	r7, r7, sl
 801fdc0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801fdc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fdc6:	f108 0801 	add.w	r8, r8, #1
 801fdca:	4410      	add	r0, r2
 801fdcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fdce:	4411      	add	r1, r2
 801fdd0:	e7a1      	b.n	801fd16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fdd2:	b007      	add	sp, #28
 801fdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fdd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fddc:	b085      	sub	sp, #20
 801fdde:	468b      	mov	fp, r1
 801fde0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fde4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fde6:	9203      	str	r2, [sp, #12]
 801fde8:	6841      	ldr	r1, [r0, #4]
 801fdea:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801fdee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fdf2:	fb01 2404 	mla	r4, r1, r4, r2
 801fdf6:	6802      	ldr	r2, [r0, #0]
 801fdf8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fdfc:	f8de 2000 	ldr.w	r2, [lr]
 801fe00:	9200      	str	r2, [sp, #0]
 801fe02:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fe06:	3204      	adds	r2, #4
 801fe08:	9201      	str	r2, [sp, #4]
 801fe0a:	f1bb 0f00 	cmp.w	fp, #0
 801fe0e:	dc03      	bgt.n	801fe18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fe10:	9a03      	ldr	r2, [sp, #12]
 801fe12:	2a00      	cmp	r2, #0
 801fe14:	f340 8153 	ble.w	80200be <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801fe18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe1a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fe1e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fe22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fe24:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801fe28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fe2c:	2b00      	cmp	r3, #0
 801fe2e:	dd0e      	ble.n	801fe4e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fe30:	1408      	asrs	r0, r1, #16
 801fe32:	d405      	bmi.n	801fe40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fe34:	42b8      	cmp	r0, r7
 801fe36:	da03      	bge.n	801fe40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fe38:	1410      	asrs	r0, r2, #16
 801fe3a:	d401      	bmi.n	801fe40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fe3c:	42b0      	cmp	r0, r6
 801fe3e:	db07      	blt.n	801fe50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fe40:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe42:	3b01      	subs	r3, #1
 801fe44:	3402      	adds	r4, #2
 801fe46:	4401      	add	r1, r0
 801fe48:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fe4a:	4402      	add	r2, r0
 801fe4c:	e7ee      	b.n	801fe2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fe4e:	d017      	beq.n	801fe80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fe50:	1e58      	subs	r0, r3, #1
 801fe52:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fe54:	fb05 1500 	mla	r5, r5, r0, r1
 801fe58:	142d      	asrs	r5, r5, #16
 801fe5a:	d409      	bmi.n	801fe70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fe5c:	42bd      	cmp	r5, r7
 801fe5e:	da07      	bge.n	801fe70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fe60:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fe62:	fb05 2000 	mla	r0, r5, r0, r2
 801fe66:	1400      	asrs	r0, r0, #16
 801fe68:	d402      	bmi.n	801fe70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fe6a:	42b0      	cmp	r0, r6
 801fe6c:	f2c0 80bc 	blt.w	801ffe8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fe70:	2600      	movs	r6, #0
 801fe72:	1998      	adds	r0, r3, r6
 801fe74:	2800      	cmp	r0, #0
 801fe76:	dc3e      	bgt.n	801fef6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801fe78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fe80:	f1bb 0f00 	cmp.w	fp, #0
 801fe84:	f340 811b 	ble.w	80200be <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801fe88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe92:	f1bb 0b01 	subs.w	fp, fp, #1
 801fe96:	eeb0 6a62 	vmov.f32	s12, s5
 801fe9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fea2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fea6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801feaa:	eeb0 6a43 	vmov.f32	s12, s6
 801feae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801feb2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801feb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801feba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801febe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fec2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fec6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801feca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fece:	ee12 2a90 	vmov	r2, s5
 801fed2:	eef0 2a47 	vmov.f32	s5, s14
 801fed6:	fb92 f3f3 	sdiv	r3, r2, r3
 801feda:	ee13 2a10 	vmov	r2, s6
 801fede:	9311      	str	r3, [sp, #68]	; 0x44
 801fee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fee2:	eeb0 3a67 	vmov.f32	s6, s15
 801fee6:	fb92 f3f3 	sdiv	r3, r2, r3
 801feea:	9a03      	ldr	r2, [sp, #12]
 801feec:	9312      	str	r3, [sp, #72]	; 0x48
 801feee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fef0:	bf08      	it	eq
 801fef2:	4613      	moveq	r3, r2
 801fef4:	e789      	b.n	801fe0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fef6:	140f      	asrs	r7, r1, #16
 801fef8:	d426      	bmi.n	801ff48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fefa:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fefe:	42bd      	cmp	r5, r7
 801ff00:	dd22      	ble.n	801ff48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ff02:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ff06:	d41f      	bmi.n	801ff48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ff08:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ff0c:	4560      	cmp	r0, ip
 801ff0e:	dd1b      	ble.n	801ff48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ff10:	9800      	ldr	r0, [sp, #0]
 801ff12:	b22d      	sxth	r5, r5
 801ff14:	fb0c 0505 	mla	r5, ip, r5, r0
 801ff18:	5de8      	ldrb	r0, [r5, r7]
 801ff1a:	9d01      	ldr	r5, [sp, #4]
 801ff1c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ff20:	0e07      	lsrs	r7, r0, #24
 801ff22:	2fff      	cmp	r7, #255	; 0xff
 801ff24:	d116      	bne.n	801ff54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ff26:	f06f 0501 	mvn.w	r5, #1
 801ff2a:	fb05 f706 	mul.w	r7, r5, r6
 801ff2e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ff32:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ff36:	0945      	lsrs	r5, r0, #5
 801ff38:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ff3c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ff40:	ea4c 0505 	orr.w	r5, ip, r5
 801ff44:	4305      	orrs	r5, r0
 801ff46:	53e5      	strh	r5, [r4, r7]
 801ff48:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ff4a:	3e01      	subs	r6, #1
 801ff4c:	4401      	add	r1, r0
 801ff4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ff50:	4402      	add	r2, r0
 801ff52:	e78e      	b.n	801fe72 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ff54:	b2fd      	uxtb	r5, r7
 801ff56:	2f00      	cmp	r7, #0
 801ff58:	d0f6      	beq.n	801ff48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ff5a:	f06f 0701 	mvn.w	r7, #1
 801ff5e:	fa1f f985 	uxth.w	r9, r5
 801ff62:	43ed      	mvns	r5, r5
 801ff64:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ff68:	4377      	muls	r7, r6
 801ff6a:	fb1a fa09 	smulbb	sl, sl, r9
 801ff6e:	b2ed      	uxtb	r5, r5
 801ff70:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ff74:	9702      	str	r7, [sp, #8]
 801ff76:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ff7a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ff7e:	fb17 f709 	smulbb	r7, r7, r9
 801ff82:	b2c0      	uxtb	r0, r0
 801ff84:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ff88:	fb10 f009 	smulbb	r0, r0, r9
 801ff8c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ff90:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ff94:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ff98:	fa1f fc8c 	uxth.w	ip, ip
 801ff9c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ffa0:	fa5f f888 	uxtb.w	r8, r8
 801ffa4:	fb07 a705 	mla	r7, r7, r5, sl
 801ffa8:	fb08 0005 	mla	r0, r8, r5, r0
 801ffac:	f10c 0501 	add.w	r5, ip, #1
 801ffb0:	b2bf      	uxth	r7, r7
 801ffb2:	b280      	uxth	r0, r0
 801ffb4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ffb8:	f100 0a01 	add.w	sl, r0, #1
 801ffbc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ffc0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ffc4:	9802      	ldr	r0, [sp, #8]
 801ffc6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ffca:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ffce:	f107 0a01 	add.w	sl, r7, #1
 801ffd2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ffd6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ffda:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ffde:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ffe2:	f824 c000 	strh.w	ip, [r4, r0]
 801ffe6:	e7af      	b.n	801ff48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ffe8:	f04f 0800 	mov.w	r8, #0
 801ffec:	eba3 0008 	sub.w	r0, r3, r8
 801fff0:	2800      	cmp	r0, #0
 801fff2:	f77f af41 	ble.w	801fe78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fff6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801fffa:	1410      	asrs	r0, r2, #16
 801fffc:	9f00      	ldr	r7, [sp, #0]
 801fffe:	140d      	asrs	r5, r1, #16
 8020000:	fb06 7000 	mla	r0, r6, r0, r7
 8020004:	5d40      	ldrb	r0, [r0, r5]
 8020006:	9d01      	ldr	r5, [sp, #4]
 8020008:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 802000c:	0e2e      	lsrs	r6, r5, #24
 802000e:	2eff      	cmp	r6, #255	; 0xff
 8020010:	d112      	bne.n	8020038 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8020012:	482c      	ldr	r0, [pc, #176]	; (80200c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8020014:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020018:	0968      	lsrs	r0, r5, #5
 802001a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802001e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020022:	4330      	orrs	r0, r6
 8020024:	4328      	orrs	r0, r5
 8020026:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 802002a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802002c:	f108 0801 	add.w	r8, r8, #1
 8020030:	4401      	add	r1, r0
 8020032:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020034:	4402      	add	r2, r0
 8020036:	e7d9      	b.n	801ffec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020038:	b2f0      	uxtb	r0, r6
 802003a:	2e00      	cmp	r6, #0
 802003c:	d0f5      	beq.n	802002a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802003e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8020042:	fa1f f980 	uxth.w	r9, r0
 8020046:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802004a:	43c0      	mvns	r0, r0
 802004c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020050:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020054:	fb16 f609 	smulbb	r6, r6, r9
 8020058:	b2c0      	uxtb	r0, r0
 802005a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802005e:	b2ed      	uxtb	r5, r5
 8020060:	fb1a fa09 	smulbb	sl, sl, r9
 8020064:	fb07 6700 	mla	r7, r7, r0, r6
 8020068:	ea4f 06ec 	mov.w	r6, ip, asr #3
 802006c:	fb15 f509 	smulbb	r5, r5, r9
 8020070:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020074:	b2bf      	uxth	r7, r7
 8020076:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802007a:	fa5f fc8c 	uxtb.w	ip, ip
 802007e:	fb06 a600 	mla	r6, r6, r0, sl
 8020082:	fb0c 5500 	mla	r5, ip, r0, r5
 8020086:	1c78      	adds	r0, r7, #1
 8020088:	b2b6      	uxth	r6, r6
 802008a:	b2ad      	uxth	r5, r5
 802008c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020090:	f105 0a01 	add.w	sl, r5, #1
 8020094:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020098:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802009c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80200a0:	ea4a 0707 	orr.w	r7, sl, r7
 80200a4:	f106 0a01 	add.w	sl, r6, #1
 80200a8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80200ac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80200b0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80200b4:	ea47 070a 	orr.w	r7, r7, sl
 80200b8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80200bc:	e7b5      	b.n	802002a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80200be:	b005      	add	sp, #20
 80200c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200c4:	fffff800 	.word	0xfffff800

080200c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200cc:	b087      	sub	sp, #28
 80200ce:	468b      	mov	fp, r1
 80200d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80200d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80200d6:	9204      	str	r2, [sp, #16]
 80200d8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80200dc:	6861      	ldr	r1, [r4, #4]
 80200de:	9205      	str	r2, [sp, #20]
 80200e0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80200e4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80200e8:	fb01 2000 	mla	r0, r1, r0, r2
 80200ec:	6822      	ldr	r2, [r4, #0]
 80200ee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80200f2:	f8de 2000 	ldr.w	r2, [lr]
 80200f6:	9201      	str	r2, [sp, #4]
 80200f8:	f8de 2004 	ldr.w	r2, [lr, #4]
 80200fc:	9202      	str	r2, [sp, #8]
 80200fe:	f1bb 0f00 	cmp.w	fp, #0
 8020102:	dc03      	bgt.n	802010c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020104:	9a04      	ldr	r2, [sp, #16]
 8020106:	2a00      	cmp	r2, #0
 8020108:	f340 8142 	ble.w	8020390 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 802010c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802010e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020112:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020116:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020118:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 802011c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020120:	2b00      	cmp	r3, #0
 8020122:	dd0e      	ble.n	8020142 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020124:	140c      	asrs	r4, r1, #16
 8020126:	d405      	bmi.n	8020134 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020128:	42bc      	cmp	r4, r7
 802012a:	da03      	bge.n	8020134 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802012c:	1414      	asrs	r4, r2, #16
 802012e:	d401      	bmi.n	8020134 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020130:	42b4      	cmp	r4, r6
 8020132:	db07      	blt.n	8020144 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020134:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020136:	3b01      	subs	r3, #1
 8020138:	3002      	adds	r0, #2
 802013a:	4421      	add	r1, r4
 802013c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802013e:	4422      	add	r2, r4
 8020140:	e7ee      	b.n	8020120 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020142:	d019      	beq.n	8020178 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020144:	1e5c      	subs	r4, r3, #1
 8020146:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020148:	fb05 1504 	mla	r5, r5, r4, r1
 802014c:	142d      	asrs	r5, r5, #16
 802014e:	d409      	bmi.n	8020164 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020150:	42bd      	cmp	r5, r7
 8020152:	da07      	bge.n	8020164 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020154:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020156:	fb05 2404 	mla	r4, r5, r4, r2
 802015a:	1424      	asrs	r4, r4, #16
 802015c:	d402      	bmi.n	8020164 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802015e:	42b4      	cmp	r4, r6
 8020160:	f2c0 80b1 	blt.w	80202c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8020164:	f04f 0800 	mov.w	r8, #0
 8020168:	eb03 0408 	add.w	r4, r3, r8
 802016c:	2c00      	cmp	r4, #0
 802016e:	dc3e      	bgt.n	80201ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020170:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020174:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020178:	f1bb 0f00 	cmp.w	fp, #0
 802017c:	f340 8108 	ble.w	8020390 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020180:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020186:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802018a:	f1bb 0b01 	subs.w	fp, fp, #1
 802018e:	eeb0 6a62 	vmov.f32	s12, s5
 8020192:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020196:	ee31 1a05 	vadd.f32	s2, s2, s10
 802019a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802019e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80201a2:	eeb0 6a43 	vmov.f32	s12, s6
 80201a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201aa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80201ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201c6:	ee12 2a90 	vmov	r2, s5
 80201ca:	eef0 2a47 	vmov.f32	s5, s14
 80201ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80201d2:	ee13 2a10 	vmov	r2, s6
 80201d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80201d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80201da:	eeb0 3a67 	vmov.f32	s6, s15
 80201de:	fb92 f3f3 	sdiv	r3, r2, r3
 80201e2:	9a04      	ldr	r2, [sp, #16]
 80201e4:	9314      	str	r3, [sp, #80]	; 0x50
 80201e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80201e8:	bf08      	it	eq
 80201ea:	4613      	moveq	r3, r2
 80201ec:	e787      	b.n	80200fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80201ee:	140e      	asrs	r6, r1, #16
 80201f0:	d462      	bmi.n	80202b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80201f2:	f8de 5008 	ldr.w	r5, [lr, #8]
 80201f6:	42b5      	cmp	r5, r6
 80201f8:	dd5e      	ble.n	80202b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80201fa:	1417      	asrs	r7, r2, #16
 80201fc:	d45c      	bmi.n	80202b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80201fe:	f8de 400c 	ldr.w	r4, [lr, #12]
 8020202:	42bc      	cmp	r4, r7
 8020204:	dd58      	ble.n	80202b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020206:	b22d      	sxth	r5, r5
 8020208:	9c02      	ldr	r4, [sp, #8]
 802020a:	fb07 6505 	mla	r5, r7, r5, r6
 802020e:	5d66      	ldrb	r6, [r4, r5]
 8020210:	2e00      	cmp	r6, #0
 8020212:	d051      	beq.n	80202b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020214:	9c01      	ldr	r4, [sp, #4]
 8020216:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 802021a:	f06f 0401 	mvn.w	r4, #1
 802021e:	fb04 f408 	mul.w	r4, r4, r8
 8020222:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8020226:	5b05      	ldrh	r5, [r0, r4]
 8020228:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802022c:	9403      	str	r4, [sp, #12]
 802022e:	9c05      	ldr	r4, [sp, #20]
 8020230:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020234:	4366      	muls	r6, r4
 8020236:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802023a:	1c74      	adds	r4, r6, #1
 802023c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020240:	122e      	asrs	r6, r5, #8
 8020242:	1224      	asrs	r4, r4, #8
 8020244:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020248:	00ed      	lsls	r5, r5, #3
 802024a:	b2a7      	uxth	r7, r4
 802024c:	43e4      	mvns	r4, r4
 802024e:	b2ed      	uxtb	r5, r5
 8020250:	b2e4      	uxtb	r4, r4
 8020252:	fb16 f604 	smulbb	r6, r6, r4
 8020256:	fb15 f504 	smulbb	r5, r5, r4
 802025a:	fb0c 6c07 	mla	ip, ip, r7, r6
 802025e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8020262:	fb1a fa04 	smulbb	sl, sl, r4
 8020266:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 802026a:	fa1f fc8c 	uxth.w	ip, ip
 802026e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020272:	fa5f f989 	uxtb.w	r9, r9
 8020276:	fb06 a607 	mla	r6, r6, r7, sl
 802027a:	f10c 0401 	add.w	r4, ip, #1
 802027e:	fb09 5507 	mla	r5, r9, r7, r5
 8020282:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020286:	9c03      	ldr	r4, [sp, #12]
 8020288:	b2ad      	uxth	r5, r5
 802028a:	b2b6      	uxth	r6, r6
 802028c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020290:	f105 0a01 	add.w	sl, r5, #1
 8020294:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020298:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802029c:	ea4a 0c0c 	orr.w	ip, sl, ip
 80202a0:	f106 0a01 	add.w	sl, r6, #1
 80202a4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80202a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80202ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80202b0:	ea4c 0c0a 	orr.w	ip, ip, sl
 80202b4:	f820 c004 	strh.w	ip, [r0, r4]
 80202b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80202ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80202be:	4421      	add	r1, r4
 80202c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80202c2:	4422      	add	r2, r4
 80202c4:	e750      	b.n	8020168 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80202c6:	f04f 0900 	mov.w	r9, #0
 80202ca:	eba3 0409 	sub.w	r4, r3, r9
 80202ce:	2c00      	cmp	r4, #0
 80202d0:	f77f af4e 	ble.w	8020170 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80202d4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80202d8:	140d      	asrs	r5, r1, #16
 80202da:	1414      	asrs	r4, r2, #16
 80202dc:	fb06 5404 	mla	r4, r6, r4, r5
 80202e0:	9d02      	ldr	r5, [sp, #8]
 80202e2:	5d2e      	ldrb	r6, [r5, r4]
 80202e4:	2e00      	cmp	r6, #0
 80202e6:	d04c      	beq.n	8020382 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80202e8:	9d01      	ldr	r5, [sp, #4]
 80202ea:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 80202ee:	9c05      	ldr	r4, [sp, #20]
 80202f0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80202f4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80202f8:	4366      	muls	r6, r4
 80202fa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80202fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020302:	1c74      	adds	r4, r6, #1
 8020304:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020308:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 802030c:	122e      	asrs	r6, r5, #8
 802030e:	1224      	asrs	r4, r4, #8
 8020310:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020314:	00ed      	lsls	r5, r5, #3
 8020316:	b2a7      	uxth	r7, r4
 8020318:	43e4      	mvns	r4, r4
 802031a:	b2ed      	uxtb	r5, r5
 802031c:	b2e4      	uxtb	r4, r4
 802031e:	fb16 f604 	smulbb	r6, r6, r4
 8020322:	fb15 f504 	smulbb	r5, r5, r4
 8020326:	fb0c 6c07 	mla	ip, ip, r7, r6
 802032a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 802032e:	fb1a fa04 	smulbb	sl, sl, r4
 8020332:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020336:	fa1f fc8c 	uxth.w	ip, ip
 802033a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802033e:	fa5f f888 	uxtb.w	r8, r8
 8020342:	fb06 a607 	mla	r6, r6, r7, sl
 8020346:	f10c 0401 	add.w	r4, ip, #1
 802034a:	fb08 5507 	mla	r5, r8, r7, r5
 802034e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020352:	b2ad      	uxth	r5, r5
 8020354:	b2b6      	uxth	r6, r6
 8020356:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802035a:	f105 0a01 	add.w	sl, r5, #1
 802035e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020362:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020366:	ea4a 0c0c 	orr.w	ip, sl, ip
 802036a:	f106 0a01 	add.w	sl, r6, #1
 802036e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020372:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020376:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802037a:	ea4c 0c0a 	orr.w	ip, ip, sl
 802037e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020382:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020384:	f109 0901 	add.w	r9, r9, #1
 8020388:	4421      	add	r1, r4
 802038a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802038c:	4422      	add	r2, r4
 802038e:	e79c      	b.n	80202ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020390:	b007      	add	sp, #28
 8020392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020396 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802039a:	b085      	sub	sp, #20
 802039c:	468b      	mov	fp, r1
 802039e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80203a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80203a4:	9203      	str	r2, [sp, #12]
 80203a6:	6861      	ldr	r1, [r4, #4]
 80203a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80203ac:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80203b0:	fb01 2000 	mla	r0, r1, r0, r2
 80203b4:	6822      	ldr	r2, [r4, #0]
 80203b6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80203ba:	f8d8 2000 	ldr.w	r2, [r8]
 80203be:	9200      	str	r2, [sp, #0]
 80203c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80203c4:	9201      	str	r2, [sp, #4]
 80203c6:	f1bb 0f00 	cmp.w	fp, #0
 80203ca:	dc03      	bgt.n	80203d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80203cc:	9a03      	ldr	r2, [sp, #12]
 80203ce:	2a00      	cmp	r2, #0
 80203d0:	f340 8146 	ble.w	8020660 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80203d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80203d6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80203da:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80203de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80203e0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80203e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	dd0e      	ble.n	802040a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80203ec:	140c      	asrs	r4, r1, #16
 80203ee:	d405      	bmi.n	80203fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80203f0:	42bc      	cmp	r4, r7
 80203f2:	da03      	bge.n	80203fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80203f4:	1414      	asrs	r4, r2, #16
 80203f6:	d401      	bmi.n	80203fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80203f8:	42b4      	cmp	r4, r6
 80203fa:	db07      	blt.n	802040c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80203fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203fe:	3b01      	subs	r3, #1
 8020400:	3002      	adds	r0, #2
 8020402:	4421      	add	r1, r4
 8020404:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020406:	4422      	add	r2, r4
 8020408:	e7ee      	b.n	80203e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802040a:	d017      	beq.n	802043c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802040c:	1e5c      	subs	r4, r3, #1
 802040e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020410:	fb05 1504 	mla	r5, r5, r4, r1
 8020414:	142d      	asrs	r5, r5, #16
 8020416:	d409      	bmi.n	802042c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020418:	42bd      	cmp	r5, r7
 802041a:	da07      	bge.n	802042c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802041c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802041e:	fb05 2404 	mla	r4, r5, r4, r2
 8020422:	1424      	asrs	r4, r4, #16
 8020424:	d402      	bmi.n	802042c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020426:	42b4      	cmp	r4, r6
 8020428:	f2c0 80b3 	blt.w	8020592 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802042c:	2600      	movs	r6, #0
 802042e:	199c      	adds	r4, r3, r6
 8020430:	2c00      	cmp	r4, #0
 8020432:	dc3e      	bgt.n	80204b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020438:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802043c:	f1bb 0f00 	cmp.w	fp, #0
 8020440:	f340 810e 	ble.w	8020660 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020444:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802044a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802044e:	f1bb 0b01 	subs.w	fp, fp, #1
 8020452:	eeb0 6a62 	vmov.f32	s12, s5
 8020456:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802045a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802045e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020462:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020466:	eeb0 6a43 	vmov.f32	s12, s6
 802046a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802046e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020472:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020476:	ee61 7a27 	vmul.f32	s15, s2, s15
 802047a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802047e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020482:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020486:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802048a:	ee12 2a90 	vmov	r2, s5
 802048e:	eef0 2a47 	vmov.f32	s5, s14
 8020492:	fb92 f3f3 	sdiv	r3, r2, r3
 8020496:	ee13 2a10 	vmov	r2, s6
 802049a:	9311      	str	r3, [sp, #68]	; 0x44
 802049c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802049e:	eeb0 3a67 	vmov.f32	s6, s15
 80204a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80204a6:	9a03      	ldr	r2, [sp, #12]
 80204a8:	9312      	str	r3, [sp, #72]	; 0x48
 80204aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204ac:	bf08      	it	eq
 80204ae:	4613      	moveq	r3, r2
 80204b0:	e789      	b.n	80203c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80204b2:	140f      	asrs	r7, r1, #16
 80204b4:	d418      	bmi.n	80204e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80204b6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80204ba:	42bd      	cmp	r5, r7
 80204bc:	dd14      	ble.n	80204e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80204be:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80204c2:	d411      	bmi.n	80204e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80204c4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80204c8:	4564      	cmp	r4, ip
 80204ca:	dd0d      	ble.n	80204e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80204cc:	b22d      	sxth	r5, r5
 80204ce:	9c01      	ldr	r4, [sp, #4]
 80204d0:	fb0c 7505 	mla	r5, ip, r5, r7
 80204d4:	5d64      	ldrb	r4, [r4, r5]
 80204d6:	2cff      	cmp	r4, #255	; 0xff
 80204d8:	d10c      	bne.n	80204f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80204da:	9c00      	ldr	r4, [sp, #0]
 80204dc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80204e0:	f06f 0401 	mvn.w	r4, #1
 80204e4:	4374      	muls	r4, r6
 80204e6:	5305      	strh	r5, [r0, r4]
 80204e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80204ea:	3e01      	subs	r6, #1
 80204ec:	4421      	add	r1, r4
 80204ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80204f0:	4422      	add	r2, r4
 80204f2:	e79c      	b.n	802042e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80204f4:	2c00      	cmp	r4, #0
 80204f6:	d0f7      	beq.n	80204e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80204f8:	9f00      	ldr	r7, [sp, #0]
 80204fa:	fa1f fc84 	uxth.w	ip, r4
 80204fe:	43e4      	mvns	r4, r4
 8020500:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8020504:	f06f 0501 	mvn.w	r5, #1
 8020508:	b2e4      	uxtb	r4, r4
 802050a:	4375      	muls	r5, r6
 802050c:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8020510:	9502      	str	r5, [sp, #8]
 8020512:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020516:	5b45      	ldrh	r5, [r0, r5]
 8020518:	122f      	asrs	r7, r5, #8
 802051a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802051e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020522:	00ed      	lsls	r5, r5, #3
 8020524:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020528:	fb17 f704 	smulbb	r7, r7, r4
 802052c:	b2ed      	uxtb	r5, r5
 802052e:	fb1a fa04 	smulbb	sl, sl, r4
 8020532:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8020536:	ea4f 07e9 	mov.w	r7, r9, asr #3
 802053a:	fb15 f504 	smulbb	r5, r5, r4
 802053e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020542:	fa1f fe8e 	uxth.w	lr, lr
 8020546:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802054a:	fa5f f989 	uxtb.w	r9, r9
 802054e:	fb07 a70c 	mla	r7, r7, ip, sl
 8020552:	f10e 0401 	add.w	r4, lr, #1
 8020556:	fb09 550c 	mla	r5, r9, ip, r5
 802055a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 802055e:	9c02      	ldr	r4, [sp, #8]
 8020560:	b2ad      	uxth	r5, r5
 8020562:	b2bf      	uxth	r7, r7
 8020564:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020568:	f105 0a01 	add.w	sl, r5, #1
 802056c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020570:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020574:	ea4a 0e0e 	orr.w	lr, sl, lr
 8020578:	f107 0a01 	add.w	sl, r7, #1
 802057c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020580:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020584:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020588:	ea4e 0e0a 	orr.w	lr, lr, sl
 802058c:	f820 e004 	strh.w	lr, [r0, r4]
 8020590:	e7aa      	b.n	80204e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020592:	f04f 0900 	mov.w	r9, #0
 8020596:	eba3 0409 	sub.w	r4, r3, r9
 802059a:	2c00      	cmp	r4, #0
 802059c:	f77f af4a 	ble.w	8020434 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80205a0:	1414      	asrs	r4, r2, #16
 80205a2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80205a6:	140d      	asrs	r5, r1, #16
 80205a8:	fb06 5504 	mla	r5, r6, r4, r5
 80205ac:	9c01      	ldr	r4, [sp, #4]
 80205ae:	5d64      	ldrb	r4, [r4, r5]
 80205b0:	2cff      	cmp	r4, #255	; 0xff
 80205b2:	d10b      	bne.n	80205cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80205b4:	9c00      	ldr	r4, [sp, #0]
 80205b6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80205ba:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 80205be:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80205c0:	f109 0901 	add.w	r9, r9, #1
 80205c4:	4421      	add	r1, r4
 80205c6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80205c8:	4422      	add	r2, r4
 80205ca:	e7e4      	b.n	8020596 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80205cc:	2c00      	cmp	r4, #0
 80205ce:	d0f6      	beq.n	80205be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80205d0:	9e00      	ldr	r6, [sp, #0]
 80205d2:	b2a7      	uxth	r7, r4
 80205d4:	43e4      	mvns	r4, r4
 80205d6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80205da:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80205de:	b2e4      	uxtb	r4, r4
 80205e0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80205e4:	122e      	asrs	r6, r5, #8
 80205e6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80205ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80205ee:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80205f2:	00ed      	lsls	r5, r5, #3
 80205f4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80205f8:	fb16 f604 	smulbb	r6, r6, r4
 80205fc:	b2ed      	uxtb	r5, r5
 80205fe:	fb1a fa04 	smulbb	sl, sl, r4
 8020602:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020606:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802060a:	fb15 f504 	smulbb	r5, r5, r4
 802060e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020612:	fa1f fc8c 	uxth.w	ip, ip
 8020616:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802061a:	fa5f fe8e 	uxtb.w	lr, lr
 802061e:	fb06 a607 	mla	r6, r6, r7, sl
 8020622:	f10c 0401 	add.w	r4, ip, #1
 8020626:	fb0e 5507 	mla	r5, lr, r7, r5
 802062a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802062e:	b2ad      	uxth	r5, r5
 8020630:	b2b6      	uxth	r6, r6
 8020632:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020636:	f105 0a01 	add.w	sl, r5, #1
 802063a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802063e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020642:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020646:	f106 0a01 	add.w	sl, r6, #1
 802064a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802064e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020652:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020656:	ea4c 0c0a 	orr.w	ip, ip, sl
 802065a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 802065e:	e7ae      	b.n	80205be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020660:	b005      	add	sp, #20
 8020662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020666 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802066a:	b085      	sub	sp, #20
 802066c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802066e:	9203      	str	r2, [sp, #12]
 8020670:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8020674:	9100      	str	r1, [sp, #0]
 8020676:	9201      	str	r2, [sp, #4]
 8020678:	6841      	ldr	r1, [r0, #4]
 802067a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 802067e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020682:	fb01 2404 	mla	r4, r1, r4, r2
 8020686:	6802      	ldr	r2, [r0, #0]
 8020688:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802068c:	f8de 2000 	ldr.w	r2, [lr]
 8020690:	9202      	str	r2, [sp, #8]
 8020692:	9a01      	ldr	r2, [sp, #4]
 8020694:	43d6      	mvns	r6, r2
 8020696:	b2f6      	uxtb	r6, r6
 8020698:	9a00      	ldr	r2, [sp, #0]
 802069a:	2a00      	cmp	r2, #0
 802069c:	dc03      	bgt.n	80206a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802069e:	9a03      	ldr	r2, [sp, #12]
 80206a0:	2a00      	cmp	r2, #0
 80206a2:	f340 8124 	ble.w	80208ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80206a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80206a8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80206ac:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80206b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80206b2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80206b6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	dd0e      	ble.n	80206dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80206be:	1408      	asrs	r0, r1, #16
 80206c0:	d405      	bmi.n	80206ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80206c2:	4560      	cmp	r0, ip
 80206c4:	da03      	bge.n	80206ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80206c6:	1410      	asrs	r0, r2, #16
 80206c8:	d401      	bmi.n	80206ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80206ca:	42b8      	cmp	r0, r7
 80206cc:	db07      	blt.n	80206de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80206ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 80206d0:	3b01      	subs	r3, #1
 80206d2:	3402      	adds	r4, #2
 80206d4:	4401      	add	r1, r0
 80206d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80206d8:	4402      	add	r2, r0
 80206da:	e7ee      	b.n	80206ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80206dc:	d06e      	beq.n	80207bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80206de:	1e58      	subs	r0, r3, #1
 80206e0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80206e2:	fb05 1500 	mla	r5, r5, r0, r1
 80206e6:	142d      	asrs	r5, r5, #16
 80206e8:	d45c      	bmi.n	80207a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80206ea:	4565      	cmp	r5, ip
 80206ec:	da5a      	bge.n	80207a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80206ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80206f0:	fb05 2000 	mla	r0, r5, r0, r2
 80206f4:	1400      	asrs	r0, r0, #16
 80206f6:	d455      	bmi.n	80207a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80206f8:	42b8      	cmp	r0, r7
 80206fa:	da53      	bge.n	80207a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80206fc:	4699      	mov	r9, r3
 80206fe:	46a2      	mov	sl, r4
 8020700:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8020704:	f1b9 0f00 	cmp.w	r9, #0
 8020708:	dd54      	ble.n	80207b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802070a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 802070e:	140d      	asrs	r5, r1, #16
 8020710:	1410      	asrs	r0, r2, #16
 8020712:	f109 39ff 	add.w	r9, r9, #4294967295
 8020716:	fb07 5000 	mla	r0, r7, r0, r5
 802071a:	9d02      	ldr	r5, [sp, #8]
 802071c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8020720:	f8ba 5000 	ldrh.w	r5, [sl]
 8020724:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8020728:	122f      	asrs	r7, r5, #8
 802072a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 802072e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020732:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020736:	00ed      	lsls	r5, r5, #3
 8020738:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 802073c:	fb17 f706 	smulbb	r7, r7, r6
 8020740:	b2ed      	uxtb	r5, r5
 8020742:	fb18 f806 	smulbb	r8, r8, r6
 8020746:	fb0c 7c0b 	mla	ip, ip, fp, r7
 802074a:	10c7      	asrs	r7, r0, #3
 802074c:	fb15 f506 	smulbb	r5, r5, r6
 8020750:	00c0      	lsls	r0, r0, #3
 8020752:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020756:	fa1f fc8c 	uxth.w	ip, ip
 802075a:	b2c0      	uxtb	r0, r0
 802075c:	fb07 870b 	mla	r7, r7, fp, r8
 8020760:	fb00 500b 	mla	r0, r0, fp, r5
 8020764:	f10c 0501 	add.w	r5, ip, #1
 8020768:	b2bf      	uxth	r7, r7
 802076a:	b280      	uxth	r0, r0
 802076c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020770:	f107 0801 	add.w	r8, r7, #1
 8020774:	1c45      	adds	r5, r0, #1
 8020776:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 802077a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802077e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020782:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020784:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020788:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802078c:	4401      	add	r1, r0
 802078e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020792:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020794:	ea45 0c0c 	orr.w	ip, r5, ip
 8020798:	4402      	add	r2, r0
 802079a:	ea4c 0c08 	orr.w	ip, ip, r8
 802079e:	f82a cb02 	strh.w	ip, [sl], #2
 80207a2:	e7af      	b.n	8020704 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80207a4:	f04f 0800 	mov.w	r8, #0
 80207a8:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80207ac:	eb03 0008 	add.w	r0, r3, r8
 80207b0:	2800      	cmp	r0, #0
 80207b2:	dc41      	bgt.n	8020838 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80207b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80207b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80207bc:	9b00      	ldr	r3, [sp, #0]
 80207be:	2b00      	cmp	r3, #0
 80207c0:	f340 8095 	ble.w	80208ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80207c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80207c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80207ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80207d2:	eef0 6a62 	vmov.f32	s13, s5
 80207d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80207da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80207de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207e2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80207e6:	eef0 6a43 	vmov.f32	s13, s6
 80207ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207ee:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80207f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80207f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80207fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80207fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020802:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020806:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802080a:	ee12 2a90 	vmov	r2, s5
 802080e:	eef0 2a47 	vmov.f32	s5, s14
 8020812:	fb92 f3f3 	sdiv	r3, r2, r3
 8020816:	ee13 2a10 	vmov	r2, s6
 802081a:	9311      	str	r3, [sp, #68]	; 0x44
 802081c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802081e:	eeb0 3a67 	vmov.f32	s6, s15
 8020822:	fb92 f3f3 	sdiv	r3, r2, r3
 8020826:	9312      	str	r3, [sp, #72]	; 0x48
 8020828:	9b00      	ldr	r3, [sp, #0]
 802082a:	9a03      	ldr	r2, [sp, #12]
 802082c:	3b01      	subs	r3, #1
 802082e:	9300      	str	r3, [sp, #0]
 8020830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020832:	bf08      	it	eq
 8020834:	4613      	moveq	r3, r2
 8020836:	e72f      	b.n	8020698 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020838:	140f      	asrs	r7, r1, #16
 802083a:	d451      	bmi.n	80208e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802083c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020840:	42bd      	cmp	r5, r7
 8020842:	dd4d      	ble.n	80208e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020844:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020848:	d44a      	bmi.n	80208e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802084a:	f8de 000c 	ldr.w	r0, [lr, #12]
 802084e:	4560      	cmp	r0, ip
 8020850:	dd46      	ble.n	80208e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020852:	b22d      	sxth	r5, r5
 8020854:	9802      	ldr	r0, [sp, #8]
 8020856:	fb0c 7505 	mla	r5, ip, r5, r7
 802085a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 802085e:	f06f 0501 	mvn.w	r5, #1
 8020862:	fb05 fb08 	mul.w	fp, r5, r8
 8020866:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802086a:	f834 500b 	ldrh.w	r5, [r4, fp]
 802086e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020872:	122f      	asrs	r7, r5, #8
 8020874:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020878:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802087c:	00ed      	lsls	r5, r5, #3
 802087e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020882:	fb17 f706 	smulbb	r7, r7, r6
 8020886:	b2ed      	uxtb	r5, r5
 8020888:	fb19 f906 	smulbb	r9, r9, r6
 802088c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8020890:	10c7      	asrs	r7, r0, #3
 8020892:	fb15 f506 	smulbb	r5, r5, r6
 8020896:	00c0      	lsls	r0, r0, #3
 8020898:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802089c:	fa1f fc8c 	uxth.w	ip, ip
 80208a0:	b2c0      	uxtb	r0, r0
 80208a2:	fb07 970a 	mla	r7, r7, sl, r9
 80208a6:	fb00 500a 	mla	r0, r0, sl, r5
 80208aa:	f10c 0501 	add.w	r5, ip, #1
 80208ae:	b2bf      	uxth	r7, r7
 80208b0:	b280      	uxth	r0, r0
 80208b2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80208b6:	f107 0901 	add.w	r9, r7, #1
 80208ba:	1c45      	adds	r5, r0, #1
 80208bc:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80208c0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80208c4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80208c8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80208cc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80208d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80208d4:	ea45 0c0c 	orr.w	ip, r5, ip
 80208d8:	ea4c 0c09 	orr.w	ip, ip, r9
 80208dc:	f824 c00b 	strh.w	ip, [r4, fp]
 80208e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80208e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80208e6:	4401      	add	r1, r0
 80208e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80208ea:	4402      	add	r2, r0
 80208ec:	e75e      	b.n	80207ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80208ee:	b005      	add	sp, #20
 80208f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080208f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208f8:	b085      	sub	sp, #20
 80208fa:	4693      	mov	fp, r2
 80208fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020900:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020902:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020904:	6870      	ldr	r0, [r6, #4]
 8020906:	9101      	str	r1, [sp, #4]
 8020908:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802090c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8020910:	fb00 2404 	mla	r4, r0, r4, r2
 8020914:	6832      	ldr	r2, [r6, #0]
 8020916:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802091a:	682a      	ldr	r2, [r5, #0]
 802091c:	9202      	str	r2, [sp, #8]
 802091e:	9a01      	ldr	r2, [sp, #4]
 8020920:	2a00      	cmp	r2, #0
 8020922:	dc03      	bgt.n	802092c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020924:	f1bb 0f00 	cmp.w	fp, #0
 8020928:	f340 809a 	ble.w	8020a60 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802092c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802092e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020932:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020936:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020938:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 802093c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020940:	2b00      	cmp	r3, #0
 8020942:	dd0c      	ble.n	802095e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020944:	1406      	asrs	r6, r0, #16
 8020946:	d405      	bmi.n	8020954 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020948:	454e      	cmp	r6, r9
 802094a:	da03      	bge.n	8020954 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802094c:	1416      	asrs	r6, r2, #16
 802094e:	d401      	bmi.n	8020954 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020950:	4546      	cmp	r6, r8
 8020952:	db05      	blt.n	8020960 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020954:	4470      	add	r0, lr
 8020956:	4462      	add	r2, ip
 8020958:	3b01      	subs	r3, #1
 802095a:	3402      	adds	r4, #2
 802095c:	e7f0      	b.n	8020940 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802095e:	d00f      	beq.n	8020980 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020960:	1e5e      	subs	r6, r3, #1
 8020962:	fb0e 0706 	mla	r7, lr, r6, r0
 8020966:	143f      	asrs	r7, r7, #16
 8020968:	d541      	bpl.n	80209ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 802096a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 802096e:	4698      	mov	r8, r3
 8020970:	9603      	str	r6, [sp, #12]
 8020972:	f1b8 0f00 	cmp.w	r8, #0
 8020976:	dc56      	bgt.n	8020a26 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8020978:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802097c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020980:	9b01      	ldr	r3, [sp, #4]
 8020982:	2b00      	cmp	r3, #0
 8020984:	dd6c      	ble.n	8020a60 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020986:	ee30 0a04 	vadd.f32	s0, s0, s8
 802098a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802098c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020990:	eeb0 6a62 	vmov.f32	s12, s5
 8020994:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020998:	ee31 1a05 	vadd.f32	s2, s2, s10
 802099c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80209a0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80209a4:	eeb0 6a43 	vmov.f32	s12, s6
 80209a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80209ac:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80209b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80209b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80209b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80209bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80209c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80209c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80209c8:	ee12 2a90 	vmov	r2, s5
 80209cc:	eef0 2a47 	vmov.f32	s5, s14
 80209d0:	fb92 fef3 	sdiv	lr, r2, r3
 80209d4:	ee13 2a10 	vmov	r2, s6
 80209d8:	eeb0 3a67 	vmov.f32	s6, s15
 80209dc:	fb92 fcf3 	sdiv	ip, r2, r3
 80209e0:	9b01      	ldr	r3, [sp, #4]
 80209e2:	3b01      	subs	r3, #1
 80209e4:	9301      	str	r3, [sp, #4]
 80209e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209e8:	bf08      	it	eq
 80209ea:	465b      	moveq	r3, fp
 80209ec:	e797      	b.n	802091e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80209ee:	454f      	cmp	r7, r9
 80209f0:	dabb      	bge.n	802096a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80209f2:	fb0c 2606 	mla	r6, ip, r6, r2
 80209f6:	1436      	asrs	r6, r6, #16
 80209f8:	d4b7      	bmi.n	802096a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80209fa:	4546      	cmp	r6, r8
 80209fc:	dab5      	bge.n	802096a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80209fe:	461e      	mov	r6, r3
 8020a00:	46a0      	mov	r8, r4
 8020a02:	2e00      	cmp	r6, #0
 8020a04:	ddb8      	ble.n	8020978 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020a06:	1417      	asrs	r7, r2, #16
 8020a08:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8020a0c:	ea4f 4920 	mov.w	r9, r0, asr #16
 8020a10:	9902      	ldr	r1, [sp, #8]
 8020a12:	4470      	add	r0, lr
 8020a14:	4462      	add	r2, ip
 8020a16:	fb0a 9707 	mla	r7, sl, r7, r9
 8020a1a:	3e01      	subs	r6, #1
 8020a1c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020a20:	f828 7b02 	strh.w	r7, [r8], #2
 8020a24:	e7ed      	b.n	8020a02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8020a26:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020a2a:	d414      	bmi.n	8020a56 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020a2c:	68ae      	ldr	r6, [r5, #8]
 8020a2e:	454e      	cmp	r6, r9
 8020a30:	dd11      	ble.n	8020a56 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020a32:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020a36:	d40e      	bmi.n	8020a56 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020a38:	68ef      	ldr	r7, [r5, #12]
 8020a3a:	4557      	cmp	r7, sl
 8020a3c:	dd0b      	ble.n	8020a56 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020a3e:	b236      	sxth	r6, r6
 8020a40:	f06f 0101 	mvn.w	r1, #1
 8020a44:	9f02      	ldr	r7, [sp, #8]
 8020a46:	fb0a 9606 	mla	r6, sl, r6, r9
 8020a4a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8020a4e:	fb01 f608 	mul.w	r6, r1, r8
 8020a52:	9903      	ldr	r1, [sp, #12]
 8020a54:	538f      	strh	r7, [r1, r6]
 8020a56:	4470      	add	r0, lr
 8020a58:	4462      	add	r2, ip
 8020a5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8020a5e:	e788      	b.n	8020972 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020a60:	b005      	add	sp, #20
 8020a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a66 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a6a:	b087      	sub	sp, #28
 8020a6c:	468b      	mov	fp, r1
 8020a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020a72:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020a74:	9203      	str	r2, [sp, #12]
 8020a76:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020a7a:	6841      	ldr	r1, [r0, #4]
 8020a7c:	9204      	str	r2, [sp, #16]
 8020a7e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8020a82:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020a86:	fb01 2505 	mla	r5, r1, r5, r2
 8020a8a:	6802      	ldr	r2, [r0, #0]
 8020a8c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8020a90:	f8d9 2000 	ldr.w	r2, [r9]
 8020a94:	9201      	str	r2, [sp, #4]
 8020a96:	f1bb 0f00 	cmp.w	fp, #0
 8020a9a:	dc03      	bgt.n	8020aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020a9c:	9a03      	ldr	r2, [sp, #12]
 8020a9e:	2a00      	cmp	r2, #0
 8020aa0:	f340 8158 	ble.w	8020d54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020aa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020aa6:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020aaa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020aae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020ab0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020ab4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	dd0e      	ble.n	8020ada <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020abc:	1402      	asrs	r2, r0, #16
 8020abe:	d405      	bmi.n	8020acc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020ac0:	42ba      	cmp	r2, r7
 8020ac2:	da03      	bge.n	8020acc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020ac4:	140a      	asrs	r2, r1, #16
 8020ac6:	d401      	bmi.n	8020acc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020ac8:	42b2      	cmp	r2, r6
 8020aca:	db07      	blt.n	8020adc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020acc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020ace:	3b01      	subs	r3, #1
 8020ad0:	3502      	adds	r5, #2
 8020ad2:	4410      	add	r0, r2
 8020ad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020ad6:	4411      	add	r1, r2
 8020ad8:	e7ee      	b.n	8020ab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020ada:	d017      	beq.n	8020b0c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020adc:	1e5a      	subs	r2, r3, #1
 8020ade:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020ae0:	fb04 0402 	mla	r4, r4, r2, r0
 8020ae4:	1424      	asrs	r4, r4, #16
 8020ae6:	d409      	bmi.n	8020afc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020ae8:	42bc      	cmp	r4, r7
 8020aea:	da07      	bge.n	8020afc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020aec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020aee:	fb04 1202 	mla	r2, r4, r2, r1
 8020af2:	1412      	asrs	r2, r2, #16
 8020af4:	d402      	bmi.n	8020afc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020af6:	42b2      	cmp	r2, r6
 8020af8:	f2c0 80bf 	blt.w	8020c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020afc:	2700      	movs	r7, #0
 8020afe:	19da      	adds	r2, r3, r7
 8020b00:	2a00      	cmp	r2, #0
 8020b02:	dc3e      	bgt.n	8020b82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020b04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b08:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020b0c:	f1bb 0f00 	cmp.w	fp, #0
 8020b10:	f340 8120 	ble.w	8020d54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020b14:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b1a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b1e:	f1bb 0b01 	subs.w	fp, fp, #1
 8020b22:	eeb0 6a62 	vmov.f32	s12, s5
 8020b26:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b32:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020b36:	eeb0 6a43 	vmov.f32	s12, s6
 8020b3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b3e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020b42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b5a:	ee12 2a90 	vmov	r2, s5
 8020b5e:	eef0 2a47 	vmov.f32	s5, s14
 8020b62:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b66:	ee13 2a10 	vmov	r2, s6
 8020b6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b6e:	eeb0 3a67 	vmov.f32	s6, s15
 8020b72:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b76:	9a03      	ldr	r2, [sp, #12]
 8020b78:	9314      	str	r3, [sp, #80]	; 0x50
 8020b7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b7c:	bf08      	it	eq
 8020b7e:	4613      	moveq	r3, r2
 8020b80:	e789      	b.n	8020a96 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020b82:	1406      	asrs	r6, r0, #16
 8020b84:	d42d      	bmi.n	8020be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020b86:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8020b8a:	42b4      	cmp	r4, r6
 8020b8c:	dd29      	ble.n	8020be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020b8e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8020b92:	d426      	bmi.n	8020be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020b94:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020b98:	4562      	cmp	r2, ip
 8020b9a:	dd22      	ble.n	8020be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020b9c:	b224      	sxth	r4, r4
 8020b9e:	9a01      	ldr	r2, [sp, #4]
 8020ba0:	fb0c 6404 	mla	r4, ip, r4, r6
 8020ba4:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8020ba8:	0e22      	lsrs	r2, r4, #24
 8020baa:	d01a      	beq.n	8020be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020bac:	9e04      	ldr	r6, [sp, #16]
 8020bae:	4372      	muls	r2, r6
 8020bb0:	1c56      	adds	r6, r2, #1
 8020bb2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020bb6:	0a26      	lsrs	r6, r4, #8
 8020bb8:	1212      	asrs	r2, r2, #8
 8020bba:	9605      	str	r6, [sp, #20]
 8020bbc:	2aff      	cmp	r2, #255	; 0xff
 8020bbe:	d116      	bne.n	8020bee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020bc0:	f06f 0201 	mvn.w	r2, #1
 8020bc4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020bc8:	fb02 fc07 	mul.w	ip, r2, r7
 8020bcc:	0962      	lsrs	r2, r4, #5
 8020bce:	f026 0607 	bic.w	r6, r6, #7
 8020bd2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020bd6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020bda:	4316      	orrs	r6, r2
 8020bdc:	4326      	orrs	r6, r4
 8020bde:	f825 600c 	strh.w	r6, [r5, ip]
 8020be2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020be4:	3f01      	subs	r7, #1
 8020be6:	4410      	add	r0, r2
 8020be8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020bea:	4411      	add	r1, r2
 8020bec:	e787      	b.n	8020afe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020bee:	f06f 0601 	mvn.w	r6, #1
 8020bf2:	fa1f fa82 	uxth.w	sl, r2
 8020bf6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8020bfa:	43d2      	mvns	r2, r2
 8020bfc:	437e      	muls	r6, r7
 8020bfe:	b2e4      	uxtb	r4, r4
 8020c00:	fb1c fc0a 	smulbb	ip, ip, sl
 8020c04:	b2d2      	uxtb	r2, r2
 8020c06:	f835 8006 	ldrh.w	r8, [r5, r6]
 8020c0a:	fb14 f40a 	smulbb	r4, r4, sl
 8020c0e:	9602      	str	r6, [sp, #8]
 8020c10:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020c14:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020c18:	fb16 f60a 	smulbb	r6, r6, sl
 8020c1c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020c20:	fb0e ce02 	mla	lr, lr, r2, ip
 8020c24:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020c28:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020c2c:	fa1f fe8e 	uxth.w	lr, lr
 8020c30:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020c34:	fa5f f888 	uxtb.w	r8, r8
 8020c38:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020c3c:	fb08 4402 	mla	r4, r8, r2, r4
 8020c40:	f10e 0201 	add.w	r2, lr, #1
 8020c44:	fa1f fc8c 	uxth.w	ip, ip
 8020c48:	b2a4      	uxth	r4, r4
 8020c4a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020c4e:	9a02      	ldr	r2, [sp, #8]
 8020c50:	1c66      	adds	r6, r4, #1
 8020c52:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020c56:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020c5a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020c5e:	ea46 0e0e 	orr.w	lr, r6, lr
 8020c62:	f10c 0601 	add.w	r6, ip, #1
 8020c66:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020c6a:	0976      	lsrs	r6, r6, #5
 8020c6c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020c70:	ea4e 0e06 	orr.w	lr, lr, r6
 8020c74:	f825 e002 	strh.w	lr, [r5, r2]
 8020c78:	e7b3      	b.n	8020be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c7a:	f04f 0800 	mov.w	r8, #0
 8020c7e:	eba3 0208 	sub.w	r2, r3, r8
 8020c82:	2a00      	cmp	r2, #0
 8020c84:	f77f af3e 	ble.w	8020b04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020c88:	1404      	asrs	r4, r0, #16
 8020c8a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020c8e:	140a      	asrs	r2, r1, #16
 8020c90:	fb06 4202 	mla	r2, r6, r2, r4
 8020c94:	9c01      	ldr	r4, [sp, #4]
 8020c96:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8020c9a:	0e22      	lsrs	r2, r4, #24
 8020c9c:	d015      	beq.n	8020cca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020c9e:	9e04      	ldr	r6, [sp, #16]
 8020ca0:	4372      	muls	r2, r6
 8020ca2:	1c56      	adds	r6, r2, #1
 8020ca4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020ca8:	0a26      	lsrs	r6, r4, #8
 8020caa:	1212      	asrs	r2, r2, #8
 8020cac:	2aff      	cmp	r2, #255	; 0xff
 8020cae:	d113      	bne.n	8020cd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020cb0:	0962      	lsrs	r2, r4, #5
 8020cb2:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020cb6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020cba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020cbe:	f026 0607 	bic.w	r6, r6, #7
 8020cc2:	4316      	orrs	r6, r2
 8020cc4:	4326      	orrs	r6, r4
 8020cc6:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8020cca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020ccc:	f108 0801 	add.w	r8, r8, #1
 8020cd0:	4410      	add	r0, r2
 8020cd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020cd4:	4411      	add	r1, r2
 8020cd6:	e7d2      	b.n	8020c7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020cd8:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8020cdc:	fa1f fa82 	uxth.w	sl, r2
 8020ce0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8020ce4:	43d2      	mvns	r2, r2
 8020ce6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020cea:	fb17 f70a 	smulbb	r7, r7, sl
 8020cee:	b2d2      	uxtb	r2, r2
 8020cf0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020cf4:	b2e4      	uxtb	r4, r4
 8020cf6:	b2f6      	uxtb	r6, r6
 8020cf8:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020cfc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020d00:	fb14 f40a 	smulbb	r4, r4, sl
 8020d04:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020d08:	fa1f fc8c 	uxth.w	ip, ip
 8020d0c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020d10:	fb16 f60a 	smulbb	r6, r6, sl
 8020d14:	fa5f fe8e 	uxtb.w	lr, lr
 8020d18:	fb0e 4402 	mla	r4, lr, r2, r4
 8020d1c:	fb07 6702 	mla	r7, r7, r2, r6
 8020d20:	f10c 0201 	add.w	r2, ip, #1
 8020d24:	b2a4      	uxth	r4, r4
 8020d26:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020d2a:	1c66      	adds	r6, r4, #1
 8020d2c:	b2bf      	uxth	r7, r7
 8020d2e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020d32:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020d36:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020d3a:	ea46 0c0c 	orr.w	ip, r6, ip
 8020d3e:	1c7e      	adds	r6, r7, #1
 8020d40:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020d44:	0976      	lsrs	r6, r6, #5
 8020d46:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020d4a:	ea4c 0c06 	orr.w	ip, ip, r6
 8020d4e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8020d52:	e7ba      	b.n	8020cca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020d54:	b007      	add	sp, #28
 8020d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020d5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d60:	b085      	sub	sp, #20
 8020d62:	468b      	mov	fp, r1
 8020d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d68:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020d6a:	9203      	str	r2, [sp, #12]
 8020d6c:	6841      	ldr	r1, [r0, #4]
 8020d6e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020d72:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020d76:	fb01 2404 	mla	r4, r1, r4, r2
 8020d7a:	6802      	ldr	r2, [r0, #0]
 8020d7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020d80:	f8d8 2000 	ldr.w	r2, [r8]
 8020d84:	9201      	str	r2, [sp, #4]
 8020d86:	f1bb 0f00 	cmp.w	fp, #0
 8020d8a:	dc03      	bgt.n	8020d94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020d8c:	9a03      	ldr	r2, [sp, #12]
 8020d8e:	2a00      	cmp	r2, #0
 8020d90:	f340 814f 	ble.w	8021032 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020d94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d96:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020d9a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020da0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020da4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020da8:	2b00      	cmp	r3, #0
 8020daa:	dd0e      	ble.n	8020dca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020dac:	1408      	asrs	r0, r1, #16
 8020dae:	d405      	bmi.n	8020dbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020db0:	42b8      	cmp	r0, r7
 8020db2:	da03      	bge.n	8020dbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020db4:	1410      	asrs	r0, r2, #16
 8020db6:	d401      	bmi.n	8020dbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020db8:	42b0      	cmp	r0, r6
 8020dba:	db07      	blt.n	8020dcc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020dbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020dbe:	3b01      	subs	r3, #1
 8020dc0:	3402      	adds	r4, #2
 8020dc2:	4401      	add	r1, r0
 8020dc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020dc6:	4402      	add	r2, r0
 8020dc8:	e7ee      	b.n	8020da8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020dca:	d017      	beq.n	8020dfc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020dcc:	1e58      	subs	r0, r3, #1
 8020dce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020dd0:	fb05 1500 	mla	r5, r5, r0, r1
 8020dd4:	142d      	asrs	r5, r5, #16
 8020dd6:	d409      	bmi.n	8020dec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020dd8:	42bd      	cmp	r5, r7
 8020dda:	da07      	bge.n	8020dec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020ddc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020dde:	fb05 2000 	mla	r0, r5, r0, r2
 8020de2:	1400      	asrs	r0, r0, #16
 8020de4:	d402      	bmi.n	8020dec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020de6:	42b0      	cmp	r0, r6
 8020de8:	f2c0 80ba 	blt.w	8020f60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020dec:	2600      	movs	r6, #0
 8020dee:	1998      	adds	r0, r3, r6
 8020df0:	2800      	cmp	r0, #0
 8020df2:	dc3e      	bgt.n	8020e72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020df4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020df8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020dfc:	f1bb 0f00 	cmp.w	fp, #0
 8020e00:	f340 8117 	ble.w	8021032 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020e04:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e0e:	f1bb 0b01 	subs.w	fp, fp, #1
 8020e12:	eeb0 6a62 	vmov.f32	s12, s5
 8020e16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020e1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e22:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020e26:	eeb0 6a43 	vmov.f32	s12, s6
 8020e2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e2e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020e32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e36:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e4a:	ee12 2a90 	vmov	r2, s5
 8020e4e:	eef0 2a47 	vmov.f32	s5, s14
 8020e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e56:	ee13 2a10 	vmov	r2, s6
 8020e5a:	9311      	str	r3, [sp, #68]	; 0x44
 8020e5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e5e:	eeb0 3a67 	vmov.f32	s6, s15
 8020e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e66:	9a03      	ldr	r2, [sp, #12]
 8020e68:	9312      	str	r3, [sp, #72]	; 0x48
 8020e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e6c:	bf08      	it	eq
 8020e6e:	4613      	moveq	r3, r2
 8020e70:	e789      	b.n	8020d86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020e72:	140f      	asrs	r7, r1, #16
 8020e74:	d424      	bmi.n	8020ec0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e76:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020e7a:	42bd      	cmp	r5, r7
 8020e7c:	dd20      	ble.n	8020ec0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e7e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020e82:	d41d      	bmi.n	8020ec0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e84:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020e88:	4560      	cmp	r0, ip
 8020e8a:	dd19      	ble.n	8020ec0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e8c:	b22d      	sxth	r5, r5
 8020e8e:	9801      	ldr	r0, [sp, #4]
 8020e90:	fb0c 7505 	mla	r5, ip, r5, r7
 8020e94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8020e98:	0e07      	lsrs	r7, r0, #24
 8020e9a:	2fff      	cmp	r7, #255	; 0xff
 8020e9c:	d116      	bne.n	8020ecc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e9e:	f06f 0501 	mvn.w	r5, #1
 8020ea2:	fb05 f706 	mul.w	r7, r5, r6
 8020ea6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020eaa:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020eae:	0945      	lsrs	r5, r0, #5
 8020eb0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020eb4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020eb8:	ea4c 0505 	orr.w	r5, ip, r5
 8020ebc:	4305      	orrs	r5, r0
 8020ebe:	53e5      	strh	r5, [r4, r7]
 8020ec0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020ec2:	3e01      	subs	r6, #1
 8020ec4:	4401      	add	r1, r0
 8020ec6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020ec8:	4402      	add	r2, r0
 8020eca:	e790      	b.n	8020dee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020ecc:	b2fd      	uxtb	r5, r7
 8020ece:	2f00      	cmp	r7, #0
 8020ed0:	d0f6      	beq.n	8020ec0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020ed2:	f06f 0701 	mvn.w	r7, #1
 8020ed6:	fa1f f985 	uxth.w	r9, r5
 8020eda:	43ed      	mvns	r5, r5
 8020edc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020ee0:	4377      	muls	r7, r6
 8020ee2:	fb1a fa09 	smulbb	sl, sl, r9
 8020ee6:	b2ed      	uxtb	r5, r5
 8020ee8:	f834 e007 	ldrh.w	lr, [r4, r7]
 8020eec:	9702      	str	r7, [sp, #8]
 8020eee:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020ef2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020ef6:	fb17 f709 	smulbb	r7, r7, r9
 8020efa:	b2c0      	uxtb	r0, r0
 8020efc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020f00:	fb10 f009 	smulbb	r0, r0, r9
 8020f04:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020f08:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020f0c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020f10:	fa1f fc8c 	uxth.w	ip, ip
 8020f14:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020f18:	fa5f fe8e 	uxtb.w	lr, lr
 8020f1c:	fb07 a705 	mla	r7, r7, r5, sl
 8020f20:	fb0e 0005 	mla	r0, lr, r5, r0
 8020f24:	f10c 0501 	add.w	r5, ip, #1
 8020f28:	b2bf      	uxth	r7, r7
 8020f2a:	b280      	uxth	r0, r0
 8020f2c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020f30:	f100 0a01 	add.w	sl, r0, #1
 8020f34:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020f38:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020f3c:	9802      	ldr	r0, [sp, #8]
 8020f3e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020f42:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020f46:	f107 0a01 	add.w	sl, r7, #1
 8020f4a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020f4e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020f52:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020f56:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020f5a:	f824 c000 	strh.w	ip, [r4, r0]
 8020f5e:	e7af      	b.n	8020ec0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f60:	f04f 0e00 	mov.w	lr, #0
 8020f64:	eba3 000e 	sub.w	r0, r3, lr
 8020f68:	2800      	cmp	r0, #0
 8020f6a:	f77f af43 	ble.w	8020df4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020f6e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8020f72:	140d      	asrs	r5, r1, #16
 8020f74:	1410      	asrs	r0, r2, #16
 8020f76:	fb06 5000 	mla	r0, r6, r0, r5
 8020f7a:	9d01      	ldr	r5, [sp, #4]
 8020f7c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020f80:	0e2e      	lsrs	r6, r5, #24
 8020f82:	2eff      	cmp	r6, #255	; 0xff
 8020f84:	d112      	bne.n	8020fac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020f86:	482c      	ldr	r0, [pc, #176]	; (8021038 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8020f88:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020f8c:	0968      	lsrs	r0, r5, #5
 8020f8e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020f92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020f96:	4330      	orrs	r0, r6
 8020f98:	4328      	orrs	r0, r5
 8020f9a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8020f9e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020fa0:	f10e 0e01 	add.w	lr, lr, #1
 8020fa4:	4401      	add	r1, r0
 8020fa6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020fa8:	4402      	add	r2, r0
 8020faa:	e7db      	b.n	8020f64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020fac:	b2f0      	uxtb	r0, r6
 8020fae:	2e00      	cmp	r6, #0
 8020fb0:	d0f5      	beq.n	8020f9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020fb2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020fb6:	fa1f f980 	uxth.w	r9, r0
 8020fba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020fbe:	43c0      	mvns	r0, r0
 8020fc0:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020fc4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020fc8:	fb16 f609 	smulbb	r6, r6, r9
 8020fcc:	b2c0      	uxtb	r0, r0
 8020fce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020fd2:	b2ed      	uxtb	r5, r5
 8020fd4:	fb1a fa09 	smulbb	sl, sl, r9
 8020fd8:	fb07 6700 	mla	r7, r7, r0, r6
 8020fdc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020fe0:	fb15 f509 	smulbb	r5, r5, r9
 8020fe4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020fe8:	b2bf      	uxth	r7, r7
 8020fea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020fee:	fa5f fc8c 	uxtb.w	ip, ip
 8020ff2:	fb06 a600 	mla	r6, r6, r0, sl
 8020ff6:	fb0c 5500 	mla	r5, ip, r0, r5
 8020ffa:	1c78      	adds	r0, r7, #1
 8020ffc:	b2b6      	uxth	r6, r6
 8020ffe:	b2ad      	uxth	r5, r5
 8021000:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021004:	f105 0a01 	add.w	sl, r5, #1
 8021008:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802100c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021010:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021014:	ea4a 0707 	orr.w	r7, sl, r7
 8021018:	f106 0a01 	add.w	sl, r6, #1
 802101c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021020:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021024:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021028:	ea47 070a 	orr.w	r7, r7, sl
 802102c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8021030:	e7b5      	b.n	8020f9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021032:	b005      	add	sp, #20
 8021034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021038:	fffff800 	.word	0xfffff800

0802103c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021040:	b087      	sub	sp, #28
 8021042:	468b      	mov	fp, r1
 8021044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021048:	9815      	ldr	r0, [sp, #84]	; 0x54
 802104a:	9203      	str	r2, [sp, #12]
 802104c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021050:	6841      	ldr	r1, [r0, #4]
 8021052:	9204      	str	r2, [sp, #16]
 8021054:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021058:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802105c:	fb01 2404 	mla	r4, r1, r4, r2
 8021060:	6802      	ldr	r2, [r0, #0]
 8021062:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021066:	f8d9 2008 	ldr.w	r2, [r9, #8]
 802106a:	3201      	adds	r2, #1
 802106c:	f022 0201 	bic.w	r2, r2, #1
 8021070:	9200      	str	r2, [sp, #0]
 8021072:	f8d9 2000 	ldr.w	r2, [r9]
 8021076:	9201      	str	r2, [sp, #4]
 8021078:	f1bb 0f00 	cmp.w	fp, #0
 802107c:	dc03      	bgt.n	8021086 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802107e:	9a03      	ldr	r2, [sp, #12]
 8021080:	2a00      	cmp	r2, #0
 8021082:	f340 816a 	ble.w	802135a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021086:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021088:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802108c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021090:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021092:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021096:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802109a:	2b00      	cmp	r3, #0
 802109c:	dd0e      	ble.n	80210bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802109e:	1402      	asrs	r2, r0, #16
 80210a0:	d405      	bmi.n	80210ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80210a2:	42ba      	cmp	r2, r7
 80210a4:	da03      	bge.n	80210ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80210a6:	140a      	asrs	r2, r1, #16
 80210a8:	d401      	bmi.n	80210ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80210aa:	42b2      	cmp	r2, r6
 80210ac:	db07      	blt.n	80210be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80210ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80210b0:	3b01      	subs	r3, #1
 80210b2:	3402      	adds	r4, #2
 80210b4:	4410      	add	r0, r2
 80210b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80210b8:	4411      	add	r1, r2
 80210ba:	e7ee      	b.n	802109a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80210bc:	d017      	beq.n	80210ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80210be:	1e5a      	subs	r2, r3, #1
 80210c0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80210c2:	fb05 0502 	mla	r5, r5, r2, r0
 80210c6:	142d      	asrs	r5, r5, #16
 80210c8:	d409      	bmi.n	80210de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80210ca:	42bd      	cmp	r5, r7
 80210cc:	da07      	bge.n	80210de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80210ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80210d0:	fb05 1202 	mla	r2, r5, r2, r1
 80210d4:	1412      	asrs	r2, r2, #16
 80210d6:	d402      	bmi.n	80210de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80210d8:	42b2      	cmp	r2, r6
 80210da:	f2c0 80c8 	blt.w	802126e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80210de:	2700      	movs	r7, #0
 80210e0:	19da      	adds	r2, r3, r7
 80210e2:	2a00      	cmp	r2, #0
 80210e4:	dc3e      	bgt.n	8021164 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80210e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80210ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80210ee:	f1bb 0f00 	cmp.w	fp, #0
 80210f2:	f340 8132 	ble.w	802135a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80210f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80210fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80210fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021100:	f1bb 0b01 	subs.w	fp, fp, #1
 8021104:	eeb0 6a62 	vmov.f32	s12, s5
 8021108:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802110c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021110:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021114:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021118:	eeb0 6a43 	vmov.f32	s12, s6
 802111c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021120:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021124:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021128:	ee61 7a27 	vmul.f32	s15, s2, s15
 802112c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021130:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021134:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021138:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802113c:	ee12 2a90 	vmov	r2, s5
 8021140:	eef0 2a47 	vmov.f32	s5, s14
 8021144:	fb92 f3f3 	sdiv	r3, r2, r3
 8021148:	ee13 2a10 	vmov	r2, s6
 802114c:	9313      	str	r3, [sp, #76]	; 0x4c
 802114e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021150:	eeb0 3a67 	vmov.f32	s6, s15
 8021154:	fb92 f3f3 	sdiv	r3, r2, r3
 8021158:	9a03      	ldr	r2, [sp, #12]
 802115a:	9314      	str	r3, [sp, #80]	; 0x50
 802115c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802115e:	bf08      	it	eq
 8021160:	4613      	moveq	r3, r2
 8021162:	e789      	b.n	8021078 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021164:	1405      	asrs	r5, r0, #16
 8021166:	d436      	bmi.n	80211d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021168:	f8d9 2008 	ldr.w	r2, [r9, #8]
 802116c:	42aa      	cmp	r2, r5
 802116e:	dd32      	ble.n	80211d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021170:	140e      	asrs	r6, r1, #16
 8021172:	d430      	bmi.n	80211d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021174:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021178:	42b2      	cmp	r2, r6
 802117a:	dd2c      	ble.n	80211d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802117c:	9a00      	ldr	r2, [sp, #0]
 802117e:	fb06 5502 	mla	r5, r6, r2, r5
 8021182:	9e01      	ldr	r6, [sp, #4]
 8021184:	086a      	lsrs	r2, r5, #1
 8021186:	5cb2      	ldrb	r2, [r6, r2]
 8021188:	07ee      	lsls	r6, r5, #31
 802118a:	bf54      	ite	pl
 802118c:	f002 020f 	andpl.w	r2, r2, #15
 8021190:	1112      	asrmi	r2, r2, #4
 8021192:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021196:	b2d2      	uxtb	r2, r2
 8021198:	b1ea      	cbz	r2, 80211d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802119a:	9d04      	ldr	r5, [sp, #16]
 802119c:	436a      	muls	r2, r5
 802119e:	1c55      	adds	r5, r2, #1
 80211a0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80211a4:	4d6e      	ldr	r5, [pc, #440]	; (8021360 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80211a6:	1212      	asrs	r2, r2, #8
 80211a8:	682d      	ldr	r5, [r5, #0]
 80211aa:	2aff      	cmp	r2, #255	; 0xff
 80211ac:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80211b0:	9605      	str	r6, [sp, #20]
 80211b2:	d116      	bne.n	80211e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80211b4:	f06f 0201 	mvn.w	r2, #1
 80211b8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80211bc:	fb02 fc07 	mul.w	ip, r2, r7
 80211c0:	096a      	lsrs	r2, r5, #5
 80211c2:	f026 0607 	bic.w	r6, r6, #7
 80211c6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80211ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80211ce:	4316      	orrs	r6, r2
 80211d0:	432e      	orrs	r6, r5
 80211d2:	f824 600c 	strh.w	r6, [r4, ip]
 80211d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80211d8:	3f01      	subs	r7, #1
 80211da:	4410      	add	r0, r2
 80211dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80211de:	4411      	add	r1, r2
 80211e0:	e77e      	b.n	80210e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80211e2:	f06f 0601 	mvn.w	r6, #1
 80211e6:	fa1f fa82 	uxth.w	sl, r2
 80211ea:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 80211ee:	43d2      	mvns	r2, r2
 80211f0:	437e      	muls	r6, r7
 80211f2:	b2ed      	uxtb	r5, r5
 80211f4:	fb1c fc0a 	smulbb	ip, ip, sl
 80211f8:	b2d2      	uxtb	r2, r2
 80211fa:	f834 8006 	ldrh.w	r8, [r4, r6]
 80211fe:	fb15 f50a 	smulbb	r5, r5, sl
 8021202:	9602      	str	r6, [sp, #8]
 8021204:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021208:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802120c:	fb16 f60a 	smulbb	r6, r6, sl
 8021210:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021214:	fb0e ce02 	mla	lr, lr, r2, ip
 8021218:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 802121c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021220:	fa1f fe8e 	uxth.w	lr, lr
 8021224:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021228:	fa5f f888 	uxtb.w	r8, r8
 802122c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021230:	fb08 5502 	mla	r5, r8, r2, r5
 8021234:	f10e 0201 	add.w	r2, lr, #1
 8021238:	fa1f fc8c 	uxth.w	ip, ip
 802123c:	b2ad      	uxth	r5, r5
 802123e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021242:	9a02      	ldr	r2, [sp, #8]
 8021244:	1c6e      	adds	r6, r5, #1
 8021246:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 802124a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 802124e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021252:	ea46 0e0e 	orr.w	lr, r6, lr
 8021256:	f10c 0601 	add.w	r6, ip, #1
 802125a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 802125e:	0976      	lsrs	r6, r6, #5
 8021260:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021264:	ea4e 0e06 	orr.w	lr, lr, r6
 8021268:	f824 e002 	strh.w	lr, [r4, r2]
 802126c:	e7b3      	b.n	80211d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802126e:	f04f 0800 	mov.w	r8, #0
 8021272:	eba3 0208 	sub.w	r2, r3, r8
 8021276:	2a00      	cmp	r2, #0
 8021278:	f77f af35 	ble.w	80210e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802127c:	1402      	asrs	r2, r0, #16
 802127e:	9e00      	ldr	r6, [sp, #0]
 8021280:	140d      	asrs	r5, r1, #16
 8021282:	fb06 2505 	mla	r5, r6, r5, r2
 8021286:	9e01      	ldr	r6, [sp, #4]
 8021288:	086a      	lsrs	r2, r5, #1
 802128a:	07ed      	lsls	r5, r5, #31
 802128c:	5cb2      	ldrb	r2, [r6, r2]
 802128e:	bf54      	ite	pl
 8021290:	f002 020f 	andpl.w	r2, r2, #15
 8021294:	1112      	asrmi	r2, r2, #4
 8021296:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802129a:	b2d2      	uxtb	r2, r2
 802129c:	b1c2      	cbz	r2, 80212d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802129e:	9d04      	ldr	r5, [sp, #16]
 80212a0:	436a      	muls	r2, r5
 80212a2:	1c55      	adds	r5, r2, #1
 80212a4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80212a8:	4d2d      	ldr	r5, [pc, #180]	; (8021360 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80212aa:	1212      	asrs	r2, r2, #8
 80212ac:	682e      	ldr	r6, [r5, #0]
 80212ae:	2aff      	cmp	r2, #255	; 0xff
 80212b0:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80212b4:	d113      	bne.n	80212de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80212b6:	0972      	lsrs	r2, r6, #5
 80212b8:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80212bc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80212c0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80212c4:	f025 0507 	bic.w	r5, r5, #7
 80212c8:	4315      	orrs	r5, r2
 80212ca:	4335      	orrs	r5, r6
 80212cc:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 80212d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80212d2:	f108 0801 	add.w	r8, r8, #1
 80212d6:	4410      	add	r0, r2
 80212d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80212da:	4411      	add	r1, r2
 80212dc:	e7c9      	b.n	8021272 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80212de:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80212e2:	fa1f fa82 	uxth.w	sl, r2
 80212e6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80212ea:	43d2      	mvns	r2, r2
 80212ec:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80212f0:	fb17 f70a 	smulbb	r7, r7, sl
 80212f4:	b2d2      	uxtb	r2, r2
 80212f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80212fa:	b2f6      	uxtb	r6, r6
 80212fc:	b2ed      	uxtb	r5, r5
 80212fe:	fb0c 7c02 	mla	ip, ip, r2, r7
 8021302:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021306:	fb16 f60a 	smulbb	r6, r6, sl
 802130a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802130e:	fa1f fc8c 	uxth.w	ip, ip
 8021312:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021316:	fb15 f50a 	smulbb	r5, r5, sl
 802131a:	fa5f fe8e 	uxtb.w	lr, lr
 802131e:	fb0e 6602 	mla	r6, lr, r2, r6
 8021322:	fb07 5702 	mla	r7, r7, r2, r5
 8021326:	f10c 0201 	add.w	r2, ip, #1
 802132a:	b2b6      	uxth	r6, r6
 802132c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021330:	1c75      	adds	r5, r6, #1
 8021332:	b2bf      	uxth	r7, r7
 8021334:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021338:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 802133c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021340:	ea45 0c0c 	orr.w	ip, r5, ip
 8021344:	1c7d      	adds	r5, r7, #1
 8021346:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 802134a:	096d      	lsrs	r5, r5, #5
 802134c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021350:	ea4c 0c05 	orr.w	ip, ip, r5
 8021354:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8021358:	e7ba      	b.n	80212d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802135a:	b007      	add	sp, #28
 802135c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021360:	20015fc4 	.word	0x20015fc4

08021364 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021368:	b087      	sub	sp, #28
 802136a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802136e:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8021678 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8021372:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021374:	9101      	str	r1, [sp, #4]
 8021376:	9205      	str	r2, [sp, #20]
 8021378:	6841      	ldr	r1, [r0, #4]
 802137a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 802137e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021382:	fb01 2404 	mla	r4, r1, r4, r2
 8021386:	6802      	ldr	r2, [r0, #0]
 8021388:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802138c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021390:	3201      	adds	r2, #1
 8021392:	f022 0201 	bic.w	r2, r2, #1
 8021396:	9202      	str	r2, [sp, #8]
 8021398:	f8db 2000 	ldr.w	r2, [fp]
 802139c:	9203      	str	r2, [sp, #12]
 802139e:	9a01      	ldr	r2, [sp, #4]
 80213a0:	2a00      	cmp	r2, #0
 80213a2:	dc03      	bgt.n	80213ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80213a4:	9a05      	ldr	r2, [sp, #20]
 80213a6:	2a00      	cmp	r2, #0
 80213a8:	f340 8162 	ble.w	8021670 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80213ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80213ae:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80213b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80213b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80213b8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80213bc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	dd0e      	ble.n	80213e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80213c4:	1402      	asrs	r2, r0, #16
 80213c6:	d405      	bmi.n	80213d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80213c8:	42ba      	cmp	r2, r7
 80213ca:	da03      	bge.n	80213d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80213cc:	140a      	asrs	r2, r1, #16
 80213ce:	d401      	bmi.n	80213d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80213d0:	42b2      	cmp	r2, r6
 80213d2:	db07      	blt.n	80213e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80213d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80213d6:	3b01      	subs	r3, #1
 80213d8:	3402      	adds	r4, #2
 80213da:	4410      	add	r0, r2
 80213dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80213de:	4411      	add	r1, r2
 80213e0:	e7ee      	b.n	80213c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80213e2:	d017      	beq.n	8021414 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80213e4:	1e5a      	subs	r2, r3, #1
 80213e6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80213e8:	fb05 0502 	mla	r5, r5, r2, r0
 80213ec:	142d      	asrs	r5, r5, #16
 80213ee:	d409      	bmi.n	8021404 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80213f0:	42bd      	cmp	r5, r7
 80213f2:	da07      	bge.n	8021404 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80213f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80213f6:	fb05 1202 	mla	r2, r5, r2, r1
 80213fa:	1412      	asrs	r2, r2, #16
 80213fc:	d402      	bmi.n	8021404 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80213fe:	42b2      	cmp	r2, r6
 8021400:	f2c0 80c3 	blt.w	802158a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8021404:	2500      	movs	r5, #0
 8021406:	195a      	adds	r2, r3, r5
 8021408:	2a00      	cmp	r2, #0
 802140a:	dc3f      	bgt.n	802148c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802140c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021410:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021414:	9b01      	ldr	r3, [sp, #4]
 8021416:	2b00      	cmp	r3, #0
 8021418:	f340 812a 	ble.w	8021670 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802141c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021420:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021422:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021426:	eeb0 6a62 	vmov.f32	s12, s5
 802142a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802142e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021432:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021436:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802143a:	eeb0 6a43 	vmov.f32	s12, s6
 802143e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021442:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021446:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802144a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802144e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021452:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021456:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802145a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802145e:	ee12 2a90 	vmov	r2, s5
 8021462:	eef0 2a47 	vmov.f32	s5, s14
 8021466:	fb92 f3f3 	sdiv	r3, r2, r3
 802146a:	ee13 2a10 	vmov	r2, s6
 802146e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021472:	eeb0 3a67 	vmov.f32	s6, s15
 8021476:	fb92 f3f3 	sdiv	r3, r2, r3
 802147a:	9314      	str	r3, [sp, #80]	; 0x50
 802147c:	9b01      	ldr	r3, [sp, #4]
 802147e:	9a05      	ldr	r2, [sp, #20]
 8021480:	3b01      	subs	r3, #1
 8021482:	9301      	str	r3, [sp, #4]
 8021484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021486:	bf08      	it	eq
 8021488:	4613      	moveq	r3, r2
 802148a:	e788      	b.n	802139e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802148c:	1406      	asrs	r6, r0, #16
 802148e:	d42c      	bmi.n	80214ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021490:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021494:	42b2      	cmp	r2, r6
 8021496:	dd28      	ble.n	80214ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021498:	140f      	asrs	r7, r1, #16
 802149a:	d426      	bmi.n	80214ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802149c:	f8db 200c 	ldr.w	r2, [fp, #12]
 80214a0:	42ba      	cmp	r2, r7
 80214a2:	dd22      	ble.n	80214ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80214a4:	9a02      	ldr	r2, [sp, #8]
 80214a6:	fb07 6602 	mla	r6, r7, r2, r6
 80214aa:	9f03      	ldr	r7, [sp, #12]
 80214ac:	0872      	lsrs	r2, r6, #1
 80214ae:	07f6      	lsls	r6, r6, #31
 80214b0:	5cba      	ldrb	r2, [r7, r2]
 80214b2:	bf54      	ite	pl
 80214b4:	f002 020f 	andpl.w	r2, r2, #15
 80214b8:	1112      	asrmi	r2, r2, #4
 80214ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80214be:	b2d2      	uxtb	r2, r2
 80214c0:	2aff      	cmp	r2, #255	; 0xff
 80214c2:	d118      	bne.n	80214f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80214c4:	f06f 0601 	mvn.w	r6, #1
 80214c8:	f8d8 2000 	ldr.w	r2, [r8]
 80214cc:	fb06 f705 	mul.w	r7, r6, r5
 80214d0:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 80214d4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80214d8:	0956      	lsrs	r6, r2, #5
 80214da:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80214de:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80214e2:	ea4c 0606 	orr.w	r6, ip, r6
 80214e6:	4316      	orrs	r6, r2
 80214e8:	53e6      	strh	r6, [r4, r7]
 80214ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80214ec:	3d01      	subs	r5, #1
 80214ee:	4410      	add	r0, r2
 80214f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80214f2:	4411      	add	r1, r2
 80214f4:	e787      	b.n	8021406 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80214f6:	2a00      	cmp	r2, #0
 80214f8:	d0f7      	beq.n	80214ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80214fa:	f06f 0601 	mvn.w	r6, #1
 80214fe:	f8d8 c000 	ldr.w	ip, [r8]
 8021502:	fa1f f982 	uxth.w	r9, r2
 8021506:	43d2      	mvns	r2, r2
 8021508:	436e      	muls	r6, r5
 802150a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802150e:	b2d2      	uxtb	r2, r2
 8021510:	f834 e006 	ldrh.w	lr, [r4, r6]
 8021514:	fb1a fa09 	smulbb	sl, sl, r9
 8021518:	9604      	str	r6, [sp, #16]
 802151a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802151e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8021522:	fb16 f609 	smulbb	r6, r6, r9
 8021526:	fa5f fc8c 	uxtb.w	ip, ip
 802152a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802152e:	fb1c fc09 	smulbb	ip, ip, r9
 8021532:	fb07 6702 	mla	r7, r7, r2, r6
 8021536:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802153a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802153e:	b2bf      	uxth	r7, r7
 8021540:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021544:	fa5f fe8e 	uxtb.w	lr, lr
 8021548:	fb06 a602 	mla	r6, r6, r2, sl
 802154c:	fb0e cc02 	mla	ip, lr, r2, ip
 8021550:	1c7a      	adds	r2, r7, #1
 8021552:	b2b6      	uxth	r6, r6
 8021554:	fa1f fc8c 	uxth.w	ip, ip
 8021558:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802155c:	9a04      	ldr	r2, [sp, #16]
 802155e:	f10c 0a01 	add.w	sl, ip, #1
 8021562:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021566:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802156a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802156e:	ea4a 0707 	orr.w	r7, sl, r7
 8021572:	f106 0a01 	add.w	sl, r6, #1
 8021576:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802157a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802157e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021582:	ea47 070a 	orr.w	r7, r7, sl
 8021586:	52a7      	strh	r7, [r4, r2]
 8021588:	e7af      	b.n	80214ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802158a:	f04f 0e00 	mov.w	lr, #0
 802158e:	eba3 020e 	sub.w	r2, r3, lr
 8021592:	2a00      	cmp	r2, #0
 8021594:	f77f af3a 	ble.w	802140c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021598:	1402      	asrs	r2, r0, #16
 802159a:	9e02      	ldr	r6, [sp, #8]
 802159c:	140d      	asrs	r5, r1, #16
 802159e:	fb06 2505 	mla	r5, r6, r5, r2
 80215a2:	9e03      	ldr	r6, [sp, #12]
 80215a4:	086a      	lsrs	r2, r5, #1
 80215a6:	07ed      	lsls	r5, r5, #31
 80215a8:	5cb2      	ldrb	r2, [r6, r2]
 80215aa:	bf54      	ite	pl
 80215ac:	f002 020f 	andpl.w	r2, r2, #15
 80215b0:	1112      	asrmi	r2, r2, #4
 80215b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80215b6:	b2d2      	uxtb	r2, r2
 80215b8:	2aff      	cmp	r2, #255	; 0xff
 80215ba:	d115      	bne.n	80215e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80215bc:	f8d8 5000 	ldr.w	r5, [r8]
 80215c0:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 80215c4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 80215c8:	096a      	lsrs	r2, r5, #5
 80215ca:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80215ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80215d2:	4332      	orrs	r2, r6
 80215d4:	432a      	orrs	r2, r5
 80215d6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80215da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80215dc:	f10e 0e01 	add.w	lr, lr, #1
 80215e0:	4410      	add	r0, r2
 80215e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80215e4:	4411      	add	r1, r2
 80215e6:	e7d2      	b.n	802158e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80215e8:	2a00      	cmp	r2, #0
 80215ea:	d0f6      	beq.n	80215da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80215ec:	f8d8 7000 	ldr.w	r7, [r8]
 80215f0:	fa1f f982 	uxth.w	r9, r2
 80215f4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80215f8:	43d2      	mvns	r2, r2
 80215fa:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80215fe:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8021602:	ea4f 262c 	mov.w	r6, ip, asr #8
 8021606:	fb15 f509 	smulbb	r5, r5, r9
 802160a:	b2d2      	uxtb	r2, r2
 802160c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021610:	b2ff      	uxtb	r7, r7
 8021612:	fb1a fa09 	smulbb	sl, sl, r9
 8021616:	fb06 5602 	mla	r6, r6, r2, r5
 802161a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802161e:	fb17 f709 	smulbb	r7, r7, r9
 8021622:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021626:	b2b6      	uxth	r6, r6
 8021628:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802162c:	fa5f fc8c 	uxtb.w	ip, ip
 8021630:	fb05 a502 	mla	r5, r5, r2, sl
 8021634:	fb0c 7702 	mla	r7, ip, r2, r7
 8021638:	1c72      	adds	r2, r6, #1
 802163a:	b2ad      	uxth	r5, r5
 802163c:	b2bf      	uxth	r7, r7
 802163e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021642:	f107 0a01 	add.w	sl, r7, #1
 8021646:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802164a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802164e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021652:	ea4a 0606 	orr.w	r6, sl, r6
 8021656:	f105 0a01 	add.w	sl, r5, #1
 802165a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802165e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021662:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021666:	ea46 060a 	orr.w	r6, r6, sl
 802166a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 802166e:	e7b4      	b.n	80215da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021670:	b007      	add	sp, #28
 8021672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021676:	bf00      	nop
 8021678:	20015fc4 	.word	0x20015fc4

0802167c <_ZN8touchgfx8LCD16bppD1Ev>:
 802167c:	4770      	bx	lr

0802167e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 802167e:	4770      	bx	lr

08021680 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021680:	4770      	bx	lr

08021682 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021682:	4770      	bx	lr

08021684 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8021684:	4770      	bx	lr

08021686 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021686:	4770      	bx	lr

08021688 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021688:	4770      	bx	lr

0802168a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802168a:	4770      	bx	lr

0802168c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802168c:	4770      	bx	lr

0802168e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802168e:	4770      	bx	lr

08021690 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021690:	4770      	bx	lr

08021692 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021692:	4770      	bx	lr

08021694 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021694:	4770      	bx	lr

08021696 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021696:	4770      	bx	lr

08021698 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8021698:	4770      	bx	lr

0802169a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802169a:	4770      	bx	lr

0802169c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802169c:	4770      	bx	lr

0802169e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802169e:	4770      	bx	lr

080216a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80216a0:	4770      	bx	lr

080216a2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80216a2:	4770      	bx	lr

080216a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80216a4:	4770      	bx	lr

080216a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80216a6:	4770      	bx	lr

080216a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80216a8:	4770      	bx	lr

080216aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80216aa:	4770      	bx	lr

080216ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80216ac:	4770      	bx	lr

080216ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80216ae:	4770      	bx	lr

080216b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80216b0:	4770      	bx	lr

080216b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80216b2:	4770      	bx	lr

080216b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80216b4:	4770      	bx	lr

080216b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80216b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80216ba:	b088      	sub	sp, #32
 80216bc:	4606      	mov	r6, r0
 80216be:	4688      	mov	r8, r1
 80216c0:	4691      	mov	r9, r2
 80216c2:	ac08      	add	r4, sp, #32
 80216c4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80216c8:	4620      	mov	r0, r4
 80216ca:	f7fd fc65 	bl	801ef98 <_ZNK8touchgfx6Bitmap7getDataEv>
 80216ce:	6833      	ldr	r3, [r6, #0]
 80216d0:	4605      	mov	r5, r0
 80216d2:	4620      	mov	r0, r4
 80216d4:	699f      	ldr	r7, [r3, #24]
 80216d6:	f7fd fb73 	bl	801edc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80216da:	4682      	mov	sl, r0
 80216dc:	4620      	mov	r0, r4
 80216de:	f7fd fba3 	bl	801ee28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80216e2:	9500      	str	r5, [sp, #0]
 80216e4:	464b      	mov	r3, r9
 80216e6:	4642      	mov	r2, r8
 80216e8:	4631      	mov	r1, r6
 80216ea:	e9cd a001 	strd	sl, r0, [sp, #4]
 80216ee:	a806      	add	r0, sp, #24
 80216f0:	47b8      	blx	r7
 80216f2:	4628      	mov	r0, r5
 80216f4:	b008      	add	sp, #32
 80216f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080216fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80216fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021700:	2300      	movs	r3, #0
 8021702:	9300      	str	r3, [sp, #0]
 8021704:	4b3d      	ldr	r3, [pc, #244]	; (80217fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8021706:	781b      	ldrb	r3, [r3, #0]
 8021708:	2b00      	cmp	r3, #0
 802170a:	d137      	bne.n	802177c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 802170c:	4a3c      	ldr	r2, [pc, #240]	; (8021800 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 802170e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8021712:	f8ad 2004 	strh.w	r2, [sp, #4]
 8021716:	2b00      	cmp	r3, #0
 8021718:	d132      	bne.n	8021780 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 802171a:	4b3a      	ldr	r3, [pc, #232]	; (8021804 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802171c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021720:	ac02      	add	r4, sp, #8
 8021722:	6808      	ldr	r0, [r1, #0]
 8021724:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021728:	ab02      	add	r3, sp, #8
 802172a:	6849      	ldr	r1, [r1, #4]
 802172c:	4d36      	ldr	r5, [pc, #216]	; (8021808 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802172e:	c303      	stmia	r3!, {r0, r1}
 8021730:	4669      	mov	r1, sp
 8021732:	4620      	mov	r0, r4
 8021734:	f7fa f9bc 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021738:	4668      	mov	r0, sp
 802173a:	f7fa f991 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802173e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8021742:	f8bd 2000 	ldrh.w	r2, [sp]
 8021746:	462f      	mov	r7, r5
 8021748:	6828      	ldr	r0, [r5, #0]
 802174a:	4413      	add	r3, r2
 802174c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021750:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021754:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8021758:	4413      	add	r3, r2
 802175a:	f8ad 300a 	strh.w	r3, [sp, #10]
 802175e:	6803      	ldr	r3, [r0, #0]
 8021760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021762:	4798      	blx	r3
 8021764:	f010 0f01 	tst.w	r0, #1
 8021768:	d00c      	beq.n	8021784 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 802176a:	6828      	ldr	r0, [r5, #0]
 802176c:	6803      	ldr	r3, [r0, #0]
 802176e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8021772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021774:	4798      	blx	r3
 8021776:	b004      	add	sp, #16
 8021778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802177c:	4a21      	ldr	r2, [pc, #132]	; (8021804 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802177e:	e7c6      	b.n	802170e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8021780:	4b1f      	ldr	r3, [pc, #124]	; (8021800 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8021782:	e7cb      	b.n	802171c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8021784:	6838      	ldr	r0, [r7, #0]
 8021786:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802178a:	6803      	ldr	r3, [r0, #0]
 802178c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8021790:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8021794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021796:	4798      	blx	r3
 8021798:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 802179c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80217a0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80217a4:	fb16 3602 	smlabb	r6, r6, r2, r3
 80217a8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80217ac:	6838      	ldr	r0, [r7, #0]
 80217ae:	6803      	ldr	r3, [r0, #0]
 80217b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80217b2:	4798      	blx	r3
 80217b4:	4a12      	ldr	r2, [pc, #72]	; (8021800 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80217b6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80217ba:	8813      	ldrh	r3, [r2, #0]
 80217bc:	4691      	mov	r9, r2
 80217be:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80217c2:	435d      	muls	r5, r3
 80217c4:	fb03 1404 	mla	r4, r3, r4, r1
 80217c8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80217cc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80217d0:	6838      	ldr	r0, [r7, #0]
 80217d2:	42ac      	cmp	r4, r5
 80217d4:	6803      	ldr	r3, [r0, #0]
 80217d6:	d20e      	bcs.n	80217f6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80217d8:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80217dc:	4632      	mov	r2, r6
 80217de:	4643      	mov	r3, r8
 80217e0:	4621      	mov	r1, r4
 80217e2:	47d0      	blx	sl
 80217e4:	f8b9 3000 	ldrh.w	r3, [r9]
 80217e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80217ec:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80217f0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80217f4:	e7ec      	b.n	80217d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80217f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217f8:	4798      	blx	r3
 80217fa:	e7bc      	b.n	8021776 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80217fc:	20015fb4 	.word	0x20015fb4
 8021800:	20015fb6 	.word	0x20015fb6
 8021804:	20015fb8 	.word	0x20015fb8
 8021808:	20015fbc 	.word	0x20015fbc

0802180c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 802180c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021810:	b08b      	sub	sp, #44	; 0x2c
 8021812:	460f      	mov	r7, r1
 8021814:	4616      	mov	r6, r2
 8021816:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 802181a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802181e:	f1bb 0f00 	cmp.w	fp, #0
 8021822:	d049      	beq.n	80218b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021824:	6810      	ldr	r0, [r2, #0]
 8021826:	ad06      	add	r5, sp, #24
 8021828:	6851      	ldr	r1, [r2, #4]
 802182a:	c503      	stmia	r5!, {r0, r1}
 802182c:	6818      	ldr	r0, [r3, #0]
 802182e:	ad08      	add	r5, sp, #32
 8021830:	6859      	ldr	r1, [r3, #4]
 8021832:	c503      	stmia	r5!, {r0, r1}
 8021834:	a806      	add	r0, sp, #24
 8021836:	f7fa f913 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802183a:	4631      	mov	r1, r6
 802183c:	a808      	add	r0, sp, #32
 802183e:	f7fa f937 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021842:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021846:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802184a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 802184e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8021852:	fb16 2103 	smlabb	r1, r6, r3, r2
 8021856:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802185a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 802185e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021862:	4f5f      	ldr	r7, [pc, #380]	; (80219e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8021864:	440a      	add	r2, r1
 8021866:	6838      	ldr	r0, [r7, #0]
 8021868:	46b9      	mov	r9, r7
 802186a:	f8ad 2020 	strh.w	r2, [sp, #32]
 802186e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021872:	4413      	add	r3, r2
 8021874:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021878:	6803      	ldr	r3, [r0, #0]
 802187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802187c:	4798      	blx	r3
 802187e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021882:	d01c      	beq.n	80218be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8021884:	f010 0f04 	tst.w	r0, #4
 8021888:	d01d      	beq.n	80218c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802188a:	f8d9 0000 	ldr.w	r0, [r9]
 802188e:	2700      	movs	r7, #0
 8021890:	b2ad      	uxth	r5, r5
 8021892:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021896:	6801      	ldr	r1, [r0, #0]
 8021898:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802189c:	f8cd b00c 	str.w	fp, [sp, #12]
 80218a0:	9501      	str	r5, [sp, #4]
 80218a2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80218a6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80218aa:	9402      	str	r4, [sp, #8]
 80218ac:	fa1f f488 	uxth.w	r4, r8
 80218b0:	9400      	str	r4, [sp, #0]
 80218b2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80218b4:	4631      	mov	r1, r6
 80218b6:	47a0      	blx	r4
 80218b8:	b00b      	add	sp, #44	; 0x2c
 80218ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218be:	b914      	cbnz	r4, 80218c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80218c0:	f010 0f01 	tst.w	r0, #1
 80218c4:	e7e0      	b.n	8021888 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80218c6:	f8d9 0000 	ldr.w	r0, [r9]
 80218ca:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80218ce:	6803      	ldr	r3, [r0, #0]
 80218d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80218d2:	4798      	blx	r3
 80218d4:	4b43      	ldr	r3, [pc, #268]	; (80219e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80218d6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80218da:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80218de:	881a      	ldrh	r2, [r3, #0]
 80218e0:	469a      	mov	sl, r3
 80218e2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80218e6:	fb05 f502 	mul.w	r5, r5, r2
 80218ea:	fb02 1404 	mla	r4, r2, r4, r1
 80218ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80218f2:	d059      	beq.n	80219a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80218f4:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 80218f8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80218fc:	fa1f f28b 	uxth.w	r2, fp
 8021900:	469e      	mov	lr, r3
 8021902:	fa1f f989 	uxth.w	r9, r9
 8021906:	42ac      	cmp	r4, r5
 8021908:	d264      	bcs.n	80219d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802190a:	eb04 0a07 	add.w	sl, r4, r7
 802190e:	4554      	cmp	r4, sl
 8021910:	d23d      	bcs.n	802198e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8021912:	8821      	ldrh	r1, [r4, #0]
 8021914:	f836 3b02 	ldrh.w	r3, [r6], #2
 8021918:	1208      	asrs	r0, r1, #8
 802191a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802191e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021922:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8021926:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802192a:	00c9      	lsls	r1, r1, #3
 802192c:	fb10 f009 	smulbb	r0, r0, r9
 8021930:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8021934:	b2c9      	uxtb	r1, r1
 8021936:	fb0c 0c02 	mla	ip, ip, r2, r0
 802193a:	10d8      	asrs	r0, r3, #3
 802193c:	fb1b fb09 	smulbb	fp, fp, r9
 8021940:	00db      	lsls	r3, r3, #3
 8021942:	fa1f fc8c 	uxth.w	ip, ip
 8021946:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802194a:	fb11 f109 	smulbb	r1, r1, r9
 802194e:	b2db      	uxtb	r3, r3
 8021950:	fb00 b002 	mla	r0, r0, r2, fp
 8021954:	f10c 0b01 	add.w	fp, ip, #1
 8021958:	fb03 1302 	mla	r3, r3, r2, r1
 802195c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021960:	b29b      	uxth	r3, r3
 8021962:	b280      	uxth	r0, r0
 8021964:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8021968:	f103 0c01 	add.w	ip, r3, #1
 802196c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021970:	1c43      	adds	r3, r0, #1
 8021972:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021976:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802197a:	0940      	lsrs	r0, r0, #5
 802197c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021980:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021984:	ea4c 0c00 	orr.w	ip, ip, r0
 8021988:	f824 cb02 	strh.w	ip, [r4], #2
 802198c:	e7bf      	b.n	802190e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 802198e:	f8be 3000 	ldrh.w	r3, [lr]
 8021992:	eba3 0308 	sub.w	r3, r3, r8
 8021996:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802199a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802199e:	eba3 0308 	sub.w	r3, r3, r8
 80219a2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80219a6:	e7ae      	b.n	8021906 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80219a8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80219ac:	f8d9 0000 	ldr.w	r0, [r9]
 80219b0:	42ac      	cmp	r4, r5
 80219b2:	6803      	ldr	r3, [r0, #0]
 80219b4:	d20e      	bcs.n	80219d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80219b6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80219ba:	4632      	mov	r2, r6
 80219bc:	463b      	mov	r3, r7
 80219be:	4621      	mov	r1, r4
 80219c0:	47c0      	blx	r8
 80219c2:	f8ba 3000 	ldrh.w	r3, [sl]
 80219c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80219ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80219ce:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80219d2:	e7eb      	b.n	80219ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80219d4:	4b02      	ldr	r3, [pc, #8]	; (80219e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80219d6:	6818      	ldr	r0, [r3, #0]
 80219d8:	6803      	ldr	r3, [r0, #0]
 80219da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219dc:	4798      	blx	r3
 80219de:	e76b      	b.n	80218b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80219e0:	20015fbc 	.word	0x20015fbc
 80219e4:	20015fb6 	.word	0x20015fb6

080219e8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80219e8:	b510      	push	{r4, lr}
 80219ea:	4604      	mov	r4, r0
 80219ec:	2178      	movs	r1, #120	; 0x78
 80219ee:	f008 ffca 	bl	802a986 <_ZdlPvj>
 80219f2:	4620      	mov	r0, r4
 80219f4:	bd10      	pop	{r4, pc}

080219f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80219f6:	b510      	push	{r4, lr}
 80219f8:	4604      	mov	r4, r0
 80219fa:	2104      	movs	r1, #4
 80219fc:	f008 ffc3 	bl	802a986 <_ZdlPvj>
 8021a00:	4620      	mov	r0, r4
 8021a02:	bd10      	pop	{r4, pc}

08021a04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021a04:	b510      	push	{r4, lr}
 8021a06:	4604      	mov	r4, r0
 8021a08:	2104      	movs	r1, #4
 8021a0a:	f008 ffbc 	bl	802a986 <_ZdlPvj>
 8021a0e:	4620      	mov	r0, r4
 8021a10:	bd10      	pop	{r4, pc}

08021a12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021a12:	b510      	push	{r4, lr}
 8021a14:	4604      	mov	r4, r0
 8021a16:	2104      	movs	r1, #4
 8021a18:	f008 ffb5 	bl	802a986 <_ZdlPvj>
 8021a1c:	4620      	mov	r0, r4
 8021a1e:	bd10      	pop	{r4, pc}

08021a20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8021a20:	b510      	push	{r4, lr}
 8021a22:	4604      	mov	r4, r0
 8021a24:	2104      	movs	r1, #4
 8021a26:	f008 ffae 	bl	802a986 <_ZdlPvj>
 8021a2a:	4620      	mov	r0, r4
 8021a2c:	bd10      	pop	{r4, pc}

08021a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021a2e:	b510      	push	{r4, lr}
 8021a30:	4604      	mov	r4, r0
 8021a32:	2104      	movs	r1, #4
 8021a34:	f008 ffa7 	bl	802a986 <_ZdlPvj>
 8021a38:	4620      	mov	r0, r4
 8021a3a:	bd10      	pop	{r4, pc}

08021a3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021a3c:	b510      	push	{r4, lr}
 8021a3e:	4604      	mov	r4, r0
 8021a40:	2104      	movs	r1, #4
 8021a42:	f008 ffa0 	bl	802a986 <_ZdlPvj>
 8021a46:	4620      	mov	r0, r4
 8021a48:	bd10      	pop	{r4, pc}

08021a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021a4a:	b510      	push	{r4, lr}
 8021a4c:	4604      	mov	r4, r0
 8021a4e:	2104      	movs	r1, #4
 8021a50:	f008 ff99 	bl	802a986 <_ZdlPvj>
 8021a54:	4620      	mov	r0, r4
 8021a56:	bd10      	pop	{r4, pc}

08021a58 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021a58:	b510      	push	{r4, lr}
 8021a5a:	4604      	mov	r4, r0
 8021a5c:	2104      	movs	r1, #4
 8021a5e:	f008 ff92 	bl	802a986 <_ZdlPvj>
 8021a62:	4620      	mov	r0, r4
 8021a64:	bd10      	pop	{r4, pc}

08021a66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021a66:	b510      	push	{r4, lr}
 8021a68:	4604      	mov	r4, r0
 8021a6a:	2104      	movs	r1, #4
 8021a6c:	f008 ff8b 	bl	802a986 <_ZdlPvj>
 8021a70:	4620      	mov	r0, r4
 8021a72:	bd10      	pop	{r4, pc}

08021a74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021a74:	b510      	push	{r4, lr}
 8021a76:	4604      	mov	r4, r0
 8021a78:	2104      	movs	r1, #4
 8021a7a:	f008 ff84 	bl	802a986 <_ZdlPvj>
 8021a7e:	4620      	mov	r0, r4
 8021a80:	bd10      	pop	{r4, pc}

08021a82 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021a82:	b510      	push	{r4, lr}
 8021a84:	4604      	mov	r4, r0
 8021a86:	2104      	movs	r1, #4
 8021a88:	f008 ff7d 	bl	802a986 <_ZdlPvj>
 8021a8c:	4620      	mov	r0, r4
 8021a8e:	bd10      	pop	{r4, pc}

08021a90 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021a90:	b510      	push	{r4, lr}
 8021a92:	4604      	mov	r4, r0
 8021a94:	2104      	movs	r1, #4
 8021a96:	f008 ff76 	bl	802a986 <_ZdlPvj>
 8021a9a:	4620      	mov	r0, r4
 8021a9c:	bd10      	pop	{r4, pc}

08021a9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021a9e:	b510      	push	{r4, lr}
 8021aa0:	4604      	mov	r4, r0
 8021aa2:	2104      	movs	r1, #4
 8021aa4:	f008 ff6f 	bl	802a986 <_ZdlPvj>
 8021aa8:	4620      	mov	r0, r4
 8021aaa:	bd10      	pop	{r4, pc}

08021aac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021aac:	b510      	push	{r4, lr}
 8021aae:	4604      	mov	r4, r0
 8021ab0:	2104      	movs	r1, #4
 8021ab2:	f008 ff68 	bl	802a986 <_ZdlPvj>
 8021ab6:	4620      	mov	r0, r4
 8021ab8:	bd10      	pop	{r4, pc}

08021aba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021aba:	b510      	push	{r4, lr}
 8021abc:	4604      	mov	r4, r0
 8021abe:	2104      	movs	r1, #4
 8021ac0:	f008 ff61 	bl	802a986 <_ZdlPvj>
 8021ac4:	4620      	mov	r0, r4
 8021ac6:	bd10      	pop	{r4, pc}

08021ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021ac8:	b510      	push	{r4, lr}
 8021aca:	4604      	mov	r4, r0
 8021acc:	2104      	movs	r1, #4
 8021ace:	f008 ff5a 	bl	802a986 <_ZdlPvj>
 8021ad2:	4620      	mov	r0, r4
 8021ad4:	bd10      	pop	{r4, pc}

08021ad6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021ad6:	b510      	push	{r4, lr}
 8021ad8:	4604      	mov	r4, r0
 8021ada:	2104      	movs	r1, #4
 8021adc:	f008 ff53 	bl	802a986 <_ZdlPvj>
 8021ae0:	4620      	mov	r0, r4
 8021ae2:	bd10      	pop	{r4, pc}

08021ae4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8021ae4:	b510      	push	{r4, lr}
 8021ae6:	4604      	mov	r4, r0
 8021ae8:	2104      	movs	r1, #4
 8021aea:	f008 ff4c 	bl	802a986 <_ZdlPvj>
 8021aee:	4620      	mov	r0, r4
 8021af0:	bd10      	pop	{r4, pc}

08021af2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021af2:	b510      	push	{r4, lr}
 8021af4:	4604      	mov	r4, r0
 8021af6:	2104      	movs	r1, #4
 8021af8:	f008 ff45 	bl	802a986 <_ZdlPvj>
 8021afc:	4620      	mov	r0, r4
 8021afe:	bd10      	pop	{r4, pc}

08021b00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021b00:	b510      	push	{r4, lr}
 8021b02:	4604      	mov	r4, r0
 8021b04:	2104      	movs	r1, #4
 8021b06:	f008 ff3e 	bl	802a986 <_ZdlPvj>
 8021b0a:	4620      	mov	r0, r4
 8021b0c:	bd10      	pop	{r4, pc}

08021b0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021b0e:	b510      	push	{r4, lr}
 8021b10:	4604      	mov	r4, r0
 8021b12:	2104      	movs	r1, #4
 8021b14:	f008 ff37 	bl	802a986 <_ZdlPvj>
 8021b18:	4620      	mov	r0, r4
 8021b1a:	bd10      	pop	{r4, pc}

08021b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021b1c:	b510      	push	{r4, lr}
 8021b1e:	4604      	mov	r4, r0
 8021b20:	2104      	movs	r1, #4
 8021b22:	f008 ff30 	bl	802a986 <_ZdlPvj>
 8021b26:	4620      	mov	r0, r4
 8021b28:	bd10      	pop	{r4, pc}

08021b2a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021b2a:	b510      	push	{r4, lr}
 8021b2c:	4604      	mov	r4, r0
 8021b2e:	2104      	movs	r1, #4
 8021b30:	f008 ff29 	bl	802a986 <_ZdlPvj>
 8021b34:	4620      	mov	r0, r4
 8021b36:	bd10      	pop	{r4, pc}

08021b38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021b38:	b510      	push	{r4, lr}
 8021b3a:	4604      	mov	r4, r0
 8021b3c:	2104      	movs	r1, #4
 8021b3e:	f008 ff22 	bl	802a986 <_ZdlPvj>
 8021b42:	4620      	mov	r0, r4
 8021b44:	bd10      	pop	{r4, pc}

08021b46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021b46:	b510      	push	{r4, lr}
 8021b48:	4604      	mov	r4, r0
 8021b4a:	2104      	movs	r1, #4
 8021b4c:	f008 ff1b 	bl	802a986 <_ZdlPvj>
 8021b50:	4620      	mov	r0, r4
 8021b52:	bd10      	pop	{r4, pc}

08021b54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021b54:	b510      	push	{r4, lr}
 8021b56:	4604      	mov	r4, r0
 8021b58:	2104      	movs	r1, #4
 8021b5a:	f008 ff14 	bl	802a986 <_ZdlPvj>
 8021b5e:	4620      	mov	r0, r4
 8021b60:	bd10      	pop	{r4, pc}

08021b62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021b62:	b510      	push	{r4, lr}
 8021b64:	4604      	mov	r4, r0
 8021b66:	2104      	movs	r1, #4
 8021b68:	f008 ff0d 	bl	802a986 <_ZdlPvj>
 8021b6c:	4620      	mov	r0, r4
 8021b6e:	bd10      	pop	{r4, pc}

08021b70 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021b70:	b510      	push	{r4, lr}
 8021b72:	4604      	mov	r4, r0
 8021b74:	2104      	movs	r1, #4
 8021b76:	f008 ff06 	bl	802a986 <_ZdlPvj>
 8021b7a:	4620      	mov	r0, r4
 8021b7c:	bd10      	pop	{r4, pc}
	...

08021b80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b84:	b091      	sub	sp, #68	; 0x44
 8021b86:	469b      	mov	fp, r3
 8021b88:	4616      	mov	r6, r2
 8021b8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021b8e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8021b92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021b96:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8021b9a:	4604      	mov	r4, r0
 8021b9c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8021ba0:	4640      	mov	r0, r8
 8021ba2:	460d      	mov	r5, r1
 8021ba4:	4659      	mov	r1, fp
 8021ba6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8021baa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8021bae:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8021bb2:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8021bb6:	f7f6 febb 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 8021bba:	4631      	mov	r1, r6
 8021bbc:	4640      	mov	r0, r8
 8021bbe:	f7f6 feb7 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 8021bc2:	4b74      	ldr	r3, [pc, #464]	; (8021d94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8021bc4:	8818      	ldrh	r0, [r3, #0]
 8021bc6:	4b74      	ldr	r3, [pc, #464]	; (8021d98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8021bc8:	b202      	sxth	r2, r0
 8021bca:	8819      	ldrh	r1, [r3, #0]
 8021bcc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021bd0:	b20e      	sxth	r6, r1
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	da07      	bge.n	8021be6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8021bd6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8021bda:	4463      	add	r3, ip
 8021bdc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8021be0:	2300      	movs	r3, #0
 8021be2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8021be6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021bea:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8021bee:	1ad2      	subs	r2, r2, r3
 8021bf0:	4594      	cmp	ip, r2
 8021bf2:	bfc4      	itt	gt
 8021bf4:	1ac2      	subgt	r2, r0, r3
 8021bf6:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8021bfa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021bfe:	2a00      	cmp	r2, #0
 8021c00:	da07      	bge.n	8021c12 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8021c02:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8021c06:	4462      	add	r2, ip
 8021c08:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8021c12:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8021c16:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8021c1a:	eba6 060a 	sub.w	r6, r6, sl
 8021c1e:	42b2      	cmp	r2, r6
 8021c20:	bfc4      	itt	gt
 8021c22:	eba1 020a 	subgt.w	r2, r1, sl
 8021c26:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8021c2a:	4a5c      	ldr	r2, [pc, #368]	; (8021d9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8021c2c:	7812      	ldrb	r2, [r2, #0]
 8021c2e:	b9a2      	cbnz	r2, 8021c5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8021c30:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8021c34:	4286      	cmp	r6, r0
 8021c36:	4640      	mov	r0, r8
 8021c38:	9303      	str	r3, [sp, #12]
 8021c3a:	bf14      	ite	ne
 8021c3c:	2600      	movne	r6, #0
 8021c3e:	2601      	moveq	r6, #1
 8021c40:	f7f6 feb9 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021c44:	9b03      	ldr	r3, [sp, #12]
 8021c46:	b160      	cbz	r0, 8021c62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8021c48:	2300      	movs	r3, #0
 8021c4a:	8023      	strh	r3, [r4, #0]
 8021c4c:	8063      	strh	r3, [r4, #2]
 8021c4e:	80a3      	strh	r3, [r4, #4]
 8021c50:	4620      	mov	r0, r4
 8021c52:	80e3      	strh	r3, [r4, #6]
 8021c54:	b011      	add	sp, #68	; 0x44
 8021c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c5a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8021c5e:	428e      	cmp	r6, r1
 8021c60:	e7e9      	b.n	8021c36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8021c62:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021c66:	a90e      	add	r1, sp, #56	; 0x38
 8021c68:	900e      	str	r0, [sp, #56]	; 0x38
 8021c6a:	a80c      	add	r0, sp, #48	; 0x30
 8021c6c:	9205      	str	r2, [sp, #20]
 8021c6e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8021c72:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8021c76:	9206      	str	r2, [sp, #24]
 8021c78:	f8bb 2000 	ldrh.w	r2, [fp]
 8021c7c:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8021c80:	1a9b      	subs	r3, r3, r2
 8021c82:	b21b      	sxth	r3, r3
 8021c84:	9303      	str	r3, [sp, #12]
 8021c86:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021c8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8021da4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021c8e:	ebaa 0a03 	sub.w	sl, sl, r3
 8021c92:	fa0f f38a 	sxth.w	r3, sl
 8021c96:	9304      	str	r3, [sp, #16]
 8021c98:	9b03      	ldr	r3, [sp, #12]
 8021c9a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8021c9e:	9b04      	ldr	r3, [sp, #16]
 8021ca0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021ca4:	9b05      	ldr	r3, [sp, #20]
 8021ca6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021caa:	9b06      	ldr	r3, [sp, #24]
 8021cac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021cb0:	f7f9 fefe 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021cb4:	4640      	mov	r0, r8
 8021cb6:	f7f9 fed3 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021cba:	a80e      	add	r0, sp, #56	; 0x38
 8021cbc:	f7f9 fed0 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021cc0:	4b37      	ldr	r3, [pc, #220]	; (8021da0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021cc2:	4628      	mov	r0, r5
 8021cc4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8021cc8:	881b      	ldrh	r3, [r3, #0]
 8021cca:	9307      	str	r3, [sp, #28]
 8021ccc:	682b      	ldr	r3, [r5, #0]
 8021cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021cd0:	4798      	blx	r3
 8021cd2:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8021cd6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8021cda:	4681      	mov	r9, r0
 8021cdc:	f8db 0000 	ldr.w	r0, [fp]
 8021ce0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8021ce4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8021ce6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021cea:	6803      	ldr	r3, [r0, #0]
 8021cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021cee:	4798      	blx	r3
 8021cf0:	4607      	mov	r7, r0
 8021cf2:	f8db 0000 	ldr.w	r0, [fp]
 8021cf6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8021cfa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021cfe:	6803      	ldr	r3, [r0, #0]
 8021d00:	9109      	str	r1, [sp, #36]	; 0x24
 8021d02:	9208      	str	r2, [sp, #32]
 8021d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d06:	4798      	blx	r3
 8021d08:	f010 0f01 	tst.w	r0, #1
 8021d0c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021d10:	d012      	beq.n	8021d38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8021d12:	f8db 0000 	ldr.w	r0, [fp]
 8021d16:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8021d1a:	6803      	ldr	r3, [r0, #0]
 8021d1c:	9200      	str	r2, [sp, #0]
 8021d1e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8021d20:	462b      	mov	r3, r5
 8021d22:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021d26:	47b0      	blx	r6
 8021d28:	9b03      	ldr	r3, [sp, #12]
 8021d2a:	8023      	strh	r3, [r4, #0]
 8021d2c:	9b04      	ldr	r3, [sp, #16]
 8021d2e:	8063      	strh	r3, [r4, #2]
 8021d30:	9b05      	ldr	r3, [sp, #20]
 8021d32:	80a3      	strh	r3, [r4, #4]
 8021d34:	9b06      	ldr	r3, [sp, #24]
 8021d36:	e78b      	b.n	8021c50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8021d38:	fb09 f202 	mul.w	r2, r9, r2
 8021d3c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8021d40:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021d44:	440f      	add	r7, r1
 8021d46:	b166      	cbz	r6, 8021d62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021d48:	9a07      	ldr	r2, [sp, #28]
 8021d4a:	4592      	cmp	sl, r2
 8021d4c:	d109      	bne.n	8021d62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021d4e:	f8db 0000 	ldr.w	r0, [fp]
 8021d52:	fb09 f303 	mul.w	r3, r9, r3
 8021d56:	4629      	mov	r1, r5
 8021d58:	6802      	ldr	r2, [r0, #0]
 8021d5a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8021d5c:	463a      	mov	r2, r7
 8021d5e:	47b0      	blx	r6
 8021d60:	e7e2      	b.n	8021d28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021d62:	fb0a f303 	mul.w	r3, sl, r3
 8021d66:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8021d6a:	f8df b038 	ldr.w	fp, [pc, #56]	; 8021da4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021d6e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8021d72:	4545      	cmp	r5, r8
 8021d74:	d2d8      	bcs.n	8021d28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021d76:	f8db 0000 	ldr.w	r0, [fp]
 8021d7a:	4629      	mov	r1, r5
 8021d7c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021d80:	4435      	add	r5, r6
 8021d82:	6802      	ldr	r2, [r0, #0]
 8021d84:	005b      	lsls	r3, r3, #1
 8021d86:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8021d8a:	463a      	mov	r2, r7
 8021d8c:	47d0      	blx	sl
 8021d8e:	444f      	add	r7, r9
 8021d90:	e7ef      	b.n	8021d72 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8021d92:	bf00      	nop
 8021d94:	20015fb0 	.word	0x20015fb0
 8021d98:	20015fb2 	.word	0x20015fb2
 8021d9c:	20015fb4 	.word	0x20015fb4
 8021da0:	20015fb6 	.word	0x20015fb6
 8021da4:	20015fbc 	.word	0x20015fbc

08021da8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021daa:	4606      	mov	r6, r0
 8021dac:	b087      	sub	sp, #28
 8021dae:	460c      	mov	r4, r1
 8021db0:	4617      	mov	r7, r2
 8021db2:	461d      	mov	r5, r3
 8021db4:	b333      	cbz	r3, 8021e04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021db6:	4608      	mov	r0, r1
 8021db8:	f7f6 fdfd 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021dbc:	bb10      	cbnz	r0, 8021e04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021dbe:	6820      	ldr	r0, [r4, #0]
 8021dc0:	ab04      	add	r3, sp, #16
 8021dc2:	6861      	ldr	r1, [r4, #4]
 8021dc4:	4c1b      	ldr	r4, [pc, #108]	; (8021e34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021dc6:	c303      	stmia	r3!, {r0, r1}
 8021dc8:	a804      	add	r0, sp, #16
 8021dca:	f7f9 fe49 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021dce:	6820      	ldr	r0, [r4, #0]
 8021dd0:	6803      	ldr	r3, [r0, #0]
 8021dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021dd4:	4798      	blx	r3
 8021dd6:	2dff      	cmp	r5, #255	; 0xff
 8021dd8:	d016      	beq.n	8021e08 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8021dda:	f010 0f08 	tst.w	r0, #8
 8021dde:	6820      	ldr	r0, [r4, #0]
 8021de0:	d015      	beq.n	8021e0e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021de2:	2400      	movs	r4, #0
 8021de4:	6801      	ldr	r1, [r0, #0]
 8021de6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021dea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021dee:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021df2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021df6:	9401      	str	r4, [sp, #4]
 8021df8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021dfc:	9400      	str	r4, [sp, #0]
 8021dfe:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8021e00:	4639      	mov	r1, r7
 8021e02:	47a0      	blx	r4
 8021e04:	b007      	add	sp, #28
 8021e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e08:	f010 0f02 	tst.w	r0, #2
 8021e0c:	e7e7      	b.n	8021dde <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8021e0e:	6803      	ldr	r3, [r0, #0]
 8021e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e12:	4798      	blx	r3
 8021e14:	4b08      	ldr	r3, [pc, #32]	; (8021e38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021e16:	4601      	mov	r1, r0
 8021e18:	4630      	mov	r0, r6
 8021e1a:	881a      	ldrh	r2, [r3, #0]
 8021e1c:	6833      	ldr	r3, [r6, #0]
 8021e1e:	e9cd 7500 	strd	r7, r5, [sp]
 8021e22:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8021e24:	ab04      	add	r3, sp, #16
 8021e26:	47a8      	blx	r5
 8021e28:	6820      	ldr	r0, [r4, #0]
 8021e2a:	6803      	ldr	r3, [r0, #0]
 8021e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e2e:	4798      	blx	r3
 8021e30:	e7e8      	b.n	8021e04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021e32:	bf00      	nop
 8021e34:	20015fbc 	.word	0x20015fbc
 8021e38:	20015fb6 	.word	0x20015fb6

08021e3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e40:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8021e44:	4688      	mov	r8, r1
 8021e46:	4614      	mov	r4, r2
 8021e48:	461d      	mov	r5, r3
 8021e4a:	9e08      	ldr	r6, [sp, #32]
 8021e4c:	2f00      	cmp	r7, #0
 8021e4e:	f000 80ab 	beq.w	8021fa8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021e52:	4618      	mov	r0, r3
 8021e54:	f7f6 fdaf 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021e58:	2800      	cmp	r0, #0
 8021e5a:	f040 80a5 	bne.w	8021fa8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021e5e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021e62:	2fff      	cmp	r7, #255	; 0xff
 8021e64:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021e68:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021e6c:	fb04 1303 	mla	r3, r4, r3, r1
 8021e70:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8021e74:	eba4 0200 	sub.w	r2, r4, r0
 8021e78:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021e7c:	fb04 f505 	mul.w	r5, r4, r5
 8021e80:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8021e84:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021e88:	d04a      	beq.n	8021f20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8021e8a:	b2bc      	uxth	r4, r7
 8021e8c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8021e90:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8021e94:	fa5f f788 	uxtb.w	r7, r8
 8021e98:	b2f3      	uxtb	r3, r6
 8021e9a:	0040      	lsls	r0, r0, #1
 8021e9c:	fb0e fe04 	mul.w	lr, lr, r4
 8021ea0:	4367      	muls	r7, r4
 8021ea2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021ea6:	4363      	muls	r3, r4
 8021ea8:	fa1f fc8c 	uxth.w	ip, ip
 8021eac:	42a9      	cmp	r1, r5
 8021eae:	d27b      	bcs.n	8021fa8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021eb0:	eb01 0900 	add.w	r9, r1, r0
 8021eb4:	4549      	cmp	r1, r9
 8021eb6:	d231      	bcs.n	8021f1c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8021eb8:	880a      	ldrh	r2, [r1, #0]
 8021eba:	1214      	asrs	r4, r2, #8
 8021ebc:	10d6      	asrs	r6, r2, #3
 8021ebe:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021ec2:	00d2      	lsls	r2, r2, #3
 8021ec4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021ec8:	b2d2      	uxtb	r2, r2
 8021eca:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021ece:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021ed2:	fb14 f40c 	smulbb	r4, r4, ip
 8021ed6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021eda:	fb12 f20c 	smulbb	r2, r2, ip
 8021ede:	fb16 f60c 	smulbb	r6, r6, ip
 8021ee2:	4474      	add	r4, lr
 8021ee4:	441a      	add	r2, r3
 8021ee6:	b2a4      	uxth	r4, r4
 8021ee8:	443e      	add	r6, r7
 8021eea:	b292      	uxth	r2, r2
 8021eec:	f104 0a01 	add.w	sl, r4, #1
 8021ef0:	b2b6      	uxth	r6, r6
 8021ef2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021ef6:	f102 0a01 	add.w	sl, r2, #1
 8021efa:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021efe:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021f02:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021f06:	4322      	orrs	r2, r4
 8021f08:	1c74      	adds	r4, r6, #1
 8021f0a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021f0e:	0976      	lsrs	r6, r6, #5
 8021f10:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021f14:	4332      	orrs	r2, r6
 8021f16:	f821 2b02 	strh.w	r2, [r1], #2
 8021f1a:	e7cb      	b.n	8021eb4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8021f1c:	4441      	add	r1, r8
 8021f1e:	e7c5      	b.n	8021eac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8021f20:	0973      	lsrs	r3, r6, #5
 8021f22:	4f22      	ldr	r7, [pc, #136]	; (8021fac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8021f24:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021f28:	ea08 0707 	and.w	r7, r8, r7
 8021f2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021f30:	433b      	orrs	r3, r7
 8021f32:	07e7      	lsls	r7, r4, #31
 8021f34:	ea43 0306 	orr.w	r3, r3, r6
 8021f38:	b29b      	uxth	r3, r3
 8021f3a:	d50b      	bpl.n	8021f54 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8021f3c:	0040      	lsls	r0, r0, #1
 8021f3e:	0052      	lsls	r2, r2, #1
 8021f40:	42a9      	cmp	r1, r5
 8021f42:	d231      	bcs.n	8021fa8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021f44:	180c      	adds	r4, r1, r0
 8021f46:	42a1      	cmp	r1, r4
 8021f48:	d202      	bcs.n	8021f50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8021f4a:	f821 3b02 	strh.w	r3, [r1], #2
 8021f4e:	e7fa      	b.n	8021f46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8021f50:	4411      	add	r1, r2
 8021f52:	e7f5      	b.n	8021f40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8021f54:	078e      	lsls	r6, r1, #30
 8021f56:	d008      	beq.n	8021f6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8021f58:	0066      	lsls	r6, r4, #1
 8021f5a:	460a      	mov	r2, r1
 8021f5c:	42aa      	cmp	r2, r5
 8021f5e:	d202      	bcs.n	8021f66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8021f60:	8013      	strh	r3, [r2, #0]
 8021f62:	4432      	add	r2, r6
 8021f64:	e7fa      	b.n	8021f5c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8021f66:	3102      	adds	r1, #2
 8021f68:	3801      	subs	r0, #1
 8021f6a:	07c2      	lsls	r2, r0, #31
 8021f6c:	d50b      	bpl.n	8021f86 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8021f6e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8021f72:	0066      	lsls	r6, r4, #1
 8021f74:	3a01      	subs	r2, #1
 8021f76:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021f7a:	42aa      	cmp	r2, r5
 8021f7c:	d202      	bcs.n	8021f84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8021f7e:	8013      	strh	r3, [r2, #0]
 8021f80:	4432      	add	r2, r6
 8021f82:	e7fa      	b.n	8021f7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8021f84:	3801      	subs	r0, #1
 8021f86:	b178      	cbz	r0, 8021fa8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021f88:	1040      	asrs	r0, r0, #1
 8021f8a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021f8e:	0080      	lsls	r0, r0, #2
 8021f90:	0064      	lsls	r4, r4, #1
 8021f92:	42a9      	cmp	r1, r5
 8021f94:	d208      	bcs.n	8021fa8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021f96:	180e      	adds	r6, r1, r0
 8021f98:	460a      	mov	r2, r1
 8021f9a:	42b2      	cmp	r2, r6
 8021f9c:	d202      	bcs.n	8021fa4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021f9e:	f842 3b04 	str.w	r3, [r2], #4
 8021fa2:	e7fa      	b.n	8021f9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8021fa4:	4421      	add	r1, r4
 8021fa6:	e7f4      	b.n	8021f92 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8021fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021fac:	00fff800 	.word	0x00fff800

08021fb0 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021fb0:	2200      	movs	r2, #0
 8021fb2:	4910      	ldr	r1, [pc, #64]	; (8021ff4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8021fb4:	6042      	str	r2, [r0, #4]
 8021fb6:	6001      	str	r1, [r0, #0]
 8021fb8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021fbc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021fc0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021fc4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021fc8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021fcc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021fd0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8021fd4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8021fd8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021fdc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021fe0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8021fe4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8021fe8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8021fec:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8021ff0:	4770      	bx	lr
 8021ff2:	bf00      	nop
 8021ff4:	08030a70 	.word	0x08030a70

08021ff8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ffc:	b08d      	sub	sp, #52	; 0x34
 8021ffe:	460d      	mov	r5, r1
 8022000:	4604      	mov	r4, r0
 8022002:	4699      	mov	r9, r3
 8022004:	6808      	ldr	r0, [r1, #0]
 8022006:	ab08      	add	r3, sp, #32
 8022008:	6849      	ldr	r1, [r1, #4]
 802200a:	c303      	stmia	r3!, {r0, r1}
 802200c:	6810      	ldr	r0, [r2, #0]
 802200e:	ab0a      	add	r3, sp, #40	; 0x28
 8022010:	6851      	ldr	r1, [r2, #4]
 8022012:	c303      	stmia	r3!, {r0, r1}
 8022014:	a808      	add	r0, sp, #32
 8022016:	f7f9 fd23 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802201a:	4629      	mov	r1, r5
 802201c:	a80a      	add	r0, sp, #40	; 0x28
 802201e:	4d67      	ldr	r5, [pc, #412]	; (80221bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022020:	f7f9 fd46 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022024:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022028:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802202c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022030:	6828      	ldr	r0, [r5, #0]
 8022032:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022036:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 802203a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 802203e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022042:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022046:	440a      	add	r2, r1
 8022048:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802204c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8022050:	4413      	add	r3, r2
 8022052:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022056:	6803      	ldr	r3, [r0, #0]
 8022058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802205a:	4798      	blx	r3
 802205c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022060:	d119      	bne.n	8022096 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8022062:	f010 0f20 	tst.w	r0, #32
 8022066:	6828      	ldr	r0, [r5, #0]
 8022068:	d018      	beq.n	802209c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 802206a:	2500      	movs	r5, #0
 802206c:	6801      	ldr	r1, [r0, #0]
 802206e:	b2b6      	uxth	r6, r6
 8022070:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022074:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022078:	9601      	str	r6, [sp, #4]
 802207a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 802207e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8022082:	9502      	str	r5, [sp, #8]
 8022084:	fa1f f588 	uxth.w	r5, r8
 8022088:	9500      	str	r5, [sp, #0]
 802208a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 802208c:	4621      	mov	r1, r4
 802208e:	47a8      	blx	r5
 8022090:	b00d      	add	sp, #52	; 0x34
 8022092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022096:	f010 0f40 	tst.w	r0, #64	; 0x40
 802209a:	e7e4      	b.n	8022066 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802209c:	6803      	ldr	r3, [r0, #0]
 802209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80220a0:	4798      	blx	r3
 80220a2:	4947      	ldr	r1, [pc, #284]	; (80221c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80220a4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80220a8:	880b      	ldrh	r3, [r1, #0]
 80220aa:	468a      	mov	sl, r1
 80220ac:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80220b0:	fb03 5202 	mla	r2, r3, r2, r5
 80220b4:	4373      	muls	r3, r6
 80220b6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80220ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80220be:	9307      	str	r3, [sp, #28]
 80220c0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80220c4:	9306      	str	r3, [sp, #24]
 80220c6:	9b07      	ldr	r3, [sp, #28]
 80220c8:	4298      	cmp	r0, r3
 80220ca:	d270      	bcs.n	80221ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 80220cc:	9b06      	ldr	r3, [sp, #24]
 80220ce:	4621      	mov	r1, r4
 80220d0:	eb00 0b03 	add.w	fp, r0, r3
 80220d4:	4558      	cmp	r0, fp
 80220d6:	d25d      	bcs.n	8022194 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 80220d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80220dc:	0e23      	lsrs	r3, r4, #24
 80220de:	d014      	beq.n	802210a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80220e0:	2bff      	cmp	r3, #255	; 0xff
 80220e2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80220e6:	d112      	bne.n	802210e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80220e8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80220ec:	d10f      	bne.n	802210e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80220ee:	0963      	lsrs	r3, r4, #5
 80220f0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80220f4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80220f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80220fc:	f02c 0c07 	bic.w	ip, ip, #7
 8022100:	ea43 0c0c 	orr.w	ip, r3, ip
 8022104:	ea4c 0404 	orr.w	r4, ip, r4
 8022108:	8004      	strh	r4, [r0, #0]
 802210a:	3002      	adds	r0, #2
 802210c:	e7e2      	b.n	80220d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 802210e:	fb09 f303 	mul.w	r3, r9, r3
 8022112:	8807      	ldrh	r7, [r0, #0]
 8022114:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022118:	fa5f fc8c 	uxtb.w	ip, ip
 802211c:	1c5a      	adds	r2, r3, #1
 802211e:	123e      	asrs	r6, r7, #8
 8022120:	10fd      	asrs	r5, r7, #3
 8022122:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022126:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802212a:	00ff      	lsls	r7, r7, #3
 802212c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022130:	1212      	asrs	r2, r2, #8
 8022132:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022136:	b293      	uxth	r3, r2
 8022138:	43d2      	mvns	r2, r2
 802213a:	b2ff      	uxtb	r7, r7
 802213c:	fb1e fe03 	smulbb	lr, lr, r3
 8022140:	b2d2      	uxtb	r2, r2
 8022142:	fb1c fc03 	smulbb	ip, ip, r3
 8022146:	b2e4      	uxtb	r4, r4
 8022148:	fb06 e602 	mla	r6, r6, r2, lr
 802214c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022150:	fb14 f403 	smulbb	r4, r4, r3
 8022154:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8022158:	b2b6      	uxth	r6, r6
 802215a:	fb05 c502 	mla	r5, r5, r2, ip
 802215e:	fb07 4702 	mla	r7, r7, r2, r4
 8022162:	f106 0e01 	add.w	lr, r6, #1
 8022166:	b2ad      	uxth	r5, r5
 8022168:	b2bf      	uxth	r7, r7
 802216a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802216e:	f105 0c01 	add.w	ip, r5, #1
 8022172:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8022176:	1c7e      	adds	r6, r7, #1
 8022178:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802217c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8022180:	096d      	lsrs	r5, r5, #5
 8022182:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022186:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802218a:	ea46 060e 	orr.w	r6, r6, lr
 802218e:	432e      	orrs	r6, r5
 8022190:	8006      	strh	r6, [r0, #0]
 8022192:	e7ba      	b.n	802210a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022194:	f8ba 3000 	ldrh.w	r3, [sl]
 8022198:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 802219c:	eba3 0308 	sub.w	r3, r3, r8
 80221a0:	eba4 0408 	sub.w	r4, r4, r8
 80221a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80221a8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80221ac:	e78b      	b.n	80220c6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80221ae:	4b03      	ldr	r3, [pc, #12]	; (80221bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80221b0:	6818      	ldr	r0, [r3, #0]
 80221b2:	6803      	ldr	r3, [r0, #0]
 80221b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221b6:	4798      	blx	r3
 80221b8:	e76a      	b.n	8022090 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80221ba:	bf00      	nop
 80221bc:	20015fbc 	.word	0x20015fbc
 80221c0:	20015fb6 	.word	0x20015fb6

080221c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80221c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80221c8:	b085      	sub	sp, #20
 80221ca:	6810      	ldr	r0, [r2, #0]
 80221cc:	460c      	mov	r4, r1
 80221ce:	6851      	ldr	r1, [r2, #4]
 80221d0:	466d      	mov	r5, sp
 80221d2:	4616      	mov	r6, r2
 80221d4:	c503      	stmia	r5!, {r0, r1}
 80221d6:	6818      	ldr	r0, [r3, #0]
 80221d8:	6859      	ldr	r1, [r3, #4]
 80221da:	c503      	stmia	r5!, {r0, r1}
 80221dc:	4668      	mov	r0, sp
 80221de:	4d2e      	ldr	r5, [pc, #184]	; (8022298 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 80221e0:	f7f9 fc3e 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80221e4:	4631      	mov	r1, r6
 80221e6:	a802      	add	r0, sp, #8
 80221e8:	4e2c      	ldr	r6, [pc, #176]	; (802229c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 80221ea:	f7f9 fc61 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80221ee:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80221f2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80221f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80221fa:	6828      	ldr	r0, [r5, #0]
 80221fc:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022200:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022204:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022208:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802220c:	f8bd 1000 	ldrh.w	r1, [sp]
 8022210:	440a      	add	r2, r1
 8022212:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022216:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802221a:	4413      	add	r3, r2
 802221c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022220:	6803      	ldr	r3, [r0, #0]
 8022222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022224:	4798      	blx	r3
 8022226:	8833      	ldrh	r3, [r6, #0]
 8022228:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802222c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022230:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022234:	f8df e068 	ldr.w	lr, [pc, #104]	; 80222a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022238:	fb03 1202 	mla	r2, r3, r2, r1
 802223c:	fb08 f303 	mul.w	r3, r8, r3
 8022240:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022244:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022248:	4298      	cmp	r0, r3
 802224a:	d21d      	bcs.n	8022288 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 802224c:	eb00 080c 	add.w	r8, r0, ip
 8022250:	4540      	cmp	r0, r8
 8022252:	d20f      	bcs.n	8022274 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022254:	f854 1b04 	ldr.w	r1, [r4], #4
 8022258:	ea4f 1951 	mov.w	r9, r1, lsr #5
 802225c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8022260:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022264:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022268:	ea42 0209 	orr.w	r2, r2, r9
 802226c:	430a      	orrs	r2, r1
 802226e:	f820 2b02 	strh.w	r2, [r0], #2
 8022272:	e7ed      	b.n	8022250 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8022274:	8832      	ldrh	r2, [r6, #0]
 8022276:	1bd2      	subs	r2, r2, r7
 8022278:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802227c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8022280:	1bd2      	subs	r2, r2, r7
 8022282:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8022286:	e7df      	b.n	8022248 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8022288:	6828      	ldr	r0, [r5, #0]
 802228a:	6803      	ldr	r3, [r0, #0]
 802228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802228e:	4798      	blx	r3
 8022290:	b005      	add	sp, #20
 8022292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022296:	bf00      	nop
 8022298:	20015fbc 	.word	0x20015fbc
 802229c:	20015fb6 	.word	0x20015fb6
 80222a0:	fffff800 	.word	0xfffff800

080222a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80222a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222a8:	b08e      	sub	sp, #56	; 0x38
 80222aa:	460e      	mov	r6, r1
 80222ac:	4604      	mov	r4, r0
 80222ae:	461d      	mov	r5, r3
 80222b0:	6808      	ldr	r0, [r1, #0]
 80222b2:	ab0a      	add	r3, sp, #40	; 0x28
 80222b4:	6849      	ldr	r1, [r1, #4]
 80222b6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 802248c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80222ba:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8022490 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80222be:	c303      	stmia	r3!, {r0, r1}
 80222c0:	6810      	ldr	r0, [r2, #0]
 80222c2:	ab0c      	add	r3, sp, #48	; 0x30
 80222c4:	6851      	ldr	r1, [r2, #4]
 80222c6:	c303      	stmia	r3!, {r0, r1}
 80222c8:	a80a      	add	r0, sp, #40	; 0x28
 80222ca:	f7f9 fbc9 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80222ce:	4631      	mov	r1, r6
 80222d0:	a80c      	add	r0, sp, #48	; 0x30
 80222d2:	f7f9 fbed 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80222d6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80222da:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80222de:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80222e2:	f8d8 0000 	ldr.w	r0, [r8]
 80222e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80222ea:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80222ee:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80222f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80222f6:	440c      	add	r4, r1
 80222f8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80222fc:	440a      	add	r2, r1
 80222fe:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8022302:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8022306:	4413      	add	r3, r2
 8022308:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802230c:	6803      	ldr	r3, [r0, #0]
 802230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022310:	4798      	blx	r3
 8022312:	2dff      	cmp	r5, #255	; 0xff
 8022314:	d124      	bne.n	8022360 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8022316:	f010 0f01 	tst.w	r0, #1
 802231a:	f8d8 0000 	ldr.w	r0, [r8]
 802231e:	d022      	beq.n	8022366 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022320:	2100      	movs	r1, #0
 8022322:	f04f 0e01 	mov.w	lr, #1
 8022326:	f8d0 c000 	ldr.w	ip, [r0]
 802232a:	b2b6      	uxth	r6, r6
 802232c:	f8cd e018 	str.w	lr, [sp, #24]
 8022330:	b2bf      	uxth	r7, r7
 8022332:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022336:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802233a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802233e:	f8b9 e000 	ldrh.w	lr, [r9]
 8022342:	9503      	str	r5, [sp, #12]
 8022344:	9601      	str	r6, [sp, #4]
 8022346:	9700      	str	r7, [sp, #0]
 8022348:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802234c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022350:	9102      	str	r1, [sp, #8]
 8022352:	4621      	mov	r1, r4
 8022354:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8022358:	47a8      	blx	r5
 802235a:	b00e      	add	sp, #56	; 0x38
 802235c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022360:	f010 0f04 	tst.w	r0, #4
 8022364:	e7d9      	b.n	802231a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8022366:	6803      	ldr	r3, [r0, #0]
 8022368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802236a:	4798      	blx	r3
 802236c:	f8b9 3000 	ldrh.w	r3, [r9]
 8022370:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8022374:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8022378:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 802237c:	435e      	muls	r6, r3
 802237e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022382:	2dff      	cmp	r5, #255	; 0xff
 8022384:	fb03 1202 	mla	r2, r3, r2, r1
 8022388:	ebac 0c07 	sub.w	ip, ip, r7
 802238c:	eba3 0707 	sub.w	r7, r3, r7
 8022390:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022394:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022398:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 802239c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80223a0:	d049      	beq.n	8022436 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80223a2:	43eb      	mvns	r3, r5
 80223a4:	fa1f f985 	uxth.w	r9, r5
 80223a8:	b2db      	uxtb	r3, r3
 80223aa:	42b0      	cmp	r0, r6
 80223ac:	d266      	bcs.n	802247c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80223ae:	eb00 0a0e 	add.w	sl, r0, lr
 80223b2:	4550      	cmp	r0, sl
 80223b4:	4621      	mov	r1, r4
 80223b6:	f104 0403 	add.w	r4, r4, #3
 80223ba:	d25b      	bcs.n	8022474 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80223bc:	8802      	ldrh	r2, [r0, #0]
 80223be:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80223c2:	ea4f 2822 	mov.w	r8, r2, asr #8
 80223c6:	fb11 f109 	smulbb	r1, r1, r9
 80223ca:	10d5      	asrs	r5, r2, #3
 80223cc:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80223d0:	00d2      	lsls	r2, r2, #3
 80223d2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80223d6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80223da:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80223de:	fb08 1803 	mla	r8, r8, r3, r1
 80223e2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80223e6:	b2d2      	uxtb	r2, r2
 80223e8:	fb11 f109 	smulbb	r1, r1, r9
 80223ec:	fa1f f888 	uxth.w	r8, r8
 80223f0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80223f4:	fb05 1503 	mla	r5, r5, r3, r1
 80223f8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80223fc:	fb11 f109 	smulbb	r1, r1, r9
 8022400:	b2ad      	uxth	r5, r5
 8022402:	fb02 1203 	mla	r2, r2, r3, r1
 8022406:	f108 0101 	add.w	r1, r8, #1
 802240a:	b292      	uxth	r2, r2
 802240c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022410:	1c51      	adds	r1, r2, #1
 8022412:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8022416:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802241a:	1c69      	adds	r1, r5, #1
 802241c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022420:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022424:	096d      	lsrs	r5, r5, #5
 8022426:	ea42 0208 	orr.w	r2, r2, r8
 802242a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802242e:	432a      	orrs	r2, r5
 8022430:	f820 2b02 	strh.w	r2, [r0], #2
 8022434:	e7bd      	b.n	80223b2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022436:	4a14      	ldr	r2, [pc, #80]	; (8022488 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022438:	42b0      	cmp	r0, r6
 802243a:	d21f      	bcs.n	802247c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802243c:	eb00 050e 	add.w	r5, r0, lr
 8022440:	42a8      	cmp	r0, r5
 8022442:	4621      	mov	r1, r4
 8022444:	f104 0403 	add.w	r4, r4, #3
 8022448:	d210      	bcs.n	802246c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802244a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802244e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022452:	00db      	lsls	r3, r3, #3
 8022454:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022458:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802245c:	430b      	orrs	r3, r1
 802245e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022462:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8022466:	f820 3b02 	strh.w	r3, [r0], #2
 802246a:	e7e9      	b.n	8022440 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 802246c:	4438      	add	r0, r7
 802246e:	eb01 040c 	add.w	r4, r1, ip
 8022472:	e7e1      	b.n	8022438 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8022474:	4438      	add	r0, r7
 8022476:	eb01 040c 	add.w	r4, r1, ip
 802247a:	e796      	b.n	80223aa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 802247c:	4b03      	ldr	r3, [pc, #12]	; (802248c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 802247e:	6818      	ldr	r0, [r3, #0]
 8022480:	6803      	ldr	r3, [r0, #0]
 8022482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022484:	4798      	blx	r3
 8022486:	e768      	b.n	802235a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8022488:	fffff800 	.word	0xfffff800
 802248c:	20015fbc 	.word	0x20015fbc
 8022490:	20015fb6 	.word	0x20015fb6

08022494 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022494:	b4f0      	push	{r4, r5, r6, r7}
 8022496:	4616      	mov	r6, r2
 8022498:	461c      	mov	r4, r3
 802249a:	460d      	mov	r5, r1
 802249c:	9a04      	ldr	r2, [sp, #16]
 802249e:	2e01      	cmp	r6, #1
 80224a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80224a4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80224a8:	d012      	beq.n	80224d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80224aa:	d303      	bcc.n	80224b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80224ac:	2e02      	cmp	r6, #2
 80224ae:	d00a      	beq.n	80224c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80224b0:	bcf0      	pop	{r4, r5, r6, r7}
 80224b2:	4770      	bx	lr
 80224b4:	6805      	ldr	r5, [r0, #0]
 80224b6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80224ba:	68ed      	ldr	r5, [r5, #12]
 80224bc:	4613      	mov	r3, r2
 80224be:	4622      	mov	r2, r4
 80224c0:	46ac      	mov	ip, r5
 80224c2:	bcf0      	pop	{r4, r5, r6, r7}
 80224c4:	4760      	bx	ip
 80224c6:	4621      	mov	r1, r4
 80224c8:	4628      	mov	r0, r5
 80224ca:	bcf0      	pop	{r4, r5, r6, r7}
 80224cc:	f7ff bd94 	b.w	8021ff8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80224d0:	4621      	mov	r1, r4
 80224d2:	4628      	mov	r0, r5
 80224d4:	bcf0      	pop	{r4, r5, r6, r7}
 80224d6:	f7ff bee5 	b.w	80222a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080224dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80224dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224e0:	b093      	sub	sp, #76	; 0x4c
 80224e2:	4681      	mov	r9, r0
 80224e4:	4688      	mov	r8, r1
 80224e6:	6810      	ldr	r0, [r2, #0]
 80224e8:	6851      	ldr	r1, [r2, #4]
 80224ea:	ac0e      	add	r4, sp, #56	; 0x38
 80224ec:	4616      	mov	r6, r2
 80224ee:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80224f2:	4f6b      	ldr	r7, [pc, #428]	; (80226a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80224f4:	c403      	stmia	r4!, {r0, r1}
 80224f6:	6818      	ldr	r0, [r3, #0]
 80224f8:	ac10      	add	r4, sp, #64	; 0x40
 80224fa:	6859      	ldr	r1, [r3, #4]
 80224fc:	c403      	stmia	r4!, {r0, r1}
 80224fe:	a80e      	add	r0, sp, #56	; 0x38
 8022500:	f7f9 faae 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022504:	4631      	mov	r1, r6
 8022506:	a810      	add	r0, sp, #64	; 0x40
 8022508:	4e66      	ldr	r6, [pc, #408]	; (80226a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 802250a:	f7f9 fad1 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802250e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022512:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8022516:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802251a:	6830      	ldr	r0, [r6, #0]
 802251c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022520:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8022524:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8022528:	4489      	add	r9, r1
 802252a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802252e:	440a      	add	r2, r1
 8022530:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022534:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022538:	4413      	add	r3, r2
 802253a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802253e:	6803      	ldr	r3, [r0, #0]
 8022540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022542:	4798      	blx	r3
 8022544:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022548:	6830      	ldr	r0, [r6, #0]
 802254a:	d01d      	beq.n	8022588 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802254c:	2200      	movs	r2, #0
 802254e:	6801      	ldr	r1, [r0, #0]
 8022550:	b2a4      	uxth	r4, r4
 8022552:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8022556:	b2ad      	uxth	r5, r5
 8022558:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802255c:	220b      	movs	r2, #11
 802255e:	9207      	str	r2, [sp, #28]
 8022560:	883a      	ldrh	r2, [r7, #0]
 8022562:	9502      	str	r5, [sp, #8]
 8022564:	9206      	str	r2, [sp, #24]
 8022566:	2201      	movs	r2, #1
 8022568:	9401      	str	r4, [sp, #4]
 802256a:	e9cd a204 	strd	sl, r2, [sp, #16]
 802256e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8022572:	9203      	str	r2, [sp, #12]
 8022574:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8022578:	9200      	str	r2, [sp, #0]
 802257a:	4642      	mov	r2, r8
 802257c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 802257e:	4649      	mov	r1, r9
 8022580:	47a0      	blx	r4
 8022582:	b013      	add	sp, #76	; 0x4c
 8022584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022588:	6803      	ldr	r3, [r0, #0]
 802258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802258c:	4798      	blx	r3
 802258e:	883b      	ldrh	r3, [r7, #0]
 8022590:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8022594:	f04f 0e04 	mov.w	lr, #4
 8022598:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802259c:	435d      	muls	r5, r3
 802259e:	fb03 1202 	mla	r2, r3, r2, r1
 80225a2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80225a6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80225aa:	920c      	str	r2, [sp, #48]	; 0x30
 80225ac:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80225b0:	1b12      	subs	r2, r2, r4
 80225b2:	920d      	str	r2, [sp, #52]	; 0x34
 80225b4:	0062      	lsls	r2, r4, #1
 80225b6:	1b1c      	subs	r4, r3, r4
 80225b8:	920a      	str	r2, [sp, #40]	; 0x28
 80225ba:	0063      	lsls	r3, r4, #1
 80225bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80225be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225c0:	4298      	cmp	r0, r3
 80225c2:	d266      	bcs.n	8022692 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80225c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225c6:	eb00 0b03 	add.w	fp, r0, r3
 80225ca:	4558      	cmp	r0, fp
 80225cc:	d25c      	bcs.n	8022688 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80225ce:	f819 3b01 	ldrb.w	r3, [r9], #1
 80225d2:	fb1e e303 	smlabb	r3, lr, r3, lr
 80225d6:	f858 2003 	ldr.w	r2, [r8, r3]
 80225da:	0e11      	lsrs	r1, r2, #24
 80225dc:	d012      	beq.n	8022604 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80225de:	29ff      	cmp	r1, #255	; 0xff
 80225e0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80225e4:	d110      	bne.n	8022608 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80225e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80225ea:	d10d      	bne.n	8022608 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80225ec:	0953      	lsrs	r3, r2, #5
 80225ee:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80225f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80225f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80225fa:	f027 0707 	bic.w	r7, r7, #7
 80225fe:	431f      	orrs	r7, r3
 8022600:	433a      	orrs	r2, r7
 8022602:	8002      	strh	r2, [r0, #0]
 8022604:	3002      	adds	r0, #2
 8022606:	e7e0      	b.n	80225ca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8022608:	fb0a f101 	mul.w	r1, sl, r1
 802260c:	8806      	ldrh	r6, [r0, #0]
 802260e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022612:	b2d2      	uxtb	r2, r2
 8022614:	1c4b      	adds	r3, r1, #1
 8022616:	1235      	asrs	r5, r6, #8
 8022618:	10f4      	asrs	r4, r6, #3
 802261a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 802261e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022622:	00f6      	lsls	r6, r6, #3
 8022624:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022628:	121b      	asrs	r3, r3, #8
 802262a:	b2f6      	uxtb	r6, r6
 802262c:	b299      	uxth	r1, r3
 802262e:	43db      	mvns	r3, r3
 8022630:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022634:	fb1c fc01 	smulbb	ip, ip, r1
 8022638:	b2db      	uxtb	r3, r3
 802263a:	fb12 f201 	smulbb	r2, r2, r1
 802263e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022642:	fb05 c503 	mla	r5, r5, r3, ip
 8022646:	b2ff      	uxtb	r7, r7
 8022648:	fb06 2203 	mla	r2, r6, r3, r2
 802264c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022650:	fb17 f701 	smulbb	r7, r7, r1
 8022654:	b2ad      	uxth	r5, r5
 8022656:	b292      	uxth	r2, r2
 8022658:	fb04 7403 	mla	r4, r4, r3, r7
 802265c:	f105 0c01 	add.w	ip, r5, #1
 8022660:	1c57      	adds	r7, r2, #1
 8022662:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022666:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802266a:	b2a4      	uxth	r4, r4
 802266c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022670:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022674:	433d      	orrs	r5, r7
 8022676:	1c67      	adds	r7, r4, #1
 8022678:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802267c:	0964      	lsrs	r4, r4, #5
 802267e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022682:	4325      	orrs	r5, r4
 8022684:	8005      	strh	r5, [r0, #0]
 8022686:	e7bd      	b.n	8022604 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802268a:	4418      	add	r0, r3
 802268c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802268e:	4499      	add	r9, r3
 8022690:	e795      	b.n	80225be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8022692:	4b04      	ldr	r3, [pc, #16]	; (80226a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8022694:	6818      	ldr	r0, [r3, #0]
 8022696:	6803      	ldr	r3, [r0, #0]
 8022698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802269a:	4798      	blx	r3
 802269c:	e771      	b.n	8022582 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 802269e:	bf00      	nop
 80226a0:	20015fb6 	.word	0x20015fb6
 80226a4:	20015fbc 	.word	0x20015fbc

080226a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80226a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226ac:	b087      	sub	sp, #28
 80226ae:	4680      	mov	r8, r0
 80226b0:	460d      	mov	r5, r1
 80226b2:	4614      	mov	r4, r2
 80226b4:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80226b8:	2e00      	cmp	r6, #0
 80226ba:	f000 80b9 	beq.w	8022830 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80226be:	6810      	ldr	r0, [r2, #0]
 80226c0:	af02      	add	r7, sp, #8
 80226c2:	6851      	ldr	r1, [r2, #4]
 80226c4:	c703      	stmia	r7!, {r0, r1}
 80226c6:	6818      	ldr	r0, [r3, #0]
 80226c8:	af04      	add	r7, sp, #16
 80226ca:	6859      	ldr	r1, [r3, #4]
 80226cc:	c703      	stmia	r7!, {r0, r1}
 80226ce:	a802      	add	r0, sp, #8
 80226d0:	f7f9 f9c6 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80226d4:	4621      	mov	r1, r4
 80226d6:	a804      	add	r0, sp, #16
 80226d8:	f7f9 f9ea 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80226dc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80226e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80226e4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80226e8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80226ec:	fb14 2103 	smlabb	r1, r4, r3, r2
 80226f0:	eb08 0401 	add.w	r4, r8, r1
 80226f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80226f8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80226fc:	440a      	add	r2, r1
 80226fe:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8022702:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022706:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802270a:	4413      	add	r3, r2
 802270c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022710:	4b49      	ldr	r3, [pc, #292]	; (8022838 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022712:	6818      	ldr	r0, [r3, #0]
 8022714:	6803      	ldr	r3, [r0, #0]
 8022716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022718:	4798      	blx	r3
 802271a:	4b48      	ldr	r3, [pc, #288]	; (802283c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 802271c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022720:	2eff      	cmp	r6, #255	; 0xff
 8022722:	881a      	ldrh	r2, [r3, #0]
 8022724:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8022728:	fb02 c101 	mla	r1, r2, r1, ip
 802272c:	fb02 f207 	mul.w	r2, r2, r7
 8022730:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022734:	f105 0104 	add.w	r1, r5, #4
 8022738:	461d      	mov	r5, r3
 802273a:	d05a      	beq.n	80227f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 802273c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8022740:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022744:	b2b6      	uxth	r6, r6
 8022746:	9301      	str	r3, [sp, #4]
 8022748:	fa1f fe8e 	uxth.w	lr, lr
 802274c:	4282      	cmp	r2, r0
 802274e:	d96a      	bls.n	8022826 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022750:	eb00 0b0a 	add.w	fp, r0, sl
 8022754:	4583      	cmp	fp, r0
 8022756:	d940      	bls.n	80227da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8022758:	8805      	ldrh	r5, [r0, #0]
 802275a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802275e:	122f      	asrs	r7, r5, #8
 8022760:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022764:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022768:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802276c:	00ed      	lsls	r5, r5, #3
 802276e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022772:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8022776:	fb17 f70e 	smulbb	r7, r7, lr
 802277a:	b2ed      	uxtb	r5, r5
 802277c:	fb19 f90e 	smulbb	r9, r9, lr
 8022780:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022784:	fb15 f50e 	smulbb	r5, r5, lr
 8022788:	fb0c 7c06 	mla	ip, ip, r6, r7
 802278c:	10df      	asrs	r7, r3, #3
 802278e:	00db      	lsls	r3, r3, #3
 8022790:	fa1f fc8c 	uxth.w	ip, ip
 8022794:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022798:	b2db      	uxtb	r3, r3
 802279a:	fb07 9706 	mla	r7, r7, r6, r9
 802279e:	f10c 0901 	add.w	r9, ip, #1
 80227a2:	fb03 5306 	mla	r3, r3, r6, r5
 80227a6:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80227aa:	b29b      	uxth	r3, r3
 80227ac:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80227b0:	b2bf      	uxth	r7, r7
 80227b2:	f103 0c01 	add.w	ip, r3, #1
 80227b6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80227ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80227be:	ea4c 0c09 	orr.w	ip, ip, r9
 80227c2:	f107 0901 	add.w	r9, r7, #1
 80227c6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80227ca:	097f      	lsrs	r7, r7, #5
 80227cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80227d0:	ea4c 0c07 	orr.w	ip, ip, r7
 80227d4:	f820 cb02 	strh.w	ip, [r0], #2
 80227d8:	e7bc      	b.n	8022754 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80227da:	9b01      	ldr	r3, [sp, #4]
 80227dc:	881b      	ldrh	r3, [r3, #0]
 80227de:	eba3 0308 	sub.w	r3, r3, r8
 80227e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80227e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80227ea:	eba3 0308 	sub.w	r3, r3, r8
 80227ee:	441c      	add	r4, r3
 80227f0:	e7ac      	b.n	802274c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80227f2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80227f6:	4282      	cmp	r2, r0
 80227f8:	d915      	bls.n	8022826 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80227fa:	eb00 060a 	add.w	r6, r0, sl
 80227fe:	4286      	cmp	r6, r0
 8022800:	d906      	bls.n	8022810 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8022802:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022806:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802280a:	f820 3b02 	strh.w	r3, [r0], #2
 802280e:	e7f6      	b.n	80227fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8022810:	882b      	ldrh	r3, [r5, #0]
 8022812:	eba3 0308 	sub.w	r3, r3, r8
 8022816:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802281a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802281e:	eba3 0308 	sub.w	r3, r3, r8
 8022822:	441c      	add	r4, r3
 8022824:	e7e7      	b.n	80227f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8022826:	4b04      	ldr	r3, [pc, #16]	; (8022838 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022828:	6818      	ldr	r0, [r3, #0]
 802282a:	6803      	ldr	r3, [r0, #0]
 802282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802282e:	4798      	blx	r3
 8022830:	b007      	add	sp, #28
 8022832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022836:	bf00      	nop
 8022838:	20015fbc 	.word	0x20015fbc
 802283c:	20015fb6 	.word	0x20015fb6

08022840 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022844:	b091      	sub	sp, #68	; 0x44
 8022846:	4680      	mov	r8, r0
 8022848:	460f      	mov	r7, r1
 802284a:	4614      	mov	r4, r2
 802284c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8022850:	2d00      	cmp	r5, #0
 8022852:	d051      	beq.n	80228f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022854:	6810      	ldr	r0, [r2, #0]
 8022856:	ae0c      	add	r6, sp, #48	; 0x30
 8022858:	6851      	ldr	r1, [r2, #4]
 802285a:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8022a5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802285e:	c603      	stmia	r6!, {r0, r1}
 8022860:	6818      	ldr	r0, [r3, #0]
 8022862:	ae0e      	add	r6, sp, #56	; 0x38
 8022864:	6859      	ldr	r1, [r3, #4]
 8022866:	c603      	stmia	r6!, {r0, r1}
 8022868:	a80c      	add	r0, sp, #48	; 0x30
 802286a:	f7f9 f8f9 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802286e:	4621      	mov	r1, r4
 8022870:	a80e      	add	r0, sp, #56	; 0x38
 8022872:	f7f9 f91d 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022876:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802287a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802287e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8022882:	f8d9 0000 	ldr.w	r0, [r9]
 8022886:	fb11 2103 	smlabb	r1, r1, r3, r2
 802288a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 802288e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8022892:	eb08 0401 	add.w	r4, r8, r1
 8022896:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802289a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8022a60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 802289e:	440a      	add	r2, r1
 80228a0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80228a4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80228a8:	4413      	add	r3, r2
 80228aa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80228ae:	6803      	ldr	r3, [r0, #0]
 80228b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80228b2:	4798      	blx	r3
 80228b4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80228b8:	f8d9 0000 	ldr.w	r0, [r9]
 80228bc:	d01f      	beq.n	80228fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80228be:	2200      	movs	r2, #0
 80228c0:	6801      	ldr	r1, [r0, #0]
 80228c2:	b2b6      	uxth	r6, r6
 80228c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80228c8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80228cc:	220b      	movs	r2, #11
 80228ce:	9207      	str	r2, [sp, #28]
 80228d0:	f8b8 2000 	ldrh.w	r2, [r8]
 80228d4:	9601      	str	r6, [sp, #4]
 80228d6:	9206      	str	r2, [sp, #24]
 80228d8:	2201      	movs	r2, #1
 80228da:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80228de:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80228e2:	9203      	str	r2, [sp, #12]
 80228e4:	fa1f f28a 	uxth.w	r2, sl
 80228e8:	9202      	str	r2, [sp, #8]
 80228ea:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80228ee:	9200      	str	r2, [sp, #0]
 80228f0:	463a      	mov	r2, r7
 80228f2:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80228f4:	4621      	mov	r1, r4
 80228f6:	47a8      	blx	r5
 80228f8:	b011      	add	sp, #68	; 0x44
 80228fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228fe:	6803      	ldr	r3, [r0, #0]
 8022900:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022906:	4798      	blx	r3
 8022908:	f8b8 2000 	ldrh.w	r2, [r8]
 802290c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022910:	2dff      	cmp	r5, #255	; 0xff
 8022912:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8022916:	fb0a fa02 	mul.w	sl, sl, r2
 802291a:	fb02 1303 	mla	r3, r2, r3, r1
 802291e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022922:	d062      	beq.n	80229ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8022924:	ea6f 0c05 	mvn.w	ip, r5
 8022928:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802292c:	b2ad      	uxth	r5, r5
 802292e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8022932:	fa5f fc8c 	uxtb.w	ip, ip
 8022936:	930a      	str	r3, [sp, #40]	; 0x28
 8022938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802293a:	4298      	cmp	r0, r3
 802293c:	f080 8085 	bcs.w	8022a4a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022940:	eb00 0b09 	add.w	fp, r0, r9
 8022944:	4558      	cmp	r0, fp
 8022946:	d246      	bcs.n	80229d6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8022948:	f814 eb01 	ldrb.w	lr, [r4], #1
 802294c:	2303      	movs	r3, #3
 802294e:	2204      	movs	r2, #4
 8022950:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022954:	8803      	ldrh	r3, [r0, #0]
 8022956:	eb07 0a0e 	add.w	sl, r7, lr
 802295a:	1219      	asrs	r1, r3, #8
 802295c:	10da      	asrs	r2, r3, #3
 802295e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022962:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8022966:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802296a:	00db      	lsls	r3, r3, #3
 802296c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022970:	fb18 f805 	smulbb	r8, r8, r5
 8022974:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022978:	fb1e fe05 	smulbb	lr, lr, r5
 802297c:	b2db      	uxtb	r3, r3
 802297e:	fb01 810c 	mla	r1, r1, ip, r8
 8022982:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022986:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802298a:	fb18 f805 	smulbb	r8, r8, r5
 802298e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022992:	b289      	uxth	r1, r1
 8022994:	fb02 820c 	mla	r2, r2, ip, r8
 8022998:	fb03 e30c 	mla	r3, r3, ip, lr
 802299c:	f101 0801 	add.w	r8, r1, #1
 80229a0:	b292      	uxth	r2, r2
 80229a2:	b29b      	uxth	r3, r3
 80229a4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80229a8:	f102 0801 	add.w	r8, r2, #1
 80229ac:	f103 0e01 	add.w	lr, r3, #1
 80229b0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80229b4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80229b8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80229bc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80229c0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80229c4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80229c8:	ea4e 0101 	orr.w	r1, lr, r1
 80229cc:	ea41 0108 	orr.w	r1, r1, r8
 80229d0:	f820 1b02 	strh.w	r1, [r0], #2
 80229d4:	e7b6      	b.n	8022944 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80229d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80229d8:	881b      	ldrh	r3, [r3, #0]
 80229da:	1b9b      	subs	r3, r3, r6
 80229dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80229e0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80229e4:	1b9b      	subs	r3, r3, r6
 80229e6:	441c      	add	r4, r3
 80229e8:	e7a6      	b.n	8022938 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80229ea:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80229ee:	2203      	movs	r2, #3
 80229f0:	2504      	movs	r5, #4
 80229f2:	4919      	ldr	r1, [pc, #100]	; (8022a58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80229f4:	4550      	cmp	r0, sl
 80229f6:	d228      	bcs.n	8022a4a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80229f8:	eb00 0c09 	add.w	ip, r0, r9
 80229fc:	4560      	cmp	r0, ip
 80229fe:	4623      	mov	r3, r4
 8022a00:	d219      	bcs.n	8022a36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8022a02:	f893 e000 	ldrb.w	lr, [r3]
 8022a06:	3401      	adds	r4, #1
 8022a08:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8022a0c:	eb07 0b0e 	add.w	fp, r7, lr
 8022a10:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022a14:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022a18:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022a1c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022a20:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022a24:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022a28:	ea43 030b 	orr.w	r3, r3, fp
 8022a2c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022a30:	f820 3b02 	strh.w	r3, [r0], #2
 8022a34:	e7e2      	b.n	80229fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8022a36:	f8b8 3000 	ldrh.w	r3, [r8]
 8022a3a:	1b9b      	subs	r3, r3, r6
 8022a3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a40:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022a44:	1b9b      	subs	r3, r3, r6
 8022a46:	441c      	add	r4, r3
 8022a48:	e7d4      	b.n	80229f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8022a4a:	4b04      	ldr	r3, [pc, #16]	; (8022a5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8022a4c:	6818      	ldr	r0, [r3, #0]
 8022a4e:	6803      	ldr	r3, [r0, #0]
 8022a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a52:	4798      	blx	r3
 8022a54:	e750      	b.n	80228f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022a56:	bf00      	nop
 8022a58:	fffff800 	.word	0xfffff800
 8022a5c:	20015fbc 	.word	0x20015fbc
 8022a60:	20015fb6 	.word	0x20015fb6

08022a64 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022a64:	b430      	push	{r4, r5}
 8022a66:	780d      	ldrb	r5, [r1, #0]
 8022a68:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8022a6c:	2d01      	cmp	r5, #1
 8022a6e:	d00a      	beq.n	8022a86 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8022a70:	d305      	bcc.n	8022a7e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8022a72:	2d02      	cmp	r5, #2
 8022a74:	d10b      	bne.n	8022a8e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022a76:	9402      	str	r4, [sp, #8]
 8022a78:	bc30      	pop	{r4, r5}
 8022a7a:	f7ff be15 	b.w	80226a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8022a7e:	9402      	str	r4, [sp, #8]
 8022a80:	bc30      	pop	{r4, r5}
 8022a82:	f7ff bd2b 	b.w	80224dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022a86:	9402      	str	r4, [sp, #8]
 8022a88:	bc30      	pop	{r4, r5}
 8022a8a:	f7ff bed9 	b.w	8022840 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022a8e:	bc30      	pop	{r4, r5}
 8022a90:	4770      	bx	lr
	...

08022a94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a98:	b087      	sub	sp, #28
 8022a9a:	4604      	mov	r4, r0
 8022a9c:	460e      	mov	r6, r1
 8022a9e:	6810      	ldr	r0, [r2, #0]
 8022aa0:	6851      	ldr	r1, [r2, #4]
 8022aa2:	ad02      	add	r5, sp, #8
 8022aa4:	4617      	mov	r7, r2
 8022aa6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8022aaa:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8022cdc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8022aae:	c503      	stmia	r5!, {r0, r1}
 8022ab0:	6818      	ldr	r0, [r3, #0]
 8022ab2:	ad04      	add	r5, sp, #16
 8022ab4:	6859      	ldr	r1, [r3, #4]
 8022ab6:	c503      	stmia	r5!, {r0, r1}
 8022ab8:	a802      	add	r0, sp, #8
 8022aba:	f7f8 ffd1 	bl	801ba60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022abe:	4639      	mov	r1, r7
 8022ac0:	a804      	add	r0, sp, #16
 8022ac2:	f7f8 fff5 	bl	801bab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ac6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022aca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022ace:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022ad2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022ad6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022ada:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022ade:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022ae2:	440e      	add	r6, r1
 8022ae4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022ae8:	440a      	add	r2, r1
 8022aea:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022aee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022af2:	4413      	add	r3, r2
 8022af4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022af8:	4b77      	ldr	r3, [pc, #476]	; (8022cd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022afa:	6818      	ldr	r0, [r3, #0]
 8022afc:	6803      	ldr	r3, [r0, #0]
 8022afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b00:	4798      	blx	r3
 8022b02:	f8b9 b000 	ldrh.w	fp, [r9]
 8022b06:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022b0a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022b0e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022b12:	fb05 f50b 	mul.w	r5, r5, fp
 8022b16:	fb0b 2303 	mla	r3, fp, r3, r2
 8022b1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022b1e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022b22:	9300      	str	r3, [sp, #0]
 8022b24:	d069      	beq.n	8022bfa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8022b26:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8022b2a:	4558      	cmp	r0, fp
 8022b2c:	f080 80cc 	bcs.w	8022cc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022b30:	9b00      	ldr	r3, [sp, #0]
 8022b32:	4631      	mov	r1, r6
 8022b34:	18c3      	adds	r3, r0, r3
 8022b36:	9301      	str	r3, [sp, #4]
 8022b38:	9b01      	ldr	r3, [sp, #4]
 8022b3a:	4298      	cmp	r0, r3
 8022b3c:	d24f      	bcs.n	8022bde <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8022b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022b42:	2a00      	cmp	r2, #0
 8022b44:	d048      	beq.n	8022bd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022b46:	fb0a f202 	mul.w	r2, sl, r2
 8022b4a:	1c53      	adds	r3, r2, #1
 8022b4c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022b50:	121b      	asrs	r3, r3, #8
 8022b52:	d041      	beq.n	8022bd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022b54:	8802      	ldrh	r2, [r0, #0]
 8022b56:	b29e      	uxth	r6, r3
 8022b58:	f8b4 c000 	ldrh.w	ip, [r4]
 8022b5c:	43db      	mvns	r3, r3
 8022b5e:	1215      	asrs	r5, r2, #8
 8022b60:	b2db      	uxtb	r3, r3
 8022b62:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022b66:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022b6a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8022b6e:	fb15 f503 	smulbb	r5, r5, r3
 8022b72:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022b76:	00d2      	lsls	r2, r2, #3
 8022b78:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022b7c:	fb07 5706 	mla	r7, r7, r6, r5
 8022b80:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022b84:	b2d2      	uxtb	r2, r2
 8022b86:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022b8a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022b8e:	fb1e fe03 	smulbb	lr, lr, r3
 8022b92:	b2bf      	uxth	r7, r7
 8022b94:	fb12 f203 	smulbb	r2, r2, r3
 8022b98:	fa5f fc8c 	uxtb.w	ip, ip
 8022b9c:	fb05 e506 	mla	r5, r5, r6, lr
 8022ba0:	f107 0e01 	add.w	lr, r7, #1
 8022ba4:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022ba8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022bac:	fa1f fc8c 	uxth.w	ip, ip
 8022bb0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8022bb4:	b2ad      	uxth	r5, r5
 8022bb6:	f10c 0701 	add.w	r7, ip, #1
 8022bba:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022bbe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022bc2:	ea47 070e 	orr.w	r7, r7, lr
 8022bc6:	f105 0e01 	add.w	lr, r5, #1
 8022bca:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8022bce:	096d      	lsrs	r5, r5, #5
 8022bd0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022bd4:	432f      	orrs	r7, r5
 8022bd6:	8007      	strh	r7, [r0, #0]
 8022bd8:	3002      	adds	r0, #2
 8022bda:	3402      	adds	r4, #2
 8022bdc:	e7ac      	b.n	8022b38 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8022bde:	f8b9 3000 	ldrh.w	r3, [r9]
 8022be2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022be6:	eba3 0308 	sub.w	r3, r3, r8
 8022bea:	eba6 0608 	sub.w	r6, r6, r8
 8022bee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022bf2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022bf6:	440e      	add	r6, r1
 8022bf8:	e797      	b.n	8022b2a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8022bfa:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8022bfe:	42a8      	cmp	r0, r5
 8022c00:	d262      	bcs.n	8022cc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022c02:	9b00      	ldr	r3, [sp, #0]
 8022c04:	4631      	mov	r1, r6
 8022c06:	eb00 0b03 	add.w	fp, r0, r3
 8022c0a:	4558      	cmp	r0, fp
 8022c0c:	d24e      	bcs.n	8022cac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c12:	b12b      	cbz	r3, 8022c20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022c14:	2bff      	cmp	r3, #255	; 0xff
 8022c16:	f8b4 e000 	ldrh.w	lr, [r4]
 8022c1a:	d104      	bne.n	8022c26 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022c1c:	f8a0 e000 	strh.w	lr, [r0]
 8022c20:	3002      	adds	r0, #2
 8022c22:	3402      	adds	r4, #2
 8022c24:	e7f1      	b.n	8022c0a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8022c26:	8802      	ldrh	r2, [r0, #0]
 8022c28:	b29f      	uxth	r7, r3
 8022c2a:	43db      	mvns	r3, r3
 8022c2c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022c30:	1216      	asrs	r6, r2, #8
 8022c32:	b2db      	uxtb	r3, r3
 8022c34:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022c38:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022c3c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022c40:	00d2      	lsls	r2, r2, #3
 8022c42:	fb16 f603 	smulbb	r6, r6, r3
 8022c46:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022c4a:	b2d2      	uxtb	r2, r2
 8022c4c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022c50:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022c54:	fb1a fa03 	smulbb	sl, sl, r3
 8022c58:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022c5c:	fa1f fc8c 	uxth.w	ip, ip
 8022c60:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022c64:	fb12 f303 	smulbb	r3, r2, r3
 8022c68:	fa5f fe8e 	uxtb.w	lr, lr
 8022c6c:	fb06 a607 	mla	r6, r6, r7, sl
 8022c70:	f10c 0201 	add.w	r2, ip, #1
 8022c74:	fb0e 3307 	mla	r3, lr, r7, r3
 8022c78:	b2b6      	uxth	r6, r6
 8022c7a:	b29b      	uxth	r3, r3
 8022c7c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022c80:	f106 0a01 	add.w	sl, r6, #1
 8022c84:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8022c88:	f103 0c01 	add.w	ip, r3, #1
 8022c8c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022c90:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022c94:	0976      	lsrs	r6, r6, #5
 8022c96:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022c9a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022c9e:	ea4c 0c02 	orr.w	ip, ip, r2
 8022ca2:	ea4c 0c06 	orr.w	ip, ip, r6
 8022ca6:	f8a0 c000 	strh.w	ip, [r0]
 8022caa:	e7b9      	b.n	8022c20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022cac:	f8b9 3000 	ldrh.w	r3, [r9]
 8022cb0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022cb4:	eba3 0308 	sub.w	r3, r3, r8
 8022cb8:	eba6 0608 	sub.w	r6, r6, r8
 8022cbc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022cc0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022cc4:	440e      	add	r6, r1
 8022cc6:	e79a      	b.n	8022bfe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022cc8:	4b03      	ldr	r3, [pc, #12]	; (8022cd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022cca:	6818      	ldr	r0, [r3, #0]
 8022ccc:	6803      	ldr	r3, [r0, #0]
 8022cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022cd0:	4798      	blx	r3
 8022cd2:	b007      	add	sp, #28
 8022cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cd8:	20015fbc 	.word	0x20015fbc
 8022cdc:	20015fb6 	.word	0x20015fb6

08022ce0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ce4:	b089      	sub	sp, #36	; 0x24
 8022ce6:	4682      	mov	sl, r0
 8022ce8:	460f      	mov	r7, r1
 8022cea:	4691      	mov	r9, r2
 8022cec:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8022cf0:	4698      	mov	r8, r3
 8022cf2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022cf4:	2e00      	cmp	r6, #0
 8022cf6:	d036      	beq.n	8022d66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022cf8:	4608      	mov	r0, r1
 8022cfa:	f7fc f861 	bl	801edc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022cfe:	4605      	mov	r5, r0
 8022d00:	4638      	mov	r0, r7
 8022d02:	f7fc f891 	bl	801ee28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022d06:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022d0a:	4638      	mov	r0, r7
 8022d0c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8022d10:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022d14:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022d18:	f7fc f93e 	bl	801ef98 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022d1c:	4605      	mov	r5, r0
 8022d1e:	4638      	mov	r0, r7
 8022d20:	f7fc f96a 	bl	801eff8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022d24:	4681      	mov	r9, r0
 8022d26:	4638      	mov	r0, r7
 8022d28:	f7fc f9ba 	bl	801f0a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022d2c:	280b      	cmp	r0, #11
 8022d2e:	d81a      	bhi.n	8022d66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022d30:	e8df f000 	tbb	[pc, r0]
 8022d34:	1906aebd 	.word	0x1906aebd
 8022d38:	19191919 	.word	0x19191919
 8022d3c:	b5191919 	.word	0xb5191919
 8022d40:	4bb0      	ldr	r3, [pc, #704]	; (8023004 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8022d42:	6818      	ldr	r0, [r3, #0]
 8022d44:	6803      	ldr	r3, [r0, #0]
 8022d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022d48:	4798      	blx	r3
 8022d4a:	2eff      	cmp	r6, #255	; 0xff
 8022d4c:	d121      	bne.n	8022d92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8022d4e:	0683      	lsls	r3, r0, #26
 8022d50:	d41f      	bmi.n	8022d92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8022d52:	4638      	mov	r0, r7
 8022d54:	f7fc f8e8 	bl	801ef28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022d58:	b940      	cbnz	r0, 8022d6c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8022d5a:	4623      	mov	r3, r4
 8022d5c:	aa02      	add	r2, sp, #8
 8022d5e:	4629      	mov	r1, r5
 8022d60:	4650      	mov	r0, sl
 8022d62:	f7ff fa2f 	bl	80221c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022d66:	b009      	add	sp, #36	; 0x24
 8022d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d6c:	f10d 0818 	add.w	r8, sp, #24
 8022d70:	4639      	mov	r1, r7
 8022d72:	af04      	add	r7, sp, #16
 8022d74:	4640      	mov	r0, r8
 8022d76:	f7fc f88b 	bl	801ee90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022d7a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022d7e:	e887 0003 	stmia.w	r7, {r0, r1}
 8022d82:	4638      	mov	r0, r7
 8022d84:	4621      	mov	r1, r4
 8022d86:	f7f5 fdd3 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 8022d8a:	4638      	mov	r0, r7
 8022d8c:	f7f5 fe13 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022d90:	b130      	cbz	r0, 8022da0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022d92:	4633      	mov	r3, r6
 8022d94:	4622      	mov	r2, r4
 8022d96:	a902      	add	r1, sp, #8
 8022d98:	4628      	mov	r0, r5
 8022d9a:	f7ff f92d 	bl	8021ff8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022d9e:	e7e2      	b.n	8022d66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022da0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022da4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022da8:	4293      	cmp	r3, r2
 8022daa:	dd12      	ble.n	8022dd2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8022dac:	1a9b      	subs	r3, r3, r2
 8022dae:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022db2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022db6:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022dba:	4628      	mov	r0, r5
 8022dbc:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022dc0:	4642      	mov	r2, r8
 8022dc2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022dc6:	a902      	add	r1, sp, #8
 8022dc8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022dcc:	4633      	mov	r3, r6
 8022dce:	f7ff f913 	bl	8021ff8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022dd2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022dd6:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022dda:	4293      	cmp	r3, r2
 8022ddc:	dd12      	ble.n	8022e04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8022dde:	1a9b      	subs	r3, r3, r2
 8022de0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022de4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022de8:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022dec:	4642      	mov	r2, r8
 8022dee:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022df2:	4628      	mov	r0, r5
 8022df4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022df8:	23ff      	movs	r3, #255	; 0xff
 8022dfa:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022dfe:	a902      	add	r1, sp, #8
 8022e00:	f7ff f8fa 	bl	8021ff8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022e04:	463b      	mov	r3, r7
 8022e06:	aa02      	add	r2, sp, #8
 8022e08:	4629      	mov	r1, r5
 8022e0a:	4650      	mov	r0, sl
 8022e0c:	f7ff f9da 	bl	80221c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022e10:	88a2      	ldrh	r2, [r4, #4]
 8022e12:	8823      	ldrh	r3, [r4, #0]
 8022e14:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022e18:	4413      	add	r3, r2
 8022e1a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022e1e:	440a      	add	r2, r1
 8022e20:	b29b      	uxth	r3, r3
 8022e22:	b292      	uxth	r2, r2
 8022e24:	b218      	sxth	r0, r3
 8022e26:	b211      	sxth	r1, r2
 8022e28:	4288      	cmp	r0, r1
 8022e2a:	dd12      	ble.n	8022e52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8022e2c:	1a9b      	subs	r3, r3, r2
 8022e2e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022e32:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8022e36:	4642      	mov	r2, r8
 8022e38:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022e3c:	a902      	add	r1, sp, #8
 8022e3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022e42:	23ff      	movs	r3, #255	; 0xff
 8022e44:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022e48:	4628      	mov	r0, r5
 8022e4a:	f8ad 601a 	strh.w	r6, [sp, #26]
 8022e4e:	f7ff f8d3 	bl	8021ff8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022e52:	88e2      	ldrh	r2, [r4, #6]
 8022e54:	8863      	ldrh	r3, [r4, #2]
 8022e56:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022e5a:	4413      	add	r3, r2
 8022e5c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022e60:	440a      	add	r2, r1
 8022e62:	b29b      	uxth	r3, r3
 8022e64:	b292      	uxth	r2, r2
 8022e66:	b218      	sxth	r0, r3
 8022e68:	b211      	sxth	r1, r2
 8022e6a:	4288      	cmp	r0, r1
 8022e6c:	f77f af7b 	ble.w	8022d66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022e70:	1a9b      	subs	r3, r3, r2
 8022e72:	f9b4 6000 	ldrsh.w	r6, [r4]
 8022e76:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022e7a:	4642      	mov	r2, r8
 8022e7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022e80:	23ff      	movs	r3, #255	; 0xff
 8022e82:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022e86:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022e8a:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022e8e:	e782      	b.n	8022d96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8022e90:	4633      	mov	r3, r6
 8022e92:	4622      	mov	r2, r4
 8022e94:	a902      	add	r1, sp, #8
 8022e96:	4628      	mov	r0, r5
 8022e98:	f7ff fa04 	bl	80222a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022e9c:	e763      	b.n	8022d66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022e9e:	9600      	str	r6, [sp, #0]
 8022ea0:	4623      	mov	r3, r4
 8022ea2:	aa02      	add	r2, sp, #8
 8022ea4:	4649      	mov	r1, r9
 8022ea6:	4628      	mov	r0, r5
 8022ea8:	f7ff fddc 	bl	8022a64 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022eac:	e75b      	b.n	8022d66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022eae:	4638      	mov	r0, r7
 8022eb0:	f7fc f83a 	bl	801ef28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022eb4:	b950      	cbnz	r0, 8022ecc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8022eb6:	f8da 3000 	ldr.w	r3, [sl]
 8022eba:	aa02      	add	r2, sp, #8
 8022ebc:	4629      	mov	r1, r5
 8022ebe:	e9cd 6000 	strd	r6, r0, [sp]
 8022ec2:	4650      	mov	r0, sl
 8022ec4:	68de      	ldr	r6, [r3, #12]
 8022ec6:	4623      	mov	r3, r4
 8022ec8:	47b0      	blx	r6
 8022eca:	e74c      	b.n	8022d66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022ecc:	f10d 0818 	add.w	r8, sp, #24
 8022ed0:	4639      	mov	r1, r7
 8022ed2:	af04      	add	r7, sp, #16
 8022ed4:	4640      	mov	r0, r8
 8022ed6:	f7fb ffdb 	bl	801ee90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022eda:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022ede:	e887 0003 	stmia.w	r7, {r0, r1}
 8022ee2:	4638      	mov	r0, r7
 8022ee4:	4621      	mov	r1, r4
 8022ee6:	f7f5 fd23 	bl	8018930 <_ZN8touchgfx4RectaNERKS0_>
 8022eea:	4638      	mov	r0, r7
 8022eec:	f7f5 fd63 	bl	80189b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022ef0:	b138      	cbz	r0, 8022f02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8022ef2:	4623      	mov	r3, r4
 8022ef4:	9600      	str	r6, [sp, #0]
 8022ef6:	aa02      	add	r2, sp, #8
 8022ef8:	4649      	mov	r1, r9
 8022efa:	4628      	mov	r0, r5
 8022efc:	f7ff fdca 	bl	8022a94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022f00:	e731      	b.n	8022d66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022f02:	f8da 3000 	ldr.w	r3, [sl]
 8022f06:	aa02      	add	r2, sp, #8
 8022f08:	4629      	mov	r1, r5
 8022f0a:	e9cd 6000 	strd	r6, r0, [sp]
 8022f0e:	4650      	mov	r0, sl
 8022f10:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022f14:	463b      	mov	r3, r7
 8022f16:	47d8      	blx	fp
 8022f18:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022f1c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022f20:	4293      	cmp	r3, r2
 8022f22:	dd13      	ble.n	8022f4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8022f24:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022f28:	1a9b      	subs	r3, r3, r2
 8022f2a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022f2e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022f32:	4628      	mov	r0, r5
 8022f34:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022f38:	aa02      	add	r2, sp, #8
 8022f3a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022f3e:	4649      	mov	r1, r9
 8022f40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022f44:	4643      	mov	r3, r8
 8022f46:	9600      	str	r6, [sp, #0]
 8022f48:	f7ff fda4 	bl	8022a94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022f4c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022f50:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022f54:	4293      	cmp	r3, r2
 8022f56:	dd13      	ble.n	8022f80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8022f58:	1a9b      	subs	r3, r3, r2
 8022f5a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022f5e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022f62:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022f66:	aa02      	add	r2, sp, #8
 8022f68:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022f6c:	4628      	mov	r0, r5
 8022f6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022f72:	4643      	mov	r3, r8
 8022f74:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022f78:	4649      	mov	r1, r9
 8022f7a:	9600      	str	r6, [sp, #0]
 8022f7c:	f7ff fd8a 	bl	8022a94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022f80:	88a2      	ldrh	r2, [r4, #4]
 8022f82:	8823      	ldrh	r3, [r4, #0]
 8022f84:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022f88:	4413      	add	r3, r2
 8022f8a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022f8e:	440a      	add	r2, r1
 8022f90:	b29b      	uxth	r3, r3
 8022f92:	b292      	uxth	r2, r2
 8022f94:	b218      	sxth	r0, r3
 8022f96:	b211      	sxth	r1, r2
 8022f98:	4288      	cmp	r0, r1
 8022f9a:	dd13      	ble.n	8022fc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8022f9c:	1a9b      	subs	r3, r3, r2
 8022f9e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022fa2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8022fa6:	aa02      	add	r2, sp, #8
 8022fa8:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022fac:	4649      	mov	r1, r9
 8022fae:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022fb2:	4643      	mov	r3, r8
 8022fb4:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022fb8:	4628      	mov	r0, r5
 8022fba:	9600      	str	r6, [sp, #0]
 8022fbc:	f8ad 701a 	strh.w	r7, [sp, #26]
 8022fc0:	f7ff fd68 	bl	8022a94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022fc4:	88e2      	ldrh	r2, [r4, #6]
 8022fc6:	8863      	ldrh	r3, [r4, #2]
 8022fc8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022fcc:	4413      	add	r3, r2
 8022fce:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022fd2:	440a      	add	r2, r1
 8022fd4:	b29b      	uxth	r3, r3
 8022fd6:	b292      	uxth	r2, r2
 8022fd8:	b218      	sxth	r0, r3
 8022fda:	b211      	sxth	r1, r2
 8022fdc:	4288      	cmp	r0, r1
 8022fde:	f77f aec2 	ble.w	8022d66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8022fe2:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022fe6:	1a9b      	subs	r3, r3, r2
 8022fe8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022fec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022ff0:	4643      	mov	r3, r8
 8022ff2:	f8ad 7018 	strh.w	r7, [sp, #24]
 8022ff6:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022ffa:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022ffe:	9600      	str	r6, [sp, #0]
 8023000:	e779      	b.n	8022ef6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8023002:	bf00      	nop
 8023004:	20015fbc 	.word	0x20015fbc

08023008 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023008:	b180      	cbz	r0, 802302c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 802300a:	2903      	cmp	r1, #3
 802300c:	d81c      	bhi.n	8023048 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802300e:	e8df f001 	tbb	[pc, r1]
 8023012:	1d02      	.short	0x1d02
 8023014:	1f08      	.short	0x1f08
 8023016:	4b10      	ldr	r3, [pc, #64]	; (8023058 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023018:	8818      	ldrh	r0, [r3, #0]
 802301a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802301e:	4240      	negs	r0, r0
 8023020:	4770      	bx	lr
 8023022:	4b0d      	ldr	r3, [pc, #52]	; (8023058 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023024:	8818      	ldrh	r0, [r3, #0]
 8023026:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802302a:	4770      	bx	lr
 802302c:	2903      	cmp	r1, #3
 802302e:	d80b      	bhi.n	8023048 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023030:	a301      	add	r3, pc, #4	; (adr r3, 8023038 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8023032:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023036:	bf00      	nop
 8023038:	0802304d 	.word	0x0802304d
 802303c:	08023023 	.word	0x08023023
 8023040:	08023051 	.word	0x08023051
 8023044:	08023017 	.word	0x08023017
 8023048:	2000      	movs	r0, #0
 802304a:	4770      	bx	lr
 802304c:	2001      	movs	r0, #1
 802304e:	4770      	bx	lr
 8023050:	f04f 30ff 	mov.w	r0, #4294967295
 8023054:	4770      	bx	lr
 8023056:	bf00      	nop
 8023058:	20015fb6 	.word	0x20015fb6

0802305c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 802305c:	b180      	cbz	r0, 8023080 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 802305e:	2903      	cmp	r1, #3
 8023060:	d81c      	bhi.n	802309c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023062:	e8df f001 	tbb	[pc, r1]
 8023066:	021d      	.short	0x021d
 8023068:	071f      	.short	0x071f
 802306a:	4b10      	ldr	r3, [pc, #64]	; (80230ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802306c:	8818      	ldrh	r0, [r3, #0]
 802306e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023072:	4770      	bx	lr
 8023074:	4b0d      	ldr	r3, [pc, #52]	; (80230ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023076:	8818      	ldrh	r0, [r3, #0]
 8023078:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802307c:	4240      	negs	r0, r0
 802307e:	4770      	bx	lr
 8023080:	2903      	cmp	r1, #3
 8023082:	d80b      	bhi.n	802309c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023084:	a301      	add	r3, pc, #4	; (adr r3, 802308c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8023086:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802308a:	bf00      	nop
 802308c:	0802306b 	.word	0x0802306b
 8023090:	080230a5 	.word	0x080230a5
 8023094:	08023075 	.word	0x08023075
 8023098:	080230a1 	.word	0x080230a1
 802309c:	2000      	movs	r0, #0
 802309e:	4770      	bx	lr
 80230a0:	2001      	movs	r0, #1
 80230a2:	4770      	bx	lr
 80230a4:	f04f 30ff 	mov.w	r0, #4294967295
 80230a8:	4770      	bx	lr
 80230aa:	bf00      	nop
 80230ac:	20015fb6 	.word	0x20015fb6

080230b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80230b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230b4:	b099      	sub	sp, #100	; 0x64
 80230b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80230b8:	a914      	add	r1, sp, #80	; 0x50
 80230ba:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 80230be:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 80230c2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 80230c6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80230ca:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80230ce:	e881 000c 	stmia.w	r1, {r2, r3}
 80230d2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 80230d6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 80230da:	9309      	str	r3, [sp, #36]	; 0x24
 80230dc:	f891 900d 	ldrb.w	r9, [r1, #13]
 80230e0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80230e4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80230e8:	9310      	str	r3, [sp, #64]	; 0x40
 80230ea:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80230ee:	930c      	str	r3, [sp, #48]	; 0x30
 80230f0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 80230f4:	798f      	ldrb	r7, [r1, #6]
 80230f6:	431f      	orrs	r7, r3
 80230f8:	f000 8195 	beq.w	8023426 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80230fc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8023100:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8023104:	f891 9007 	ldrb.w	r9, [r1, #7]
 8023108:	ea59 0903 	orrs.w	r9, r9, r3
 802310c:	f000 818b 	beq.w	8023426 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023110:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023114:	b29b      	uxth	r3, r3
 8023116:	2d00      	cmp	r5, #0
 8023118:	f000 812e 	beq.w	8023378 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 802311c:	1aed      	subs	r5, r5, r3
 802311e:	b2ad      	uxth	r5, r5
 8023120:	042b      	lsls	r3, r5, #16
 8023122:	d502      	bpl.n	802312a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8023124:	1b64      	subs	r4, r4, r5
 8023126:	2500      	movs	r5, #0
 8023128:	b224      	sxth	r4, r4
 802312a:	f9b2 1000 	ldrsh.w	r1, [r2]
 802312e:	a814      	add	r0, sp, #80	; 0x50
 8023130:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8023134:	428c      	cmp	r4, r1
 8023136:	b28b      	uxth	r3, r1
 8023138:	bfbf      	itttt	lt
 802313a:	18ed      	addlt	r5, r5, r3
 802313c:	1b2c      	sublt	r4, r5, r4
 802313e:	b2a5      	uxthlt	r5, r4
 8023140:	460c      	movlt	r4, r1
 8023142:	8891      	ldrh	r1, [r2, #4]
 8023144:	440b      	add	r3, r1
 8023146:	4621      	mov	r1, r4
 8023148:	b21b      	sxth	r3, r3
 802314a:	930f      	str	r3, [sp, #60]	; 0x3c
 802314c:	88d3      	ldrh	r3, [r2, #6]
 802314e:	8852      	ldrh	r2, [r2, #2]
 8023150:	4413      	add	r3, r2
 8023152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023154:	b21b      	sxth	r3, r3
 8023156:	930d      	str	r3, [sp, #52]	; 0x34
 8023158:	4bbd      	ldr	r3, [pc, #756]	; (8023450 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 802315a:	f893 b000 	ldrb.w	fp, [r3]
 802315e:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023162:	f1dc 0300 	rsbs	r3, ip, #0
 8023166:	eb43 030c 	adc.w	r3, r3, ip
 802316a:	930e      	str	r3, [sp, #56]	; 0x38
 802316c:	4653      	mov	r3, sl
 802316e:	f7f8 faf1 	bl	801b754 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023172:	4621      	mov	r1, r4
 8023174:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8023178:	4653      	mov	r3, sl
 802317a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802317c:	a814      	add	r0, sp, #80	; 0x50
 802317e:	f7f8 fb06 	bl	801b78e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023182:	a918      	add	r1, sp, #96	; 0x60
 8023184:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023188:	a817      	add	r0, sp, #92	; 0x5c
 802318a:	f7f8 fc27 	bl	801b9dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802318e:	f1ba 0f00 	cmp.w	sl, #0
 8023192:	f040 80f4 	bne.w	802337e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8023196:	f1bb 0f01 	cmp.w	fp, #1
 802319a:	f040 80f8 	bne.w	802338e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 802319e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	f040 8145 	bne.w	8023430 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80231a6:	b2ba      	uxth	r2, r7
 80231a8:	b905      	cbnz	r5, 80231ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80231aa:	b16e      	cbz	r6, 80231c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80231ac:	fb06 5302 	mla	r3, r6, r2, r5
 80231b0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80231b2:	4631      	mov	r1, r6
 80231b4:	fb08 f303 	mul.w	r3, r8, r3
 80231b8:	f003 0607 	and.w	r6, r3, #7
 80231bc:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80231c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80231c2:	eba9 0301 	sub.w	r3, r9, r1
 80231c6:	930a      	str	r3, [sp, #40]	; 0x28
 80231c8:	4651      	mov	r1, sl
 80231ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 80231cc:	f7ff ff1c 	bl	8023008 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80231d0:	4681      	mov	r9, r0
 80231d2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80231d4:	f7ff ff42 	bl	802305c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80231d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80231da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80231dc:	4683      	mov	fp, r0
 80231de:	eba3 0a01 	sub.w	sl, r3, r1
 80231e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231e4:	459a      	cmp	sl, r3
 80231e6:	bfa8      	it	ge
 80231e8:	469a      	movge	sl, r3
 80231ea:	f1ba 0f00 	cmp.w	sl, #0
 80231ee:	f340 811a 	ble.w	8023426 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80231f2:	1b64      	subs	r4, r4, r5
 80231f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80231f6:	1b1c      	subs	r4, r3, r4
 80231f8:	42bc      	cmp	r4, r7
 80231fa:	bfd4      	ite	le
 80231fc:	ebc5 0504 	rsble	r5, r5, r4
 8023200:	ebc5 0507 	rsbgt	r5, r5, r7
 8023204:	2d00      	cmp	r5, #0
 8023206:	f340 810e 	ble.w	8023426 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802320a:	1b52      	subs	r2, r2, r5
 802320c:	fb08 f302 	mul.w	r3, r8, r2
 8023210:	930f      	str	r3, [sp, #60]	; 0x3c
 8023212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023214:	2b00      	cmp	r3, #0
 8023216:	f040 8116 	bne.w	8023446 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 802321a:	4b8e      	ldr	r3, [pc, #568]	; (8023454 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802321c:	6818      	ldr	r0, [r3, #0]
 802321e:	6803      	ldr	r3, [r0, #0]
 8023220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023222:	4798      	blx	r3
 8023224:	2301      	movs	r3, #1
 8023226:	4a8c      	ldr	r2, [pc, #560]	; (8023458 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023228:	fa03 f308 	lsl.w	r3, r3, r8
 802322c:	8811      	ldrh	r1, [r2, #0]
 802322e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8023232:	3b01      	subs	r3, #1
 8023234:	b2db      	uxtb	r3, r3
 8023236:	930e      	str	r3, [sp, #56]	; 0x38
 8023238:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 802323c:	fb01 2303 	mla	r3, r1, r3, r2
 8023240:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023244:	930a      	str	r3, [sp, #40]	; 0x28
 8023246:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023248:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802324c:	9313      	str	r3, [sp, #76]	; 0x4c
 802324e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023250:	0a19      	lsrs	r1, r3, #8
 8023252:	b2cb      	uxtb	r3, r1
 8023254:	9312      	str	r3, [sp, #72]	; 0x48
 8023256:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023258:	b2db      	uxtb	r3, r3
 802325a:	9311      	str	r3, [sp, #68]	; 0x44
 802325c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802325e:	095a      	lsrs	r2, r3, #5
 8023260:	4b7e      	ldr	r3, [pc, #504]	; (802345c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8023262:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023266:	400b      	ands	r3, r1
 8023268:	4313      	orrs	r3, r2
 802326a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802326c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023270:	4313      	orrs	r3, r2
 8023272:	b29b      	uxth	r3, r3
 8023274:	9310      	str	r3, [sp, #64]	; 0x40
 8023276:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023278:	781a      	ldrb	r2, [r3, #0]
 802327a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802327e:	fb05 b919 	mls	r9, r5, r9, fp
 8023282:	4132      	asrs	r2, r6
 8023284:	fb03 fb05 	mul.w	fp, r3, r5
 8023288:	930d      	str	r3, [sp, #52]	; 0x34
 802328a:	b2d2      	uxtb	r2, r2
 802328c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8023290:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023294:	f0c0 80f5 	bcc.w	8023482 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8023298:	46ae      	mov	lr, r5
 802329a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 802329e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80232a2:	f0c0 80dd 	bcc.w	8023460 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80232a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80232a8:	4013      	ands	r3, r2
 80232aa:	d055      	beq.n	8023358 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80232ac:	20ff      	movs	r0, #255	; 0xff
 80232ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80232b0:	fb90 f1f1 	sdiv	r1, r0, r1
 80232b4:	434b      	muls	r3, r1
 80232b6:	2bfe      	cmp	r3, #254	; 0xfe
 80232b8:	dd03      	ble.n	80232c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80232ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80232bc:	4281      	cmp	r1, r0
 80232be:	f000 80c4 	beq.w	802344a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80232c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80232c4:	f8bc 4000 	ldrh.w	r4, [ip]
 80232c8:	fb11 f303 	smulbb	r3, r1, r3
 80232cc:	1220      	asrs	r0, r4, #8
 80232ce:	b29b      	uxth	r3, r3
 80232d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80232d4:	1c59      	adds	r1, r3, #1
 80232d6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80232da:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80232de:	10e1      	asrs	r1, r4, #3
 80232e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80232e4:	00e4      	lsls	r4, r4, #3
 80232e6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80232ea:	b29f      	uxth	r7, r3
 80232ec:	43db      	mvns	r3, r3
 80232ee:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80232f2:	b2db      	uxtb	r3, r3
 80232f4:	b2e4      	uxtb	r4, r4
 80232f6:	9309      	str	r3, [sp, #36]	; 0x24
 80232f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80232fa:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80232fe:	fb13 f907 	smulbb	r9, r3, r7
 8023302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023304:	fb00 9003 	mla	r0, r0, r3, r9
 8023308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802330a:	fb13 f907 	smulbb	r9, r3, r7
 802330e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023310:	b280      	uxth	r0, r0
 8023312:	fb01 9103 	mla	r1, r1, r3, r9
 8023316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023318:	fb13 f707 	smulbb	r7, r3, r7
 802331c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802331e:	b289      	uxth	r1, r1
 8023320:	fb04 7403 	mla	r4, r4, r3, r7
 8023324:	1c43      	adds	r3, r0, #1
 8023326:	b2a4      	uxth	r4, r4
 8023328:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802332c:	f104 0901 	add.w	r9, r4, #1
 8023330:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023334:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023338:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 802333c:	ea49 0000 	orr.w	r0, r9, r0
 8023340:	f101 0901 	add.w	r9, r1, #1
 8023344:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023348:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802334c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023350:	ea40 0009 	orr.w	r0, r0, r9
 8023354:	f8ac 0000 	strh.w	r0, [ip]
 8023358:	4446      	add	r6, r8
 802335a:	b2b6      	uxth	r6, r6
 802335c:	2e07      	cmp	r6, #7
 802335e:	bf89      	itett	hi
 8023360:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8023362:	fa42 f208 	asrls.w	r2, r2, r8
 8023366:	2600      	movhi	r6, #0
 8023368:	785a      	ldrbhi	r2, [r3, #1]
 802336a:	bf8a      	itet	hi
 802336c:	3301      	addhi	r3, #1
 802336e:	b2d2      	uxtbls	r2, r2
 8023370:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8023372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023374:	449c      	add	ip, r3
 8023376:	e792      	b.n	802329e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8023378:	441c      	add	r4, r3
 802337a:	b224      	sxth	r4, r4
 802337c:	e6d5      	b.n	802312a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802337e:	f1ba 0f01 	cmp.w	sl, #1
 8023382:	f47f af0c 	bne.w	802319e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023386:	f1bb 0f01 	cmp.w	fp, #1
 802338a:	f47f af08 	bne.w	802319e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802338e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8023454 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8023392:	f8db 0000 	ldr.w	r0, [fp]
 8023396:	6803      	ldr	r3, [r0, #0]
 8023398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802339a:	4798      	blx	r3
 802339c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80233a0:	465a      	mov	r2, fp
 80233a2:	d006      	beq.n	80233b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80233a4:	f1b8 0f04 	cmp.w	r8, #4
 80233a8:	d140      	bne.n	802342c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80233aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80233ac:	3300      	adds	r3, #0
 80233ae:	bf18      	it	ne
 80233b0:	2301      	movne	r3, #1
 80233b2:	0580      	lsls	r0, r0, #22
 80233b4:	d56e      	bpl.n	8023494 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80233b6:	f1b8 0f08 	cmp.w	r8, #8
 80233ba:	d16b      	bne.n	8023494 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80233bc:	2b00      	cmp	r3, #0
 80233be:	bf0c      	ite	eq
 80233c0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80233c4:	f44f 7180 	movne.w	r1, #256	; 0x100
 80233c8:	2d00      	cmp	r5, #0
 80233ca:	f47f aee8 	bne.w	802319e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80233ce:	2e00      	cmp	r6, #0
 80233d0:	f47f aee5 	bne.w	802319e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80233d4:	19e3      	adds	r3, r4, r7
 80233d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80233d8:	4283      	cmp	r3, r0
 80233da:	f73f aee0 	bgt.w	802319e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80233de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80233e2:	444b      	add	r3, r9
 80233e4:	4283      	cmp	r3, r0
 80233e6:	f73f aeda 	bgt.w	802319e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80233ea:	b2bf      	uxth	r7, r7
 80233ec:	f1b8 0f08 	cmp.w	r8, #8
 80233f0:	6810      	ldr	r0, [r2, #0]
 80233f2:	f04f 0500 	mov.w	r5, #0
 80233f6:	bf18      	it	ne
 80233f8:	3701      	addne	r7, #1
 80233fa:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 80233fe:	6804      	ldr	r4, [r0, #0]
 8023400:	bf18      	it	ne
 8023402:	f027 0701 	bicne.w	r7, r7, #1
 8023406:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 802340a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802340e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023410:	bf18      	it	ne
 8023412:	b2bf      	uxthne	r7, r7
 8023414:	9104      	str	r1, [sp, #16]
 8023416:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023418:	e9cd 7900 	strd	r7, r9, [sp]
 802341c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8023420:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023422:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8023424:	47a0      	blx	r4
 8023426:	b019      	add	sp, #100	; 0x64
 8023428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802342c:	2300      	movs	r3, #0
 802342e:	e7c0      	b.n	80233b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8023430:	2208      	movs	r2, #8
 8023432:	fb92 f3f8 	sdiv	r3, r2, r8
 8023436:	1e5a      	subs	r2, r3, #1
 8023438:	443a      	add	r2, r7
 802343a:	fb92 f2f3 	sdiv	r2, r2, r3
 802343e:	fb12 f203 	smulbb	r2, r2, r3
 8023442:	b292      	uxth	r2, r2
 8023444:	e6b0      	b.n	80231a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8023446:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023448:	e6ec      	b.n	8023224 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 802344a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802344c:	e782      	b.n	8023354 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 802344e:	bf00      	nop
 8023450:	20015fb4 	.word	0x20015fb4
 8023454:	20015fbc 	.word	0x20015fbc
 8023458:	20015fb6 	.word	0x20015fb6
 802345c:	00fff800 	.word	0x00fff800
 8023460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023462:	b153      	cbz	r3, 802347a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8023464:	441e      	add	r6, r3
 8023466:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023468:	b2b6      	uxth	r6, r6
 802346a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802346e:	f006 0607 	and.w	r6, r6, #7
 8023472:	781a      	ldrb	r2, [r3, #0]
 8023474:	9328      	str	r3, [sp, #160]	; 0xa0
 8023476:	4132      	asrs	r2, r6
 8023478:	b2d2      	uxtb	r2, r2
 802347a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802347c:	445b      	add	r3, fp
 802347e:	930a      	str	r3, [sp, #40]	; 0x28
 8023480:	e706      	b.n	8023290 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8023482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023484:	2b00      	cmp	r3, #0
 8023486:	d1ce      	bne.n	8023426 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023488:	4b05      	ldr	r3, [pc, #20]	; (80234a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 802348a:	6818      	ldr	r0, [r3, #0]
 802348c:	6803      	ldr	r3, [r0, #0]
 802348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023490:	4798      	blx	r3
 8023492:	e7c8      	b.n	8023426 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023494:	2b00      	cmp	r3, #0
 8023496:	f43f ae82 	beq.w	802319e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802349a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802349e:	e793      	b.n	80233c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80234a0:	20015fbc 	.word	0x20015fbc

080234a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80234a4:	b538      	push	{r3, r4, r5, lr}
 80234a6:	4c15      	ldr	r4, [pc, #84]	; (80234fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80234a8:	4605      	mov	r5, r0
 80234aa:	7823      	ldrb	r3, [r4, #0]
 80234ac:	f3bf 8f5b 	dmb	ish
 80234b0:	07da      	lsls	r2, r3, #31
 80234b2:	d40b      	bmi.n	80234cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80234b4:	4620      	mov	r0, r4
 80234b6:	f007 fa68 	bl	802a98a <__cxa_guard_acquire>
 80234ba:	b138      	cbz	r0, 80234cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80234bc:	4620      	mov	r0, r4
 80234be:	f007 fa70 	bl	802a9a2 <__cxa_guard_release>
 80234c2:	4a0f      	ldr	r2, [pc, #60]	; (8023500 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80234c4:	490f      	ldr	r1, [pc, #60]	; (8023504 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80234c6:	4810      	ldr	r0, [pc, #64]	; (8023508 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80234c8:	f007 fa58 	bl	802a97c <__aeabi_atexit>
 80234cc:	4c0f      	ldr	r4, [pc, #60]	; (802350c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80234ce:	7823      	ldrb	r3, [r4, #0]
 80234d0:	f3bf 8f5b 	dmb	ish
 80234d4:	07db      	lsls	r3, r3, #31
 80234d6:	d40b      	bmi.n	80234f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80234d8:	4620      	mov	r0, r4
 80234da:	f007 fa56 	bl	802a98a <__cxa_guard_acquire>
 80234de:	b138      	cbz	r0, 80234f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80234e0:	4620      	mov	r0, r4
 80234e2:	f007 fa5e 	bl	802a9a2 <__cxa_guard_release>
 80234e6:	4a06      	ldr	r2, [pc, #24]	; (8023500 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80234e8:	4909      	ldr	r1, [pc, #36]	; (8023510 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80234ea:	480a      	ldr	r0, [pc, #40]	; (8023514 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80234ec:	f007 fa46 	bl	802a97c <__aeabi_atexit>
 80234f0:	4b05      	ldr	r3, [pc, #20]	; (8023508 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80234f2:	612b      	str	r3, [r5, #16]
 80234f4:	4b07      	ldr	r3, [pc, #28]	; (8023514 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80234f6:	616b      	str	r3, [r5, #20]
 80234f8:	bd38      	pop	{r3, r4, r5, pc}
 80234fa:	bf00      	nop
 80234fc:	20016088 	.word	0x20016088
 8023500:	20000000 	.word	0x20000000
 8023504:	080216b1 	.word	0x080216b1
 8023508:	20000088 	.word	0x20000088
 802350c:	2001608c 	.word	0x2001608c
 8023510:	080216af 	.word	0x080216af
 8023514:	2000008c 	.word	0x2000008c

08023518 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8023518:	b538      	push	{r3, r4, r5, lr}
 802351a:	4c15      	ldr	r4, [pc, #84]	; (8023570 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802351c:	4605      	mov	r5, r0
 802351e:	7823      	ldrb	r3, [r4, #0]
 8023520:	f3bf 8f5b 	dmb	ish
 8023524:	07da      	lsls	r2, r3, #31
 8023526:	d40b      	bmi.n	8023540 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023528:	4620      	mov	r0, r4
 802352a:	f007 fa2e 	bl	802a98a <__cxa_guard_acquire>
 802352e:	b138      	cbz	r0, 8023540 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023530:	4620      	mov	r0, r4
 8023532:	f007 fa36 	bl	802a9a2 <__cxa_guard_release>
 8023536:	4a0f      	ldr	r2, [pc, #60]	; (8023574 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023538:	490f      	ldr	r1, [pc, #60]	; (8023578 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802353a:	4810      	ldr	r0, [pc, #64]	; (802357c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802353c:	f007 fa1e 	bl	802a97c <__aeabi_atexit>
 8023540:	4c0f      	ldr	r4, [pc, #60]	; (8023580 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8023542:	7823      	ldrb	r3, [r4, #0]
 8023544:	f3bf 8f5b 	dmb	ish
 8023548:	07db      	lsls	r3, r3, #31
 802354a:	d40b      	bmi.n	8023564 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802354c:	4620      	mov	r0, r4
 802354e:	f007 fa1c 	bl	802a98a <__cxa_guard_acquire>
 8023552:	b138      	cbz	r0, 8023564 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023554:	4620      	mov	r0, r4
 8023556:	f007 fa24 	bl	802a9a2 <__cxa_guard_release>
 802355a:	4a06      	ldr	r2, [pc, #24]	; (8023574 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802355c:	4909      	ldr	r1, [pc, #36]	; (8023584 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802355e:	480a      	ldr	r0, [pc, #40]	; (8023588 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023560:	f007 fa0c 	bl	802a97c <__aeabi_atexit>
 8023564:	4b05      	ldr	r3, [pc, #20]	; (802357c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023566:	60ab      	str	r3, [r5, #8]
 8023568:	4b07      	ldr	r3, [pc, #28]	; (8023588 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802356a:	60eb      	str	r3, [r5, #12]
 802356c:	bd38      	pop	{r3, r4, r5, pc}
 802356e:	bf00      	nop
 8023570:	20016060 	.word	0x20016060
 8023574:	20000000 	.word	0x20000000
 8023578:	080216b5 	.word	0x080216b5
 802357c:	20000060 	.word	0x20000060
 8023580:	20016064 	.word	0x20016064
 8023584:	080216b3 	.word	0x080216b3
 8023588:	20000064 	.word	0x20000064

0802358c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 802358c:	b510      	push	{r4, lr}
 802358e:	4604      	mov	r4, r0
 8023590:	f7ff ff88 	bl	80234a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8023594:	4620      	mov	r0, r4
 8023596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802359a:	f7ff bfbd 	b.w	8023518 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080235a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80235a0:	b538      	push	{r3, r4, r5, lr}
 80235a2:	4c15      	ldr	r4, [pc, #84]	; (80235f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80235a4:	4605      	mov	r5, r0
 80235a6:	7823      	ldrb	r3, [r4, #0]
 80235a8:	f3bf 8f5b 	dmb	ish
 80235ac:	07da      	lsls	r2, r3, #31
 80235ae:	d40b      	bmi.n	80235c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80235b0:	4620      	mov	r0, r4
 80235b2:	f007 f9ea 	bl	802a98a <__cxa_guard_acquire>
 80235b6:	b138      	cbz	r0, 80235c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80235b8:	4620      	mov	r0, r4
 80235ba:	f007 f9f2 	bl	802a9a2 <__cxa_guard_release>
 80235be:	4a0f      	ldr	r2, [pc, #60]	; (80235fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80235c0:	490f      	ldr	r1, [pc, #60]	; (8023600 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80235c2:	4810      	ldr	r0, [pc, #64]	; (8023604 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80235c4:	f007 f9da 	bl	802a97c <__aeabi_atexit>
 80235c8:	4c0f      	ldr	r4, [pc, #60]	; (8023608 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80235ca:	7823      	ldrb	r3, [r4, #0]
 80235cc:	f3bf 8f5b 	dmb	ish
 80235d0:	07db      	lsls	r3, r3, #31
 80235d2:	d40b      	bmi.n	80235ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80235d4:	4620      	mov	r0, r4
 80235d6:	f007 f9d8 	bl	802a98a <__cxa_guard_acquire>
 80235da:	b138      	cbz	r0, 80235ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80235dc:	4620      	mov	r0, r4
 80235de:	f007 f9e0 	bl	802a9a2 <__cxa_guard_release>
 80235e2:	4a06      	ldr	r2, [pc, #24]	; (80235fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80235e4:	4909      	ldr	r1, [pc, #36]	; (802360c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80235e6:	480a      	ldr	r0, [pc, #40]	; (8023610 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80235e8:	f007 f9c8 	bl	802a97c <__aeabi_atexit>
 80235ec:	4b05      	ldr	r3, [pc, #20]	; (8023604 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80235ee:	622b      	str	r3, [r5, #32]
 80235f0:	4b07      	ldr	r3, [pc, #28]	; (8023610 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80235f2:	626b      	str	r3, [r5, #36]	; 0x24
 80235f4:	bd38      	pop	{r3, r4, r5, pc}
 80235f6:	bf00      	nop
 80235f8:	20016090 	.word	0x20016090
 80235fc:	20000000 	.word	0x20000000
 8023600:	080216a9 	.word	0x080216a9
 8023604:	20000090 	.word	0x20000090
 8023608:	20016094 	.word	0x20016094
 802360c:	080216a7 	.word	0x080216a7
 8023610:	20000094 	.word	0x20000094

08023614 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023614:	b538      	push	{r3, r4, r5, lr}
 8023616:	4c15      	ldr	r4, [pc, #84]	; (802366c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023618:	4605      	mov	r5, r0
 802361a:	7823      	ldrb	r3, [r4, #0]
 802361c:	f3bf 8f5b 	dmb	ish
 8023620:	07da      	lsls	r2, r3, #31
 8023622:	d40b      	bmi.n	802363c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023624:	4620      	mov	r0, r4
 8023626:	f007 f9b0 	bl	802a98a <__cxa_guard_acquire>
 802362a:	b138      	cbz	r0, 802363c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802362c:	4620      	mov	r0, r4
 802362e:	f007 f9b8 	bl	802a9a2 <__cxa_guard_release>
 8023632:	4a0f      	ldr	r2, [pc, #60]	; (8023670 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023634:	490f      	ldr	r1, [pc, #60]	; (8023674 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023636:	4810      	ldr	r0, [pc, #64]	; (8023678 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023638:	f007 f9a0 	bl	802a97c <__aeabi_atexit>
 802363c:	4c0f      	ldr	r4, [pc, #60]	; (802367c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802363e:	7823      	ldrb	r3, [r4, #0]
 8023640:	f3bf 8f5b 	dmb	ish
 8023644:	07db      	lsls	r3, r3, #31
 8023646:	d40b      	bmi.n	8023660 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023648:	4620      	mov	r0, r4
 802364a:	f007 f99e 	bl	802a98a <__cxa_guard_acquire>
 802364e:	b138      	cbz	r0, 8023660 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023650:	4620      	mov	r0, r4
 8023652:	f007 f9a6 	bl	802a9a2 <__cxa_guard_release>
 8023656:	4a06      	ldr	r2, [pc, #24]	; (8023670 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023658:	4909      	ldr	r1, [pc, #36]	; (8023680 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802365a:	480a      	ldr	r0, [pc, #40]	; (8023684 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802365c:	f007 f98e 	bl	802a97c <__aeabi_atexit>
 8023660:	4b05      	ldr	r3, [pc, #20]	; (8023678 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023662:	61ab      	str	r3, [r5, #24]
 8023664:	4b07      	ldr	r3, [pc, #28]	; (8023684 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023666:	61eb      	str	r3, [r5, #28]
 8023668:	bd38      	pop	{r3, r4, r5, pc}
 802366a:	bf00      	nop
 802366c:	20016068 	.word	0x20016068
 8023670:	20000000 	.word	0x20000000
 8023674:	080216ad 	.word	0x080216ad
 8023678:	20000068 	.word	0x20000068
 802367c:	2001606c 	.word	0x2001606c
 8023680:	080216ab 	.word	0x080216ab
 8023684:	2000006c 	.word	0x2000006c

08023688 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8023688:	b510      	push	{r4, lr}
 802368a:	4604      	mov	r4, r0
 802368c:	f7ff ff88 	bl	80235a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023690:	4620      	mov	r0, r4
 8023692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023696:	f7ff bfbd 	b.w	8023614 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802369c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802369c:	b538      	push	{r3, r4, r5, lr}
 802369e:	4c15      	ldr	r4, [pc, #84]	; (80236f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80236a0:	4605      	mov	r5, r0
 80236a2:	7823      	ldrb	r3, [r4, #0]
 80236a4:	f3bf 8f5b 	dmb	ish
 80236a8:	07da      	lsls	r2, r3, #31
 80236aa:	d40b      	bmi.n	80236c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80236ac:	4620      	mov	r0, r4
 80236ae:	f007 f96c 	bl	802a98a <__cxa_guard_acquire>
 80236b2:	b138      	cbz	r0, 80236c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80236b4:	4620      	mov	r0, r4
 80236b6:	f007 f974 	bl	802a9a2 <__cxa_guard_release>
 80236ba:	4a0f      	ldr	r2, [pc, #60]	; (80236f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80236bc:	490f      	ldr	r1, [pc, #60]	; (80236fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80236be:	4810      	ldr	r0, [pc, #64]	; (8023700 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80236c0:	f007 f95c 	bl	802a97c <__aeabi_atexit>
 80236c4:	4c0f      	ldr	r4, [pc, #60]	; (8023704 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80236c6:	7823      	ldrb	r3, [r4, #0]
 80236c8:	f3bf 8f5b 	dmb	ish
 80236cc:	07db      	lsls	r3, r3, #31
 80236ce:	d40b      	bmi.n	80236e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80236d0:	4620      	mov	r0, r4
 80236d2:	f007 f95a 	bl	802a98a <__cxa_guard_acquire>
 80236d6:	b138      	cbz	r0, 80236e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80236d8:	4620      	mov	r0, r4
 80236da:	f007 f962 	bl	802a9a2 <__cxa_guard_release>
 80236de:	4a06      	ldr	r2, [pc, #24]	; (80236f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80236e0:	4909      	ldr	r1, [pc, #36]	; (8023708 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80236e2:	480a      	ldr	r0, [pc, #40]	; (802370c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80236e4:	f007 f94a 	bl	802a97c <__aeabi_atexit>
 80236e8:	4b05      	ldr	r3, [pc, #20]	; (8023700 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80236ea:	632b      	str	r3, [r5, #48]	; 0x30
 80236ec:	4b07      	ldr	r3, [pc, #28]	; (802370c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80236ee:	636b      	str	r3, [r5, #52]	; 0x34
 80236f0:	bd38      	pop	{r3, r4, r5, pc}
 80236f2:	bf00      	nop
 80236f4:	200160a0 	.word	0x200160a0
 80236f8:	20000000 	.word	0x20000000
 80236fc:	080216a1 	.word	0x080216a1
 8023700:	200000a0 	.word	0x200000a0
 8023704:	200160a4 	.word	0x200160a4
 8023708:	0802169f 	.word	0x0802169f
 802370c:	200000a4 	.word	0x200000a4

08023710 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023710:	b538      	push	{r3, r4, r5, lr}
 8023712:	4c15      	ldr	r4, [pc, #84]	; (8023768 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023714:	4605      	mov	r5, r0
 8023716:	7823      	ldrb	r3, [r4, #0]
 8023718:	f3bf 8f5b 	dmb	ish
 802371c:	07da      	lsls	r2, r3, #31
 802371e:	d40b      	bmi.n	8023738 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023720:	4620      	mov	r0, r4
 8023722:	f007 f932 	bl	802a98a <__cxa_guard_acquire>
 8023726:	b138      	cbz	r0, 8023738 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023728:	4620      	mov	r0, r4
 802372a:	f007 f93a 	bl	802a9a2 <__cxa_guard_release>
 802372e:	4a0f      	ldr	r2, [pc, #60]	; (802376c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023730:	490f      	ldr	r1, [pc, #60]	; (8023770 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023732:	4810      	ldr	r0, [pc, #64]	; (8023774 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023734:	f007 f922 	bl	802a97c <__aeabi_atexit>
 8023738:	4c0f      	ldr	r4, [pc, #60]	; (8023778 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802373a:	7823      	ldrb	r3, [r4, #0]
 802373c:	f3bf 8f5b 	dmb	ish
 8023740:	07db      	lsls	r3, r3, #31
 8023742:	d40b      	bmi.n	802375c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023744:	4620      	mov	r0, r4
 8023746:	f007 f920 	bl	802a98a <__cxa_guard_acquire>
 802374a:	b138      	cbz	r0, 802375c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802374c:	4620      	mov	r0, r4
 802374e:	f007 f928 	bl	802a9a2 <__cxa_guard_release>
 8023752:	4a06      	ldr	r2, [pc, #24]	; (802376c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023754:	4909      	ldr	r1, [pc, #36]	; (802377c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023756:	480a      	ldr	r0, [pc, #40]	; (8023780 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023758:	f007 f910 	bl	802a97c <__aeabi_atexit>
 802375c:	4b05      	ldr	r3, [pc, #20]	; (8023774 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802375e:	62ab      	str	r3, [r5, #40]	; 0x28
 8023760:	4b07      	ldr	r3, [pc, #28]	; (8023780 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023762:	62eb      	str	r3, [r5, #44]	; 0x2c
 8023764:	bd38      	pop	{r3, r4, r5, pc}
 8023766:	bf00      	nop
 8023768:	20016070 	.word	0x20016070
 802376c:	20000000 	.word	0x20000000
 8023770:	080216a5 	.word	0x080216a5
 8023774:	20000070 	.word	0x20000070
 8023778:	20016074 	.word	0x20016074
 802377c:	080216a3 	.word	0x080216a3
 8023780:	20000074 	.word	0x20000074

08023784 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023784:	b510      	push	{r4, lr}
 8023786:	4604      	mov	r4, r0
 8023788:	f7ff ff88 	bl	802369c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802378c:	4620      	mov	r0, r4
 802378e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023792:	f7ff bfbd 	b.w	8023710 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023798 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023798:	b538      	push	{r3, r4, r5, lr}
 802379a:	4c15      	ldr	r4, [pc, #84]	; (80237f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802379c:	4605      	mov	r5, r0
 802379e:	7823      	ldrb	r3, [r4, #0]
 80237a0:	f3bf 8f5b 	dmb	ish
 80237a4:	07da      	lsls	r2, r3, #31
 80237a6:	d40b      	bmi.n	80237c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80237a8:	4620      	mov	r0, r4
 80237aa:	f007 f8ee 	bl	802a98a <__cxa_guard_acquire>
 80237ae:	b138      	cbz	r0, 80237c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80237b0:	4620      	mov	r0, r4
 80237b2:	f007 f8f6 	bl	802a9a2 <__cxa_guard_release>
 80237b6:	4a0f      	ldr	r2, [pc, #60]	; (80237f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80237b8:	490f      	ldr	r1, [pc, #60]	; (80237f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80237ba:	4810      	ldr	r0, [pc, #64]	; (80237fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80237bc:	f007 f8de 	bl	802a97c <__aeabi_atexit>
 80237c0:	4c0f      	ldr	r4, [pc, #60]	; (8023800 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80237c2:	7823      	ldrb	r3, [r4, #0]
 80237c4:	f3bf 8f5b 	dmb	ish
 80237c8:	07db      	lsls	r3, r3, #31
 80237ca:	d40b      	bmi.n	80237e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80237cc:	4620      	mov	r0, r4
 80237ce:	f007 f8dc 	bl	802a98a <__cxa_guard_acquire>
 80237d2:	b138      	cbz	r0, 80237e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80237d4:	4620      	mov	r0, r4
 80237d6:	f007 f8e4 	bl	802a9a2 <__cxa_guard_release>
 80237da:	4a06      	ldr	r2, [pc, #24]	; (80237f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80237dc:	4909      	ldr	r1, [pc, #36]	; (8023804 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80237de:	480a      	ldr	r0, [pc, #40]	; (8023808 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80237e0:	f007 f8cc 	bl	802a97c <__aeabi_atexit>
 80237e4:	4b05      	ldr	r3, [pc, #20]	; (80237fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80237e6:	652b      	str	r3, [r5, #80]	; 0x50
 80237e8:	4b07      	ldr	r3, [pc, #28]	; (8023808 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80237ea:	656b      	str	r3, [r5, #84]	; 0x54
 80237ec:	bd38      	pop	{r3, r4, r5, pc}
 80237ee:	bf00      	nop
 80237f0:	200160a8 	.word	0x200160a8
 80237f4:	20000000 	.word	0x20000000
 80237f8:	08021691 	.word	0x08021691
 80237fc:	200000a8 	.word	0x200000a8
 8023800:	200160ac 	.word	0x200160ac
 8023804:	0802168f 	.word	0x0802168f
 8023808:	200000ac 	.word	0x200000ac

0802380c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802380c:	b538      	push	{r3, r4, r5, lr}
 802380e:	4c15      	ldr	r4, [pc, #84]	; (8023864 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023810:	4605      	mov	r5, r0
 8023812:	7823      	ldrb	r3, [r4, #0]
 8023814:	f3bf 8f5b 	dmb	ish
 8023818:	07da      	lsls	r2, r3, #31
 802381a:	d40b      	bmi.n	8023834 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802381c:	4620      	mov	r0, r4
 802381e:	f007 f8b4 	bl	802a98a <__cxa_guard_acquire>
 8023822:	b138      	cbz	r0, 8023834 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023824:	4620      	mov	r0, r4
 8023826:	f007 f8bc 	bl	802a9a2 <__cxa_guard_release>
 802382a:	4a0f      	ldr	r2, [pc, #60]	; (8023868 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802382c:	490f      	ldr	r1, [pc, #60]	; (802386c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802382e:	4810      	ldr	r0, [pc, #64]	; (8023870 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023830:	f007 f8a4 	bl	802a97c <__aeabi_atexit>
 8023834:	4c0f      	ldr	r4, [pc, #60]	; (8023874 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8023836:	7823      	ldrb	r3, [r4, #0]
 8023838:	f3bf 8f5b 	dmb	ish
 802383c:	07db      	lsls	r3, r3, #31
 802383e:	d40b      	bmi.n	8023858 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023840:	4620      	mov	r0, r4
 8023842:	f007 f8a2 	bl	802a98a <__cxa_guard_acquire>
 8023846:	b138      	cbz	r0, 8023858 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023848:	4620      	mov	r0, r4
 802384a:	f007 f8aa 	bl	802a9a2 <__cxa_guard_release>
 802384e:	4a06      	ldr	r2, [pc, #24]	; (8023868 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023850:	4909      	ldr	r1, [pc, #36]	; (8023878 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023852:	480a      	ldr	r0, [pc, #40]	; (802387c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023854:	f007 f892 	bl	802a97c <__aeabi_atexit>
 8023858:	4b05      	ldr	r3, [pc, #20]	; (8023870 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802385a:	64ab      	str	r3, [r5, #72]	; 0x48
 802385c:	4b07      	ldr	r3, [pc, #28]	; (802387c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802385e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8023860:	bd38      	pop	{r3, r4, r5, pc}
 8023862:	bf00      	nop
 8023864:	200160b0 	.word	0x200160b0
 8023868:	20000000 	.word	0x20000000
 802386c:	08021695 	.word	0x08021695
 8023870:	200000b0 	.word	0x200000b0
 8023874:	200160b4 	.word	0x200160b4
 8023878:	08021693 	.word	0x08021693
 802387c:	200000b4 	.word	0x200000b4

08023880 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023880:	b538      	push	{r3, r4, r5, lr}
 8023882:	4c15      	ldr	r4, [pc, #84]	; (80238d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023884:	4605      	mov	r5, r0
 8023886:	7823      	ldrb	r3, [r4, #0]
 8023888:	f3bf 8f5b 	dmb	ish
 802388c:	07da      	lsls	r2, r3, #31
 802388e:	d40b      	bmi.n	80238a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023890:	4620      	mov	r0, r4
 8023892:	f007 f87a 	bl	802a98a <__cxa_guard_acquire>
 8023896:	b138      	cbz	r0, 80238a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023898:	4620      	mov	r0, r4
 802389a:	f007 f882 	bl	802a9a2 <__cxa_guard_release>
 802389e:	4a0f      	ldr	r2, [pc, #60]	; (80238dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80238a0:	490f      	ldr	r1, [pc, #60]	; (80238e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80238a2:	4810      	ldr	r0, [pc, #64]	; (80238e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80238a4:	f007 f86a 	bl	802a97c <__aeabi_atexit>
 80238a8:	4c0f      	ldr	r4, [pc, #60]	; (80238e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80238aa:	7823      	ldrb	r3, [r4, #0]
 80238ac:	f3bf 8f5b 	dmb	ish
 80238b0:	07db      	lsls	r3, r3, #31
 80238b2:	d40b      	bmi.n	80238cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80238b4:	4620      	mov	r0, r4
 80238b6:	f007 f868 	bl	802a98a <__cxa_guard_acquire>
 80238ba:	b138      	cbz	r0, 80238cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80238bc:	4620      	mov	r0, r4
 80238be:	f007 f870 	bl	802a9a2 <__cxa_guard_release>
 80238c2:	4a06      	ldr	r2, [pc, #24]	; (80238dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80238c4:	4909      	ldr	r1, [pc, #36]	; (80238ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80238c6:	480a      	ldr	r0, [pc, #40]	; (80238f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80238c8:	f007 f858 	bl	802a97c <__aeabi_atexit>
 80238cc:	4b05      	ldr	r3, [pc, #20]	; (80238e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80238ce:	642b      	str	r3, [r5, #64]	; 0x40
 80238d0:	4b07      	ldr	r3, [pc, #28]	; (80238f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80238d2:	646b      	str	r3, [r5, #68]	; 0x44
 80238d4:	bd38      	pop	{r3, r4, r5, pc}
 80238d6:	bf00      	nop
 80238d8:	20016078 	.word	0x20016078
 80238dc:	20000000 	.word	0x20000000
 80238e0:	08021699 	.word	0x08021699
 80238e4:	20000078 	.word	0x20000078
 80238e8:	2001607c 	.word	0x2001607c
 80238ec:	08021697 	.word	0x08021697
 80238f0:	2000007c 	.word	0x2000007c

080238f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80238f4:	b538      	push	{r3, r4, r5, lr}
 80238f6:	4c15      	ldr	r4, [pc, #84]	; (802394c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80238f8:	4605      	mov	r5, r0
 80238fa:	7823      	ldrb	r3, [r4, #0]
 80238fc:	f3bf 8f5b 	dmb	ish
 8023900:	07da      	lsls	r2, r3, #31
 8023902:	d40b      	bmi.n	802391c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023904:	4620      	mov	r0, r4
 8023906:	f007 f840 	bl	802a98a <__cxa_guard_acquire>
 802390a:	b138      	cbz	r0, 802391c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802390c:	4620      	mov	r0, r4
 802390e:	f007 f848 	bl	802a9a2 <__cxa_guard_release>
 8023912:	4a0f      	ldr	r2, [pc, #60]	; (8023950 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023914:	490f      	ldr	r1, [pc, #60]	; (8023954 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023916:	4810      	ldr	r0, [pc, #64]	; (8023958 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023918:	f007 f830 	bl	802a97c <__aeabi_atexit>
 802391c:	4c0f      	ldr	r4, [pc, #60]	; (802395c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802391e:	7823      	ldrb	r3, [r4, #0]
 8023920:	f3bf 8f5b 	dmb	ish
 8023924:	07db      	lsls	r3, r3, #31
 8023926:	d40b      	bmi.n	8023940 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023928:	4620      	mov	r0, r4
 802392a:	f007 f82e 	bl	802a98a <__cxa_guard_acquire>
 802392e:	b138      	cbz	r0, 8023940 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023930:	4620      	mov	r0, r4
 8023932:	f007 f836 	bl	802a9a2 <__cxa_guard_release>
 8023936:	4a06      	ldr	r2, [pc, #24]	; (8023950 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023938:	4909      	ldr	r1, [pc, #36]	; (8023960 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802393a:	480a      	ldr	r0, [pc, #40]	; (8023964 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802393c:	f007 f81e 	bl	802a97c <__aeabi_atexit>
 8023940:	4b05      	ldr	r3, [pc, #20]	; (8023958 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023942:	63ab      	str	r3, [r5, #56]	; 0x38
 8023944:	4b07      	ldr	r3, [pc, #28]	; (8023964 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023946:	63eb      	str	r3, [r5, #60]	; 0x3c
 8023948:	bd38      	pop	{r3, r4, r5, pc}
 802394a:	bf00      	nop
 802394c:	20016098 	.word	0x20016098
 8023950:	20000000 	.word	0x20000000
 8023954:	0802169d 	.word	0x0802169d
 8023958:	20000098 	.word	0x20000098
 802395c:	2001609c 	.word	0x2001609c
 8023960:	0802169b 	.word	0x0802169b
 8023964:	2000009c 	.word	0x2000009c

08023968 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8023968:	b510      	push	{r4, lr}
 802396a:	4604      	mov	r4, r0
 802396c:	f7ff ff14 	bl	8023798 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023970:	4620      	mov	r0, r4
 8023972:	f7ff ff85 	bl	8023880 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023976:	4620      	mov	r0, r4
 8023978:	f7ff ff48 	bl	802380c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802397c:	4620      	mov	r0, r4
 802397e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023982:	f7ff bfb7 	b.w	80238f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023988 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023988:	b538      	push	{r3, r4, r5, lr}
 802398a:	4c15      	ldr	r4, [pc, #84]	; (80239e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802398c:	4605      	mov	r5, r0
 802398e:	7823      	ldrb	r3, [r4, #0]
 8023990:	f3bf 8f5b 	dmb	ish
 8023994:	07da      	lsls	r2, r3, #31
 8023996:	d40b      	bmi.n	80239b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023998:	4620      	mov	r0, r4
 802399a:	f006 fff6 	bl	802a98a <__cxa_guard_acquire>
 802399e:	b138      	cbz	r0, 80239b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80239a0:	4620      	mov	r0, r4
 80239a2:	f006 fffe 	bl	802a9a2 <__cxa_guard_release>
 80239a6:	4a0f      	ldr	r2, [pc, #60]	; (80239e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80239a8:	490f      	ldr	r1, [pc, #60]	; (80239e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80239aa:	4810      	ldr	r0, [pc, #64]	; (80239ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80239ac:	f006 ffe6 	bl	802a97c <__aeabi_atexit>
 80239b0:	4c0f      	ldr	r4, [pc, #60]	; (80239f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80239b2:	7823      	ldrb	r3, [r4, #0]
 80239b4:	f3bf 8f5b 	dmb	ish
 80239b8:	07db      	lsls	r3, r3, #31
 80239ba:	d40b      	bmi.n	80239d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80239bc:	4620      	mov	r0, r4
 80239be:	f006 ffe4 	bl	802a98a <__cxa_guard_acquire>
 80239c2:	b138      	cbz	r0, 80239d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80239c4:	4620      	mov	r0, r4
 80239c6:	f006 ffec 	bl	802a9a2 <__cxa_guard_release>
 80239ca:	4a06      	ldr	r2, [pc, #24]	; (80239e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80239cc:	4909      	ldr	r1, [pc, #36]	; (80239f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80239ce:	480a      	ldr	r0, [pc, #40]	; (80239f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80239d0:	f006 ffd4 	bl	802a97c <__aeabi_atexit>
 80239d4:	4b05      	ldr	r3, [pc, #20]	; (80239ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80239d6:	662b      	str	r3, [r5, #96]	; 0x60
 80239d8:	4b07      	ldr	r3, [pc, #28]	; (80239f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80239da:	666b      	str	r3, [r5, #100]	; 0x64
 80239dc:	bd38      	pop	{r3, r4, r5, pc}
 80239de:	bf00      	nop
 80239e0:	20016080 	.word	0x20016080
 80239e4:	20000000 	.word	0x20000000
 80239e8:	08021689 	.word	0x08021689
 80239ec:	20000080 	.word	0x20000080
 80239f0:	20016084 	.word	0x20016084
 80239f4:	08021687 	.word	0x08021687
 80239f8:	20000084 	.word	0x20000084

080239fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80239fc:	b538      	push	{r3, r4, r5, lr}
 80239fe:	4c15      	ldr	r4, [pc, #84]	; (8023a54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023a00:	4605      	mov	r5, r0
 8023a02:	7823      	ldrb	r3, [r4, #0]
 8023a04:	f3bf 8f5b 	dmb	ish
 8023a08:	07da      	lsls	r2, r3, #31
 8023a0a:	d40b      	bmi.n	8023a24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023a0c:	4620      	mov	r0, r4
 8023a0e:	f006 ffbc 	bl	802a98a <__cxa_guard_acquire>
 8023a12:	b138      	cbz	r0, 8023a24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023a14:	4620      	mov	r0, r4
 8023a16:	f006 ffc4 	bl	802a9a2 <__cxa_guard_release>
 8023a1a:	4a0f      	ldr	r2, [pc, #60]	; (8023a58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023a1c:	490f      	ldr	r1, [pc, #60]	; (8023a5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023a1e:	4810      	ldr	r0, [pc, #64]	; (8023a60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023a20:	f006 ffac 	bl	802a97c <__aeabi_atexit>
 8023a24:	4c0f      	ldr	r4, [pc, #60]	; (8023a64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023a26:	7823      	ldrb	r3, [r4, #0]
 8023a28:	f3bf 8f5b 	dmb	ish
 8023a2c:	07db      	lsls	r3, r3, #31
 8023a2e:	d40b      	bmi.n	8023a48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023a30:	4620      	mov	r0, r4
 8023a32:	f006 ffaa 	bl	802a98a <__cxa_guard_acquire>
 8023a36:	b138      	cbz	r0, 8023a48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023a38:	4620      	mov	r0, r4
 8023a3a:	f006 ffb2 	bl	802a9a2 <__cxa_guard_release>
 8023a3e:	4a06      	ldr	r2, [pc, #24]	; (8023a58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023a40:	4909      	ldr	r1, [pc, #36]	; (8023a68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023a42:	480a      	ldr	r0, [pc, #40]	; (8023a6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023a44:	f006 ff9a 	bl	802a97c <__aeabi_atexit>
 8023a48:	4b05      	ldr	r3, [pc, #20]	; (8023a60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023a4a:	65ab      	str	r3, [r5, #88]	; 0x58
 8023a4c:	4b07      	ldr	r3, [pc, #28]	; (8023a6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023a4e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8023a50:	bd38      	pop	{r3, r4, r5, pc}
 8023a52:	bf00      	nop
 8023a54:	20016058 	.word	0x20016058
 8023a58:	20000000 	.word	0x20000000
 8023a5c:	0802168d 	.word	0x0802168d
 8023a60:	20000058 	.word	0x20000058
 8023a64:	2001605c 	.word	0x2001605c
 8023a68:	0802168b 	.word	0x0802168b
 8023a6c:	2000005c 	.word	0x2000005c

08023a70 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8023a70:	b510      	push	{r4, lr}
 8023a72:	4604      	mov	r4, r0
 8023a74:	f7ff ff88 	bl	8023988 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023a78:	4620      	mov	r0, r4
 8023a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a7e:	f7ff bfbd 	b.w	80239fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023a84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023a84:	b538      	push	{r3, r4, r5, lr}
 8023a86:	4c15      	ldr	r4, [pc, #84]	; (8023adc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023a88:	4605      	mov	r5, r0
 8023a8a:	7823      	ldrb	r3, [r4, #0]
 8023a8c:	f3bf 8f5b 	dmb	ish
 8023a90:	07da      	lsls	r2, r3, #31
 8023a92:	d40b      	bmi.n	8023aac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023a94:	4620      	mov	r0, r4
 8023a96:	f006 ff78 	bl	802a98a <__cxa_guard_acquire>
 8023a9a:	b138      	cbz	r0, 8023aac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023a9c:	4620      	mov	r0, r4
 8023a9e:	f006 ff80 	bl	802a9a2 <__cxa_guard_release>
 8023aa2:	4a0f      	ldr	r2, [pc, #60]	; (8023ae0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023aa4:	490f      	ldr	r1, [pc, #60]	; (8023ae4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023aa6:	4810      	ldr	r0, [pc, #64]	; (8023ae8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023aa8:	f006 ff68 	bl	802a97c <__aeabi_atexit>
 8023aac:	4c0f      	ldr	r4, [pc, #60]	; (8023aec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023aae:	7823      	ldrb	r3, [r4, #0]
 8023ab0:	f3bf 8f5b 	dmb	ish
 8023ab4:	07db      	lsls	r3, r3, #31
 8023ab6:	d40b      	bmi.n	8023ad0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023ab8:	4620      	mov	r0, r4
 8023aba:	f006 ff66 	bl	802a98a <__cxa_guard_acquire>
 8023abe:	b138      	cbz	r0, 8023ad0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023ac0:	4620      	mov	r0, r4
 8023ac2:	f006 ff6e 	bl	802a9a2 <__cxa_guard_release>
 8023ac6:	4a06      	ldr	r2, [pc, #24]	; (8023ae0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023ac8:	4909      	ldr	r1, [pc, #36]	; (8023af0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023aca:	480a      	ldr	r0, [pc, #40]	; (8023af4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023acc:	f006 ff56 	bl	802a97c <__aeabi_atexit>
 8023ad0:	4b05      	ldr	r3, [pc, #20]	; (8023ae8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023ad2:	672b      	str	r3, [r5, #112]	; 0x70
 8023ad4:	4b07      	ldr	r3, [pc, #28]	; (8023af4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023ad6:	676b      	str	r3, [r5, #116]	; 0x74
 8023ad8:	bd38      	pop	{r3, r4, r5, pc}
 8023ada:	bf00      	nop
 8023adc:	20016050 	.word	0x20016050
 8023ae0:	20000000 	.word	0x20000000
 8023ae4:	08021681 	.word	0x08021681
 8023ae8:	20000050 	.word	0x20000050
 8023aec:	20016054 	.word	0x20016054
 8023af0:	0802167f 	.word	0x0802167f
 8023af4:	20000054 	.word	0x20000054

08023af8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023af8:	b538      	push	{r3, r4, r5, lr}
 8023afa:	4c15      	ldr	r4, [pc, #84]	; (8023b50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023afc:	4605      	mov	r5, r0
 8023afe:	7823      	ldrb	r3, [r4, #0]
 8023b00:	f3bf 8f5b 	dmb	ish
 8023b04:	07da      	lsls	r2, r3, #31
 8023b06:	d40b      	bmi.n	8023b20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023b08:	4620      	mov	r0, r4
 8023b0a:	f006 ff3e 	bl	802a98a <__cxa_guard_acquire>
 8023b0e:	b138      	cbz	r0, 8023b20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023b10:	4620      	mov	r0, r4
 8023b12:	f006 ff46 	bl	802a9a2 <__cxa_guard_release>
 8023b16:	4a0f      	ldr	r2, [pc, #60]	; (8023b54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023b18:	490f      	ldr	r1, [pc, #60]	; (8023b58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023b1a:	4810      	ldr	r0, [pc, #64]	; (8023b5c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023b1c:	f006 ff2e 	bl	802a97c <__aeabi_atexit>
 8023b20:	4c0f      	ldr	r4, [pc, #60]	; (8023b60 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023b22:	7823      	ldrb	r3, [r4, #0]
 8023b24:	f3bf 8f5b 	dmb	ish
 8023b28:	07db      	lsls	r3, r3, #31
 8023b2a:	d40b      	bmi.n	8023b44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023b2c:	4620      	mov	r0, r4
 8023b2e:	f006 ff2c 	bl	802a98a <__cxa_guard_acquire>
 8023b32:	b138      	cbz	r0, 8023b44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023b34:	4620      	mov	r0, r4
 8023b36:	f006 ff34 	bl	802a9a2 <__cxa_guard_release>
 8023b3a:	4a06      	ldr	r2, [pc, #24]	; (8023b54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023b3c:	4909      	ldr	r1, [pc, #36]	; (8023b64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023b3e:	480a      	ldr	r0, [pc, #40]	; (8023b68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023b40:	f006 ff1c 	bl	802a97c <__aeabi_atexit>
 8023b44:	4b05      	ldr	r3, [pc, #20]	; (8023b5c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023b46:	66ab      	str	r3, [r5, #104]	; 0x68
 8023b48:	4b07      	ldr	r3, [pc, #28]	; (8023b68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023b4a:	66eb      	str	r3, [r5, #108]	; 0x6c
 8023b4c:	bd38      	pop	{r3, r4, r5, pc}
 8023b4e:	bf00      	nop
 8023b50:	20016048 	.word	0x20016048
 8023b54:	20000000 	.word	0x20000000
 8023b58:	08021685 	.word	0x08021685
 8023b5c:	20000048 	.word	0x20000048
 8023b60:	2001604c 	.word	0x2001604c
 8023b64:	08021683 	.word	0x08021683
 8023b68:	2000004c 	.word	0x2000004c

08023b6c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8023b6c:	b510      	push	{r4, lr}
 8023b6e:	4604      	mov	r4, r0
 8023b70:	f7ff ff88 	bl	8023a84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023b74:	4620      	mov	r0, r4
 8023b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023b7a:	f7ff bfbd 	b.w	8023af8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08023b7e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8023b7e:	b510      	push	{r4, lr}
 8023b80:	4604      	mov	r4, r0
 8023b82:	f7ff fff3 	bl	8023b6c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023b86:	4620      	mov	r0, r4
 8023b88:	f7ff ff72 	bl	8023a70 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8023b8c:	4620      	mov	r0, r4
 8023b8e:	f7ff fdf9 	bl	8023784 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023b92:	4620      	mov	r0, r4
 8023b94:	f7ff fcfa 	bl	802358c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023b98:	4620      	mov	r0, r4
 8023b9a:	f7ff fd75 	bl	8023688 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8023b9e:	4620      	mov	r0, r4
 8023ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ba4:	f7ff bee0 	b.w	8023968 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023ba8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bac:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8023bb0:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8023bb4:	2d00      	cmp	r5, #0
 8023bb6:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8023bba:	fb05 4c0e 	mla	ip, r5, lr, r4
 8023bbe:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8023bc2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023bc6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8023bca:	eb02 0a0c 	add.w	sl, r2, ip
 8023bce:	8808      	ldrh	r0, [r1, #0]
 8023bd0:	f2c0 80b0 	blt.w	8023d34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023bd4:	45ab      	cmp	fp, r5
 8023bd6:	f340 80ad 	ble.w	8023d34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023bda:	2c00      	cmp	r4, #0
 8023bdc:	f2c0 80a8 	blt.w	8023d30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023be0:	45a6      	cmp	lr, r4
 8023be2:	f340 80a5 	ble.w	8023d30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023be6:	f812 200c 	ldrb.w	r2, [r2, ip]
 8023bea:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8023bee:	1c62      	adds	r2, r4, #1
 8023bf0:	f100 80a3 	bmi.w	8023d3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023bf4:	4596      	cmp	lr, r2
 8023bf6:	f340 80a0 	ble.w	8023d3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023bfa:	f1b9 0f00 	cmp.w	r9, #0
 8023bfe:	f000 809c 	beq.w	8023d3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023c02:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023c06:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8023c0a:	3501      	adds	r5, #1
 8023c0c:	f100 8099 	bmi.w	8023d42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023c10:	45ab      	cmp	fp, r5
 8023c12:	f340 8096 	ble.w	8023d42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023c16:	2f00      	cmp	r7, #0
 8023c18:	f000 8093 	beq.w	8023d42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023c1c:	2c00      	cmp	r4, #0
 8023c1e:	f2c0 808e 	blt.w	8023d3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023c22:	45a6      	cmp	lr, r4
 8023c24:	f340 808b 	ble.w	8023d3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023c28:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8023c2c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8023c30:	3401      	adds	r4, #1
 8023c32:	f100 8089 	bmi.w	8023d48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023c36:	45a6      	cmp	lr, r4
 8023c38:	f340 8086 	ble.w	8023d48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023c3c:	f1b9 0f00 	cmp.w	r9, #0
 8023c40:	f000 8082 	beq.w	8023d48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023c44:	44d6      	add	lr, sl
 8023c46:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023c4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023c4e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8023c52:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8023c56:	fb19 fe07 	smulbb	lr, r9, r7
 8023c5a:	f1c7 0210 	rsb	r2, r7, #16
 8023c5e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023c62:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8023c66:	eba2 0209 	sub.w	r2, r2, r9
 8023c6a:	ea44 0808 	orr.w	r8, r4, r8
 8023c6e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023c72:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023c76:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023c7a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023c7e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023c82:	ea44 0c0c 	orr.w	ip, r4, ip
 8023c86:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023c8a:	fb04 f40c 	mul.w	r4, r4, ip
 8023c8e:	fb02 4808 	mla	r8, r2, r8, r4
 8023c92:	041a      	lsls	r2, r3, #16
 8023c94:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023c98:	b2b4      	uxth	r4, r6
 8023c9a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023c9e:	43f6      	mvns	r6, r6
 8023ca0:	4313      	orrs	r3, r2
 8023ca2:	042a      	lsls	r2, r5, #16
 8023ca4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023ca8:	b2f6      	uxtb	r6, r6
 8023caa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023cae:	fb0e 8303 	mla	r3, lr, r3, r8
 8023cb2:	432a      	orrs	r2, r5
 8023cb4:	fb07 3202 	mla	r2, r7, r2, r3
 8023cb8:	10c7      	asrs	r7, r0, #3
 8023cba:	0d53      	lsrs	r3, r2, #21
 8023cbc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023cc0:	0952      	lsrs	r2, r2, #5
 8023cc2:	fb17 f706 	smulbb	r7, r7, r6
 8023cc6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023cca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023cce:	431a      	orrs	r2, r3
 8023cd0:	b293      	uxth	r3, r2
 8023cd2:	1202      	asrs	r2, r0, #8
 8023cd4:	121d      	asrs	r5, r3, #8
 8023cd6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023cda:	00c0      	lsls	r0, r0, #3
 8023cdc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023ce0:	fb12 f206 	smulbb	r2, r2, r6
 8023ce4:	b2c0      	uxtb	r0, r0
 8023ce6:	fb05 2504 	mla	r5, r5, r4, r2
 8023cea:	10da      	asrs	r2, r3, #3
 8023cec:	fb10 f006 	smulbb	r0, r0, r6
 8023cf0:	00db      	lsls	r3, r3, #3
 8023cf2:	b2ad      	uxth	r5, r5
 8023cf4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023cf8:	b2db      	uxtb	r3, r3
 8023cfa:	fb02 7204 	mla	r2, r2, r4, r7
 8023cfe:	fb03 0004 	mla	r0, r3, r4, r0
 8023d02:	1c6b      	adds	r3, r5, #1
 8023d04:	b292      	uxth	r2, r2
 8023d06:	b280      	uxth	r0, r0
 8023d08:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023d0c:	1c43      	adds	r3, r0, #1
 8023d0e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023d12:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023d16:	1c50      	adds	r0, r2, #1
 8023d18:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023d1c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023d20:	0952      	lsrs	r2, r2, #5
 8023d22:	432b      	orrs	r3, r5
 8023d24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d28:	4313      	orrs	r3, r2
 8023d2a:	800b      	strh	r3, [r1, #0]
 8023d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d30:	4680      	mov	r8, r0
 8023d32:	e75c      	b.n	8023bee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8023d34:	4684      	mov	ip, r0
 8023d36:	4680      	mov	r8, r0
 8023d38:	e767      	b.n	8023c0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023d3a:	4684      	mov	ip, r0
 8023d3c:	e765      	b.n	8023c0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8023d3e:	4605      	mov	r5, r0
 8023d40:	e776      	b.n	8023c30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8023d42:	4603      	mov	r3, r0
 8023d44:	4605      	mov	r5, r0
 8023d46:	e782      	b.n	8023c4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023d48:	4603      	mov	r3, r0
 8023d4a:	e780      	b.n	8023c4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08023d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d50:	b099      	sub	sp, #100	; 0x64
 8023d52:	9215      	str	r2, [sp, #84]	; 0x54
 8023d54:	9309      	str	r3, [sp, #36]	; 0x24
 8023d56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023d58:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8023d5c:	9016      	str	r0, [sp, #88]	; 0x58
 8023d5e:	930d      	str	r3, [sp, #52]	; 0x34
 8023d60:	6850      	ldr	r0, [r2, #4]
 8023d62:	910c      	str	r1, [sp, #48]	; 0x30
 8023d64:	6812      	ldr	r2, [r2, #0]
 8023d66:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8023d6a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 8023d6e:	fb00 1303 	mla	r3, r0, r3, r1
 8023d72:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023d76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d78:	681b      	ldr	r3, [r3, #0]
 8023d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023d7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d7e:	685e      	ldr	r6, [r3, #4]
 8023d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d82:	3604      	adds	r6, #4
 8023d84:	43db      	mvns	r3, r3
 8023d86:	b2db      	uxtb	r3, r3
 8023d88:	930a      	str	r3, [sp, #40]	; 0x28
 8023d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023d8c:	2b00      	cmp	r3, #0
 8023d8e:	dc03      	bgt.n	8023d98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023d92:	2b00      	cmp	r3, #0
 8023d94:	f340 8225 	ble.w	80241e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023d98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023da2:	1e48      	subs	r0, r1, #1
 8023da4:	1e57      	subs	r7, r2, #1
 8023da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023da8:	2b00      	cmp	r3, #0
 8023daa:	f340 80e3 	ble.w	8023f74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023dae:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023db2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023db6:	d406      	bmi.n	8023dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023db8:	4584      	cmp	ip, r0
 8023dba:	da04      	bge.n	8023dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	db02      	blt.n	8023dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023dc0:	42bb      	cmp	r3, r7
 8023dc2:	f2c0 80d8 	blt.w	8023f76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023dc6:	f11c 0c01 	adds.w	ip, ip, #1
 8023dca:	f100 80c9 	bmi.w	8023f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023dce:	4561      	cmp	r1, ip
 8023dd0:	f2c0 80c6 	blt.w	8023f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023dd4:	3301      	adds	r3, #1
 8023dd6:	f100 80c3 	bmi.w	8023f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023dda:	429a      	cmp	r2, r3
 8023ddc:	f2c0 80c0 	blt.w	8023f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023de0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023de4:	4647      	mov	r7, r8
 8023de6:	f1bb 0f00 	cmp.w	fp, #0
 8023dea:	f340 80e3 	ble.w	8023fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8023dee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023df0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023df4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023df6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023dfa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023dfe:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023e02:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023e06:	689b      	ldr	r3, [r3, #8]
 8023e08:	f100 8121 	bmi.w	802404e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023e0c:	f103 39ff 	add.w	r9, r3, #4294967295
 8023e10:	454a      	cmp	r2, r9
 8023e12:	f280 811c 	bge.w	802404e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023e16:	f1bc 0f00 	cmp.w	ip, #0
 8023e1a:	f2c0 8118 	blt.w	802404e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023e1e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023e22:	45cc      	cmp	ip, r9
 8023e24:	f280 8113 	bge.w	802404e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8023e28:	b21b      	sxth	r3, r3
 8023e2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e2c:	fb0c 2203 	mla	r2, ip, r3, r2
 8023e30:	eb04 0902 	add.w	r9, r4, r2
 8023e34:	5ca2      	ldrb	r2, [r4, r2]
 8023e36:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023e3a:	2800      	cmp	r0, #0
 8023e3c:	f000 80fe 	beq.w	802403c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8023e40:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023e44:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023e48:	9211      	str	r2, [sp, #68]	; 0x44
 8023e4a:	b151      	cbz	r1, 8023e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023e4c:	eb09 0203 	add.w	r2, r9, r3
 8023e50:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023e54:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023e58:	930f      	str	r3, [sp, #60]	; 0x3c
 8023e5a:	7853      	ldrb	r3, [r2, #1]
 8023e5c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023e60:	9312      	str	r3, [sp, #72]	; 0x48
 8023e62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023e64:	fb10 f201 	smulbb	r2, r0, r1
 8023e68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023e6a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023e6e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023e72:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8023e76:	10d2      	asrs	r2, r2, #3
 8023e78:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023e7c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8023e80:	ea4c 0c03 	orr.w	ip, ip, r3
 8023e84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023e86:	041b      	lsls	r3, r3, #16
 8023e88:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023e8c:	4323      	orrs	r3, r4
 8023e8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023e90:	4353      	muls	r3, r2
 8023e92:	fb09 330c 	mla	r3, r9, ip, r3
 8023e96:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023e9a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023e9e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023ea2:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023ea6:	f1c1 0c10 	rsb	ip, r1, #16
 8023eaa:	ebac 0c00 	sub.w	ip, ip, r0
 8023eae:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023eb2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023eb6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023ebc:	0418      	lsls	r0, r3, #16
 8023ebe:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023ec2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023ec6:	4318      	orrs	r0, r3
 8023ec8:	fb02 c200 	mla	r2, r2, r0, ip
 8023ecc:	8838      	ldrh	r0, [r7, #0]
 8023ece:	0d53      	lsrs	r3, r2, #21
 8023ed0:	0952      	lsrs	r2, r2, #5
 8023ed2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023ed6:	1201      	asrs	r1, r0, #8
 8023ed8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023edc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023ee0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023ee4:	00c0      	lsls	r0, r0, #3
 8023ee6:	431a      	orrs	r2, r3
 8023ee8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8023eec:	fb11 f104 	smulbb	r1, r1, r4
 8023ef0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023ef4:	b292      	uxth	r2, r2
 8023ef6:	fb1e fe04 	smulbb	lr, lr, r4
 8023efa:	b2c0      	uxtb	r0, r0
 8023efc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023f00:	fb10 f004 	smulbb	r0, r0, r4
 8023f04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023f08:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023f0c:	10d1      	asrs	r1, r2, #3
 8023f0e:	00d2      	lsls	r2, r2, #3
 8023f10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023f14:	fa1f fc8c 	uxth.w	ip, ip
 8023f18:	b2d2      	uxtb	r2, r2
 8023f1a:	fb01 e103 	mla	r1, r1, r3, lr
 8023f1e:	fb02 0303 	mla	r3, r2, r3, r0
 8023f22:	b289      	uxth	r1, r1
 8023f24:	b29a      	uxth	r2, r3
 8023f26:	f10c 0301 	add.w	r3, ip, #1
 8023f2a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023f2e:	1c53      	adds	r3, r2, #1
 8023f30:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023f34:	1c4a      	adds	r2, r1, #1
 8023f36:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023f3a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023f3e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023f42:	0949      	lsrs	r1, r1, #5
 8023f44:	ea43 030c 	orr.w	r3, r3, ip
 8023f48:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023f4c:	430b      	orrs	r3, r1
 8023f4e:	803b      	strh	r3, [r7, #0]
 8023f50:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023f52:	3702      	adds	r7, #2
 8023f54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023f58:	449a      	add	sl, r3
 8023f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023f5c:	441d      	add	r5, r3
 8023f5e:	e742      	b.n	8023de6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023f60:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023f62:	f108 0802 	add.w	r8, r8, #2
 8023f66:	449a      	add	sl, r3
 8023f68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023f6a:	441d      	add	r5, r3
 8023f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f6e:	3b01      	subs	r3, #1
 8023f70:	9309      	str	r3, [sp, #36]	; 0x24
 8023f72:	e718      	b.n	8023da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023f74:	d023      	beq.n	8023fbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8023f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f78:	9825      	ldr	r0, [sp, #148]	; 0x94
 8023f7a:	3b01      	subs	r3, #1
 8023f7c:	fb00 a003 	mla	r0, r0, r3, sl
 8023f80:	1400      	asrs	r0, r0, #16
 8023f82:	f53f af2d 	bmi.w	8023de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023f86:	3901      	subs	r1, #1
 8023f88:	4288      	cmp	r0, r1
 8023f8a:	f6bf af29 	bge.w	8023de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023f8e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8023f90:	fb01 5303 	mla	r3, r1, r3, r5
 8023f94:	141b      	asrs	r3, r3, #16
 8023f96:	f53f af23 	bmi.w	8023de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023f9a:	3a01      	subs	r2, #1
 8023f9c:	4293      	cmp	r3, r2
 8023f9e:	f6bf af1f 	bge.w	8023de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023fa2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023fa6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8023faa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8023fae:	f1be 0f00 	cmp.w	lr, #0
 8023fb2:	dc6c      	bgt.n	802408e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fb6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023fba:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023fc0:	2b00      	cmp	r3, #0
 8023fc2:	f340 810e 	ble.w	80241e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023fcc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023fd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023fd4:	eef0 6a62 	vmov.f32	s13, s5
 8023fd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023fdc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023fe0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023fe4:	ee16 aa90 	vmov	sl, s13
 8023fe8:	eef0 6a43 	vmov.f32	s13, s6
 8023fec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ff0:	ee16 5a90 	vmov	r5, s13
 8023ff4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023ff8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023ffc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024000:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024004:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024008:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802400c:	ee12 2a90 	vmov	r2, s5
 8024010:	eef0 2a47 	vmov.f32	s5, s14
 8024014:	fb92 f3f3 	sdiv	r3, r2, r3
 8024018:	ee13 2a10 	vmov	r2, s6
 802401c:	9325      	str	r3, [sp, #148]	; 0x94
 802401e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024020:	eeb0 3a67 	vmov.f32	s6, s15
 8024024:	fb92 f3f3 	sdiv	r3, r2, r3
 8024028:	9326      	str	r3, [sp, #152]	; 0x98
 802402a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802402c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802402e:	3b01      	subs	r3, #1
 8024030:	930c      	str	r3, [sp, #48]	; 0x30
 8024032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024034:	bf08      	it	eq
 8024036:	4613      	moveq	r3, r2
 8024038:	9309      	str	r3, [sp, #36]	; 0x24
 802403a:	e6a6      	b.n	8023d8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802403c:	2900      	cmp	r1, #0
 802403e:	f43f af10 	beq.w	8023e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024042:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024046:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802404a:	930f      	str	r3, [sp, #60]	; 0x3c
 802404c:	e709      	b.n	8023e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802404e:	f112 0901 	adds.w	r9, r2, #1
 8024052:	f53f af7d 	bmi.w	8023f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024056:	454b      	cmp	r3, r9
 8024058:	f6ff af7a 	blt.w	8023f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802405c:	f11c 0901 	adds.w	r9, ip, #1
 8024060:	f53f af76 	bmi.w	8023f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024064:	45ce      	cmp	lr, r9
 8024066:	f6ff af73 	blt.w	8023f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802406a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802406c:	b21b      	sxth	r3, r3
 802406e:	9202      	str	r2, [sp, #8]
 8024070:	fa0f f28e 	sxth.w	r2, lr
 8024074:	9300      	str	r3, [sp, #0]
 8024076:	4633      	mov	r3, r6
 8024078:	9201      	str	r2, [sp, #4]
 802407a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802407c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024080:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024084:	4639      	mov	r1, r7
 8024086:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024088:	f7ff fd8e 	bl	8023ba8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802408c:	e760      	b.n	8023f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802408e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024090:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024094:	1429      	asrs	r1, r5, #16
 8024096:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024098:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802409c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 80240a0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80240a4:	fb03 2101 	mla	r1, r3, r1, r2
 80240a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80240aa:	440a      	add	r2, r1
 80240ac:	5c61      	ldrb	r1, [r4, r1]
 80240ae:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80240b2:	f1bc 0f00 	cmp.w	ip, #0
 80240b6:	f000 808c 	beq.w	80241d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80240ba:	7857      	ldrb	r7, [r2, #1]
 80240bc:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80240c0:	9413      	str	r4, [sp, #76]	; 0x4c
 80240c2:	b140      	cbz	r0, 80240d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80240c4:	18d7      	adds	r7, r2, r3
 80240c6:	5cd3      	ldrb	r3, [r2, r3]
 80240c8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80240cc:	9310      	str	r3, [sp, #64]	; 0x40
 80240ce:	787b      	ldrb	r3, [r7, #1]
 80240d0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80240d4:	9314      	str	r3, [sp, #80]	; 0x50
 80240d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80240d8:	fb1c f200 	smulbb	r2, ip, r0
 80240dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80240de:	f10e 3eff 	add.w	lr, lr, #4294967295
 80240e2:	041f      	lsls	r7, r3, #16
 80240e4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80240e8:	10d2      	asrs	r2, r2, #3
 80240ea:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80240ee:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80240f2:	431f      	orrs	r7, r3
 80240f4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80240f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80240fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80240fc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80240fe:	041b      	lsls	r3, r3, #16
 8024100:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024104:	ea43 030b 	orr.w	r3, r3, fp
 8024108:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802410c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024110:	4353      	muls	r3, r2
 8024112:	fb04 3707 	mla	r7, r4, r7, r3
 8024116:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802411a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802411c:	ea43 0b01 	orr.w	fp, r3, r1
 8024120:	f1c0 0110 	rsb	r1, r0, #16
 8024124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024126:	eba1 0c0c 	sub.w	ip, r1, ip
 802412a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802412e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024132:	fb0c 770b 	mla	r7, ip, fp, r7
 8024136:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802413a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 802413e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024142:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024146:	fb02 770c 	mla	r7, r2, ip, r7
 802414a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802414c:	0d79      	lsrs	r1, r7, #21
 802414e:	8812      	ldrh	r2, [r2, #0]
 8024150:	097f      	lsrs	r7, r7, #5
 8024152:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024156:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802415a:	430f      	orrs	r7, r1
 802415c:	1211      	asrs	r1, r2, #8
 802415e:	b2bb      	uxth	r3, r7
 8024160:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024164:	10d7      	asrs	r7, r2, #3
 8024166:	fb11 f104 	smulbb	r1, r1, r4
 802416a:	1218      	asrs	r0, r3, #8
 802416c:	00d2      	lsls	r2, r2, #3
 802416e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024172:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024176:	fb17 f704 	smulbb	r7, r7, r4
 802417a:	b2d2      	uxtb	r2, r2
 802417c:	fb00 1009 	mla	r0, r0, r9, r1
 8024180:	10d9      	asrs	r1, r3, #3
 8024182:	fb12 f204 	smulbb	r2, r2, r4
 8024186:	00db      	lsls	r3, r3, #3
 8024188:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802418c:	b280      	uxth	r0, r0
 802418e:	b2db      	uxtb	r3, r3
 8024190:	fb01 7109 	mla	r1, r1, r9, r7
 8024194:	fb03 2309 	mla	r3, r3, r9, r2
 8024198:	1c42      	adds	r2, r0, #1
 802419a:	b289      	uxth	r1, r1
 802419c:	b29b      	uxth	r3, r3
 802419e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80241a2:	1c4f      	adds	r7, r1, #1
 80241a4:	1c5a      	adds	r2, r3, #1
 80241a6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80241aa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80241ae:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80241b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80241b4:	0949      	lsrs	r1, r1, #5
 80241b6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80241ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80241be:	4310      	orrs	r0, r2
 80241c0:	4308      	orrs	r0, r1
 80241c2:	f823 0b02 	strh.w	r0, [r3], #2
 80241c6:	930e      	str	r3, [sp, #56]	; 0x38
 80241c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80241ca:	449a      	add	sl, r3
 80241cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80241ce:	441d      	add	r5, r3
 80241d0:	e6ed      	b.n	8023fae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80241d2:	2800      	cmp	r0, #0
 80241d4:	f43f af7f 	beq.w	80240d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80241d8:	5cd3      	ldrb	r3, [r2, r3]
 80241da:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80241de:	9310      	str	r3, [sp, #64]	; 0x40
 80241e0:	e779      	b.n	80240d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80241e2:	b019      	add	sp, #100	; 0x64
 80241e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080241e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80241e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241ec:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 80241f0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80241f4:	f1b8 0f00 	cmp.w	r8, #0
 80241f8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 80241fc:	fb08 470e 	mla	r7, r8, lr, r4
 8024200:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8024204:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8024208:	eb02 0907 	add.w	r9, r2, r7
 802420c:	8808      	ldrh	r0, [r1, #0]
 802420e:	db67      	blt.n	80242e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024210:	45c2      	cmp	sl, r8
 8024212:	dd65      	ble.n	80242e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024214:	2c00      	cmp	r4, #0
 8024216:	db61      	blt.n	80242dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8024218:	45a6      	cmp	lr, r4
 802421a:	dd5f      	ble.n	80242dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 802421c:	5dd2      	ldrb	r2, [r2, r7]
 802421e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8024222:	1c62      	adds	r2, r4, #1
 8024224:	d45f      	bmi.n	80242e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8024226:	4596      	cmp	lr, r2
 8024228:	dd5d      	ble.n	80242e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802422a:	2d00      	cmp	r5, #0
 802422c:	d05b      	beq.n	80242e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802422e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024232:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024236:	f118 0801 	adds.w	r8, r8, #1
 802423a:	d458      	bmi.n	80242ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802423c:	45c2      	cmp	sl, r8
 802423e:	dd56      	ble.n	80242ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024240:	2e00      	cmp	r6, #0
 8024242:	d054      	beq.n	80242ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024244:	2c00      	cmp	r4, #0
 8024246:	db50      	blt.n	80242ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8024248:	45a6      	cmp	lr, r4
 802424a:	dd4e      	ble.n	80242ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802424c:	f819 200e 	ldrb.w	r2, [r9, lr]
 8024250:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024254:	3401      	adds	r4, #1
 8024256:	d407      	bmi.n	8024268 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024258:	45a6      	cmp	lr, r4
 802425a:	dd05      	ble.n	8024268 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802425c:	b125      	cbz	r5, 8024268 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802425e:	44ce      	add	lr, r9
 8024260:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024264:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024268:	fb15 f406 	smulbb	r4, r5, r6
 802426c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8024270:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8024274:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024278:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802427c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8024280:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024284:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024288:	ea43 0c0c 	orr.w	ip, r3, ip
 802428c:	f1c6 0310 	rsb	r3, r6, #16
 8024290:	ea4e 0707 	orr.w	r7, lr, r7
 8024294:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024298:	1b5b      	subs	r3, r3, r5
 802429a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802429e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80242a2:	437d      	muls	r5, r7
 80242a4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80242a8:	0403      	lsls	r3, r0, #16
 80242aa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80242ae:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80242b2:	4318      	orrs	r0, r3
 80242b4:	0413      	lsls	r3, r2, #16
 80242b6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80242ba:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80242be:	fb04 c000 	mla	r0, r4, r0, ip
 80242c2:	4313      	orrs	r3, r2
 80242c4:	fb06 0003 	mla	r0, r6, r3, r0
 80242c8:	0d43      	lsrs	r3, r0, #21
 80242ca:	0940      	lsrs	r0, r0, #5
 80242cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80242d0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80242d4:	4318      	orrs	r0, r3
 80242d6:	8008      	strh	r0, [r1, #0]
 80242d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80242dc:	4684      	mov	ip, r0
 80242de:	e7a0      	b.n	8024222 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80242e0:	4607      	mov	r7, r0
 80242e2:	4684      	mov	ip, r0
 80242e4:	e7a7      	b.n	8024236 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80242e6:	4607      	mov	r7, r0
 80242e8:	e7a5      	b.n	8024236 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80242ea:	4602      	mov	r2, r0
 80242ec:	e7b2      	b.n	8024254 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80242ee:	4602      	mov	r2, r0
 80242f0:	e7ba      	b.n	8024268 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080242f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80242f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242f6:	b093      	sub	sp, #76	; 0x4c
 80242f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80242fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80242fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024300:	9010      	str	r0, [sp, #64]	; 0x40
 8024302:	9108      	str	r1, [sp, #32]
 8024304:	6850      	ldr	r0, [r2, #4]
 8024306:	9306      	str	r3, [sp, #24]
 8024308:	6812      	ldr	r2, [r2, #0]
 802430a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802430e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8024312:	fb00 1303 	mla	r3, r0, r3, r1
 8024316:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802431a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802431c:	681b      	ldr	r3, [r3, #0]
 802431e:	9307      	str	r3, [sp, #28]
 8024320:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024322:	685f      	ldr	r7, [r3, #4]
 8024324:	3704      	adds	r7, #4
 8024326:	9b08      	ldr	r3, [sp, #32]
 8024328:	2b00      	cmp	r3, #0
 802432a:	dc03      	bgt.n	8024334 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802432c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802432e:	2b00      	cmp	r3, #0
 8024330:	f340 81b2 	ble.w	8024698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8024334:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024336:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802433a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802433e:	1e48      	subs	r0, r1, #1
 8024340:	f102 3cff 	add.w	ip, r2, #4294967295
 8024344:	9b06      	ldr	r3, [sp, #24]
 8024346:	2b00      	cmp	r3, #0
 8024348:	f340 80a9 	ble.w	802449e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802434c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024350:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024354:	d406      	bmi.n	8024364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024356:	4586      	cmp	lr, r0
 8024358:	da04      	bge.n	8024364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802435a:	2b00      	cmp	r3, #0
 802435c:	db02      	blt.n	8024364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802435e:	4563      	cmp	r3, ip
 8024360:	f2c0 809e 	blt.w	80244a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024364:	f11e 0e01 	adds.w	lr, lr, #1
 8024368:	f100 808f 	bmi.w	802448a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802436c:	4571      	cmp	r1, lr
 802436e:	f2c0 808c 	blt.w	802448a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024372:	3301      	adds	r3, #1
 8024374:	f100 8089 	bmi.w	802448a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024378:	429a      	cmp	r2, r3
 802437a:	f2c0 8086 	blt.w	802448a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802437e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024382:	46c8      	mov	r8, r9
 8024384:	f1bb 0f00 	cmp.w	fp, #0
 8024388:	f340 80a6 	ble.w	80244d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802438c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802438e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024392:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024394:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024398:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802439c:	1422      	asrs	r2, r4, #16
 802439e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80243a2:	689b      	ldr	r3, [r3, #8]
 80243a4:	f100 80e3 	bmi.w	802456e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80243a8:	f103 3aff 	add.w	sl, r3, #4294967295
 80243ac:	4552      	cmp	r2, sl
 80243ae:	f280 80de 	bge.w	802456e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80243b2:	f1bc 0f00 	cmp.w	ip, #0
 80243b6:	f2c0 80da 	blt.w	802456e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80243ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80243be:	45d4      	cmp	ip, sl
 80243c0:	f280 80d5 	bge.w	802456e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80243c4:	b21b      	sxth	r3, r3
 80243c6:	9d07      	ldr	r5, [sp, #28]
 80243c8:	fb0c 2203 	mla	r2, ip, r3, r2
 80243cc:	eb05 0a02 	add.w	sl, r5, r2
 80243d0:	5caa      	ldrb	r2, [r5, r2]
 80243d2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80243d6:	2800      	cmp	r0, #0
 80243d8:	f000 80c0 	beq.w	802455c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80243dc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80243e0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80243e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80243e6:	b151      	cbz	r1, 80243fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80243e8:	eb0a 0203 	add.w	r2, sl, r3
 80243ec:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80243f0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80243f4:	9309      	str	r3, [sp, #36]	; 0x24
 80243f6:	7853      	ldrb	r3, [r2, #1]
 80243f8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80243fc:	930c      	str	r3, [sp, #48]	; 0x30
 80243fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024400:	fb10 f201 	smulbb	r2, r0, r1
 8024404:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024406:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802440a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802440e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024412:	10d2      	asrs	r2, r2, #3
 8024414:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024418:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802441c:	ea4c 0c03 	orr.w	ip, ip, r3
 8024420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024422:	041b      	lsls	r3, r3, #16
 8024424:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024428:	432b      	orrs	r3, r5
 802442a:	4353      	muls	r3, r2
 802442c:	fb0a 330c 	mla	r3, sl, ip, r3
 8024430:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024434:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024438:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802443c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024440:	f1c1 0c10 	rsb	ip, r1, #16
 8024444:	ebac 0c00 	sub.w	ip, ip, r0
 8024448:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802444c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024450:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024456:	0418      	lsls	r0, r3, #16
 8024458:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802445c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024460:	4318      	orrs	r0, r3
 8024462:	fb02 c200 	mla	r2, r2, r0, ip
 8024466:	0d53      	lsrs	r3, r2, #21
 8024468:	0952      	lsrs	r2, r2, #5
 802446a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802446e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024472:	431a      	orrs	r2, r3
 8024474:	f8a8 2000 	strh.w	r2, [r8]
 8024478:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802447a:	f108 0802 	add.w	r8, r8, #2
 802447e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024482:	441c      	add	r4, r3
 8024484:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024486:	441e      	add	r6, r3
 8024488:	e77c      	b.n	8024384 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802448a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802448c:	f109 0902 	add.w	r9, r9, #2
 8024490:	441c      	add	r4, r3
 8024492:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024494:	441e      	add	r6, r3
 8024496:	9b06      	ldr	r3, [sp, #24]
 8024498:	3b01      	subs	r3, #1
 802449a:	9306      	str	r3, [sp, #24]
 802449c:	e752      	b.n	8024344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802449e:	d020      	beq.n	80244e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80244a0:	9b06      	ldr	r3, [sp, #24]
 80244a2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80244a4:	3b01      	subs	r3, #1
 80244a6:	fb00 4003 	mla	r0, r0, r3, r4
 80244aa:	1400      	asrs	r0, r0, #16
 80244ac:	f53f af67 	bmi.w	802437e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80244b0:	3901      	subs	r1, #1
 80244b2:	4288      	cmp	r0, r1
 80244b4:	f6bf af63 	bge.w	802437e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80244b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80244ba:	fb01 6303 	mla	r3, r1, r3, r6
 80244be:	141b      	asrs	r3, r3, #16
 80244c0:	f53f af5d 	bmi.w	802437e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80244c4:	3a01      	subs	r2, #1
 80244c6:	4293      	cmp	r3, r2
 80244c8:	f6bf af59 	bge.w	802437e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80244cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80244d0:	46ca      	mov	sl, r9
 80244d2:	f1b8 0f00 	cmp.w	r8, #0
 80244d6:	dc67      	bgt.n	80245a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80244d8:	9b06      	ldr	r3, [sp, #24]
 80244da:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80244de:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80244e2:	9b08      	ldr	r3, [sp, #32]
 80244e4:	2b00      	cmp	r3, #0
 80244e6:	f340 80d7 	ble.w	8024698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80244ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80244ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80244f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80244f4:	eeb0 6a62 	vmov.f32	s12, s5
 80244f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80244fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024500:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024504:	ee16 4a10 	vmov	r4, s12
 8024508:	eeb0 6a43 	vmov.f32	s12, s6
 802450c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024510:	ee16 6a10 	vmov	r6, s12
 8024514:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024518:	ee61 7a27 	vmul.f32	s15, s2, s15
 802451c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024520:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024524:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024528:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802452c:	ee12 2a90 	vmov	r2, s5
 8024530:	eef0 2a47 	vmov.f32	s5, s14
 8024534:	fb92 f3f3 	sdiv	r3, r2, r3
 8024538:	ee13 2a10 	vmov	r2, s6
 802453c:	931f      	str	r3, [sp, #124]	; 0x7c
 802453e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024540:	eeb0 3a67 	vmov.f32	s6, s15
 8024544:	fb92 f3f3 	sdiv	r3, r2, r3
 8024548:	9320      	str	r3, [sp, #128]	; 0x80
 802454a:	9b08      	ldr	r3, [sp, #32]
 802454c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802454e:	3b01      	subs	r3, #1
 8024550:	9308      	str	r3, [sp, #32]
 8024552:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024554:	bf08      	it	eq
 8024556:	4613      	moveq	r3, r2
 8024558:	9306      	str	r3, [sp, #24]
 802455a:	e6e4      	b.n	8024326 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802455c:	2900      	cmp	r1, #0
 802455e:	f43f af4e 	beq.w	80243fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024562:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024566:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802456a:	9309      	str	r3, [sp, #36]	; 0x24
 802456c:	e747      	b.n	80243fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802456e:	f112 0a01 	adds.w	sl, r2, #1
 8024572:	d481      	bmi.n	8024478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024574:	4553      	cmp	r3, sl
 8024576:	f6ff af7f 	blt.w	8024478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802457a:	f11c 0a01 	adds.w	sl, ip, #1
 802457e:	f53f af7b 	bmi.w	8024478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024582:	45d6      	cmp	lr, sl
 8024584:	f6ff af78 	blt.w	8024478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024588:	b21b      	sxth	r3, r3
 802458a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802458e:	fa0f f28e 	sxth.w	r2, lr
 8024592:	9300      	str	r3, [sp, #0]
 8024594:	463b      	mov	r3, r7
 8024596:	9201      	str	r2, [sp, #4]
 8024598:	9a07      	ldr	r2, [sp, #28]
 802459a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802459e:	4641      	mov	r1, r8
 80245a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80245a2:	f7ff fe21 	bl	80241e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80245a6:	e767      	b.n	8024478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80245a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80245aa:	1422      	asrs	r2, r4, #16
 80245ac:	1431      	asrs	r1, r6, #16
 80245ae:	9d07      	ldr	r5, [sp, #28]
 80245b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80245b4:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80245b8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80245bc:	fb03 2101 	mla	r1, r3, r1, r2
 80245c0:	9a07      	ldr	r2, [sp, #28]
 80245c2:	440a      	add	r2, r1
 80245c4:	5c69      	ldrb	r1, [r5, r1]
 80245c6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80245ca:	f1be 0f00 	cmp.w	lr, #0
 80245ce:	d05c      	beq.n	802468a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80245d0:	f892 c001 	ldrb.w	ip, [r2, #1]
 80245d4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80245d8:	950d      	str	r5, [sp, #52]	; 0x34
 80245da:	b150      	cbz	r0, 80245f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80245dc:	eb02 0c03 	add.w	ip, r2, r3
 80245e0:	5cd3      	ldrb	r3, [r2, r3]
 80245e2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80245e6:	930a      	str	r3, [sp, #40]	; 0x28
 80245e8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80245ec:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80245f0:	930e      	str	r3, [sp, #56]	; 0x38
 80245f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80245f4:	fb1e f200 	smulbb	r2, lr, r0
 80245f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80245fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80245fe:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024602:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024606:	10d2      	asrs	r2, r2, #3
 8024608:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802460c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024610:	ea4c 0c03 	orr.w	ip, ip, r3
 8024614:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8024618:	9311      	str	r3, [sp, #68]	; 0x44
 802461a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802461c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802461e:	041b      	lsls	r3, r3, #16
 8024620:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024624:	ea43 030b 	orr.w	r3, r3, fp
 8024628:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802462c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024630:	4353      	muls	r3, r2
 8024632:	fb05 3c0c 	mla	ip, r5, ip, r3
 8024636:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802463a:	ea43 0b01 	orr.w	fp, r3, r1
 802463e:	f1c0 0110 	rsb	r1, r0, #16
 8024642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024644:	eba1 0e0e 	sub.w	lr, r1, lr
 8024648:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802464c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024650:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024654:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8024658:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 802465c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024660:	ea4b 0e0e 	orr.w	lr, fp, lr
 8024664:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024668:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802466c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024670:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024674:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024678:	ea43 0c0c 	orr.w	ip, r3, ip
 802467c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802467e:	441c      	add	r4, r3
 8024680:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024682:	f82a cb02 	strh.w	ip, [sl], #2
 8024686:	441e      	add	r6, r3
 8024688:	e723      	b.n	80244d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802468a:	2800      	cmp	r0, #0
 802468c:	d0b1      	beq.n	80245f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802468e:	5cd3      	ldrb	r3, [r2, r3]
 8024690:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024694:	930a      	str	r3, [sp, #40]	; 0x28
 8024696:	e7ac      	b.n	80245f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024698:	b013      	add	sp, #76	; 0x4c
 802469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802469e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802469e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246a2:	880d      	ldrh	r5, [r1, #0]
 80246a4:	b087      	sub	sp, #28
 80246a6:	10ef      	asrs	r7, r5, #3
 80246a8:	9103      	str	r1, [sp, #12]
 80246aa:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80246ae:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 80246b2:	00ed      	lsls	r5, r5, #3
 80246b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80246b8:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 80246bc:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80246c0:	b2ed      	uxtb	r5, r5
 80246c2:	9701      	str	r7, [sp, #4]
 80246c4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80246c8:	9502      	str	r5, [sp, #8]
 80246ca:	9d01      	ldr	r5, [sp, #4]
 80246cc:	9902      	ldr	r1, [sp, #8]
 80246ce:	022d      	lsls	r5, r5, #8
 80246d0:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80246d4:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 80246d8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80246dc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80246e0:	430d      	orrs	r5, r1
 80246e2:	fb06 0709 	mla	r7, r6, r9, r0
 80246e6:	2e00      	cmp	r6, #0
 80246e8:	9505      	str	r5, [sp, #20]
 80246ea:	eb02 0c07 	add.w	ip, r2, r7
 80246ee:	f2c0 80b6 	blt.w	802485e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80246f2:	45b3      	cmp	fp, r6
 80246f4:	f340 80b3 	ble.w	802485e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80246f8:	2800      	cmp	r0, #0
 80246fa:	f2c0 80ae 	blt.w	802485a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80246fe:	4581      	cmp	r9, r0
 8024700:	f340 80ab 	ble.w	802485a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024704:	5dd7      	ldrb	r7, [r2, r7]
 8024706:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802470a:	441f      	add	r7, r3
 802470c:	1c42      	adds	r2, r0, #1
 802470e:	f100 80a9 	bmi.w	8024864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024712:	4591      	cmp	r9, r2
 8024714:	f340 80a6 	ble.w	8024864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024718:	2c00      	cmp	r4, #0
 802471a:	f000 80a3 	beq.w	8024864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802471e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024726:	441d      	add	r5, r3
 8024728:	3601      	adds	r6, #1
 802472a:	f100 809f 	bmi.w	802486c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802472e:	45b3      	cmp	fp, r6
 8024730:	f340 809c 	ble.w	802486c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024734:	f1be 0f00 	cmp.w	lr, #0
 8024738:	f000 8098 	beq.w	802486c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802473c:	2800      	cmp	r0, #0
 802473e:	f2c0 8093 	blt.w	8024868 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024742:	4581      	cmp	r9, r0
 8024744:	f340 8090 	ble.w	8024868 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024748:	f81c 6009 	ldrb.w	r6, [ip, r9]
 802474c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024750:	441e      	add	r6, r3
 8024752:	3001      	adds	r0, #1
 8024754:	f100 808d 	bmi.w	8024872 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024758:	4581      	cmp	r9, r0
 802475a:	f340 808a 	ble.w	8024872 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802475e:	2c00      	cmp	r4, #0
 8024760:	f000 8087 	beq.w	8024872 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024764:	44e1      	add	r9, ip
 8024766:	f899 2001 	ldrb.w	r2, [r9, #1]
 802476a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802476e:	4413      	add	r3, r2
 8024770:	b2a4      	uxth	r4, r4
 8024772:	f897 c002 	ldrb.w	ip, [r7, #2]
 8024776:	fa1f fe8e 	uxth.w	lr, lr
 802477a:	9901      	ldr	r1, [sp, #4]
 802477c:	fb04 fb0e 	mul.w	fp, r4, lr
 8024780:	0124      	lsls	r4, r4, #4
 8024782:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8024786:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802478a:	eba4 040b 	sub.w	r4, r4, fp
 802478e:	fa1f f08e 	uxth.w	r0, lr
 8024792:	b2a2      	uxth	r2, r4
 8024794:	78ac      	ldrb	r4, [r5, #2]
 8024796:	eba9 0900 	sub.w	r9, r9, r0
 802479a:	fa1f fe88 	uxth.w	lr, r8
 802479e:	4354      	muls	r4, r2
 80247a0:	ea6f 0808 	mvn.w	r8, r8
 80247a4:	fa1f f989 	uxth.w	r9, r9
 80247a8:	fa5f f888 	uxtb.w	r8, r8
 80247ac:	fb09 440c 	mla	r4, r9, ip, r4
 80247b0:	f896 c002 	ldrb.w	ip, [r6, #2]
 80247b4:	fb1a fa08 	smulbb	sl, sl, r8
 80247b8:	fb00 440c 	mla	r4, r0, ip, r4
 80247bc:	f893 c002 	ldrb.w	ip, [r3, #2]
 80247c0:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80247c4:	787c      	ldrb	r4, [r7, #1]
 80247c6:	783f      	ldrb	r7, [r7, #0]
 80247c8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80247cc:	fb0c ac0e 	mla	ip, ip, lr, sl
 80247d0:	f895 a001 	ldrb.w	sl, [r5, #1]
 80247d4:	782d      	ldrb	r5, [r5, #0]
 80247d6:	fb02 fa0a 	mul.w	sl, r2, sl
 80247da:	fa1f fc8c 	uxth.w	ip, ip
 80247de:	436a      	muls	r2, r5
 80247e0:	7835      	ldrb	r5, [r6, #0]
 80247e2:	fb09 aa04 	mla	sl, r9, r4, sl
 80247e6:	7874      	ldrb	r4, [r6, #1]
 80247e8:	fb09 2207 	mla	r2, r9, r7, r2
 80247ec:	fb00 aa04 	mla	sl, r0, r4, sl
 80247f0:	785c      	ldrb	r4, [r3, #1]
 80247f2:	fb00 2005 	mla	r0, r0, r5, r2
 80247f6:	781b      	ldrb	r3, [r3, #0]
 80247f8:	fb0b a404 	mla	r4, fp, r4, sl
 80247fc:	fb11 fa08 	smulbb	sl, r1, r8
 8024800:	fb0b 0b03 	mla	fp, fp, r3, r0
 8024804:	9b02      	ldr	r3, [sp, #8]
 8024806:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802480a:	fb13 f808 	smulbb	r8, r3, r8
 802480e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8024812:	fb04 a40e 	mla	r4, r4, lr, sl
 8024816:	f10c 0301 	add.w	r3, ip, #1
 802481a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802481e:	b2a4      	uxth	r4, r4
 8024820:	fa1f fe8e 	uxth.w	lr, lr
 8024824:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024828:	f104 0a01 	add.w	sl, r4, #1
 802482c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8024830:	f10e 0c01 	add.w	ip, lr, #1
 8024834:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024838:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802483c:	0964      	lsrs	r4, r4, #5
 802483e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024842:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024846:	ea4c 0c03 	orr.w	ip, ip, r3
 802484a:	9b03      	ldr	r3, [sp, #12]
 802484c:	ea4c 0c04 	orr.w	ip, ip, r4
 8024850:	f8a3 c000 	strh.w	ip, [r3]
 8024854:	b007      	add	sp, #28
 8024856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802485a:	af05      	add	r7, sp, #20
 802485c:	e756      	b.n	802470c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802485e:	ad05      	add	r5, sp, #20
 8024860:	462f      	mov	r7, r5
 8024862:	e761      	b.n	8024728 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024864:	ad05      	add	r5, sp, #20
 8024866:	e75f      	b.n	8024728 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024868:	ae05      	add	r6, sp, #20
 802486a:	e772      	b.n	8024752 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802486c:	ab05      	add	r3, sp, #20
 802486e:	461e      	mov	r6, r3
 8024870:	e77e      	b.n	8024770 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8024872:	ab05      	add	r3, sp, #20
 8024874:	e77c      	b.n	8024770 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08024876 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802487a:	b095      	sub	sp, #84	; 0x54
 802487c:	9212      	str	r2, [sp, #72]	; 0x48
 802487e:	9309      	str	r3, [sp, #36]	; 0x24
 8024880:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024882:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8024886:	9013      	str	r0, [sp, #76]	; 0x4c
 8024888:	930f      	str	r3, [sp, #60]	; 0x3c
 802488a:	6850      	ldr	r0, [r2, #4]
 802488c:	910e      	str	r1, [sp, #56]	; 0x38
 802488e:	6812      	ldr	r2, [r2, #0]
 8024890:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8024894:	fb00 1303 	mla	r3, r0, r3, r1
 8024898:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802489c:	930a      	str	r3, [sp, #40]	; 0x28
 802489e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	930d      	str	r3, [sp, #52]	; 0x34
 80248a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80248a6:	685c      	ldr	r4, [r3, #4]
 80248a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80248aa:	3404      	adds	r4, #4
 80248ac:	43db      	mvns	r3, r3
 80248ae:	b2db      	uxtb	r3, r3
 80248b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80248b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80248b4:	2b00      	cmp	r3, #0
 80248b6:	dc03      	bgt.n	80248c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80248b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80248ba:	2b00      	cmp	r3, #0
 80248bc:	f340 8255 	ble.w	8024d6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80248c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80248c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80248c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80248ca:	1e48      	subs	r0, r1, #1
 80248cc:	1e55      	subs	r5, r2, #1
 80248ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248d0:	2b00      	cmp	r3, #0
 80248d2:	f340 80f9 	ble.w	8024ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80248d6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80248d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80248da:	1436      	asrs	r6, r6, #16
 80248dc:	ea4f 4323 	mov.w	r3, r3, asr #16
 80248e0:	d406      	bmi.n	80248f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80248e2:	4286      	cmp	r6, r0
 80248e4:	da04      	bge.n	80248f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80248e6:	2b00      	cmp	r3, #0
 80248e8:	db02      	blt.n	80248f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80248ea:	42ab      	cmp	r3, r5
 80248ec:	f2c0 80ed 	blt.w	8024aca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80248f0:	3601      	adds	r6, #1
 80248f2:	f100 80da 	bmi.w	8024aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80248f6:	42b1      	cmp	r1, r6
 80248f8:	f2c0 80d7 	blt.w	8024aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80248fc:	3301      	adds	r3, #1
 80248fe:	f100 80d4 	bmi.w	8024aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024902:	429a      	cmp	r2, r3
 8024904:	f2c0 80d1 	blt.w	8024aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802490a:	9311      	str	r3, [sp, #68]	; 0x44
 802490c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802490e:	930c      	str	r3, [sp, #48]	; 0x30
 8024910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024912:	2b00      	cmp	r3, #0
 8024914:	f340 80fa 	ble.w	8024b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024918:	9826      	ldr	r0, [sp, #152]	; 0x98
 802491a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802491c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802491e:	68c6      	ldr	r6, [r0, #12]
 8024920:	141d      	asrs	r5, r3, #16
 8024922:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024924:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024928:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802492a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802492c:	1400      	asrs	r0, r0, #16
 802492e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024932:	6892      	ldr	r2, [r2, #8]
 8024934:	f100 813e 	bmi.w	8024bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024938:	1e57      	subs	r7, r2, #1
 802493a:	42b8      	cmp	r0, r7
 802493c:	f280 813a 	bge.w	8024bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024940:	2d00      	cmp	r5, #0
 8024942:	f2c0 8137 	blt.w	8024bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024946:	1e77      	subs	r7, r6, #1
 8024948:	42bd      	cmp	r5, r7
 802494a:	f280 8133 	bge.w	8024bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802494e:	b212      	sxth	r2, r2
 8024950:	fb05 0002 	mla	r0, r5, r2, r0
 8024954:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024956:	f815 a000 	ldrb.w	sl, [r5, r0]
 802495a:	182e      	adds	r6, r5, r0
 802495c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024960:	eb04 050a 	add.w	r5, r4, sl
 8024964:	2b00      	cmp	r3, #0
 8024966:	f000 8117 	beq.w	8024b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802496a:	f896 c001 	ldrb.w	ip, [r6, #1]
 802496e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024972:	44a4      	add	ip, r4
 8024974:	2900      	cmp	r1, #0
 8024976:	f000 8117 	beq.w	8024ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802497a:	18b0      	adds	r0, r6, r2
 802497c:	5cb2      	ldrb	r2, [r6, r2]
 802497e:	7840      	ldrb	r0, [r0, #1]
 8024980:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024984:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024988:	4422      	add	r2, r4
 802498a:	4420      	add	r0, r4
 802498c:	b29b      	uxth	r3, r3
 802498e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024992:	b289      	uxth	r1, r1
 8024994:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024998:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802499a:	fb03 f901 	mul.w	r9, r3, r1
 802499e:	011b      	lsls	r3, r3, #4
 80249a0:	f8b6 e000 	ldrh.w	lr, [r6]
 80249a4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80249a8:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80249ac:	eba3 0309 	sub.w	r3, r3, r9
 80249b0:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80249b4:	b289      	uxth	r1, r1
 80249b6:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80249ba:	b29b      	uxth	r3, r3
 80249bc:	eba8 0801 	sub.w	r8, r8, r1
 80249c0:	435f      	muls	r7, r3
 80249c2:	fa1f f888 	uxth.w	r8, r8
 80249c6:	9310      	str	r3, [sp, #64]	; 0x40
 80249c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80249ca:	fb08 770b 	mla	r7, r8, fp, r7
 80249ce:	f892 b002 	ldrb.w	fp, [r2, #2]
 80249d2:	fb01 770b 	mla	r7, r1, fp, r7
 80249d6:	f890 b002 	ldrb.w	fp, [r0, #2]
 80249da:	fb09 770b 	mla	r7, r9, fp, r7
 80249de:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80249e2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80249e6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80249ea:	fb1b fb03 	smulbb	fp, fp, r3
 80249ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80249f0:	fb07 b706 	mla	r7, r7, r6, fp
 80249f4:	f895 b001 	ldrb.w	fp, [r5, #1]
 80249f8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80249fc:	f89c c000 	ldrb.w	ip, [ip]
 8024a00:	b2bf      	uxth	r7, r7
 8024a02:	435d      	muls	r5, r3
 8024a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a06:	fb08 550b 	mla	r5, r8, fp, r5
 8024a0a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024a0e:	fb01 550b 	mla	r5, r1, fp, r5
 8024a12:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024a16:	fb09 550b 	mla	r5, r9, fp, r5
 8024a1a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8024a1e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024a22:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024a26:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024a2a:	fa5f fe8e 	uxtb.w	lr, lr
 8024a2e:	fb1b fb03 	smulbb	fp, fp, r3
 8024a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024a34:	fb03 f30c 	mul.w	r3, r3, ip
 8024a38:	f892 c000 	ldrb.w	ip, [r2]
 8024a3c:	fb05 b506 	mla	r5, r5, r6, fp
 8024a40:	fb08 330a 	mla	r3, r8, sl, r3
 8024a44:	b2ad      	uxth	r5, r5
 8024a46:	fb01 330c 	mla	r3, r1, ip, r3
 8024a4a:	f890 c000 	ldrb.w	ip, [r0]
 8024a4e:	f105 0b01 	add.w	fp, r5, #1
 8024a52:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a58:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024a5c:	fb1e fe03 	smulbb	lr, lr, r3
 8024a60:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024a64:	1c7b      	adds	r3, r7, #1
 8024a66:	096d      	lsrs	r5, r5, #5
 8024a68:	fb0c e606 	mla	r6, ip, r6, lr
 8024a6c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024a70:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024a74:	b2b6      	uxth	r6, r6
 8024a76:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8024a7a:	1c77      	adds	r7, r6, #1
 8024a7c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024a80:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024a84:	431f      	orrs	r7, r3
 8024a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a88:	433d      	orrs	r5, r7
 8024a8a:	801d      	strh	r5, [r3, #0]
 8024a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a8e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024a90:	3302      	adds	r3, #2
 8024a92:	930c      	str	r3, [sp, #48]	; 0x30
 8024a94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024a96:	4413      	add	r3, r2
 8024a98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024a9a:	931f      	str	r3, [sp, #124]	; 0x7c
 8024a9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024a9e:	4413      	add	r3, r2
 8024aa0:	9320      	str	r3, [sp, #128]	; 0x80
 8024aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024aa4:	3b01      	subs	r3, #1
 8024aa6:	9311      	str	r3, [sp, #68]	; 0x44
 8024aa8:	e732      	b.n	8024910 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024aaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024aac:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8024aae:	4433      	add	r3, r6
 8024ab0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8024ab2:	931f      	str	r3, [sp, #124]	; 0x7c
 8024ab4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024ab6:	4433      	add	r3, r6
 8024ab8:	9320      	str	r3, [sp, #128]	; 0x80
 8024aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024abc:	3b01      	subs	r3, #1
 8024abe:	9309      	str	r3, [sp, #36]	; 0x24
 8024ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ac2:	3302      	adds	r3, #2
 8024ac4:	930a      	str	r3, [sp, #40]	; 0x28
 8024ac6:	e702      	b.n	80248ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024ac8:	d027      	beq.n	8024b1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024acc:	9821      	ldr	r0, [sp, #132]	; 0x84
 8024ace:	3b01      	subs	r3, #1
 8024ad0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8024ad2:	fb00 5003 	mla	r0, r0, r3, r5
 8024ad6:	1400      	asrs	r0, r0, #16
 8024ad8:	f53f af16 	bmi.w	8024908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024adc:	3901      	subs	r1, #1
 8024ade:	4288      	cmp	r0, r1
 8024ae0:	f6bf af12 	bge.w	8024908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024ae4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8024ae6:	9820      	ldr	r0, [sp, #128]	; 0x80
 8024ae8:	fb01 0303 	mla	r3, r1, r3, r0
 8024aec:	141b      	asrs	r3, r3, #16
 8024aee:	f53f af0b 	bmi.w	8024908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024af2:	3a01      	subs	r2, #1
 8024af4:	4293      	cmp	r3, r2
 8024af6:	f6bf af07 	bge.w	8024908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024afc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8024b00:	9311      	str	r3, [sp, #68]	; 0x44
 8024b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b04:	930c      	str	r3, [sp, #48]	; 0x30
 8024b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024b08:	2b00      	cmp	r3, #0
 8024b0a:	dc70      	bgt.n	8024bee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8024b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024b10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024b14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024b18:	930a      	str	r3, [sp, #40]	; 0x28
 8024b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024b1c:	2b00      	cmp	r3, #0
 8024b1e:	f340 8124 	ble.w	8024d6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024b26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024b28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024b2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024b30:	eef0 6a62 	vmov.f32	s13, s5
 8024b34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024b38:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024b3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b40:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8024b44:	eef0 6a43 	vmov.f32	s13, s6
 8024b48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b4c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8024b50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024b54:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024b58:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024b5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024b60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024b64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024b68:	ee12 2a90 	vmov	r2, s5
 8024b6c:	eef0 2a47 	vmov.f32	s5, s14
 8024b70:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b74:	ee13 2a10 	vmov	r2, s6
 8024b78:	9321      	str	r3, [sp, #132]	; 0x84
 8024b7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024b7c:	eeb0 3a67 	vmov.f32	s6, s15
 8024b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b84:	9322      	str	r3, [sp, #136]	; 0x88
 8024b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024b88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024b8a:	3b01      	subs	r3, #1
 8024b8c:	930e      	str	r3, [sp, #56]	; 0x38
 8024b8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024b90:	bf08      	it	eq
 8024b92:	4613      	moveq	r3, r2
 8024b94:	9309      	str	r3, [sp, #36]	; 0x24
 8024b96:	e68c      	b.n	80248b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024b98:	b149      	cbz	r1, 8024bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8024b9a:	5cb2      	ldrb	r2, [r6, r2]
 8024b9c:	4628      	mov	r0, r5
 8024b9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024ba2:	4422      	add	r2, r4
 8024ba4:	46ac      	mov	ip, r5
 8024ba6:	e6f1      	b.n	802498c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024ba8:	4628      	mov	r0, r5
 8024baa:	462a      	mov	r2, r5
 8024bac:	e6ee      	b.n	802498c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024bae:	4628      	mov	r0, r5
 8024bb0:	462a      	mov	r2, r5
 8024bb2:	e7f7      	b.n	8024ba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024bb4:	1c47      	adds	r7, r0, #1
 8024bb6:	f53f af69 	bmi.w	8024a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024bba:	42ba      	cmp	r2, r7
 8024bbc:	f6ff af66 	blt.w	8024a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024bc0:	1c6f      	adds	r7, r5, #1
 8024bc2:	f53f af63 	bmi.w	8024a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024bc6:	42be      	cmp	r6, r7
 8024bc8:	f6ff af60 	blt.w	8024a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024bcc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024bce:	b236      	sxth	r6, r6
 8024bd0:	b212      	sxth	r2, r2
 8024bd2:	9002      	str	r0, [sp, #8]
 8024bd4:	9601      	str	r6, [sp, #4]
 8024bd6:	9200      	str	r2, [sp, #0]
 8024bd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024bda:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024bde:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024be2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8024be6:	4623      	mov	r3, r4
 8024be8:	f7ff fd59 	bl	802469e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024bec:	e74e      	b.n	8024a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024bee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024bf0:	9820      	ldr	r0, [sp, #128]	; 0x80
 8024bf2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024bf6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8024bf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024bfa:	1400      	asrs	r0, r0, #16
 8024bfc:	142d      	asrs	r5, r5, #16
 8024bfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024c00:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024c04:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024c08:	fb02 5000 	mla	r0, r2, r0, r5
 8024c0c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024c0e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024c12:	182e      	adds	r6, r5, r0
 8024c14:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024c18:	eb04 0509 	add.w	r5, r4, r9
 8024c1c:	2b00      	cmp	r3, #0
 8024c1e:	f000 8096 	beq.w	8024d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024c22:	7877      	ldrb	r7, [r6, #1]
 8024c24:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024c28:	4427      	add	r7, r4
 8024c2a:	2900      	cmp	r1, #0
 8024c2c:	f000 8097 	beq.w	8024d5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8024c30:	18b0      	adds	r0, r6, r2
 8024c32:	5cb2      	ldrb	r2, [r6, r2]
 8024c34:	7840      	ldrb	r0, [r0, #1]
 8024c36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024c3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024c3e:	4422      	add	r2, r4
 8024c40:	4420      	add	r0, r4
 8024c42:	b29b      	uxth	r3, r3
 8024c44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024c46:	b289      	uxth	r1, r1
 8024c48:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024c4c:	f8b6 c000 	ldrh.w	ip, [r6]
 8024c50:	fb03 f801 	mul.w	r8, r3, r1
 8024c54:	011b      	lsls	r3, r3, #4
 8024c56:	78be      	ldrb	r6, [r7, #2]
 8024c58:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024c5c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024c60:	eba3 0308 	sub.w	r3, r3, r8
 8024c64:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024c68:	b289      	uxth	r1, r1
 8024c6a:	b29b      	uxth	r3, r3
 8024c6c:	ebae 0e01 	sub.w	lr, lr, r1
 8024c70:	435e      	muls	r6, r3
 8024c72:	fa1f fe8e 	uxth.w	lr, lr
 8024c76:	9310      	str	r3, [sp, #64]	; 0x40
 8024c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024c7a:	fb0e 660b 	mla	r6, lr, fp, r6
 8024c7e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024c82:	fb01 660b 	mla	r6, r1, fp, r6
 8024c86:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024c8a:	fb08 660b 	mla	r6, r8, fp, r6
 8024c8e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024c92:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8024c96:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024c9a:	fb1b fb03 	smulbb	fp, fp, r3
 8024c9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024ca0:	fb06 b60a 	mla	r6, r6, sl, fp
 8024ca4:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024ca8:	787d      	ldrb	r5, [r7, #1]
 8024caa:	783f      	ldrb	r7, [r7, #0]
 8024cac:	b2b6      	uxth	r6, r6
 8024cae:	435d      	muls	r5, r3
 8024cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024cb2:	fb0e 550b 	mla	r5, lr, fp, r5
 8024cb6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024cba:	fb01 550b 	mla	r5, r1, fp, r5
 8024cbe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024cc2:	fb08 550b 	mla	r5, r8, fp, r5
 8024cc6:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024cca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024cce:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024cd2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024cd6:	fa5f fc8c 	uxtb.w	ip, ip
 8024cda:	fb1b fb03 	smulbb	fp, fp, r3
 8024cde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024ce0:	437b      	muls	r3, r7
 8024ce2:	7817      	ldrb	r7, [r2, #0]
 8024ce4:	fb05 b50a 	mla	r5, r5, sl, fp
 8024ce8:	fb0e 3309 	mla	r3, lr, r9, r3
 8024cec:	b2ad      	uxth	r5, r5
 8024cee:	fb01 3307 	mla	r3, r1, r7, r3
 8024cf2:	7807      	ldrb	r7, [r0, #0]
 8024cf4:	f105 0b01 	add.w	fp, r5, #1
 8024cf8:	fb08 3707 	mla	r7, r8, r7, r3
 8024cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024cfe:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024d02:	fb1c fc03 	smulbb	ip, ip, r3
 8024d06:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024d0a:	1c73      	adds	r3, r6, #1
 8024d0c:	096d      	lsrs	r5, r5, #5
 8024d0e:	fb07 c70a 	mla	r7, r7, sl, ip
 8024d12:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024d16:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024d1a:	b2bf      	uxth	r7, r7
 8024d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d1e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8024d22:	1c7a      	adds	r2, r7, #1
 8024d24:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024d28:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024d2c:	4316      	orrs	r6, r2
 8024d2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024d30:	432e      	orrs	r6, r5
 8024d32:	f823 6b02 	strh.w	r6, [r3], #2
 8024d36:	930c      	str	r3, [sp, #48]	; 0x30
 8024d38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024d3a:	4413      	add	r3, r2
 8024d3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024d3e:	931f      	str	r3, [sp, #124]	; 0x7c
 8024d40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024d42:	4413      	add	r3, r2
 8024d44:	9320      	str	r3, [sp, #128]	; 0x80
 8024d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024d48:	3b01      	subs	r3, #1
 8024d4a:	9311      	str	r3, [sp, #68]	; 0x44
 8024d4c:	e6db      	b.n	8024b06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8024d4e:	b149      	cbz	r1, 8024d64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8024d50:	5cb2      	ldrb	r2, [r6, r2]
 8024d52:	4628      	mov	r0, r5
 8024d54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024d58:	4422      	add	r2, r4
 8024d5a:	462f      	mov	r7, r5
 8024d5c:	e771      	b.n	8024c42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024d5e:	4628      	mov	r0, r5
 8024d60:	462a      	mov	r2, r5
 8024d62:	e76e      	b.n	8024c42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024d64:	4628      	mov	r0, r5
 8024d66:	462a      	mov	r2, r5
 8024d68:	e7f7      	b.n	8024d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024d6a:	b015      	add	sp, #84	; 0x54
 8024d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024d70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8024d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d74:	880f      	ldrh	r7, [r1, #0]
 8024d76:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8024d7a:	023c      	lsls	r4, r7, #8
 8024d7c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8024d80:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8024d84:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8024d88:	017c      	lsls	r4, r7, #5
 8024d8a:	00ff      	lsls	r7, r7, #3
 8024d8c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024d90:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8024d94:	b2ff      	uxtb	r7, r7
 8024d96:	ea4b 0404 	orr.w	r4, fp, r4
 8024d9a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8024d9e:	4327      	orrs	r7, r4
 8024da0:	fb05 ca0e 	mla	sl, r5, lr, ip
 8024da4:	2d00      	cmp	r5, #0
 8024da6:	9701      	str	r7, [sp, #4]
 8024da8:	eb02 080a 	add.w	r8, r2, sl
 8024dac:	db7e      	blt.n	8024eac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024dae:	45a9      	cmp	r9, r5
 8024db0:	dd7c      	ble.n	8024eac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8024db2:	f1bc 0f00 	cmp.w	ip, #0
 8024db6:	db77      	blt.n	8024ea8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024db8:	45e6      	cmp	lr, ip
 8024dba:	dd75      	ble.n	8024ea8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024dbc:	f812 700a 	ldrb.w	r7, [r2, sl]
 8024dc0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024dc4:	441f      	add	r7, r3
 8024dc6:	f11c 0201 	adds.w	r2, ip, #1
 8024dca:	d472      	bmi.n	8024eb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024dcc:	4596      	cmp	lr, r2
 8024dce:	dd70      	ble.n	8024eb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024dd0:	2800      	cmp	r0, #0
 8024dd2:	d06e      	beq.n	8024eb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8024dd4:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024dd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024ddc:	441c      	add	r4, r3
 8024dde:	3501      	adds	r5, #1
 8024de0:	d46b      	bmi.n	8024eba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024de2:	45a9      	cmp	r9, r5
 8024de4:	dd69      	ble.n	8024eba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024de6:	2e00      	cmp	r6, #0
 8024de8:	d067      	beq.n	8024eba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8024dea:	f1bc 0f00 	cmp.w	ip, #0
 8024dee:	db62      	blt.n	8024eb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024df0:	45e6      	cmp	lr, ip
 8024df2:	dd60      	ble.n	8024eb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8024df4:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024dfc:	441d      	add	r5, r3
 8024dfe:	f11c 0201 	adds.w	r2, ip, #1
 8024e02:	d45d      	bmi.n	8024ec0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024e04:	4596      	cmp	lr, r2
 8024e06:	dd5b      	ble.n	8024ec0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024e08:	2800      	cmp	r0, #0
 8024e0a:	d059      	beq.n	8024ec0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8024e0c:	44c6      	add	lr, r8
 8024e0e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024e12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024e16:	4413      	add	r3, r2
 8024e18:	b280      	uxth	r0, r0
 8024e1a:	f897 e002 	ldrb.w	lr, [r7, #2]
 8024e1e:	b2b2      	uxth	r2, r6
 8024e20:	f897 9000 	ldrb.w	r9, [r7]
 8024e24:	787f      	ldrb	r7, [r7, #1]
 8024e26:	fb00 f602 	mul.w	r6, r0, r2
 8024e2a:	0100      	lsls	r0, r0, #4
 8024e2c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024e30:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8024e34:	1b80      	subs	r0, r0, r6
 8024e36:	fa1f fc82 	uxth.w	ip, r2
 8024e3a:	b282      	uxth	r2, r0
 8024e3c:	78a0      	ldrb	r0, [r4, #2]
 8024e3e:	eba8 080c 	sub.w	r8, r8, ip
 8024e42:	4350      	muls	r0, r2
 8024e44:	fa1f f888 	uxth.w	r8, r8
 8024e48:	fb08 0e0e 	mla	lr, r8, lr, r0
 8024e4c:	78a8      	ldrb	r0, [r5, #2]
 8024e4e:	fb0c e000 	mla	r0, ip, r0, lr
 8024e52:	f893 e002 	ldrb.w	lr, [r3, #2]
 8024e56:	fb06 0e0e 	mla	lr, r6, lr, r0
 8024e5a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8024e5e:	f894 e000 	ldrb.w	lr, [r4]
 8024e62:	fb02 fe0e 	mul.w	lr, r2, lr
 8024e66:	fb08 e909 	mla	r9, r8, r9, lr
 8024e6a:	f895 e000 	ldrb.w	lr, [r5]
 8024e6e:	fb0c 990e 	mla	r9, ip, lr, r9
 8024e72:	f893 e000 	ldrb.w	lr, [r3]
 8024e76:	785b      	ldrb	r3, [r3, #1]
 8024e78:	fb06 9e0e 	mla	lr, r6, lr, r9
 8024e7c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8024e80:	ea4e 0e00 	orr.w	lr, lr, r0
 8024e84:	7860      	ldrb	r0, [r4, #1]
 8024e86:	4350      	muls	r0, r2
 8024e88:	786a      	ldrb	r2, [r5, #1]
 8024e8a:	fb08 0007 	mla	r0, r8, r7, r0
 8024e8e:	fb0c 0202 	mla	r2, ip, r2, r0
 8024e92:	fb06 2303 	mla	r3, r6, r3, r2
 8024e96:	095b      	lsrs	r3, r3, #5
 8024e98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e9c:	ea4e 0303 	orr.w	r3, lr, r3
 8024ea0:	800b      	strh	r3, [r1, #0]
 8024ea2:	b003      	add	sp, #12
 8024ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ea8:	af01      	add	r7, sp, #4
 8024eaa:	e78c      	b.n	8024dc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8024eac:	ac01      	add	r4, sp, #4
 8024eae:	4627      	mov	r7, r4
 8024eb0:	e795      	b.n	8024dde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024eb2:	ac01      	add	r4, sp, #4
 8024eb4:	e793      	b.n	8024dde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024eb6:	ad01      	add	r5, sp, #4
 8024eb8:	e7a1      	b.n	8024dfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8024eba:	ab01      	add	r3, sp, #4
 8024ebc:	461d      	mov	r5, r3
 8024ebe:	e7ab      	b.n	8024e18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8024ec0:	ab01      	add	r3, sp, #4
 8024ec2:	e7a9      	b.n	8024e18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08024ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ec8:	b08f      	sub	sp, #60	; 0x3c
 8024eca:	920c      	str	r2, [sp, #48]	; 0x30
 8024ecc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8024ece:	900d      	str	r0, [sp, #52]	; 0x34
 8024ed0:	910a      	str	r1, [sp, #40]	; 0x28
 8024ed2:	6850      	ldr	r0, [r2, #4]
 8024ed4:	9306      	str	r3, [sp, #24]
 8024ed6:	6812      	ldr	r2, [r2, #0]
 8024ed8:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8024edc:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8024ee0:	fb00 1303 	mla	r3, r0, r3, r1
 8024ee4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024ee8:	9307      	str	r3, [sp, #28]
 8024eea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024eec:	681b      	ldr	r3, [r3, #0]
 8024eee:	9308      	str	r3, [sp, #32]
 8024ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024ef2:	685c      	ldr	r4, [r3, #4]
 8024ef4:	3404      	adds	r4, #4
 8024ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	dc03      	bgt.n	8024f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8024efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024efe:	2b00      	cmp	r3, #0
 8024f00:	f340 81d5 	ble.w	80252ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8024f04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024f06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f0e:	1e48      	subs	r0, r1, #1
 8024f10:	1e56      	subs	r6, r2, #1
 8024f12:	9b06      	ldr	r3, [sp, #24]
 8024f14:	2b00      	cmp	r3, #0
 8024f16:	f340 80b6 	ble.w	8025086 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8024f1a:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024f1e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024f22:	d406      	bmi.n	8024f32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024f24:	4287      	cmp	r7, r0
 8024f26:	da04      	bge.n	8024f32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024f28:	2b00      	cmp	r3, #0
 8024f2a:	db02      	blt.n	8024f32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024f2c:	42b3      	cmp	r3, r6
 8024f2e:	f2c0 80ab 	blt.w	8025088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8024f32:	3701      	adds	r7, #1
 8024f34:	f100 809c 	bmi.w	8025070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024f38:	42b9      	cmp	r1, r7
 8024f3a:	f2c0 8099 	blt.w	8025070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024f3e:	3301      	adds	r3, #1
 8024f40:	f100 8096 	bmi.w	8025070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024f44:	429a      	cmp	r2, r3
 8024f46:	f2c0 8093 	blt.w	8025070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024f4a:	9b06      	ldr	r3, [sp, #24]
 8024f4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f4e:	9b07      	ldr	r3, [sp, #28]
 8024f50:	9309      	str	r3, [sp, #36]	; 0x24
 8024f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f54:	2b00      	cmp	r3, #0
 8024f56:	f340 80b4 	ble.w	80250c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8024f5a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8024f5c:	142e      	asrs	r6, r5, #16
 8024f5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024f60:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024f64:	68c7      	ldr	r7, [r0, #12]
 8024f66:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024f6a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024f6e:	6892      	ldr	r2, [r2, #8]
 8024f70:	f100 80fb 	bmi.w	802516a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024f74:	f102 3cff 	add.w	ip, r2, #4294967295
 8024f78:	4560      	cmp	r0, ip
 8024f7a:	f280 80f6 	bge.w	802516a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024f7e:	2e00      	cmp	r6, #0
 8024f80:	f2c0 80f3 	blt.w	802516a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024f84:	f107 3cff 	add.w	ip, r7, #4294967295
 8024f88:	4566      	cmp	r6, ip
 8024f8a:	f280 80ee 	bge.w	802516a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024f8e:	b212      	sxth	r2, r2
 8024f90:	fb06 0002 	mla	r0, r6, r2, r0
 8024f94:	9e08      	ldr	r6, [sp, #32]
 8024f96:	1837      	adds	r7, r6, r0
 8024f98:	5c30      	ldrb	r0, [r6, r0]
 8024f9a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8024f9e:	eb04 0c08 	add.w	ip, r4, r8
 8024fa2:	2b00      	cmp	r3, #0
 8024fa4:	f000 80d3 	beq.w	802514e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8024fa8:	787e      	ldrb	r6, [r7, #1]
 8024faa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024fae:	4426      	add	r6, r4
 8024fb0:	2900      	cmp	r1, #0
 8024fb2:	f000 80d4 	beq.w	802515e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8024fb6:	18b8      	adds	r0, r7, r2
 8024fb8:	5cba      	ldrb	r2, [r7, r2]
 8024fba:	7840      	ldrb	r0, [r0, #1]
 8024fbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024fc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024fc4:	4422      	add	r2, r4
 8024fc6:	4420      	add	r0, r4
 8024fc8:	b29b      	uxth	r3, r3
 8024fca:	78b7      	ldrb	r7, [r6, #2]
 8024fcc:	b289      	uxth	r1, r1
 8024fce:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024fd2:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024fd6:	fb03 f901 	mul.w	r9, r3, r1
 8024fda:	011b      	lsls	r3, r3, #4
 8024fdc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024fe0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024fe4:	eba3 0309 	sub.w	r3, r3, r9
 8024fe8:	b289      	uxth	r1, r1
 8024fea:	b29b      	uxth	r3, r3
 8024fec:	ebae 0e01 	sub.w	lr, lr, r1
 8024ff0:	435f      	muls	r7, r3
 8024ff2:	fa1f fe8e 	uxth.w	lr, lr
 8024ff6:	fb0e 770a 	mla	r7, lr, sl, r7
 8024ffa:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024ffe:	fb01 770a 	mla	r7, r1, sl, r7
 8025002:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025006:	fb09 7a0a 	mla	sl, r9, sl, r7
 802500a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802500e:	f896 8000 	ldrb.w	r8, [r6]
 8025012:	7876      	ldrb	r6, [r6, #1]
 8025014:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025018:	fb03 f808 	mul.w	r8, r3, r8
 802501c:	4373      	muls	r3, r6
 802501e:	fb0e 8807 	mla	r8, lr, r7, r8
 8025022:	7817      	ldrb	r7, [r2, #0]
 8025024:	fb0e 330c 	mla	r3, lr, ip, r3
 8025028:	fb01 8807 	mla	r8, r1, r7, r8
 802502c:	7807      	ldrb	r7, [r0, #0]
 802502e:	fb09 8707 	mla	r7, r9, r7, r8
 8025032:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025036:	ea47 070a 	orr.w	r7, r7, sl
 802503a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802503e:	fb01 310a 	mla	r1, r1, sl, r3
 8025042:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025048:	fb09 1a0a 	mla	sl, r9, sl, r1
 802504c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025050:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025054:	ea47 070a 	orr.w	r7, r7, sl
 8025058:	801f      	strh	r7, [r3, #0]
 802505a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802505c:	3302      	adds	r3, #2
 802505e:	9309      	str	r3, [sp, #36]	; 0x24
 8025060:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025062:	449b      	add	fp, r3
 8025064:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025066:	441d      	add	r5, r3
 8025068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802506a:	3b01      	subs	r3, #1
 802506c:	930b      	str	r3, [sp, #44]	; 0x2c
 802506e:	e770      	b.n	8024f52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025070:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025072:	449b      	add	fp, r3
 8025074:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025076:	441d      	add	r5, r3
 8025078:	9b06      	ldr	r3, [sp, #24]
 802507a:	3b01      	subs	r3, #1
 802507c:	9306      	str	r3, [sp, #24]
 802507e:	9b07      	ldr	r3, [sp, #28]
 8025080:	3302      	adds	r3, #2
 8025082:	9307      	str	r3, [sp, #28]
 8025084:	e745      	b.n	8024f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8025086:	d023      	beq.n	80250d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025088:	9b06      	ldr	r3, [sp, #24]
 802508a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802508c:	3b01      	subs	r3, #1
 802508e:	fb00 b003 	mla	r0, r0, r3, fp
 8025092:	1400      	asrs	r0, r0, #16
 8025094:	f53f af59 	bmi.w	8024f4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025098:	3901      	subs	r1, #1
 802509a:	4288      	cmp	r0, r1
 802509c:	f6bf af55 	bge.w	8024f4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80250a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80250a2:	fb01 5303 	mla	r3, r1, r3, r5
 80250a6:	141b      	asrs	r3, r3, #16
 80250a8:	f53f af4f 	bmi.w	8024f4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80250ac:	3a01      	subs	r2, #1
 80250ae:	4293      	cmp	r3, r2
 80250b0:	f6bf af4b 	bge.w	8024f4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80250b4:	9b06      	ldr	r3, [sp, #24]
 80250b6:	9309      	str	r3, [sp, #36]	; 0x24
 80250b8:	9b07      	ldr	r3, [sp, #28]
 80250ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80250bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250be:	2b00      	cmp	r3, #0
 80250c0:	dc70      	bgt.n	80251a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80250c2:	9b06      	ldr	r3, [sp, #24]
 80250c4:	9a07      	ldr	r2, [sp, #28]
 80250c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80250ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80250ce:	9307      	str	r3, [sp, #28]
 80250d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250d2:	2b00      	cmp	r3, #0
 80250d4:	f340 80eb 	ble.w	80252ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80250d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80250dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80250de:	ee30 0a04 	vadd.f32	s0, s0, s8
 80250e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80250e6:	eef0 6a62 	vmov.f32	s13, s5
 80250ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80250ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80250f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80250f6:	ee16 ba90 	vmov	fp, s13
 80250fa:	eef0 6a43 	vmov.f32	s13, s6
 80250fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025102:	ee16 5a90 	vmov	r5, s13
 8025106:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802510a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802510e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025112:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025116:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802511a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802511e:	ee12 2a90 	vmov	r2, s5
 8025122:	eef0 2a47 	vmov.f32	s5, s14
 8025126:	fb92 f3f3 	sdiv	r3, r2, r3
 802512a:	ee13 2a10 	vmov	r2, s6
 802512e:	931b      	str	r3, [sp, #108]	; 0x6c
 8025130:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025132:	eeb0 3a67 	vmov.f32	s6, s15
 8025136:	fb92 f3f3 	sdiv	r3, r2, r3
 802513a:	931c      	str	r3, [sp, #112]	; 0x70
 802513c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802513e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025140:	3b01      	subs	r3, #1
 8025142:	930a      	str	r3, [sp, #40]	; 0x28
 8025144:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025146:	bf08      	it	eq
 8025148:	4613      	moveq	r3, r2
 802514a:	9306      	str	r3, [sp, #24]
 802514c:	e6d3      	b.n	8024ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802514e:	b149      	cbz	r1, 8025164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8025150:	5cba      	ldrb	r2, [r7, r2]
 8025152:	4660      	mov	r0, ip
 8025154:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025158:	4422      	add	r2, r4
 802515a:	4666      	mov	r6, ip
 802515c:	e734      	b.n	8024fc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 802515e:	4660      	mov	r0, ip
 8025160:	4662      	mov	r2, ip
 8025162:	e731      	b.n	8024fc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8025164:	4660      	mov	r0, ip
 8025166:	4662      	mov	r2, ip
 8025168:	e7f7      	b.n	802515a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802516a:	f110 0c01 	adds.w	ip, r0, #1
 802516e:	f53f af74 	bmi.w	802505a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025172:	4562      	cmp	r2, ip
 8025174:	f6ff af71 	blt.w	802505a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025178:	f116 0c01 	adds.w	ip, r6, #1
 802517c:	f53f af6d 	bmi.w	802505a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025180:	4567      	cmp	r7, ip
 8025182:	f6ff af6a 	blt.w	802505a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025186:	b23f      	sxth	r7, r7
 8025188:	b212      	sxth	r2, r2
 802518a:	9701      	str	r7, [sp, #4]
 802518c:	9200      	str	r2, [sp, #0]
 802518e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025192:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025196:	4623      	mov	r3, r4
 8025198:	980d      	ldr	r0, [sp, #52]	; 0x34
 802519a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802519e:	f7ff fde7 	bl	8024d70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80251a2:	e75a      	b.n	802505a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80251a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80251a6:	ea4f 462b 	mov.w	r6, fp, asr #16
 80251aa:	1428      	asrs	r0, r5, #16
 80251ac:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80251b0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80251b4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80251b8:	fb02 6000 	mla	r0, r2, r0, r6
 80251bc:	9e08      	ldr	r6, [sp, #32]
 80251be:	f816 8000 	ldrb.w	r8, [r6, r0]
 80251c2:	1837      	adds	r7, r6, r0
 80251c4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80251c8:	eb04 0c08 	add.w	ip, r4, r8
 80251cc:	2b00      	cmp	r3, #0
 80251ce:	d060      	beq.n	8025292 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80251d0:	787e      	ldrb	r6, [r7, #1]
 80251d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80251d6:	4426      	add	r6, r4
 80251d8:	2900      	cmp	r1, #0
 80251da:	d062      	beq.n	80252a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80251dc:	18b8      	adds	r0, r7, r2
 80251de:	5cba      	ldrb	r2, [r7, r2]
 80251e0:	7840      	ldrb	r0, [r0, #1]
 80251e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80251e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80251ea:	4422      	add	r2, r4
 80251ec:	4420      	add	r0, r4
 80251ee:	b29b      	uxth	r3, r3
 80251f0:	78b7      	ldrb	r7, [r6, #2]
 80251f2:	b289      	uxth	r1, r1
 80251f4:	f89c a002 	ldrb.w	sl, [ip, #2]
 80251f8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80251fc:	fb03 f901 	mul.w	r9, r3, r1
 8025200:	011b      	lsls	r3, r3, #4
 8025202:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025206:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802520a:	eba3 0309 	sub.w	r3, r3, r9
 802520e:	b289      	uxth	r1, r1
 8025210:	b29b      	uxth	r3, r3
 8025212:	ebae 0e01 	sub.w	lr, lr, r1
 8025216:	435f      	muls	r7, r3
 8025218:	fa1f fe8e 	uxth.w	lr, lr
 802521c:	fb0e 770a 	mla	r7, lr, sl, r7
 8025220:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025224:	fb01 770a 	mla	r7, r1, sl, r7
 8025228:	f890 a002 	ldrb.w	sl, [r0, #2]
 802522c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025230:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025234:	f896 8000 	ldrb.w	r8, [r6]
 8025238:	7876      	ldrb	r6, [r6, #1]
 802523a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802523e:	fb03 f808 	mul.w	r8, r3, r8
 8025242:	4373      	muls	r3, r6
 8025244:	7856      	ldrb	r6, [r2, #1]
 8025246:	fb0e 8807 	mla	r8, lr, r7, r8
 802524a:	7817      	ldrb	r7, [r2, #0]
 802524c:	fb0e 330c 	mla	r3, lr, ip, r3
 8025250:	fb01 8807 	mla	r8, r1, r7, r8
 8025254:	7807      	ldrb	r7, [r0, #0]
 8025256:	fb01 3306 	mla	r3, r1, r6, r3
 802525a:	fb09 8707 	mla	r7, r9, r7, r8
 802525e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025262:	ea47 070a 	orr.w	r7, r7, sl
 8025266:	f890 a001 	ldrb.w	sl, [r0, #1]
 802526a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802526e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025270:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025274:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025278:	ea47 070a 	orr.w	r7, r7, sl
 802527c:	f823 7b02 	strh.w	r7, [r3], #2
 8025280:	930b      	str	r3, [sp, #44]	; 0x2c
 8025282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025284:	449b      	add	fp, r3
 8025286:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025288:	441d      	add	r5, r3
 802528a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802528c:	3b01      	subs	r3, #1
 802528e:	9309      	str	r3, [sp, #36]	; 0x24
 8025290:	e714      	b.n	80250bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8025292:	b149      	cbz	r1, 80252a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025294:	5cba      	ldrb	r2, [r7, r2]
 8025296:	4660      	mov	r0, ip
 8025298:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802529c:	4422      	add	r2, r4
 802529e:	4666      	mov	r6, ip
 80252a0:	e7a5      	b.n	80251ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80252a2:	4660      	mov	r0, ip
 80252a4:	4662      	mov	r2, ip
 80252a6:	e7a2      	b.n	80251ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80252a8:	4660      	mov	r0, ip
 80252aa:	4662      	mov	r2, ip
 80252ac:	e7f7      	b.n	802529e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 80252ae:	b00f      	add	sp, #60	; 0x3c
 80252b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080252b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80252b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252b8:	b085      	sub	sp, #20
 80252ba:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80252be:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80252c2:	9102      	str	r1, [sp, #8]
 80252c4:	2c00      	cmp	r4, #0
 80252c6:	fb04 710c 	mla	r1, r4, ip, r7
 80252ca:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80252ce:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80252d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80252d6:	eb02 0e01 	add.w	lr, r2, r1
 80252da:	f2c0 8122 	blt.w	8025522 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80252de:	45a0      	cmp	r8, r4
 80252e0:	f340 811f 	ble.w	8025522 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80252e4:	2f00      	cmp	r7, #0
 80252e6:	f2c0 811a 	blt.w	802551e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80252ea:	45bc      	cmp	ip, r7
 80252ec:	f340 8117 	ble.w	802551e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80252f0:	5c52      	ldrb	r2, [r2, r1]
 80252f2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80252f6:	1c7a      	adds	r2, r7, #1
 80252f8:	f100 8116 	bmi.w	8025528 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80252fc:	4594      	cmp	ip, r2
 80252fe:	f340 8113 	ble.w	8025528 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8025302:	2e00      	cmp	r6, #0
 8025304:	f000 8112 	beq.w	802552c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8025308:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802530c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025310:	3401      	adds	r4, #1
 8025312:	f100 810f 	bmi.w	8025534 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8025316:	45a0      	cmp	r8, r4
 8025318:	f340 810c 	ble.w	8025534 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802531c:	2800      	cmp	r0, #0
 802531e:	f000 810c 	beq.w	802553a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8025322:	2f00      	cmp	r7, #0
 8025324:	f2c0 8104 	blt.w	8025530 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8025328:	45bc      	cmp	ip, r7
 802532a:	f340 8101 	ble.w	8025530 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802532e:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8025332:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8025336:	3701      	adds	r7, #1
 8025338:	f100 8102 	bmi.w	8025540 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802533c:	45bc      	cmp	ip, r7
 802533e:	f340 80ff 	ble.w	8025540 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8025342:	2e00      	cmp	r6, #0
 8025344:	f000 80fe 	beq.w	8025544 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8025348:	44f4      	add	ip, lr
 802534a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802534e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025352:	b2b6      	uxth	r6, r6
 8025354:	b280      	uxth	r0, r0
 8025356:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802535a:	fb00 fe06 	mul.w	lr, r0, r6
 802535e:	0136      	lsls	r6, r6, #4
 8025360:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8025364:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8025368:	eba6 070e 	sub.w	r7, r6, lr
 802536c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8025370:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025374:	b280      	uxth	r0, r0
 8025376:	b2bf      	uxth	r7, r7
 8025378:	1a1b      	subs	r3, r3, r0
 802537a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802537e:	fb0a f607 	mul.w	r6, sl, r7
 8025382:	b29b      	uxth	r3, r3
 8025384:	fb0b 6603 	mla	r6, fp, r3, r6
 8025388:	fb00 6609 	mla	r6, r0, r9, r6
 802538c:	fb0e 6608 	mla	r6, lr, r8, r6
 8025390:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025394:	9600      	str	r6, [sp, #0]
 8025396:	2e00      	cmp	r6, #0
 8025398:	f000 80be 	beq.w	8025518 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802539c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80253a0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80253a4:	9e02      	ldr	r6, [sp, #8]
 80253a6:	fb0b fc0c 	mul.w	ip, fp, ip
 80253aa:	fb0b f505 	mul.w	r5, fp, r5
 80253ae:	8836      	ldrh	r6, [r6, #0]
 80253b0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80253b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80253b8:	9501      	str	r5, [sp, #4]
 80253ba:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80253be:	44dc      	add	ip, fp
 80253c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253c4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80253c8:	9503      	str	r5, [sp, #12]
 80253ca:	9d01      	ldr	r5, [sp, #4]
 80253cc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80253d0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80253d4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80253d8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80253dc:	fb0a fc0c 	mul.w	ip, sl, ip
 80253e0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80253e4:	fb0a fa01 	mul.w	sl, sl, r1
 80253e8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80253ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80253f0:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80253f4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80253f8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80253fc:	4465      	add	r5, ip
 80253fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025402:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025406:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802540a:	fb09 fc0c 	mul.w	ip, r9, ip
 802540e:	0a2d      	lsrs	r5, r5, #8
 8025410:	fb09 f904 	mul.w	r9, r9, r4
 8025414:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025418:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802541c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025420:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8025424:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025428:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802542c:	437d      	muls	r5, r7
 802542e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025432:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8025436:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802543a:	4461      	add	r1, ip
 802543c:	fb08 f404 	mul.w	r4, r8, r4
 8025440:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025444:	fb08 f802 	mul.w	r8, r8, r2
 8025448:	0a09      	lsrs	r1, r1, #8
 802544a:	0a22      	lsrs	r2, r4, #8
 802544c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8025450:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025454:	fb07 f70a 	mul.w	r7, r7, sl
 8025458:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802545c:	4414      	add	r4, r2
 802545e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025462:	0a24      	lsrs	r4, r4, #8
 8025464:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025468:	9a03      	ldr	r2, [sp, #12]
 802546a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802546e:	fb02 5503 	mla	r5, r2, r3, r5
 8025472:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025476:	9a00      	ldr	r2, [sp, #0]
 8025478:	fb04 540e 	mla	r4, r4, lr, r5
 802547c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025480:	1235      	asrs	r5, r6, #8
 8025482:	fb01 4100 	mla	r1, r1, r0, r4
 8025486:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802548a:	0a09      	lsrs	r1, r1, #8
 802548c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8025490:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8025494:	fb03 7101 	mla	r1, r3, r1, r7
 8025498:	fb0e 1e08 	mla	lr, lr, r8, r1
 802549c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80254a0:	fb00 e101 	mla	r1, r0, r1, lr
 80254a4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80254a8:	b287      	uxth	r7, r0
 80254aa:	0a09      	lsrs	r1, r1, #8
 80254ac:	437a      	muls	r2, r7
 80254ae:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80254b2:	1c53      	adds	r3, r2, #1
 80254b4:	4321      	orrs	r1, r4
 80254b6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80254ba:	0c0a      	lsrs	r2, r1, #16
 80254bc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80254c0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80254c4:	b2c8      	uxtb	r0, r1
 80254c6:	fb12 f207 	smulbb	r2, r2, r7
 80254ca:	fb14 f407 	smulbb	r4, r4, r7
 80254ce:	b2db      	uxtb	r3, r3
 80254d0:	fb10 f007 	smulbb	r0, r0, r7
 80254d4:	fb05 2503 	mla	r5, r5, r3, r2
 80254d8:	10f2      	asrs	r2, r6, #3
 80254da:	00f6      	lsls	r6, r6, #3
 80254dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80254e0:	b2ad      	uxth	r5, r5
 80254e2:	b2f6      	uxtb	r6, r6
 80254e4:	fb02 4203 	mla	r2, r2, r3, r4
 80254e8:	fb06 0303 	mla	r3, r6, r3, r0
 80254ec:	b294      	uxth	r4, r2
 80254ee:	b299      	uxth	r1, r3
 80254f0:	1c6b      	adds	r3, r5, #1
 80254f2:	1c62      	adds	r2, r4, #1
 80254f4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80254f8:	1c4b      	adds	r3, r1, #1
 80254fa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80254fe:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025502:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025506:	0952      	lsrs	r2, r2, #5
 8025508:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802550c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025510:	432b      	orrs	r3, r5
 8025512:	4313      	orrs	r3, r2
 8025514:	9a02      	ldr	r2, [sp, #8]
 8025516:	8013      	strh	r3, [r2, #0]
 8025518:	b005      	add	sp, #20
 802551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802551e:	2500      	movs	r5, #0
 8025520:	e6e9      	b.n	80252f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8025522:	2100      	movs	r1, #0
 8025524:	460d      	mov	r5, r1
 8025526:	e6f3      	b.n	8025310 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025528:	2100      	movs	r1, #0
 802552a:	e6f1      	b.n	8025310 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802552c:	4631      	mov	r1, r6
 802552e:	e6ef      	b.n	8025310 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025530:	2400      	movs	r4, #0
 8025532:	e700      	b.n	8025336 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8025534:	2200      	movs	r2, #0
 8025536:	4614      	mov	r4, r2
 8025538:	e70b      	b.n	8025352 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802553a:	4602      	mov	r2, r0
 802553c:	4604      	mov	r4, r0
 802553e:	e708      	b.n	8025352 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025540:	2200      	movs	r2, #0
 8025542:	e706      	b.n	8025352 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025544:	4632      	mov	r2, r6
 8025546:	e704      	b.n	8025352 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08025548 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802554c:	b09f      	sub	sp, #124	; 0x7c
 802554e:	921b      	str	r2, [sp, #108]	; 0x6c
 8025550:	9309      	str	r3, [sp, #36]	; 0x24
 8025552:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025554:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025558:	901d      	str	r0, [sp, #116]	; 0x74
 802555a:	931c      	str	r3, [sp, #112]	; 0x70
 802555c:	6850      	ldr	r0, [r2, #4]
 802555e:	9119      	str	r1, [sp, #100]	; 0x64
 8025560:	6812      	ldr	r2, [r2, #0]
 8025562:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8025564:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025568:	fb00 1303 	mla	r3, r0, r3, r1
 802556c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025570:	930c      	str	r3, [sp, #48]	; 0x30
 8025572:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025574:	681b      	ldr	r3, [r3, #0]
 8025576:	9312      	str	r3, [sp, #72]	; 0x48
 8025578:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802557a:	685e      	ldr	r6, [r3, #4]
 802557c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8025580:	3604      	adds	r6, #4
 8025582:	930d      	str	r3, [sp, #52]	; 0x34
 8025584:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025586:	2b00      	cmp	r3, #0
 8025588:	dc03      	bgt.n	8025592 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802558a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802558c:	2b00      	cmp	r3, #0
 802558e:	f340 8387 	ble.w	8025ca0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025592:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025594:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025598:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802559c:	1e48      	subs	r0, r1, #1
 802559e:	1e57      	subs	r7, r2, #1
 80255a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80255a2:	2b00      	cmp	r3, #0
 80255a4:	f340 8194 	ble.w	80258d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80255a8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80255aa:	142b      	asrs	r3, r5, #16
 80255ac:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80255b0:	d406      	bmi.n	80255c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80255b2:	4584      	cmp	ip, r0
 80255b4:	da04      	bge.n	80255c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80255b6:	2b00      	cmp	r3, #0
 80255b8:	db02      	blt.n	80255c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80255ba:	42bb      	cmp	r3, r7
 80255bc:	f2c0 8189 	blt.w	80258d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80255c0:	f11c 0c01 	adds.w	ip, ip, #1
 80255c4:	f100 8177 	bmi.w	80258b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80255c8:	4561      	cmp	r1, ip
 80255ca:	f2c0 8174 	blt.w	80258b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80255ce:	3301      	adds	r3, #1
 80255d0:	f100 8171 	bmi.w	80258b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80255d4:	429a      	cmp	r2, r3
 80255d6:	f2c0 816e 	blt.w	80258b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80255da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80255dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80255de:	931a      	str	r3, [sp, #104]	; 0x68
 80255e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	f340 8193 	ble.w	802590e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80255e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80255ea:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80255ee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80255f2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80255f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80255f8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80255fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80255fe:	141b      	asrs	r3, r3, #16
 8025600:	f100 81d6 	bmi.w	80259b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025604:	f100 38ff 	add.w	r8, r0, #4294967295
 8025608:	4543      	cmp	r3, r8
 802560a:	f280 81d1 	bge.w	80259b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802560e:	f1bc 0f00 	cmp.w	ip, #0
 8025612:	f2c0 81cd 	blt.w	80259b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025616:	f10e 38ff 	add.w	r8, lr, #4294967295
 802561a:	45c4      	cmp	ip, r8
 802561c:	f280 81c8 	bge.w	80259b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025620:	b200      	sxth	r0, r0
 8025622:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025624:	fb0c 3300 	mla	r3, ip, r0, r3
 8025628:	eb04 0803 	add.w	r8, r4, r3
 802562c:	5ce3      	ldrb	r3, [r4, r3]
 802562e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025632:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025636:	2a00      	cmp	r2, #0
 8025638:	f000 81af 	beq.w	802599a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802563c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025640:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025644:	940e      	str	r4, [sp, #56]	; 0x38
 8025646:	0e24      	lsrs	r4, r4, #24
 8025648:	9415      	str	r4, [sp, #84]	; 0x54
 802564a:	b179      	cbz	r1, 802566c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802564c:	eb08 0c00 	add.w	ip, r8, r0
 8025650:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025654:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025658:	900a      	str	r0, [sp, #40]	; 0x28
 802565a:	0e00      	lsrs	r0, r0, #24
 802565c:	9013      	str	r0, [sp, #76]	; 0x4c
 802565e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025662:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025666:	900f      	str	r0, [sp, #60]	; 0x3c
 8025668:	0e00      	lsrs	r0, r0, #24
 802566a:	9016      	str	r0, [sp, #88]	; 0x58
 802566c:	b292      	uxth	r2, r2
 802566e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025670:	b289      	uxth	r1, r1
 8025672:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025674:	fb02 f901 	mul.w	r9, r2, r1
 8025678:	0112      	lsls	r2, r2, #4
 802567a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802567e:	eba2 0809 	sub.w	r8, r2, r9
 8025682:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025686:	b289      	uxth	r1, r1
 8025688:	fa1f f888 	uxth.w	r8, r8
 802568c:	1a52      	subs	r2, r2, r1
 802568e:	fb08 f000 	mul.w	r0, r8, r0
 8025692:	b292      	uxth	r2, r2
 8025694:	fb02 000e 	mla	r0, r2, lr, r0
 8025698:	fb01 0004 	mla	r0, r1, r4, r0
 802569c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802569e:	fb09 0004 	mla	r0, r9, r4, r0
 80256a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80256a6:	2800      	cmp	r0, #0
 80256a8:	f000 80fa 	beq.w	80258a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80256ac:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80256b0:	d01b      	beq.n	80256ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80256b2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80256b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256ba:	fb0e fa0a 	mul.w	sl, lr, sl
 80256be:	fb0e fe03 	mul.w	lr, lr, r3
 80256c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80256c6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80256ca:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80256ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80256d2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80256d6:	4453      	add	r3, sl
 80256d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80256dc:	0a1b      	lsrs	r3, r3, #8
 80256de:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80256e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80256e6:	ea43 030c 	orr.w	r3, r3, ip
 80256ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80256ec:	2cff      	cmp	r4, #255	; 0xff
 80256ee:	d021      	beq.n	8025734 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80256f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80256f2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80256f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80256f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80256fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80256fe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025702:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025704:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025708:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802570c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025710:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025714:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025718:	44de      	add	lr, fp
 802571a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802571e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025722:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025726:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802572a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802572e:	ea4e 040a 	orr.w	r4, lr, sl
 8025732:	940e      	str	r4, [sp, #56]	; 0x38
 8025734:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025736:	2cff      	cmp	r4, #255	; 0xff
 8025738:	d021      	beq.n	802577e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802573a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802573c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025740:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025742:	fb04 fb0b 	mul.w	fp, r4, fp
 8025746:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025748:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802574c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802574e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025752:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025756:	fb04 fa0a 	mul.w	sl, r4, sl
 802575a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802575e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025762:	44de      	add	lr, fp
 8025764:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025768:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802576c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025770:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025774:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025778:	ea4e 040a 	orr.w	r4, lr, sl
 802577c:	940a      	str	r4, [sp, #40]	; 0x28
 802577e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025780:	2cff      	cmp	r4, #255	; 0xff
 8025782:	d021      	beq.n	80257c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8025784:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025786:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802578a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802578c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025790:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025792:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025796:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025798:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802579c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80257a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80257a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80257a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80257ac:	44de      	add	lr, fp
 80257ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80257b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80257b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80257be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80257c2:	ea4e 040a 	orr.w	r4, lr, sl
 80257c6:	940f      	str	r4, [sp, #60]	; 0x3c
 80257c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80257ca:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80257ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80257d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80257d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80257d8:	fb08 fc0c 	mul.w	ip, r8, ip
 80257dc:	fb02 cc0e 	mla	ip, r2, lr, ip
 80257e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80257e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80257e6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80257ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80257ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80257f0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80257f4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80257f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80257fa:	fb08 f80e 	mul.w	r8, r8, lr
 80257fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025802:	fb02 8303 	mla	r3, r2, r3, r8
 8025806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025808:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802580c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025812:	fb01 330a 	mla	r3, r1, sl, r3
 8025816:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802581a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802581c:	fb09 3901 	mla	r9, r9, r1, r3
 8025820:	883b      	ldrh	r3, [r7, #0]
 8025822:	4342      	muls	r2, r0
 8025824:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025828:	1c50      	adds	r0, r2, #1
 802582a:	1219      	asrs	r1, r3, #8
 802582c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025830:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025834:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025838:	ea4c 0c09 	orr.w	ip, ip, r9
 802583c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025840:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025844:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025848:	b2c0      	uxtb	r0, r0
 802584a:	fb12 f204 	smulbb	r2, r2, r4
 802584e:	fa5f fc8c 	uxtb.w	ip, ip
 8025852:	fb1e fe04 	smulbb	lr, lr, r4
 8025856:	fb01 2100 	mla	r1, r1, r0, r2
 802585a:	10da      	asrs	r2, r3, #3
 802585c:	fb1c fc04 	smulbb	ip, ip, r4
 8025860:	00db      	lsls	r3, r3, #3
 8025862:	b289      	uxth	r1, r1
 8025864:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025868:	b2db      	uxtb	r3, r3
 802586a:	fb02 e200 	mla	r2, r2, r0, lr
 802586e:	fb03 c300 	mla	r3, r3, r0, ip
 8025872:	b292      	uxth	r2, r2
 8025874:	fa1f fc83 	uxth.w	ip, r3
 8025878:	1c4b      	adds	r3, r1, #1
 802587a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802587e:	f10c 0301 	add.w	r3, ip, #1
 8025882:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025886:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802588a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802588e:	430b      	orrs	r3, r1
 8025890:	1c51      	adds	r1, r2, #1
 8025892:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025896:	0952      	lsrs	r2, r2, #5
 8025898:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802589c:	4313      	orrs	r3, r2
 802589e:	803b      	strh	r3, [r7, #0]
 80258a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80258a2:	3702      	adds	r7, #2
 80258a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80258a6:	441a      	add	r2, r3
 80258a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80258aa:	441d      	add	r5, r3
 80258ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80258ae:	9229      	str	r2, [sp, #164]	; 0xa4
 80258b0:	3b01      	subs	r3, #1
 80258b2:	931a      	str	r3, [sp, #104]	; 0x68
 80258b4:	e694      	b.n	80255e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80258b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80258b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80258ba:	441c      	add	r4, r3
 80258bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80258be:	441d      	add	r5, r3
 80258c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80258c2:	9429      	str	r4, [sp, #164]	; 0xa4
 80258c4:	3b01      	subs	r3, #1
 80258c6:	9309      	str	r3, [sp, #36]	; 0x24
 80258c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80258ca:	3302      	adds	r3, #2
 80258cc:	930c      	str	r3, [sp, #48]	; 0x30
 80258ce:	e667      	b.n	80255a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80258d0:	d024      	beq.n	802591c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80258d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80258d4:	982b      	ldr	r0, [sp, #172]	; 0xac
 80258d6:	3b01      	subs	r3, #1
 80258d8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80258da:	fb00 4003 	mla	r0, r0, r3, r4
 80258de:	1400      	asrs	r0, r0, #16
 80258e0:	f53f ae7b 	bmi.w	80255da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80258e4:	3901      	subs	r1, #1
 80258e6:	4288      	cmp	r0, r1
 80258e8:	f6bf ae77 	bge.w	80255da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80258ec:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80258ee:	fb01 5303 	mla	r3, r1, r3, r5
 80258f2:	141b      	asrs	r3, r3, #16
 80258f4:	f53f ae71 	bmi.w	80255da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80258f8:	3a01      	subs	r2, #1
 80258fa:	4293      	cmp	r3, r2
 80258fc:	f6bf ae6d 	bge.w	80255da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025900:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025904:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8025908:	f1bb 0f00 	cmp.w	fp, #0
 802590c:	dc70      	bgt.n	80259f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802590e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025910:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025916:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802591a:	930c      	str	r3, [sp, #48]	; 0x30
 802591c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802591e:	2b00      	cmp	r3, #0
 8025920:	f340 81be 	ble.w	8025ca0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025928:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802592a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802592e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025932:	eef0 6a62 	vmov.f32	s13, s5
 8025936:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802593a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802593e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025942:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025946:	eef0 6a43 	vmov.f32	s13, s6
 802594a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802594e:	ee16 5a90 	vmov	r5, s13
 8025952:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025956:	ee61 7a27 	vmul.f32	s15, s2, s15
 802595a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802595e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025962:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025966:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802596a:	ee12 2a90 	vmov	r2, s5
 802596e:	eef0 2a47 	vmov.f32	s5, s14
 8025972:	fb92 f3f3 	sdiv	r3, r2, r3
 8025976:	ee13 2a10 	vmov	r2, s6
 802597a:	932b      	str	r3, [sp, #172]	; 0xac
 802597c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802597e:	eeb0 3a67 	vmov.f32	s6, s15
 8025982:	fb92 f3f3 	sdiv	r3, r2, r3
 8025986:	932c      	str	r3, [sp, #176]	; 0xb0
 8025988:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802598a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802598c:	3b01      	subs	r3, #1
 802598e:	9319      	str	r3, [sp, #100]	; 0x64
 8025990:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025992:	bf08      	it	eq
 8025994:	4613      	moveq	r3, r2
 8025996:	9309      	str	r3, [sp, #36]	; 0x24
 8025998:	e5f4      	b.n	8025584 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802599a:	2900      	cmp	r1, #0
 802599c:	f43f ae66 	beq.w	802566c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80259a0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80259a4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80259a8:	900a      	str	r0, [sp, #40]	; 0x28
 80259aa:	0e00      	lsrs	r0, r0, #24
 80259ac:	9013      	str	r0, [sp, #76]	; 0x4c
 80259ae:	e65d      	b.n	802566c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80259b0:	f113 0801 	adds.w	r8, r3, #1
 80259b4:	f53f af74 	bmi.w	80258a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80259b8:	4540      	cmp	r0, r8
 80259ba:	f6ff af71 	blt.w	80258a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80259be:	f11c 0801 	adds.w	r8, ip, #1
 80259c2:	f53f af6d 	bmi.w	80258a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80259c6:	45c6      	cmp	lr, r8
 80259c8:	f6ff af6a 	blt.w	80258a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80259cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80259ce:	b200      	sxth	r0, r0
 80259d0:	9302      	str	r3, [sp, #8]
 80259d2:	fa0f f38e 	sxth.w	r3, lr
 80259d6:	9000      	str	r0, [sp, #0]
 80259d8:	9301      	str	r3, [sp, #4]
 80259da:	4633      	mov	r3, r6
 80259dc:	981d      	ldr	r0, [sp, #116]	; 0x74
 80259de:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80259e2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80259e6:	4639      	mov	r1, r7
 80259e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80259ea:	f7ff fc63 	bl	80252b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80259ee:	e757      	b.n	80258a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80259f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80259f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80259f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80259f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80259fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80259fe:	1427      	asrs	r7, r4, #16
 8025a00:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025a02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025a06:	142b      	asrs	r3, r5, #16
 8025a08:	fb01 7303 	mla	r3, r1, r3, r7
 8025a0c:	18e7      	adds	r7, r4, r3
 8025a0e:	5ce3      	ldrb	r3, [r4, r3]
 8025a10:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025a14:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025a18:	2a00      	cmp	r2, #0
 8025a1a:	f000 8137 	beq.w	8025c8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8025a1e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025a22:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025a26:	9410      	str	r4, [sp, #64]	; 0x40
 8025a28:	0e24      	lsrs	r4, r4, #24
 8025a2a:	9417      	str	r4, [sp, #92]	; 0x5c
 8025a2c:	b170      	cbz	r0, 8025a4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025a2e:	eb07 0e01 	add.w	lr, r7, r1
 8025a32:	5c79      	ldrb	r1, [r7, r1]
 8025a34:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025a38:	910b      	str	r1, [sp, #44]	; 0x2c
 8025a3a:	0e09      	lsrs	r1, r1, #24
 8025a3c:	9114      	str	r1, [sp, #80]	; 0x50
 8025a3e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025a42:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025a46:	9111      	str	r1, [sp, #68]	; 0x44
 8025a48:	0e09      	lsrs	r1, r1, #24
 8025a4a:	9118      	str	r1, [sp, #96]	; 0x60
 8025a4c:	b292      	uxth	r2, r2
 8025a4e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8025a50:	b280      	uxth	r0, r0
 8025a52:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025a54:	fb02 f800 	mul.w	r8, r2, r0
 8025a58:	0112      	lsls	r2, r2, #4
 8025a5a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025a5e:	eba2 0e08 	sub.w	lr, r2, r8
 8025a62:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025a66:	b280      	uxth	r0, r0
 8025a68:	fa1f fe8e 	uxth.w	lr, lr
 8025a6c:	1a12      	subs	r2, r2, r0
 8025a6e:	fb0e f101 	mul.w	r1, lr, r1
 8025a72:	b292      	uxth	r2, r2
 8025a74:	fb02 110c 	mla	r1, r2, ip, r1
 8025a78:	fb00 1104 	mla	r1, r0, r4, r1
 8025a7c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025a7e:	fb08 1104 	mla	r1, r8, r4, r1
 8025a82:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025a86:	2900      	cmp	r1, #0
 8025a88:	f000 80f5 	beq.w	8025c76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8025a8c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025a90:	d019      	beq.n	8025ac6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8025a92:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025a96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025a9a:	fb0c fa0a 	mul.w	sl, ip, sl
 8025a9e:	fb0c fc03 	mul.w	ip, ip, r3
 8025aa2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025aa6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025aaa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025aae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025ab2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025ab6:	4453      	add	r3, sl
 8025ab8:	0a3f      	lsrs	r7, r7, #8
 8025aba:	0a1b      	lsrs	r3, r3, #8
 8025abc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025ac0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025ac4:	433b      	orrs	r3, r7
 8025ac6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025ac8:	2cff      	cmp	r4, #255	; 0xff
 8025aca:	d020      	beq.n	8025b0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8025acc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025ace:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025ad2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025ad4:	4367      	muls	r7, r4
 8025ad6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025ad8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025adc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025ae0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025ae2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025ae6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025aea:	fb04 fa0a 	mul.w	sl, r4, sl
 8025aee:	44bc      	add	ip, r7
 8025af0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025af4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025af8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025afc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b08:	ea4c 040a 	orr.w	r4, ip, sl
 8025b0c:	9410      	str	r4, [sp, #64]	; 0x40
 8025b0e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025b10:	2cff      	cmp	r4, #255	; 0xff
 8025b12:	d020      	beq.n	8025b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8025b14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025b16:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025b1a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025b1c:	4367      	muls	r7, r4
 8025b1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025b20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b24:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025b28:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025b2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025b2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b32:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b36:	44bc      	add	ip, r7
 8025b38:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025b44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b50:	ea4c 040a 	orr.w	r4, ip, sl
 8025b54:	940b      	str	r4, [sp, #44]	; 0x2c
 8025b56:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025b58:	2cff      	cmp	r4, #255	; 0xff
 8025b5a:	d020      	beq.n	8025b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8025b5c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025b5e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025b62:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025b64:	4367      	muls	r7, r4
 8025b66:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025b68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025b70:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025b72:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025b76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b7e:	44bc      	add	ip, r7
 8025b80:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025b84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b88:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025b8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b98:	ea4c 040a 	orr.w	r4, ip, sl
 8025b9c:	9411      	str	r4, [sp, #68]	; 0x44
 8025b9e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025ba0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025ba4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025ba8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025bac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025bae:	fb0e f707 	mul.w	r7, lr, r7
 8025bb2:	fb02 770c 	mla	r7, r2, ip, r7
 8025bb6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025bba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025bbc:	fb00 770c 	mla	r7, r0, ip, r7
 8025bc0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025bc4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025bc6:	fb08 770c 	mla	r7, r8, ip, r7
 8025bca:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025bce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025bd0:	fb0e fe0c 	mul.w	lr, lr, ip
 8025bd4:	0a3f      	lsrs	r7, r7, #8
 8025bd6:	fb02 e303 	mla	r3, r2, r3, lr
 8025bda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025bdc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025be0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025be4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025be6:	fb00 330a 	mla	r3, r0, sl, r3
 8025bea:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025bee:	f8b9 0000 	ldrh.w	r0, [r9]
 8025bf2:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025bf8:	1202      	asrs	r2, r0, #8
 8025bfa:	434b      	muls	r3, r1
 8025bfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c00:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025c04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025c08:	1c59      	adds	r1, r3, #1
 8025c0a:	ea47 070c 	orr.w	r7, r7, ip
 8025c0e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025c12:	0c3b      	lsrs	r3, r7, #16
 8025c14:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025c18:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025c1c:	b2ff      	uxtb	r7, r7
 8025c1e:	fb13 f304 	smulbb	r3, r3, r4
 8025c22:	b2c9      	uxtb	r1, r1
 8025c24:	fb1c fc04 	smulbb	ip, ip, r4
 8025c28:	fb02 3201 	mla	r2, r2, r1, r3
 8025c2c:	10c3      	asrs	r3, r0, #3
 8025c2e:	fb17 f704 	smulbb	r7, r7, r4
 8025c32:	00c0      	lsls	r0, r0, #3
 8025c34:	b292      	uxth	r2, r2
 8025c36:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025c3a:	b2c0      	uxtb	r0, r0
 8025c3c:	fb03 c301 	mla	r3, r3, r1, ip
 8025c40:	f102 0c01 	add.w	ip, r2, #1
 8025c44:	fb00 7001 	mla	r0, r0, r1, r7
 8025c48:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025c4c:	b280      	uxth	r0, r0
 8025c4e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8025c52:	b29b      	uxth	r3, r3
 8025c54:	1c42      	adds	r2, r0, #1
 8025c56:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025c5a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025c5e:	ea42 020c 	orr.w	r2, r2, ip
 8025c62:	f103 0c01 	add.w	ip, r3, #1
 8025c66:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025c6a:	095b      	lsrs	r3, r3, #5
 8025c6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025c70:	431a      	orrs	r2, r3
 8025c72:	f8a9 2000 	strh.w	r2, [r9]
 8025c76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025c78:	f109 0902 	add.w	r9, r9, #2
 8025c7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025c7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025c82:	441a      	add	r2, r3
 8025c84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025c86:	9229      	str	r2, [sp, #164]	; 0xa4
 8025c88:	441d      	add	r5, r3
 8025c8a:	e63d      	b.n	8025908 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025c8c:	2800      	cmp	r0, #0
 8025c8e:	f43f aedd 	beq.w	8025a4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025c92:	5c79      	ldrb	r1, [r7, r1]
 8025c94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c98:	910b      	str	r1, [sp, #44]	; 0x2c
 8025c9a:	0e09      	lsrs	r1, r1, #24
 8025c9c:	9114      	str	r1, [sp, #80]	; 0x50
 8025c9e:	e6d5      	b.n	8025a4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025ca0:	b01f      	add	sp, #124	; 0x7c
 8025ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025ca6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025ca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025caa:	b089      	sub	sp, #36	; 0x24
 8025cac:	9101      	str	r1, [sp, #4]
 8025cae:	9801      	ldr	r0, [sp, #4]
 8025cb0:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8025cb4:	8800      	ldrh	r0, [r0, #0]
 8025cb6:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8025cba:	1206      	asrs	r6, r0, #8
 8025cbc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8025cc0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8025cc4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8025cc8:	9602      	str	r6, [sp, #8]
 8025cca:	10c6      	asrs	r6, r0, #3
 8025ccc:	00c0      	lsls	r0, r0, #3
 8025cce:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8025cd2:	b2c0      	uxtb	r0, r0
 8025cd4:	9603      	str	r6, [sp, #12]
 8025cd6:	9004      	str	r0, [sp, #16]
 8025cd8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8025cdc:	fb07 100c 	mla	r0, r7, ip, r1
 8025ce0:	2f00      	cmp	r7, #0
 8025ce2:	eb02 0e00 	add.w	lr, r2, r0
 8025ce6:	f2c0 810a 	blt.w	8025efe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025cea:	45b8      	cmp	r8, r7
 8025cec:	f340 8107 	ble.w	8025efe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025cf0:	2900      	cmp	r1, #0
 8025cf2:	f2c0 8102 	blt.w	8025efa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025cf6:	458c      	cmp	ip, r1
 8025cf8:	f340 80ff 	ble.w	8025efa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025cfc:	5c12      	ldrb	r2, [r2, r0]
 8025cfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025d02:	1c4a      	adds	r2, r1, #1
 8025d04:	f100 80fe 	bmi.w	8025f04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025d08:	4594      	cmp	ip, r2
 8025d0a:	f340 80fb 	ble.w	8025f04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8025d0e:	2d00      	cmp	r5, #0
 8025d10:	f000 80fa 	beq.w	8025f08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8025d14:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025d18:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025d1c:	3701      	adds	r7, #1
 8025d1e:	f100 80f7 	bmi.w	8025f10 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025d22:	45b8      	cmp	r8, r7
 8025d24:	f340 80f4 	ble.w	8025f10 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8025d28:	2c00      	cmp	r4, #0
 8025d2a:	f000 80f4 	beq.w	8025f16 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8025d2e:	2900      	cmp	r1, #0
 8025d30:	eb0e 020c 	add.w	r2, lr, ip
 8025d34:	f2c0 80ea 	blt.w	8025f0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025d38:	458c      	cmp	ip, r1
 8025d3a:	f340 80e7 	ble.w	8025f0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8025d3e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8025d42:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8025d46:	3101      	adds	r1, #1
 8025d48:	f100 80e8 	bmi.w	8025f1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025d4c:	458c      	cmp	ip, r1
 8025d4e:	f340 80e5 	ble.w	8025f1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8025d52:	2d00      	cmp	r5, #0
 8025d54:	f000 80e4 	beq.w	8025f20 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8025d58:	7852      	ldrb	r2, [r2, #1]
 8025d5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025d5e:	0e0b      	lsrs	r3, r1, #24
 8025d60:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8025d64:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8025d68:	9300      	str	r3, [sp, #0]
 8025d6a:	b2a4      	uxth	r4, r4
 8025d6c:	b2ab      	uxth	r3, r5
 8025d6e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8025d72:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025d76:	fb03 f904 	mul.w	r9, r3, r4
 8025d7a:	011b      	lsls	r3, r3, #4
 8025d7c:	fb0a f505 	mul.w	r5, sl, r5
 8025d80:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8025d84:	eba3 0e09 	sub.w	lr, r3, r9
 8025d88:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8025d8c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8025d90:	0a28      	lsrs	r0, r5, #8
 8025d92:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8025d96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025d9a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025d9e:	fb0a f303 	mul.w	r3, sl, r3
 8025da2:	fb08 f707 	mul.w	r7, r8, r7
 8025da6:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8025daa:	4405      	add	r5, r0
 8025dac:	fb08 fc0c 	mul.w	ip, r8, ip
 8025db0:	b2a4      	uxth	r4, r4
 8025db2:	0a2d      	lsrs	r5, r5, #8
 8025db4:	fa1f fe8e 	uxth.w	lr, lr
 8025db8:	1b12      	subs	r2, r2, r4
 8025dba:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8025dbe:	b292      	uxth	r2, r2
 8025dc0:	9005      	str	r0, [sp, #20]
 8025dc2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8025dc6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025dca:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8025dce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025dd2:	0a1b      	lsrs	r3, r3, #8
 8025dd4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025dd8:	9306      	str	r3, [sp, #24]
 8025dda:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8025dde:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025de2:	4460      	add	r0, ip
 8025de4:	fb0b f303 	mul.w	r3, fp, r3
 8025de8:	fb0b f606 	mul.w	r6, fp, r6
 8025dec:	0a00      	lsrs	r0, r0, #8
 8025dee:	0a1d      	lsrs	r5, r3, #8
 8025df0:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8025df4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025df8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025dfc:	441d      	add	r5, r3
 8025dfe:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8025e02:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025e06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8025e0a:	0a2d      	lsrs	r5, r5, #8
 8025e0c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025e10:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8025e14:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025e18:	0a36      	lsrs	r6, r6, #8
 8025e1a:	0a1b      	lsrs	r3, r3, #8
 8025e1c:	fb05 f50e 	mul.w	r5, r5, lr
 8025e20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025e24:	9307      	str	r3, [sp, #28]
 8025e26:	0e0b      	lsrs	r3, r1, #24
 8025e28:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025e2c:	fb0e f606 	mul.w	r6, lr, r6
 8025e30:	435f      	muls	r7, r3
 8025e32:	4359      	muls	r1, r3
 8025e34:	9b05      	ldr	r3, [sp, #20]
 8025e36:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025e3a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025e3e:	fb03 5502 	mla	r5, r3, r2, r5
 8025e42:	9b06      	ldr	r3, [sp, #24]
 8025e44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e48:	fb0e fe0b 	mul.w	lr, lr, fp
 8025e4c:	44bc      	add	ip, r7
 8025e4e:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8025e52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e56:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8025e5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e5e:	0a09      	lsrs	r1, r1, #8
 8025e60:	fb0c 5509 	mla	r5, ip, r9, r5
 8025e64:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025e68:	fb00 5504 	mla	r5, r0, r4, r5
 8025e6c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8025e70:	9b07      	ldr	r3, [sp, #28]
 8025e72:	fb02 6000 	mla	r0, r2, r0, r6
 8025e76:	0a2d      	lsrs	r5, r5, #8
 8025e78:	fb02 e20a 	mla	r2, r2, sl, lr
 8025e7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e80:	fb09 0001 	mla	r0, r9, r1, r0
 8025e84:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025e88:	fb04 0003 	mla	r0, r4, r3, r0
 8025e8c:	9b00      	ldr	r3, [sp, #0]
 8025e8e:	fb04 2408 	mla	r4, r4, r8, r2
 8025e92:	9a04      	ldr	r2, [sp, #16]
 8025e94:	0a00      	lsrs	r0, r0, #8
 8025e96:	fb09 4903 	mla	r9, r9, r3, r4
 8025e9a:	9b02      	ldr	r3, [sp, #8]
 8025e9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025ea0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8025ea4:	4305      	orrs	r5, r0
 8025ea6:	fa5f f989 	uxtb.w	r9, r9
 8025eaa:	fb03 f109 	mul.w	r1, r3, r9
 8025eae:	9b03      	ldr	r3, [sp, #12]
 8025eb0:	fb03 f309 	mul.w	r3, r3, r9
 8025eb4:	fb02 f909 	mul.w	r9, r2, r9
 8025eb8:	1c4a      	adds	r2, r1, #1
 8025eba:	1c58      	adds	r0, r3, #1
 8025ebc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025ec0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025ec4:	0c2a      	lsrs	r2, r5, #16
 8025ec6:	0a2b      	lsrs	r3, r5, #8
 8025ec8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8025ecc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025ed0:	0212      	lsls	r2, r2, #8
 8025ed2:	00db      	lsls	r3, r3, #3
 8025ed4:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8025ed8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025edc:	4313      	orrs	r3, r2
 8025ede:	f109 0201 	add.w	r2, r9, #1
 8025ee2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8025ee6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8025eea:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8025eee:	431d      	orrs	r5, r3
 8025ef0:	9b01      	ldr	r3, [sp, #4]
 8025ef2:	801d      	strh	r5, [r3, #0]
 8025ef4:	b009      	add	sp, #36	; 0x24
 8025ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025efa:	2000      	movs	r0, #0
 8025efc:	e701      	b.n	8025d02 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8025efe:	2600      	movs	r6, #0
 8025f00:	4630      	mov	r0, r6
 8025f02:	e70b      	b.n	8025d1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025f04:	2600      	movs	r6, #0
 8025f06:	e709      	b.n	8025d1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025f08:	462e      	mov	r6, r5
 8025f0a:	e707      	b.n	8025d1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8025f0c:	2700      	movs	r7, #0
 8025f0e:	e71a      	b.n	8025d46 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8025f10:	2100      	movs	r1, #0
 8025f12:	460f      	mov	r7, r1
 8025f14:	e723      	b.n	8025d5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025f16:	4621      	mov	r1, r4
 8025f18:	4627      	mov	r7, r4
 8025f1a:	e720      	b.n	8025d5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025f1c:	2100      	movs	r1, #0
 8025f1e:	e71e      	b.n	8025d5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8025f20:	4629      	mov	r1, r5
 8025f22:	e71c      	b.n	8025d5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08025f24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f28:	b09b      	sub	sp, #108	; 0x6c
 8025f2a:	9218      	str	r2, [sp, #96]	; 0x60
 8025f2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025f2e:	9019      	str	r0, [sp, #100]	; 0x64
 8025f30:	9116      	str	r1, [sp, #88]	; 0x58
 8025f32:	6850      	ldr	r0, [r2, #4]
 8025f34:	9307      	str	r3, [sp, #28]
 8025f36:	6812      	ldr	r2, [r2, #0]
 8025f38:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8025f3a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025f3e:	fb00 1303 	mla	r3, r0, r3, r1
 8025f42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025f46:	930a      	str	r3, [sp, #40]	; 0x28
 8025f48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f4a:	681b      	ldr	r3, [r3, #0]
 8025f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8025f4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f50:	685e      	ldr	r6, [r3, #4]
 8025f52:	3604      	adds	r6, #4
 8025f54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025f56:	2b00      	cmp	r3, #0
 8025f58:	dc03      	bgt.n	8025f62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8025f5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025f5c:	2b00      	cmp	r3, #0
 8025f5e:	f340 8373 	ble.w	8026648 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8025f62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f6c:	1e48      	subs	r0, r1, #1
 8025f6e:	1e57      	subs	r7, r2, #1
 8025f70:	9b07      	ldr	r3, [sp, #28]
 8025f72:	2b00      	cmp	r3, #0
 8025f74:	f340 818f 	ble.w	8026296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8025f78:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025f7a:	142b      	asrs	r3, r5, #16
 8025f7c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025f80:	d406      	bmi.n	8025f90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025f82:	4584      	cmp	ip, r0
 8025f84:	da04      	bge.n	8025f90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025f86:	2b00      	cmp	r3, #0
 8025f88:	db02      	blt.n	8025f90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025f8a:	42bb      	cmp	r3, r7
 8025f8c:	f2c0 8184 	blt.w	8026298 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025f90:	f11c 0c01 	adds.w	ip, ip, #1
 8025f94:	f100 8172 	bmi.w	802627c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025f98:	4561      	cmp	r1, ip
 8025f9a:	f2c0 816f 	blt.w	802627c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025f9e:	3301      	adds	r3, #1
 8025fa0:	f100 816c 	bmi.w	802627c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025fa4:	429a      	cmp	r2, r3
 8025fa6:	f2c0 8169 	blt.w	802627c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025faa:	9b07      	ldr	r3, [sp, #28]
 8025fac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025fae:	9317      	str	r3, [sp, #92]	; 0x5c
 8025fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025fb2:	2b00      	cmp	r3, #0
 8025fb4:	f340 818e 	ble.w	80262d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8025fb8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025fba:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025fbe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025fc2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025fc6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025fc8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025fcc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025fce:	141b      	asrs	r3, r3, #16
 8025fd0:	f100 81d1 	bmi.w	8026376 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025fd4:	f101 38ff 	add.w	r8, r1, #4294967295
 8025fd8:	4543      	cmp	r3, r8
 8025fda:	f280 81cc 	bge.w	8026376 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025fde:	f1bc 0f00 	cmp.w	ip, #0
 8025fe2:	f2c0 81c8 	blt.w	8026376 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025fe6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025fea:	45c4      	cmp	ip, r8
 8025fec:	f280 81c3 	bge.w	8026376 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025ff0:	b209      	sxth	r1, r1
 8025ff2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025ff4:	fb0c 3301 	mla	r3, ip, r1, r3
 8025ff8:	eb04 0803 	add.w	r8, r4, r3
 8025ffc:	5ce3      	ldrb	r3, [r4, r3]
 8025ffe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026002:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026006:	2a00      	cmp	r2, #0
 8026008:	f000 81aa 	beq.w	8026360 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 802600c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026010:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026014:	940b      	str	r4, [sp, #44]	; 0x2c
 8026016:	0e24      	lsrs	r4, r4, #24
 8026018:	9412      	str	r4, [sp, #72]	; 0x48
 802601a:	b178      	cbz	r0, 802603c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802601c:	eb08 0c01 	add.w	ip, r8, r1
 8026020:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026024:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026028:	9108      	str	r1, [sp, #32]
 802602a:	0e09      	lsrs	r1, r1, #24
 802602c:	9110      	str	r1, [sp, #64]	; 0x40
 802602e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026032:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026036:	910c      	str	r1, [sp, #48]	; 0x30
 8026038:	0e09      	lsrs	r1, r1, #24
 802603a:	9113      	str	r1, [sp, #76]	; 0x4c
 802603c:	b292      	uxth	r2, r2
 802603e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026040:	b280      	uxth	r0, r0
 8026042:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026044:	fb02 f900 	mul.w	r9, r2, r0
 8026048:	0112      	lsls	r2, r2, #4
 802604a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802604e:	eba2 0809 	sub.w	r8, r2, r9
 8026052:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026056:	b280      	uxth	r0, r0
 8026058:	fa1f f888 	uxth.w	r8, r8
 802605c:	1a12      	subs	r2, r2, r0
 802605e:	fb08 f101 	mul.w	r1, r8, r1
 8026062:	b292      	uxth	r2, r2
 8026064:	fb02 110e 	mla	r1, r2, lr, r1
 8026068:	fb00 1104 	mla	r1, r0, r4, r1
 802606c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802606e:	fb09 1104 	mla	r1, r9, r4, r1
 8026072:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026076:	2900      	cmp	r1, #0
 8026078:	f000 80f5 	beq.w	8026266 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802607c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026080:	d01b      	beq.n	80260ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026082:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802608a:	fb0e fa0a 	mul.w	sl, lr, sl
 802608e:	fb0e fe03 	mul.w	lr, lr, r3
 8026092:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026096:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802609a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802609e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260a2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80260a6:	4453      	add	r3, sl
 80260a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80260ac:	0a1b      	lsrs	r3, r3, #8
 80260ae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80260b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260b6:	ea43 030c 	orr.w	r3, r3, ip
 80260ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80260bc:	2cff      	cmp	r4, #255	; 0xff
 80260be:	d021      	beq.n	8026104 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80260c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80260c2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80260c6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80260c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80260cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80260ce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80260d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80260d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80260d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80260dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80260e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80260e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80260e8:	44de      	add	lr, fp
 80260ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80260ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80260f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80260f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80260fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80260fe:	ea4e 040a 	orr.w	r4, lr, sl
 8026102:	940b      	str	r4, [sp, #44]	; 0x2c
 8026104:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026106:	2cff      	cmp	r4, #255	; 0xff
 8026108:	d021      	beq.n	802614e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802610a:	9c08      	ldr	r4, [sp, #32]
 802610c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026110:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026112:	fb04 fb0b 	mul.w	fp, r4, fp
 8026116:	9c08      	ldr	r4, [sp, #32]
 8026118:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802611c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802611e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026122:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026126:	fb04 fa0a 	mul.w	sl, r4, sl
 802612a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802612e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026132:	44de      	add	lr, fp
 8026134:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026138:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802613c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026140:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026144:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026148:	ea4e 040a 	orr.w	r4, lr, sl
 802614c:	9408      	str	r4, [sp, #32]
 802614e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026150:	2cff      	cmp	r4, #255	; 0xff
 8026152:	d021      	beq.n	8026198 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026154:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026156:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802615a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802615c:	fb04 fb0b 	mul.w	fp, r4, fp
 8026160:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026162:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026166:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026168:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802616c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026170:	fb04 fa0a 	mul.w	sl, r4, sl
 8026174:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026178:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802617c:	44de      	add	lr, fp
 802617e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026182:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026186:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802618a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802618e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026192:	ea4e 040a 	orr.w	r4, lr, sl
 8026196:	940c      	str	r4, [sp, #48]	; 0x30
 8026198:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802619a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802619e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80261a2:	43c9      	mvns	r1, r1
 80261a4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80261a8:	9c08      	ldr	r4, [sp, #32]
 80261aa:	fb08 fc0c 	mul.w	ip, r8, ip
 80261ae:	fb02 cc0e 	mla	ip, r2, lr, ip
 80261b2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80261b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80261b8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80261bc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80261c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80261c2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80261c6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80261ca:	fb08 f80e 	mul.w	r8, r8, lr
 80261ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261d2:	fa5f fe81 	uxtb.w	lr, r1
 80261d6:	fb02 8303 	mla	r3, r2, r3, r8
 80261da:	9a08      	ldr	r2, [sp, #32]
 80261dc:	f8b7 8000 	ldrh.w	r8, [r7]
 80261e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80261e4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80261e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80261ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80261ee:	fb00 330a 	mla	r3, r0, sl, r3
 80261f2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80261f6:	ea4f 2228 	mov.w	r2, r8, asr #8
 80261fa:	fb09 3900 	mla	r9, r9, r0, r3
 80261fe:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8026202:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026206:	b2c9      	uxtb	r1, r1
 8026208:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802620c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026210:	fb02 f20e 	mul.w	r2, r2, lr
 8026214:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026218:	fb00 f00e 	mul.w	r0, r0, lr
 802621c:	1c53      	adds	r3, r2, #1
 802621e:	fb01 f10e 	mul.w	r1, r1, lr
 8026222:	ea4c 0c09 	orr.w	ip, ip, r9
 8026226:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802622a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802622e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026232:	4a60      	ldr	r2, [pc, #384]	; (80263b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8026234:	b2db      	uxtb	r3, r3
 8026236:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802623a:	1c43      	adds	r3, r0, #1
 802623c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026240:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026244:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026248:	00db      	lsls	r3, r3, #3
 802624a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802624e:	4313      	orrs	r3, r2
 8026250:	1c4a      	adds	r2, r1, #1
 8026252:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026256:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802625a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802625e:	ea4c 0c03 	orr.w	ip, ip, r3
 8026262:	f8a7 c000 	strh.w	ip, [r7]
 8026266:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026268:	3702      	adds	r7, #2
 802626a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802626c:	441a      	add	r2, r3
 802626e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026270:	441d      	add	r5, r3
 8026272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026274:	9225      	str	r2, [sp, #148]	; 0x94
 8026276:	3b01      	subs	r3, #1
 8026278:	9317      	str	r3, [sp, #92]	; 0x5c
 802627a:	e699      	b.n	8025fb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802627c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802627e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026280:	441c      	add	r4, r3
 8026282:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026284:	441d      	add	r5, r3
 8026286:	9b07      	ldr	r3, [sp, #28]
 8026288:	9425      	str	r4, [sp, #148]	; 0x94
 802628a:	3b01      	subs	r3, #1
 802628c:	9307      	str	r3, [sp, #28]
 802628e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026290:	3302      	adds	r3, #2
 8026292:	930a      	str	r3, [sp, #40]	; 0x28
 8026294:	e66c      	b.n	8025f70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026296:	d024      	beq.n	80262e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8026298:	9b07      	ldr	r3, [sp, #28]
 802629a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802629c:	3b01      	subs	r3, #1
 802629e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80262a0:	fb00 4003 	mla	r0, r0, r3, r4
 80262a4:	1400      	asrs	r0, r0, #16
 80262a6:	f53f ae80 	bmi.w	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80262aa:	3901      	subs	r1, #1
 80262ac:	4288      	cmp	r0, r1
 80262ae:	f6bf ae7c 	bge.w	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80262b2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80262b4:	fb01 5303 	mla	r3, r1, r3, r5
 80262b8:	141b      	asrs	r3, r3, #16
 80262ba:	f53f ae76 	bmi.w	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80262be:	3a01      	subs	r2, #1
 80262c0:	4293      	cmp	r3, r2
 80262c2:	f6bf ae72 	bge.w	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80262c6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80262ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80262ce:	f1bb 0f00 	cmp.w	fp, #0
 80262d2:	dc71      	bgt.n	80263b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80262d4:	9b07      	ldr	r3, [sp, #28]
 80262d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80262da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262dc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80262e0:	930a      	str	r3, [sp, #40]	; 0x28
 80262e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80262e4:	2b00      	cmp	r3, #0
 80262e6:	f340 81af 	ble.w	8026648 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80262ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80262ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80262f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80262f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80262f8:	eef0 6a62 	vmov.f32	s13, s5
 80262fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026300:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026304:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026308:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802630c:	eef0 6a43 	vmov.f32	s13, s6
 8026310:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026314:	ee16 5a90 	vmov	r5, s13
 8026318:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802631c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026320:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026324:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026328:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802632c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026330:	ee12 2a90 	vmov	r2, s5
 8026334:	eef0 2a47 	vmov.f32	s5, s14
 8026338:	fb92 f3f3 	sdiv	r3, r2, r3
 802633c:	ee13 2a10 	vmov	r2, s6
 8026340:	9327      	str	r3, [sp, #156]	; 0x9c
 8026342:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026344:	eeb0 3a67 	vmov.f32	s6, s15
 8026348:	fb92 f3f3 	sdiv	r3, r2, r3
 802634c:	9328      	str	r3, [sp, #160]	; 0xa0
 802634e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026350:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026352:	3b01      	subs	r3, #1
 8026354:	9316      	str	r3, [sp, #88]	; 0x58
 8026356:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026358:	bf08      	it	eq
 802635a:	4613      	moveq	r3, r2
 802635c:	9307      	str	r3, [sp, #28]
 802635e:	e5f9      	b.n	8025f54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8026360:	2800      	cmp	r0, #0
 8026362:	f43f ae6b 	beq.w	802603c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8026366:	f818 1001 	ldrb.w	r1, [r8, r1]
 802636a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802636e:	9108      	str	r1, [sp, #32]
 8026370:	0e09      	lsrs	r1, r1, #24
 8026372:	9110      	str	r1, [sp, #64]	; 0x40
 8026374:	e662      	b.n	802603c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8026376:	f113 0801 	adds.w	r8, r3, #1
 802637a:	f53f af74 	bmi.w	8026266 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802637e:	4541      	cmp	r1, r8
 8026380:	f6ff af71 	blt.w	8026266 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026384:	f11c 0801 	adds.w	r8, ip, #1
 8026388:	f53f af6d 	bmi.w	8026266 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802638c:	45c6      	cmp	lr, r8
 802638e:	f6ff af6a 	blt.w	8026266 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026392:	b209      	sxth	r1, r1
 8026394:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026398:	fa0f f38e 	sxth.w	r3, lr
 802639c:	9100      	str	r1, [sp, #0]
 802639e:	4639      	mov	r1, r7
 80263a0:	9301      	str	r3, [sp, #4]
 80263a2:	4633      	mov	r3, r6
 80263a4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80263a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80263aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80263ac:	f7ff fc7b 	bl	8025ca6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80263b0:	e759      	b.n	8026266 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80263b2:	bf00      	nop
 80263b4:	fffff800 	.word	0xfffff800
 80263b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80263ba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80263be:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80263c0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80263c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80263c6:	1427      	asrs	r7, r4, #16
 80263c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80263ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80263ce:	142b      	asrs	r3, r5, #16
 80263d0:	fb01 7303 	mla	r3, r1, r3, r7
 80263d4:	18e7      	adds	r7, r4, r3
 80263d6:	5ce3      	ldrb	r3, [r4, r3]
 80263d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80263dc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80263e0:	2a00      	cmp	r2, #0
 80263e2:	f000 8127 	beq.w	8026634 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80263e6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80263ea:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80263ee:	940d      	str	r4, [sp, #52]	; 0x34
 80263f0:	0e24      	lsrs	r4, r4, #24
 80263f2:	9414      	str	r4, [sp, #80]	; 0x50
 80263f4:	b170      	cbz	r0, 8026414 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80263f6:	eb07 0e01 	add.w	lr, r7, r1
 80263fa:	5c79      	ldrb	r1, [r7, r1]
 80263fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026400:	9109      	str	r1, [sp, #36]	; 0x24
 8026402:	0e09      	lsrs	r1, r1, #24
 8026404:	9111      	str	r1, [sp, #68]	; 0x44
 8026406:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802640a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802640e:	910e      	str	r1, [sp, #56]	; 0x38
 8026410:	0e09      	lsrs	r1, r1, #24
 8026412:	9115      	str	r1, [sp, #84]	; 0x54
 8026414:	b292      	uxth	r2, r2
 8026416:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026418:	b280      	uxth	r0, r0
 802641a:	fb02 f800 	mul.w	r8, r2, r0
 802641e:	0112      	lsls	r2, r2, #4
 8026420:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026424:	eba2 0e08 	sub.w	lr, r2, r8
 8026428:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802642c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802642e:	b280      	uxth	r0, r0
 8026430:	fa1f fe8e 	uxth.w	lr, lr
 8026434:	1a09      	subs	r1, r1, r0
 8026436:	fb0e f202 	mul.w	r2, lr, r2
 802643a:	b289      	uxth	r1, r1
 802643c:	fb01 220c 	mla	r2, r1, ip, r2
 8026440:	fb00 2204 	mla	r2, r0, r4, r2
 8026444:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026446:	fb08 2204 	mla	r2, r8, r4, r2
 802644a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802644e:	2a00      	cmp	r2, #0
 8026450:	f000 80e5 	beq.w	802661e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8026454:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026458:	d019      	beq.n	802648e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802645a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802645e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026462:	fb0c fa0a 	mul.w	sl, ip, sl
 8026466:	fb0c fc03 	mul.w	ip, ip, r3
 802646a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802646e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026472:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026476:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802647a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802647e:	4453      	add	r3, sl
 8026480:	0a3f      	lsrs	r7, r7, #8
 8026482:	0a1b      	lsrs	r3, r3, #8
 8026484:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026488:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802648c:	433b      	orrs	r3, r7
 802648e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026490:	2cff      	cmp	r4, #255	; 0xff
 8026492:	d020      	beq.n	80264d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8026494:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026496:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802649a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802649c:	4367      	muls	r7, r4
 802649e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80264a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80264a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80264a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80264aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80264ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80264b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80264b6:	44bc      	add	ip, r7
 80264b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80264bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80264c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80264c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80264d0:	ea4c 040a 	orr.w	r4, ip, sl
 80264d4:	940d      	str	r4, [sp, #52]	; 0x34
 80264d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80264d8:	2cff      	cmp	r4, #255	; 0xff
 80264da:	d020      	beq.n	802651e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80264dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80264de:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80264e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80264e4:	4367      	muls	r7, r4
 80264e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80264e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80264ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80264f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80264f2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80264f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80264fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80264fe:	44bc      	add	ip, r7
 8026500:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026504:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026508:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802650c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026510:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026514:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026518:	ea4c 040a 	orr.w	r4, ip, sl
 802651c:	9409      	str	r4, [sp, #36]	; 0x24
 802651e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026520:	2cff      	cmp	r4, #255	; 0xff
 8026522:	d020      	beq.n	8026566 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8026524:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026526:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802652a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802652c:	4367      	muls	r7, r4
 802652e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026530:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026534:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026538:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802653a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802653e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026542:	fb04 fa0a 	mul.w	sl, r4, sl
 8026546:	44bc      	add	ip, r7
 8026548:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802654c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026550:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026554:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026558:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802655c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026560:	ea4c 040a 	orr.w	r4, ip, sl
 8026564:	940e      	str	r4, [sp, #56]	; 0x38
 8026566:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026568:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802656c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026570:	43d2      	mvns	r2, r2
 8026572:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026576:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026578:	b2d2      	uxtb	r2, r2
 802657a:	fb0e f707 	mul.w	r7, lr, r7
 802657e:	fb01 770c 	mla	r7, r1, ip, r7
 8026582:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026586:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026588:	fb00 770c 	mla	r7, r0, ip, r7
 802658c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026590:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026592:	fb08 770c 	mla	r7, r8, ip, r7
 8026596:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802659a:	fb0e fe0c 	mul.w	lr, lr, ip
 802659e:	0a3f      	lsrs	r7, r7, #8
 80265a0:	fb01 e303 	mla	r3, r1, r3, lr
 80265a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80265a6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80265aa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80265ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80265b0:	fb00 330a 	mla	r3, r0, sl, r3
 80265b4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80265b8:	fb08 3c0c 	mla	ip, r8, ip, r3
 80265bc:	f8b9 3000 	ldrh.w	r3, [r9]
 80265c0:	1218      	asrs	r0, r3, #8
 80265c2:	10d9      	asrs	r1, r3, #3
 80265c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265c8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80265cc:	00db      	lsls	r3, r3, #3
 80265ce:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80265d2:	4350      	muls	r0, r2
 80265d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80265d8:	b2db      	uxtb	r3, r3
 80265da:	4351      	muls	r1, r2
 80265dc:	ea47 070c 	orr.w	r7, r7, ip
 80265e0:	4353      	muls	r3, r2
 80265e2:	1c42      	adds	r2, r0, #1
 80265e4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80265e8:	0c3a      	lsrs	r2, r7, #16
 80265ea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80265ee:	4a18      	ldr	r2, [pc, #96]	; (8026650 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80265f0:	b2c0      	uxtb	r0, r0
 80265f2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80265f6:	1c4a      	adds	r2, r1, #1
 80265f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80265fc:	0a3a      	lsrs	r2, r7, #8
 80265fe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026602:	00c9      	lsls	r1, r1, #3
 8026604:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026608:	4301      	orrs	r1, r0
 802660a:	1c58      	adds	r0, r3, #1
 802660c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026610:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026614:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8026618:	4308      	orrs	r0, r1
 802661a:	f8a9 0000 	strh.w	r0, [r9]
 802661e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026620:	f109 0902 	add.w	r9, r9, #2
 8026624:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026626:	f10b 3bff 	add.w	fp, fp, #4294967295
 802662a:	441a      	add	r2, r3
 802662c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802662e:	9225      	str	r2, [sp, #148]	; 0x94
 8026630:	441d      	add	r5, r3
 8026632:	e64c      	b.n	80262ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026634:	2800      	cmp	r0, #0
 8026636:	f43f aeed 	beq.w	8026414 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802663a:	5c79      	ldrb	r1, [r7, r1]
 802663c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026640:	9109      	str	r1, [sp, #36]	; 0x24
 8026642:	0e09      	lsrs	r1, r1, #24
 8026644:	9111      	str	r1, [sp, #68]	; 0x44
 8026646:	e6e5      	b.n	8026414 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026648:	b01b      	add	sp, #108	; 0x6c
 802664a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802664e:	bf00      	nop
 8026650:	fffff800 	.word	0xfffff800

08026654 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8026654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026658:	b085      	sub	sp, #20
 802665a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802665e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026662:	2800      	cmp	r0, #0
 8026664:	9103      	str	r1, [sp, #12]
 8026666:	fb00 7406 	mla	r4, r0, r6, r7
 802666a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802666e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8026672:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8026676:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802667a:	eb03 0904 	add.w	r9, r3, r4
 802667e:	9501      	str	r5, [sp, #4]
 8026680:	f2c0 8150 	blt.w	8026924 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8026684:	4583      	cmp	fp, r0
 8026686:	f340 814d 	ble.w	8026924 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802668a:	2f00      	cmp	r7, #0
 802668c:	f2c0 8146 	blt.w	802691c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026690:	42be      	cmp	r6, r7
 8026692:	f340 8143 	ble.w	802691c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026696:	f813 c004 	ldrb.w	ip, [r3, r4]
 802669a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802669e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80266a2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80266a6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80266aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80266ae:	4355      	muls	r5, r2
 80266b0:	fb0c f203 	mul.w	r2, ip, r3
 80266b4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80266b8:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80266bc:	441d      	add	r5, r3
 80266be:	f102 0320 	add.w	r3, r2, #32
 80266c2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80266c6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80266ca:	0a1b      	lsrs	r3, r3, #8
 80266cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80266d0:	431c      	orrs	r4, r3
 80266d2:	1c7b      	adds	r3, r7, #1
 80266d4:	f100 812b 	bmi.w	802692e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80266d8:	429e      	cmp	r6, r3
 80266da:	f340 8128 	ble.w	802692e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80266de:	2900      	cmp	r1, #0
 80266e0:	f000 8128 	beq.w	8026934 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80266e4:	9a01      	ldr	r2, [sp, #4]
 80266e6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80266ea:	8855      	ldrh	r5, [r2, #2]
 80266ec:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80266f0:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80266f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80266f8:	fb08 f802 	mul.w	r8, r8, r2
 80266fc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026700:	435d      	muls	r5, r3
 8026702:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026706:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802670a:	44d0      	add	r8, sl
 802670c:	f105 0a20 	add.w	sl, r5, #32
 8026710:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026714:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026718:	0a2d      	lsrs	r5, r5, #8
 802671a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802671e:	432a      	orrs	r2, r5
 8026720:	3001      	adds	r0, #1
 8026722:	f100 810d 	bmi.w	8026940 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026726:	4583      	cmp	fp, r0
 8026728:	f340 810a 	ble.w	8026940 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802672c:	f1be 0f00 	cmp.w	lr, #0
 8026730:	f000 810b 	beq.w	802694a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8026734:	2f00      	cmp	r7, #0
 8026736:	f2c0 8100 	blt.w	802693a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802673a:	42be      	cmp	r6, r7
 802673c:	f340 80fd 	ble.w	802693a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026740:	9801      	ldr	r0, [sp, #4]
 8026742:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026746:	f819 5006 	ldrb.w	r5, [r9, r6]
 802674a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802674e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8026752:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8026756:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802675a:	fb0a fa00 	mul.w	sl, sl, r0
 802675e:	fb05 f808 	mul.w	r8, r5, r8
 8026762:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8026766:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802676a:	4482      	add	sl, r0
 802676c:	f108 0020 	add.w	r0, r8, #32
 8026770:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026774:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8026778:	0a00      	lsrs	r0, r0, #8
 802677a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802677e:	ea4b 0b00 	orr.w	fp, fp, r0
 8026782:	3701      	adds	r7, #1
 8026784:	f100 80e6 	bmi.w	8026954 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026788:	42be      	cmp	r6, r7
 802678a:	f340 80e3 	ble.w	8026954 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802678e:	2900      	cmp	r1, #0
 8026790:	f000 80e3 	beq.w	802695a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8026794:	3601      	adds	r6, #1
 8026796:	9801      	ldr	r0, [sp, #4]
 8026798:	f819 7006 	ldrb.w	r7, [r9, r6]
 802679c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80267a0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80267a4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80267a8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80267ac:	fb09 f906 	mul.w	r9, r9, r6
 80267b0:	fb07 f800 	mul.w	r8, r7, r0
 80267b4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80267b8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80267bc:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80267c0:	44d1      	add	r9, sl
 80267c2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80267c6:	f108 0020 	add.w	r0, r8, #32
 80267ca:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80267ce:	0a00      	lsrs	r0, r0, #8
 80267d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80267d4:	4330      	orrs	r0, r6
 80267d6:	b28e      	uxth	r6, r1
 80267d8:	fa1f f98e 	uxth.w	r9, lr
 80267dc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80267e0:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80267e4:	fb06 f809 	mul.w	r8, r6, r9
 80267e8:	0136      	lsls	r6, r6, #4
 80267ea:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80267ee:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80267f2:	9601      	str	r6, [sp, #4]
 80267f4:	ea4a 0404 	orr.w	r4, sl, r4
 80267f8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80267fc:	fa1f f689 	uxth.w	r6, r9
 8026800:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026804:	fb11 f90e 	smulbb	r9, r1, lr
 8026808:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802680c:	9602      	str	r6, [sp, #8]
 802680e:	4626      	mov	r6, r4
 8026810:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8026814:	f1ce 0410 	rsb	r4, lr, #16
 8026818:	ea4a 0202 	orr.w	r2, sl, r2
 802681c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026820:	1a64      	subs	r4, r4, r1
 8026822:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8026826:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802682a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802682e:	434a      	muls	r2, r1
 8026830:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026834:	ea4a 0000 	orr.w	r0, sl, r0
 8026838:	9903      	ldr	r1, [sp, #12]
 802683a:	fb04 2406 	mla	r4, r4, r6, r2
 802683e:	9e02      	ldr	r6, [sp, #8]
 8026840:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026844:	fb09 4200 	mla	r2, r9, r0, r4
 8026848:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802684c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026850:	8808      	ldrh	r0, [r1, #0]
 8026852:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026856:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 802685a:	ea44 0b0b 	orr.w	fp, r4, fp
 802685e:	9c01      	ldr	r4, [sp, #4]
 8026860:	b289      	uxth	r1, r1
 8026862:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8026866:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802686a:	1ba4      	subs	r4, r4, r6
 802686c:	9e01      	ldr	r6, [sp, #4]
 802686e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026872:	eba6 0608 	sub.w	r6, r6, r8
 8026876:	b2a4      	uxth	r4, r4
 8026878:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802687c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026880:	b2b6      	uxth	r6, r6
 8026882:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026886:	4373      	muls	r3, r6
 8026888:	ea42 0e0e 	orr.w	lr, r2, lr
 802688c:	fb0c 3304 	mla	r3, ip, r4, r3
 8026890:	9c02      	ldr	r4, [sp, #8]
 8026892:	fa1f f28e 	uxth.w	r2, lr
 8026896:	fb04 3505 	mla	r5, r4, r5, r3
 802689a:	10d4      	asrs	r4, r2, #3
 802689c:	fb08 5707 	mla	r7, r8, r7, r5
 80268a0:	1215      	asrs	r5, r2, #8
 80268a2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80268a6:	00d2      	lsls	r2, r2, #3
 80268a8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80268ac:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80268b0:	b2d2      	uxtb	r2, r2
 80268b2:	434f      	muls	r7, r1
 80268b4:	1c7b      	adds	r3, r7, #1
 80268b6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80268ba:	1203      	asrs	r3, r0, #8
 80268bc:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80268c0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80268c4:	b2ff      	uxtb	r7, r7
 80268c6:	fb13 f307 	smulbb	r3, r3, r7
 80268ca:	fb05 3501 	mla	r5, r5, r1, r3
 80268ce:	10c3      	asrs	r3, r0, #3
 80268d0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80268d4:	b2ad      	uxth	r5, r5
 80268d6:	fb13 f307 	smulbb	r3, r3, r7
 80268da:	fb04 3401 	mla	r4, r4, r1, r3
 80268de:	00c3      	lsls	r3, r0, #3
 80268e0:	b2db      	uxtb	r3, r3
 80268e2:	b2a4      	uxth	r4, r4
 80268e4:	fb13 f307 	smulbb	r3, r3, r7
 80268e8:	fb02 3101 	mla	r1, r2, r1, r3
 80268ec:	1c6b      	adds	r3, r5, #1
 80268ee:	1c62      	adds	r2, r4, #1
 80268f0:	b289      	uxth	r1, r1
 80268f2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80268f6:	1c4b      	adds	r3, r1, #1
 80268f8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80268fc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026900:	9a03      	ldr	r2, [sp, #12]
 8026902:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026906:	0964      	lsrs	r4, r4, #5
 8026908:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802690c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8026910:	432b      	orrs	r3, r5
 8026912:	4323      	orrs	r3, r4
 8026914:	8013      	strh	r3, [r2, #0]
 8026916:	b005      	add	sp, #20
 8026918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802691c:	f04f 0c00 	mov.w	ip, #0
 8026920:	4664      	mov	r4, ip
 8026922:	e6d6      	b.n	80266d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8026924:	2300      	movs	r3, #0
 8026926:	469c      	mov	ip, r3
 8026928:	461a      	mov	r2, r3
 802692a:	461c      	mov	r4, r3
 802692c:	e6f8      	b.n	8026720 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802692e:	2300      	movs	r3, #0
 8026930:	461a      	mov	r2, r3
 8026932:	e6f5      	b.n	8026720 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026934:	460b      	mov	r3, r1
 8026936:	460a      	mov	r2, r1
 8026938:	e6f2      	b.n	8026720 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802693a:	2500      	movs	r5, #0
 802693c:	46ab      	mov	fp, r5
 802693e:	e720      	b.n	8026782 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8026940:	2700      	movs	r7, #0
 8026942:	463d      	mov	r5, r7
 8026944:	4638      	mov	r0, r7
 8026946:	46bb      	mov	fp, r7
 8026948:	e745      	b.n	80267d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802694a:	4677      	mov	r7, lr
 802694c:	4675      	mov	r5, lr
 802694e:	4670      	mov	r0, lr
 8026950:	46f3      	mov	fp, lr
 8026952:	e740      	b.n	80267d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026954:	2700      	movs	r7, #0
 8026956:	4638      	mov	r0, r7
 8026958:	e73d      	b.n	80267d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802695a:	460f      	mov	r7, r1
 802695c:	4608      	mov	r0, r1
 802695e:	e73a      	b.n	80267d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08026960 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026964:	b097      	sub	sp, #92	; 0x5c
 8026966:	9214      	str	r2, [sp, #80]	; 0x50
 8026968:	9308      	str	r3, [sp, #32]
 802696a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802696c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8026970:	9015      	str	r0, [sp, #84]	; 0x54
 8026972:	9312      	str	r3, [sp, #72]	; 0x48
 8026974:	6850      	ldr	r0, [r2, #4]
 8026976:	9111      	str	r1, [sp, #68]	; 0x44
 8026978:	6812      	ldr	r2, [r2, #0]
 802697a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802697e:	fb00 1303 	mla	r3, r0, r3, r1
 8026982:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026986:	9309      	str	r3, [sp, #36]	; 0x24
 8026988:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802698a:	681b      	ldr	r3, [r3, #0]
 802698c:	930b      	str	r3, [sp, #44]	; 0x2c
 802698e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026990:	685b      	ldr	r3, [r3, #4]
 8026992:	930c      	str	r3, [sp, #48]	; 0x30
 8026994:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8026998:	930a      	str	r3, [sp, #40]	; 0x28
 802699a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802699c:	2b00      	cmp	r3, #0
 802699e:	dc03      	bgt.n	80269a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80269a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80269a2:	2b00      	cmp	r3, #0
 80269a4:	f340 83cd 	ble.w	8027142 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80269a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80269aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80269ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80269b2:	1e48      	subs	r0, r1, #1
 80269b4:	1e55      	subs	r5, r2, #1
 80269b6:	9b08      	ldr	r3, [sp, #32]
 80269b8:	2b00      	cmp	r3, #0
 80269ba:	f340 81a5 	ble.w	8026d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80269be:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80269c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80269c2:	1436      	asrs	r6, r6, #16
 80269c4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80269c8:	d406      	bmi.n	80269d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80269ca:	4286      	cmp	r6, r0
 80269cc:	da04      	bge.n	80269d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80269ce:	2b00      	cmp	r3, #0
 80269d0:	db02      	blt.n	80269d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80269d2:	42ab      	cmp	r3, r5
 80269d4:	f2c0 8199 	blt.w	8026d0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80269d8:	3601      	adds	r6, #1
 80269da:	f100 8186 	bmi.w	8026cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80269de:	42b1      	cmp	r1, r6
 80269e0:	f2c0 8183 	blt.w	8026cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80269e4:	3301      	adds	r3, #1
 80269e6:	f100 8180 	bmi.w	8026cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80269ea:	429a      	cmp	r2, r3
 80269ec:	f2c0 817d 	blt.w	8026cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80269f0:	9b08      	ldr	r3, [sp, #32]
 80269f2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80269f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80269f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80269fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80269fc:	2b00      	cmp	r3, #0
 80269fe:	f340 81a6 	ble.w	8026d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026a02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026a04:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8026a06:	1418      	asrs	r0, r3, #16
 8026a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026a0a:	142d      	asrs	r5, r5, #16
 8026a0c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026a10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026a12:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026a16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026a1c:	f100 81fa 	bmi.w	8026e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026a20:	f102 3eff 	add.w	lr, r2, #4294967295
 8026a24:	4575      	cmp	r5, lr
 8026a26:	f280 81f5 	bge.w	8026e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026a2a:	2800      	cmp	r0, #0
 8026a2c:	f2c0 81f2 	blt.w	8026e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026a30:	f103 3eff 	add.w	lr, r3, #4294967295
 8026a34:	4570      	cmp	r0, lr
 8026a36:	f280 81ed 	bge.w	8026e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026a3a:	b212      	sxth	r2, r2
 8026a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026a3e:	fa1f fe81 	uxth.w	lr, r1
 8026a42:	fb00 5002 	mla	r0, r0, r2, r5
 8026a46:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026a4a:	eb03 0a00 	add.w	sl, r3, r0
 8026a4e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026a52:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026a56:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026a5a:	b29b      	uxth	r3, r3
 8026a5c:	f1bc 0f00 	cmp.w	ip, #0
 8026a60:	f000 81bb 	beq.w	8026dda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8026a64:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026a68:	eb0a 0b02 	add.w	fp, sl, r2
 8026a6c:	fa1f fa8c 	uxth.w	sl, ip
 8026a70:	940d      	str	r4, [sp, #52]	; 0x34
 8026a72:	fb0a fe0e 	mul.w	lr, sl, lr
 8026a76:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026a7a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026a7e:	eba5 050e 	sub.w	r5, r5, lr
 8026a82:	940e      	str	r4, [sp, #56]	; 0x38
 8026a84:	fa1f fa8a 	uxth.w	sl, sl
 8026a88:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026a8a:	b2ad      	uxth	r5, r5
 8026a8c:	eba3 030a 	sub.w	r3, r3, sl
 8026a90:	fb08 f505 	mul.w	r5, r8, r5
 8026a94:	b29b      	uxth	r3, r3
 8026a96:	fb09 5303 	mla	r3, r9, r3, r5
 8026a9a:	fb0a 3304 	mla	r3, sl, r4, r3
 8026a9e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026aa0:	fb0e 3304 	mla	r3, lr, r4, r3
 8026aa4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026aa8:	2b00      	cmp	r3, #0
 8026aaa:	f000 8111 	beq.w	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026aae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ab0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026ab4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026ab8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026abc:	f000 8192 	beq.w	8026de4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8026ac0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026ac4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026ac8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026acc:	fb0a fe0e 	mul.w	lr, sl, lr
 8026ad0:	fb09 f000 	mul.w	r0, r9, r0
 8026ad4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026ad8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026adc:	f100 0b20 	add.w	fp, r0, #32
 8026ae0:	44ce      	add	lr, r9
 8026ae2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026ae6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026aea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026aee:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026af2:	ea4e 0909 	orr.w	r9, lr, r9
 8026af6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026afa:	8868      	ldrh	r0, [r5, #2]
 8026afc:	d019      	beq.n	8026b32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8026afe:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026b02:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026b06:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b0a:	fb0a fe0e 	mul.w	lr, sl, lr
 8026b0e:	fb08 f800 	mul.w	r8, r8, r0
 8026b12:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026b16:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026b1a:	f108 0b20 	add.w	fp, r8, #32
 8026b1e:	4486      	add	lr, r0
 8026b20:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026b24:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026b28:	0a00      	lsrs	r0, r0, #8
 8026b2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b2e:	ea4e 0000 	orr.w	r0, lr, r0
 8026b32:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026b36:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026b3a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026b3e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026b42:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026b46:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026b4a:	ea4e 0909 	orr.w	r9, lr, r9
 8026b4e:	ea4a 0000 	orr.w	r0, sl, r0
 8026b52:	f1bc 0f00 	cmp.w	ip, #0
 8026b56:	f000 8147 	beq.w	8026de8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8026b5a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026b5e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026b60:	3a01      	subs	r2, #1
 8026b62:	2cff      	cmp	r4, #255	; 0xff
 8026b64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026b68:	f102 0202 	add.w	r2, r2, #2
 8026b6c:	eb05 0e02 	add.w	lr, r5, r2
 8026b70:	5aaa      	ldrh	r2, [r5, r2]
 8026b72:	d018      	beq.n	8026ba6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8026b74:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026b78:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026b7c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026b80:	fb04 fa02 	mul.w	sl, r4, r2
 8026b84:	fb08 f805 	mul.w	r8, r8, r5
 8026b88:	f10a 0520 	add.w	r5, sl, #32
 8026b8c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026b90:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026b94:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026b98:	4442      	add	r2, r8
 8026b9a:	0a2d      	lsrs	r5, r5, #8
 8026b9c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026ba0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026ba4:	432a      	orrs	r2, r5
 8026ba6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026ba8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026bac:	2cff      	cmp	r4, #255	; 0xff
 8026bae:	d01a      	beq.n	8026be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8026bb0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026bb4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026bb8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026bbc:	fb04 fa05 	mul.w	sl, r4, r5
 8026bc0:	fb08 f80e 	mul.w	r8, r8, lr
 8026bc4:	f10a 0e20 	add.w	lr, sl, #32
 8026bc8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026bcc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026bd0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026bd4:	4445      	add	r5, r8
 8026bd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026bda:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026bde:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026be2:	ea45 050e 	orr.w	r5, r5, lr
 8026be6:	fb1c fe01 	smulbb	lr, ip, r1
 8026bea:	f1cc 0810 	rsb	r8, ip, #16
 8026bee:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026bf2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026bf6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026bfa:	eba8 0801 	sub.w	r8, r8, r1
 8026bfe:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026c02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026c06:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026c0a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026c0e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026c12:	ea4a 0202 	orr.w	r2, sl, r2
 8026c16:	4341      	muls	r1, r0
 8026c18:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026c1c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026c20:	fb09 1108 	mla	r1, r9, r8, r1
 8026c24:	ea4b 0505 	orr.w	r5, fp, r5
 8026c28:	fb0c 1102 	mla	r1, ip, r2, r1
 8026c2c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026c30:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026c34:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026c38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c3c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026c40:	ea42 0e0e 	orr.w	lr, r2, lr
 8026c44:	fa1f f28e 	uxth.w	r2, lr
 8026c48:	2bff      	cmp	r3, #255	; 0xff
 8026c4a:	d103      	bne.n	8026c54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026c4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026c4e:	29ff      	cmp	r1, #255	; 0xff
 8026c50:	f000 80de 	beq.w	8026e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026c54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026c56:	1215      	asrs	r5, r2, #8
 8026c58:	8838      	ldrh	r0, [r7, #0]
 8026c5a:	434b      	muls	r3, r1
 8026c5c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026c60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026c62:	f103 0c01 	add.w	ip, r3, #1
 8026c66:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026c6a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026c6e:	fa5f fc83 	uxtb.w	ip, r3
 8026c72:	1203      	asrs	r3, r0, #8
 8026c74:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026c78:	fb13 f30c 	smulbb	r3, r3, ip
 8026c7c:	fb05 3501 	mla	r5, r5, r1, r3
 8026c80:	10c3      	asrs	r3, r0, #3
 8026c82:	10d1      	asrs	r1, r2, #3
 8026c84:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026c88:	00d2      	lsls	r2, r2, #3
 8026c8a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026c8e:	b2ad      	uxth	r5, r5
 8026c90:	fb13 f30c 	smulbb	r3, r3, ip
 8026c94:	b2d2      	uxtb	r2, r2
 8026c96:	fb01 3104 	mla	r1, r1, r4, r3
 8026c9a:	00c3      	lsls	r3, r0, #3
 8026c9c:	b2db      	uxtb	r3, r3
 8026c9e:	b289      	uxth	r1, r1
 8026ca0:	fb13 f30c 	smulbb	r3, r3, ip
 8026ca4:	fb02 3304 	mla	r3, r2, r4, r3
 8026ca8:	b29a      	uxth	r2, r3
 8026caa:	1c6b      	adds	r3, r5, #1
 8026cac:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026cb0:	1c53      	adds	r3, r2, #1
 8026cb2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026cb6:	1c4a      	adds	r2, r1, #1
 8026cb8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026cbc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026cc0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026cc4:	0949      	lsrs	r1, r1, #5
 8026cc6:	432b      	orrs	r3, r5
 8026cc8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026ccc:	430b      	orrs	r3, r1
 8026cce:	803b      	strh	r3, [r7, #0]
 8026cd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026cd2:	3702      	adds	r7, #2
 8026cd4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8026cd6:	4413      	add	r3, r2
 8026cd8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8026cda:	9321      	str	r3, [sp, #132]	; 0x84
 8026cdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026cde:	441a      	add	r2, r3
 8026ce0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026ce2:	3b01      	subs	r3, #1
 8026ce4:	9222      	str	r2, [sp, #136]	; 0x88
 8026ce6:	9313      	str	r3, [sp, #76]	; 0x4c
 8026ce8:	e687      	b.n	80269fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026cec:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8026cee:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8026cf0:	4433      	add	r3, r6
 8026cf2:	9321      	str	r3, [sp, #132]	; 0x84
 8026cf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026cf6:	441c      	add	r4, r3
 8026cf8:	9b08      	ldr	r3, [sp, #32]
 8026cfa:	3b01      	subs	r3, #1
 8026cfc:	9422      	str	r4, [sp, #136]	; 0x88
 8026cfe:	9308      	str	r3, [sp, #32]
 8026d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d02:	3302      	adds	r3, #2
 8026d04:	9309      	str	r3, [sp, #36]	; 0x24
 8026d06:	e656      	b.n	80269b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026d08:	d028      	beq.n	8026d5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8026d0a:	9b08      	ldr	r3, [sp, #32]
 8026d0c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8026d0e:	3b01      	subs	r3, #1
 8026d10:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8026d12:	fb00 5003 	mla	r0, r0, r3, r5
 8026d16:	1400      	asrs	r0, r0, #16
 8026d18:	f53f ae6a 	bmi.w	80269f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d1c:	3901      	subs	r1, #1
 8026d1e:	4288      	cmp	r0, r1
 8026d20:	f6bf ae66 	bge.w	80269f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d24:	9924      	ldr	r1, [sp, #144]	; 0x90
 8026d26:	9822      	ldr	r0, [sp, #136]	; 0x88
 8026d28:	fb01 0303 	mla	r3, r1, r3, r0
 8026d2c:	141b      	asrs	r3, r3, #16
 8026d2e:	f53f ae5f 	bmi.w	80269f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d32:	3a01      	subs	r2, #1
 8026d34:	4293      	cmp	r3, r2
 8026d36:	f6bf ae5b 	bge.w	80269f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026d3a:	9b08      	ldr	r3, [sp, #32]
 8026d3c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026d40:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026d44:	9313      	str	r3, [sp, #76]	; 0x4c
 8026d46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026d48:	2b00      	cmp	r3, #0
 8026d4a:	f300 8082 	bgt.w	8026e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8026d4e:	9b08      	ldr	r3, [sp, #32]
 8026d50:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d56:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8026d5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026d5e:	2b00      	cmp	r3, #0
 8026d60:	f340 81ef 	ble.w	8027142 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8026d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026d68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026d6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026d72:	eef0 6a62 	vmov.f32	s13, s5
 8026d76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026d7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026d7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d82:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8026d86:	eef0 6a43 	vmov.f32	s13, s6
 8026d8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d8e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8026d92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026d96:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026d9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026d9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026da2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026da6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026daa:	ee12 2a90 	vmov	r2, s5
 8026dae:	eef0 2a47 	vmov.f32	s5, s14
 8026db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8026db6:	ee13 2a10 	vmov	r2, s6
 8026dba:	9323      	str	r3, [sp, #140]	; 0x8c
 8026dbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026dbe:	eeb0 3a67 	vmov.f32	s6, s15
 8026dc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8026dc6:	9324      	str	r3, [sp, #144]	; 0x90
 8026dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026dca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026dcc:	3b01      	subs	r3, #1
 8026dce:	9311      	str	r3, [sp, #68]	; 0x44
 8026dd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026dd2:	bf08      	it	eq
 8026dd4:	4613      	moveq	r3, r2
 8026dd6:	9308      	str	r3, [sp, #32]
 8026dd8:	e5df      	b.n	802699a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026dda:	fb08 f505 	mul.w	r5, r8, r5
 8026dde:	fb09 5303 	mla	r3, r9, r3, r5
 8026de2:	e65f      	b.n	8026aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8026de4:	4681      	mov	r9, r0
 8026de6:	e686      	b.n	8026af6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026de8:	f1c1 0210 	rsb	r2, r1, #16
 8026dec:	4341      	muls	r1, r0
 8026dee:	fb09 1902 	mla	r9, r9, r2, r1
 8026df2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026df6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026dfa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026dfe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026e02:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026e06:	ea42 0909 	orr.w	r9, r2, r9
 8026e0a:	fa1f f289 	uxth.w	r2, r9
 8026e0e:	e71b      	b.n	8026c48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8026e10:	803a      	strh	r2, [r7, #0]
 8026e12:	e75d      	b.n	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026e14:	f115 0e01 	adds.w	lr, r5, #1
 8026e18:	f53f af5a 	bmi.w	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026e1c:	4572      	cmp	r2, lr
 8026e1e:	f6ff af57 	blt.w	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026e22:	f110 0e01 	adds.w	lr, r0, #1
 8026e26:	f53f af53 	bmi.w	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026e2a:	4573      	cmp	r3, lr
 8026e2c:	f6ff af50 	blt.w	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026e30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026e32:	b21b      	sxth	r3, r3
 8026e34:	b212      	sxth	r2, r2
 8026e36:	9502      	str	r5, [sp, #8]
 8026e38:	9301      	str	r3, [sp, #4]
 8026e3a:	9200      	str	r2, [sp, #0]
 8026e3c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8026e40:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026e44:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8026e48:	4639      	mov	r1, r7
 8026e4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026e4c:	f7ff fc02 	bl	8026654 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8026e50:	e73e      	b.n	8026cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026e54:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026e58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026e5a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026e5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026e60:	fa1f fc82 	uxth.w	ip, r2
 8026e64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026e6a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026e6e:	141f      	asrs	r7, r3, #16
 8026e70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026e72:	141b      	asrs	r3, r3, #16
 8026e74:	fb01 3707 	mla	r7, r1, r7, r3
 8026e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026e7a:	eb03 0a07 	add.w	sl, r3, r7
 8026e7e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026e82:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026e86:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026e8a:	b29b      	uxth	r3, r3
 8026e8c:	2d00      	cmp	r5, #0
 8026e8e:	f000 813d 	beq.w	802710c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8026e92:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026e96:	eb0a 0b01 	add.w	fp, sl, r1
 8026e9a:	fa1f fa85 	uxth.w	sl, r5
 8026e9e:	940f      	str	r4, [sp, #60]	; 0x3c
 8026ea0:	fb0a fc0c 	mul.w	ip, sl, ip
 8026ea4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026ea8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026eac:	eba0 000c 	sub.w	r0, r0, ip
 8026eb0:	9410      	str	r4, [sp, #64]	; 0x40
 8026eb2:	fa1f fa8a 	uxth.w	sl, sl
 8026eb6:	b280      	uxth	r0, r0
 8026eb8:	eba3 030a 	sub.w	r3, r3, sl
 8026ebc:	fb08 f000 	mul.w	r0, r8, r0
 8026ec0:	b29b      	uxth	r3, r3
 8026ec2:	fb09 0303 	mla	r3, r9, r3, r0
 8026ec6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026ec8:	fb0a 3300 	mla	r3, sl, r0, r3
 8026ecc:	fb0c 3304 	mla	r3, ip, r4, r3
 8026ed0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026ed4:	2b00      	cmp	r3, #0
 8026ed6:	f000 810b 	beq.w	80270f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8026eda:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026edc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026ee0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ee2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026ee6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026eea:	f000 8114 	beq.w	8027116 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8026eee:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026ef2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026ef6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026efa:	fb0a fc0c 	mul.w	ip, sl, ip
 8026efe:	fb09 f707 	mul.w	r7, r9, r7
 8026f02:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026f06:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026f0a:	f107 0b20 	add.w	fp, r7, #32
 8026f0e:	44cc      	add	ip, r9
 8026f10:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026f14:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026f18:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026f1c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026f20:	ea4c 0909 	orr.w	r9, ip, r9
 8026f24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026f28:	8847      	ldrh	r7, [r0, #2]
 8026f2a:	d019      	beq.n	8026f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8026f2c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026f30:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026f34:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026f38:	fb0a fc0c 	mul.w	ip, sl, ip
 8026f3c:	fb08 f807 	mul.w	r8, r8, r7
 8026f40:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026f44:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026f48:	f108 0b20 	add.w	fp, r8, #32
 8026f4c:	44bc      	add	ip, r7
 8026f4e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026f52:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026f56:	0a3f      	lsrs	r7, r7, #8
 8026f58:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026f5c:	ea4c 0707 	orr.w	r7, ip, r7
 8026f60:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026f64:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026f68:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026f6c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026f70:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026f74:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026f78:	ea4c 0909 	orr.w	r9, ip, r9
 8026f7c:	ea4a 0707 	orr.w	r7, sl, r7
 8026f80:	2d00      	cmp	r5, #0
 8026f82:	f000 80ca 	beq.w	802711a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8026f86:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026f8a:	3901      	subs	r1, #1
 8026f8c:	0049      	lsls	r1, r1, #1
 8026f8e:	3102      	adds	r1, #2
 8026f90:	eb00 0c01 	add.w	ip, r0, r1
 8026f94:	5a41      	ldrh	r1, [r0, r1]
 8026f96:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026f98:	28ff      	cmp	r0, #255	; 0xff
 8026f9a:	d019      	beq.n	8026fd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8026f9c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026fa0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026fa2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026fa6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026faa:	fb04 fa01 	mul.w	sl, r4, r1
 8026fae:	fb08 f800 	mul.w	r8, r8, r0
 8026fb2:	f10a 0020 	add.w	r0, sl, #32
 8026fb6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026fba:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026fbe:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026fc2:	4441      	add	r1, r8
 8026fc4:	0a00      	lsrs	r0, r0, #8
 8026fc6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026fca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026fce:	4301      	orrs	r1, r0
 8026fd0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026fd2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026fd6:	2cff      	cmp	r4, #255	; 0xff
 8026fd8:	d01a      	beq.n	8027010 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8026fda:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026fde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026fe2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026fe6:	fb04 fa00 	mul.w	sl, r4, r0
 8026fea:	fb08 f80c 	mul.w	r8, r8, ip
 8026fee:	f10a 0c20 	add.w	ip, sl, #32
 8026ff2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026ff6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026ffa:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026ffe:	4440      	add	r0, r8
 8027000:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027004:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027008:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802700c:	ea40 000c 	orr.w	r0, r0, ip
 8027010:	fb15 fc02 	smulbb	ip, r5, r2
 8027014:	f1c5 0810 	rsb	r8, r5, #16
 8027018:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802701c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027020:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027024:	eba8 0802 	sub.w	r8, r8, r2
 8027028:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802702c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027030:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027034:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027038:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802703c:	ea4a 0101 	orr.w	r1, sl, r1
 8027040:	437a      	muls	r2, r7
 8027042:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027046:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802704a:	fb09 2208 	mla	r2, r9, r8, r2
 802704e:	ea4b 0000 	orr.w	r0, fp, r0
 8027052:	fb05 2201 	mla	r2, r5, r1, r2
 8027056:	fb0c 2200 	mla	r2, ip, r0, r2
 802705a:	0d57      	lsrs	r7, r2, #21
 802705c:	0952      	lsrs	r2, r2, #5
 802705e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027062:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027066:	433a      	orrs	r2, r7
 8027068:	2bff      	cmp	r3, #255	; 0xff
 802706a:	b292      	uxth	r2, r2
 802706c:	d102      	bne.n	8027074 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802706e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027070:	29ff      	cmp	r1, #255	; 0xff
 8027072:	d063      	beq.n	802713c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8027074:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027076:	1215      	asrs	r5, r2, #8
 8027078:	f8be 1000 	ldrh.w	r1, [lr]
 802707c:	4343      	muls	r3, r0
 802707e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027080:	10cf      	asrs	r7, r1, #3
 8027082:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027086:	1c58      	adds	r0, r3, #1
 8027088:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802708c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027090:	1208      	asrs	r0, r1, #8
 8027092:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027096:	00c9      	lsls	r1, r1, #3
 8027098:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802709c:	b2db      	uxtb	r3, r3
 802709e:	b2c9      	uxtb	r1, r1
 80270a0:	fb10 f003 	smulbb	r0, r0, r3
 80270a4:	fb11 f103 	smulbb	r1, r1, r3
 80270a8:	fb05 0504 	mla	r5, r5, r4, r0
 80270ac:	10d0      	asrs	r0, r2, #3
 80270ae:	fb17 f703 	smulbb	r7, r7, r3
 80270b2:	00d2      	lsls	r2, r2, #3
 80270b4:	b2ad      	uxth	r5, r5
 80270b6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80270ba:	b2d2      	uxtb	r2, r2
 80270bc:	fb00 7004 	mla	r0, r0, r4, r7
 80270c0:	1c6b      	adds	r3, r5, #1
 80270c2:	fb02 1204 	mla	r2, r2, r4, r1
 80270c6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80270ca:	b292      	uxth	r2, r2
 80270cc:	b280      	uxth	r0, r0
 80270ce:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80270d2:	1c57      	adds	r7, r2, #1
 80270d4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80270d8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80270dc:	433d      	orrs	r5, r7
 80270de:	1c47      	adds	r7, r0, #1
 80270e0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80270e4:	097f      	lsrs	r7, r7, #5
 80270e6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80270ea:	433d      	orrs	r5, r7
 80270ec:	f8ae 5000 	strh.w	r5, [lr]
 80270f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80270f2:	f10e 0e02 	add.w	lr, lr, #2
 80270f6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80270f8:	4413      	add	r3, r2
 80270fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80270fc:	9321      	str	r3, [sp, #132]	; 0x84
 80270fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027100:	441a      	add	r2, r3
 8027102:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027104:	3b01      	subs	r3, #1
 8027106:	9222      	str	r2, [sp, #136]	; 0x88
 8027108:	9313      	str	r3, [sp, #76]	; 0x4c
 802710a:	e61c      	b.n	8026d46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802710c:	fb08 f000 	mul.w	r0, r8, r0
 8027110:	fb09 0303 	mla	r3, r9, r3, r0
 8027114:	e6dc      	b.n	8026ed0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8027116:	46b9      	mov	r9, r7
 8027118:	e704      	b.n	8026f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 802711a:	f1c2 0110 	rsb	r1, r2, #16
 802711e:	437a      	muls	r2, r7
 8027120:	fb09 2901 	mla	r9, r9, r1, r2
 8027124:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027128:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802712c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027130:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027134:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027138:	4302      	orrs	r2, r0
 802713a:	e795      	b.n	8027068 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 802713c:	f8ae 2000 	strh.w	r2, [lr]
 8027140:	e7d6      	b.n	80270f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8027142:	b017      	add	sp, #92	; 0x5c
 8027144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027148 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8027148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802714c:	b085      	sub	sp, #20
 802714e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8027152:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027156:	2800      	cmp	r0, #0
 8027158:	9103      	str	r1, [sp, #12]
 802715a:	fb00 7406 	mla	r4, r0, r6, r7
 802715e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8027162:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8027166:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 802716a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802716e:	eb02 0904 	add.w	r9, r2, r4
 8027172:	9501      	str	r5, [sp, #4]
 8027174:	f2c0 8141 	blt.w	80273fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8027178:	4583      	cmp	fp, r0
 802717a:	f340 813e 	ble.w	80273fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802717e:	2f00      	cmp	r7, #0
 8027180:	f2c0 8137 	blt.w	80273f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8027184:	42be      	cmp	r6, r7
 8027186:	f340 8134 	ble.w	80273f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802718a:	f812 c004 	ldrb.w	ip, [r2, r4]
 802718e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8027192:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8027196:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802719a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802719e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80271a2:	4355      	muls	r5, r2
 80271a4:	fb0c f203 	mul.w	r2, ip, r3
 80271a8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80271ac:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80271b0:	441d      	add	r5, r3
 80271b2:	f102 0320 	add.w	r3, r2, #32
 80271b6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80271ba:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80271be:	0a1b      	lsrs	r3, r3, #8
 80271c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80271c4:	431c      	orrs	r4, r3
 80271c6:	1c7b      	adds	r3, r7, #1
 80271c8:	f100 811c 	bmi.w	8027404 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80271cc:	429e      	cmp	r6, r3
 80271ce:	f340 8119 	ble.w	8027404 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80271d2:	2900      	cmp	r1, #0
 80271d4:	f000 8119 	beq.w	802740a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80271d8:	9a01      	ldr	r2, [sp, #4]
 80271da:	f899 3001 	ldrb.w	r3, [r9, #1]
 80271de:	8855      	ldrh	r5, [r2, #2]
 80271e0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80271e4:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80271e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80271ec:	fb08 f802 	mul.w	r8, r8, r2
 80271f0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80271f4:	435d      	muls	r5, r3
 80271f6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80271fa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80271fe:	44d0      	add	r8, sl
 8027200:	f105 0a20 	add.w	sl, r5, #32
 8027204:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8027208:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802720c:	0a2d      	lsrs	r5, r5, #8
 802720e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027212:	432a      	orrs	r2, r5
 8027214:	3001      	adds	r0, #1
 8027216:	f100 80fe 	bmi.w	8027416 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802721a:	4583      	cmp	fp, r0
 802721c:	f340 80fb 	ble.w	8027416 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8027220:	f1be 0f00 	cmp.w	lr, #0
 8027224:	f000 80fc 	beq.w	8027420 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8027228:	2f00      	cmp	r7, #0
 802722a:	f2c0 80f1 	blt.w	8027410 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802722e:	42be      	cmp	r6, r7
 8027230:	f340 80ee 	ble.w	8027410 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8027234:	9801      	ldr	r0, [sp, #4]
 8027236:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802723a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802723e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8027242:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8027246:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802724a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802724e:	fb0a fa00 	mul.w	sl, sl, r0
 8027252:	fb05 f808 	mul.w	r8, r5, r8
 8027256:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802725a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802725e:	4482      	add	sl, r0
 8027260:	f108 0020 	add.w	r0, r8, #32
 8027264:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027268:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802726c:	0a00      	lsrs	r0, r0, #8
 802726e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027272:	ea4b 0b00 	orr.w	fp, fp, r0
 8027276:	3701      	adds	r7, #1
 8027278:	f100 80d7 	bmi.w	802742a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802727c:	42be      	cmp	r6, r7
 802727e:	f340 80d4 	ble.w	802742a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8027282:	2900      	cmp	r1, #0
 8027284:	f000 80d4 	beq.w	8027430 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8027288:	3601      	adds	r6, #1
 802728a:	9801      	ldr	r0, [sp, #4]
 802728c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027290:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8027294:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8027298:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802729c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80272a0:	fb09 f906 	mul.w	r9, r9, r6
 80272a4:	fb07 f800 	mul.w	r8, r7, r0
 80272a8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80272ac:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80272b0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80272b4:	44d1      	add	r9, sl
 80272b6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80272ba:	f108 0020 	add.w	r0, r8, #32
 80272be:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80272c2:	0a00      	lsrs	r0, r0, #8
 80272c4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80272c8:	4330      	orrs	r0, r6
 80272ca:	b28e      	uxth	r6, r1
 80272cc:	fa1f f98e 	uxth.w	r9, lr
 80272d0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80272d4:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80272d8:	fb06 f809 	mul.w	r8, r6, r9
 80272dc:	0136      	lsls	r6, r6, #4
 80272de:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80272e2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80272e6:	9601      	str	r6, [sp, #4]
 80272e8:	ea4a 0404 	orr.w	r4, sl, r4
 80272ec:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80272f0:	fa1f f689 	uxth.w	r6, r9
 80272f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80272f8:	fb11 f90e 	smulbb	r9, r1, lr
 80272fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027300:	9602      	str	r6, [sp, #8]
 8027302:	4626      	mov	r6, r4
 8027304:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8027308:	f1ce 0410 	rsb	r4, lr, #16
 802730c:	ea4a 0202 	orr.w	r2, sl, r2
 8027310:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027314:	1a64      	subs	r4, r4, r1
 8027316:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802731a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802731e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027322:	434a      	muls	r2, r1
 8027324:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027328:	ea4a 0000 	orr.w	r0, sl, r0
 802732c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027330:	fb04 2406 	mla	r4, r4, r6, r2
 8027334:	9903      	ldr	r1, [sp, #12]
 8027336:	fb09 4200 	mla	r2, r9, r0, r4
 802733a:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802733e:	9801      	ldr	r0, [sp, #4]
 8027340:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027344:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027348:	8809      	ldrh	r1, [r1, #0]
 802734a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802734e:	ea44 0b0b 	orr.w	fp, r4, fp
 8027352:	9c02      	ldr	r4, [sp, #8]
 8027354:	1b00      	subs	r0, r0, r4
 8027356:	9c01      	ldr	r4, [sp, #4]
 8027358:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802735c:	eba4 0608 	sub.w	r6, r4, r8
 8027360:	b280      	uxth	r0, r0
 8027362:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027366:	b2b6      	uxth	r6, r6
 8027368:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802736c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027370:	4373      	muls	r3, r6
 8027372:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027376:	fb0c 3300 	mla	r3, ip, r0, r3
 802737a:	9802      	ldr	r0, [sp, #8]
 802737c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027380:	fb00 3505 	mla	r5, r0, r5, r3
 8027384:	120b      	asrs	r3, r1, #8
 8027386:	10c8      	asrs	r0, r1, #3
 8027388:	fb08 5707 	mla	r7, r8, r7, r5
 802738c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027390:	00c9      	lsls	r1, r1, #3
 8027392:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027396:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802739a:	fa1f f28e 	uxth.w	r2, lr
 802739e:	b2c9      	uxtb	r1, r1
 80273a0:	b2ff      	uxtb	r7, r7
 80273a2:	437b      	muls	r3, r7
 80273a4:	4378      	muls	r0, r7
 80273a6:	434f      	muls	r7, r1
 80273a8:	1c59      	adds	r1, r3, #1
 80273aa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80273ae:	1213      	asrs	r3, r2, #8
 80273b0:	f023 0307 	bic.w	r3, r3, #7
 80273b4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80273b8:	1c41      	adds	r1, r0, #1
 80273ba:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80273be:	10d1      	asrs	r1, r2, #3
 80273c0:	021b      	lsls	r3, r3, #8
 80273c2:	f021 0103 	bic.w	r1, r1, #3
 80273c6:	00d2      	lsls	r2, r2, #3
 80273c8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80273cc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80273d0:	00c9      	lsls	r1, r1, #3
 80273d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80273d6:	430b      	orrs	r3, r1
 80273d8:	1c79      	adds	r1, r7, #1
 80273da:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80273de:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80273e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80273e6:	431a      	orrs	r2, r3
 80273e8:	9b03      	ldr	r3, [sp, #12]
 80273ea:	801a      	strh	r2, [r3, #0]
 80273ec:	b005      	add	sp, #20
 80273ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273f2:	f04f 0c00 	mov.w	ip, #0
 80273f6:	4664      	mov	r4, ip
 80273f8:	e6e5      	b.n	80271c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80273fa:	2300      	movs	r3, #0
 80273fc:	469c      	mov	ip, r3
 80273fe:	461a      	mov	r2, r3
 8027400:	461c      	mov	r4, r3
 8027402:	e707      	b.n	8027214 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027404:	2300      	movs	r3, #0
 8027406:	461a      	mov	r2, r3
 8027408:	e704      	b.n	8027214 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802740a:	460b      	mov	r3, r1
 802740c:	460a      	mov	r2, r1
 802740e:	e701      	b.n	8027214 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027410:	2500      	movs	r5, #0
 8027412:	46ab      	mov	fp, r5
 8027414:	e72f      	b.n	8027276 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8027416:	2700      	movs	r7, #0
 8027418:	463d      	mov	r5, r7
 802741a:	4638      	mov	r0, r7
 802741c:	46bb      	mov	fp, r7
 802741e:	e754      	b.n	80272ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027420:	4677      	mov	r7, lr
 8027422:	4675      	mov	r5, lr
 8027424:	4670      	mov	r0, lr
 8027426:	46f3      	mov	fp, lr
 8027428:	e74f      	b.n	80272ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802742a:	2700      	movs	r7, #0
 802742c:	4638      	mov	r0, r7
 802742e:	e74c      	b.n	80272ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027430:	460f      	mov	r7, r1
 8027432:	4608      	mov	r0, r1
 8027434:	e749      	b.n	80272ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08027438 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802743c:	b093      	sub	sp, #76	; 0x4c
 802743e:	9210      	str	r2, [sp, #64]	; 0x40
 8027440:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027442:	9011      	str	r0, [sp, #68]	; 0x44
 8027444:	910e      	str	r1, [sp, #56]	; 0x38
 8027446:	6850      	ldr	r0, [r2, #4]
 8027448:	9306      	str	r3, [sp, #24]
 802744a:	6812      	ldr	r2, [r2, #0]
 802744c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8027450:	fb00 1303 	mla	r3, r0, r3, r1
 8027454:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027458:	9307      	str	r3, [sp, #28]
 802745a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802745c:	681b      	ldr	r3, [r3, #0]
 802745e:	9308      	str	r3, [sp, #32]
 8027460:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027462:	685b      	ldr	r3, [r3, #4]
 8027464:	9309      	str	r3, [sp, #36]	; 0x24
 8027466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027468:	2b00      	cmp	r3, #0
 802746a:	dc03      	bgt.n	8027474 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802746c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802746e:	2b00      	cmp	r3, #0
 8027470:	f340 83b6 	ble.w	8027be0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8027474:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027476:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802747a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802747e:	1e48      	subs	r0, r1, #1
 8027480:	1e55      	subs	r5, r2, #1
 8027482:	9b06      	ldr	r3, [sp, #24]
 8027484:	2b00      	cmp	r3, #0
 8027486:	f340 8165 	ble.w	8027754 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802748a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 802748c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802748e:	1436      	asrs	r6, r6, #16
 8027490:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027494:	d406      	bmi.n	80274a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027496:	4286      	cmp	r6, r0
 8027498:	da04      	bge.n	80274a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802749a:	2b00      	cmp	r3, #0
 802749c:	db02      	blt.n	80274a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802749e:	42ab      	cmp	r3, r5
 80274a0:	f2c0 8159 	blt.w	8027756 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80274a4:	3601      	adds	r6, #1
 80274a6:	f100 8146 	bmi.w	8027736 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80274aa:	42b1      	cmp	r1, r6
 80274ac:	f2c0 8143 	blt.w	8027736 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80274b0:	3301      	adds	r3, #1
 80274b2:	f100 8140 	bmi.w	8027736 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80274b6:	429a      	cmp	r2, r3
 80274b8:	f2c0 813d 	blt.w	8027736 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80274bc:	9b06      	ldr	r3, [sp, #24]
 80274be:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80274c2:	9f07      	ldr	r7, [sp, #28]
 80274c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80274c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80274c8:	2b00      	cmp	r3, #0
 80274ca:	f340 8166 	ble.w	802779a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80274ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80274d0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80274d2:	1418      	asrs	r0, r3, #16
 80274d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80274d6:	142d      	asrs	r5, r5, #16
 80274d8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80274dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80274de:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80274e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80274e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80274e8:	f100 81f0 	bmi.w	80278cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80274ec:	f102 3eff 	add.w	lr, r2, #4294967295
 80274f0:	4575      	cmp	r5, lr
 80274f2:	f280 81eb 	bge.w	80278cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80274f6:	2800      	cmp	r0, #0
 80274f8:	f2c0 81e8 	blt.w	80278cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80274fc:	f103 3eff 	add.w	lr, r3, #4294967295
 8027500:	4570      	cmp	r0, lr
 8027502:	f280 81e3 	bge.w	80278cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8027506:	b212      	sxth	r2, r2
 8027508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802750a:	fa1f fe81 	uxth.w	lr, r1
 802750e:	fb00 5002 	mla	r0, r0, r2, r5
 8027512:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027516:	eb03 0a00 	add.w	sl, r3, r0
 802751a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802751e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027522:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027526:	b29b      	uxth	r3, r3
 8027528:	f1bc 0f00 	cmp.w	ip, #0
 802752c:	f000 817b 	beq.w	8027826 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027530:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027534:	eb0a 0b02 	add.w	fp, sl, r2
 8027538:	fa1f fa8c 	uxth.w	sl, ip
 802753c:	940a      	str	r4, [sp, #40]	; 0x28
 802753e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027542:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027546:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802754a:	eba5 050e 	sub.w	r5, r5, lr
 802754e:	940b      	str	r4, [sp, #44]	; 0x2c
 8027550:	fa1f fa8a 	uxth.w	sl, sl
 8027554:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027556:	b2ad      	uxth	r5, r5
 8027558:	eba3 030a 	sub.w	r3, r3, sl
 802755c:	fb08 f505 	mul.w	r5, r8, r5
 8027560:	b29b      	uxth	r3, r3
 8027562:	fb09 5303 	mla	r3, r9, r3, r5
 8027566:	fb0a 3304 	mla	r3, sl, r4, r3
 802756a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802756c:	fb0e 3304 	mla	r3, lr, r4, r3
 8027570:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027574:	2b00      	cmp	r3, #0
 8027576:	f000 80d1 	beq.w	802771c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802757a:	9c08      	ldr	r4, [sp, #32]
 802757c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027580:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027584:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027588:	f000 8152 	beq.w	8027830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802758c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027590:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027594:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027598:	fb0a fe0e 	mul.w	lr, sl, lr
 802759c:	fb09 f000 	mul.w	r0, r9, r0
 80275a0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80275a4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80275a8:	f100 0b20 	add.w	fp, r0, #32
 80275ac:	44ce      	add	lr, r9
 80275ae:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80275b2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80275b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80275ba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80275be:	ea4e 0909 	orr.w	r9, lr, r9
 80275c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80275c6:	8868      	ldrh	r0, [r5, #2]
 80275c8:	d019      	beq.n	80275fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80275ca:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80275ce:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80275d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80275d6:	fb0a fe0e 	mul.w	lr, sl, lr
 80275da:	fb08 f800 	mul.w	r8, r8, r0
 80275de:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80275e2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80275e6:	f108 0b20 	add.w	fp, r8, #32
 80275ea:	4486      	add	lr, r0
 80275ec:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80275f0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80275f4:	0a00      	lsrs	r0, r0, #8
 80275f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80275fa:	ea4e 0000 	orr.w	r0, lr, r0
 80275fe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027602:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027606:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802760a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802760e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027612:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027616:	ea4e 0909 	orr.w	r9, lr, r9
 802761a:	ea4a 0000 	orr.w	r0, sl, r0
 802761e:	f1bc 0f00 	cmp.w	ip, #0
 8027622:	f000 8107 	beq.w	8027834 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8027626:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802762a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802762c:	3a01      	subs	r2, #1
 802762e:	2cff      	cmp	r4, #255	; 0xff
 8027630:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027634:	f102 0202 	add.w	r2, r2, #2
 8027638:	eb05 0e02 	add.w	lr, r5, r2
 802763c:	5aaa      	ldrh	r2, [r5, r2]
 802763e:	d018      	beq.n	8027672 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8027640:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027644:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027648:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802764c:	fb04 fa02 	mul.w	sl, r4, r2
 8027650:	fb08 f805 	mul.w	r8, r8, r5
 8027654:	f10a 0520 	add.w	r5, sl, #32
 8027658:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802765c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027660:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027664:	4442      	add	r2, r8
 8027666:	0a2d      	lsrs	r5, r5, #8
 8027668:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802766c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027670:	432a      	orrs	r2, r5
 8027672:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027674:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027678:	2cff      	cmp	r4, #255	; 0xff
 802767a:	d01a      	beq.n	80276b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802767c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027680:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027684:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027688:	fb04 fa05 	mul.w	sl, r4, r5
 802768c:	fb08 f80e 	mul.w	r8, r8, lr
 8027690:	f10a 0e20 	add.w	lr, sl, #32
 8027694:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027698:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802769c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80276a0:	4445      	add	r5, r8
 80276a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80276a6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80276aa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80276ae:	ea45 050e 	orr.w	r5, r5, lr
 80276b2:	fb1c fe01 	smulbb	lr, ip, r1
 80276b6:	f1cc 0810 	rsb	r8, ip, #16
 80276ba:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80276be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80276c2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80276c6:	eba8 0801 	sub.w	r8, r8, r1
 80276ca:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80276ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80276d2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80276d6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80276da:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80276de:	ea4a 0202 	orr.w	r2, sl, r2
 80276e2:	4341      	muls	r1, r0
 80276e4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80276e8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80276ec:	fb09 1108 	mla	r1, r9, r8, r1
 80276f0:	ea4b 0505 	orr.w	r5, fp, r5
 80276f4:	fb0c 1102 	mla	r1, ip, r2, r1
 80276f8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80276fc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027700:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027704:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027708:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802770c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027710:	fa1f f28e 	uxth.w	r2, lr
 8027714:	2bff      	cmp	r3, #255	; 0xff
 8027716:	f040 80a1 	bne.w	802785c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802771a:	803a      	strh	r2, [r7, #0]
 802771c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802771e:	3702      	adds	r7, #2
 8027720:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027722:	4413      	add	r3, r2
 8027724:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027726:	931d      	str	r3, [sp, #116]	; 0x74
 8027728:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802772a:	441a      	add	r2, r3
 802772c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802772e:	3b01      	subs	r3, #1
 8027730:	921e      	str	r2, [sp, #120]	; 0x78
 8027732:	930f      	str	r3, [sp, #60]	; 0x3c
 8027734:	e6c7      	b.n	80274c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027736:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027738:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802773a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802773c:	4433      	add	r3, r6
 802773e:	931d      	str	r3, [sp, #116]	; 0x74
 8027740:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027742:	441c      	add	r4, r3
 8027744:	9b06      	ldr	r3, [sp, #24]
 8027746:	3b01      	subs	r3, #1
 8027748:	941e      	str	r4, [sp, #120]	; 0x78
 802774a:	9306      	str	r3, [sp, #24]
 802774c:	9b07      	ldr	r3, [sp, #28]
 802774e:	3302      	adds	r3, #2
 8027750:	9307      	str	r3, [sp, #28]
 8027752:	e696      	b.n	8027482 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027754:	d028      	beq.n	80277a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027756:	9b06      	ldr	r3, [sp, #24]
 8027758:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802775a:	3b01      	subs	r3, #1
 802775c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802775e:	fb00 5003 	mla	r0, r0, r3, r5
 8027762:	1400      	asrs	r0, r0, #16
 8027764:	f53f aeaa 	bmi.w	80274bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027768:	3901      	subs	r1, #1
 802776a:	4288      	cmp	r0, r1
 802776c:	f6bf aea6 	bge.w	80274bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027770:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027772:	981e      	ldr	r0, [sp, #120]	; 0x78
 8027774:	fb01 0303 	mla	r3, r1, r3, r0
 8027778:	141b      	asrs	r3, r3, #16
 802777a:	f53f ae9f 	bmi.w	80274bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802777e:	3a01      	subs	r2, #1
 8027780:	4293      	cmp	r3, r2
 8027782:	f6bf ae9b 	bge.w	80274bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027786:	9b06      	ldr	r3, [sp, #24]
 8027788:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802778c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027790:	930f      	str	r3, [sp, #60]	; 0x3c
 8027792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027794:	2b00      	cmp	r3, #0
 8027796:	f300 80b6 	bgt.w	8027906 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802779a:	9b06      	ldr	r3, [sp, #24]
 802779c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80277a0:	9b07      	ldr	r3, [sp, #28]
 80277a2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80277a6:	9307      	str	r3, [sp, #28]
 80277a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80277aa:	2b00      	cmp	r3, #0
 80277ac:	f340 8218 	ble.w	8027be0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80277b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80277b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80277b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80277ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80277be:	eef0 6a62 	vmov.f32	s13, s5
 80277c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80277c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80277ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277ce:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80277d2:	eef0 6a43 	vmov.f32	s13, s6
 80277d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277da:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80277de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80277e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80277e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80277ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80277ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80277f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80277f6:	ee12 2a90 	vmov	r2, s5
 80277fa:	eef0 2a47 	vmov.f32	s5, s14
 80277fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027802:	ee13 2a10 	vmov	r2, s6
 8027806:	931f      	str	r3, [sp, #124]	; 0x7c
 8027808:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802780a:	eeb0 3a67 	vmov.f32	s6, s15
 802780e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027812:	9320      	str	r3, [sp, #128]	; 0x80
 8027814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027816:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027818:	3b01      	subs	r3, #1
 802781a:	930e      	str	r3, [sp, #56]	; 0x38
 802781c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802781e:	bf08      	it	eq
 8027820:	4613      	moveq	r3, r2
 8027822:	9306      	str	r3, [sp, #24]
 8027824:	e61f      	b.n	8027466 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027826:	fb08 f505 	mul.w	r5, r8, r5
 802782a:	fb09 5303 	mla	r3, r9, r3, r5
 802782e:	e69f      	b.n	8027570 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8027830:	4681      	mov	r9, r0
 8027832:	e6c6      	b.n	80275c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027834:	f1c1 0210 	rsb	r2, r1, #16
 8027838:	4341      	muls	r1, r0
 802783a:	fb09 1902 	mla	r9, r9, r2, r1
 802783e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027842:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027846:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802784a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802784e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027852:	ea42 0909 	orr.w	r9, r2, r9
 8027856:	fa1f f289 	uxth.w	r2, r9
 802785a:	e75b      	b.n	8027714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 802785c:	f8b7 c000 	ldrh.w	ip, [r7]
 8027860:	43db      	mvns	r3, r3
 8027862:	ea4f 202c 	mov.w	r0, ip, asr #8
 8027866:	fa5f fe83 	uxtb.w	lr, r3
 802786a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802786e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8027872:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8027876:	fb00 f00e 	mul.w	r0, r0, lr
 802787a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802787e:	b2db      	uxtb	r3, r3
 8027880:	1c41      	adds	r1, r0, #1
 8027882:	fb05 f50e 	mul.w	r5, r5, lr
 8027886:	fb03 f30e 	mul.w	r3, r3, lr
 802788a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802788e:	1211      	asrs	r1, r2, #8
 8027890:	f021 0107 	bic.w	r1, r1, #7
 8027894:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027898:	48d3      	ldr	r0, [pc, #844]	; (8027be8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802789a:	b2c9      	uxtb	r1, r1
 802789c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80278a0:	1c69      	adds	r1, r5, #1
 80278a2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80278a6:	10d1      	asrs	r1, r2, #3
 80278a8:	00d2      	lsls	r2, r2, #3
 80278aa:	f021 0103 	bic.w	r1, r1, #3
 80278ae:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80278b2:	00c9      	lsls	r1, r1, #3
 80278b4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80278b8:	4301      	orrs	r1, r0
 80278ba:	1c58      	adds	r0, r3, #1
 80278bc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80278c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80278c4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80278c8:	430a      	orrs	r2, r1
 80278ca:	e726      	b.n	802771a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80278cc:	f115 0e01 	adds.w	lr, r5, #1
 80278d0:	f53f af24 	bmi.w	802771c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80278d4:	4572      	cmp	r2, lr
 80278d6:	f6ff af21 	blt.w	802771c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80278da:	f110 0e01 	adds.w	lr, r0, #1
 80278de:	f53f af1d 	bmi.w	802771c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80278e2:	4573      	cmp	r3, lr
 80278e4:	f6ff af1a 	blt.w	802771c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80278e8:	b21b      	sxth	r3, r3
 80278ea:	b212      	sxth	r2, r2
 80278ec:	9301      	str	r3, [sp, #4]
 80278ee:	9200      	str	r2, [sp, #0]
 80278f0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80278f4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80278f8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80278fc:	4639      	mov	r1, r7
 80278fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027900:	f7ff fc22 	bl	8027148 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027904:	e70a      	b.n	802771c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027906:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027908:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802790c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802790e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027912:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027914:	fa1f fc82 	uxth.w	ip, r2
 8027918:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802791c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802791e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027922:	141f      	asrs	r7, r3, #16
 8027924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027926:	141b      	asrs	r3, r3, #16
 8027928:	fb01 3707 	mla	r7, r1, r7, r3
 802792c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802792e:	eb03 0a07 	add.w	sl, r3, r7
 8027932:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027936:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802793a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802793e:	b29b      	uxth	r3, r3
 8027940:	2d00      	cmp	r5, #0
 8027942:	f000 80fe 	beq.w	8027b42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8027946:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802794a:	eb0a 0b01 	add.w	fp, sl, r1
 802794e:	fa1f fa85 	uxth.w	sl, r5
 8027952:	940c      	str	r4, [sp, #48]	; 0x30
 8027954:	fb0a fc0c 	mul.w	ip, sl, ip
 8027958:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802795c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027960:	eba0 000c 	sub.w	r0, r0, ip
 8027964:	940d      	str	r4, [sp, #52]	; 0x34
 8027966:	fa1f fa8a 	uxth.w	sl, sl
 802796a:	b280      	uxth	r0, r0
 802796c:	eba3 030a 	sub.w	r3, r3, sl
 8027970:	fb08 f000 	mul.w	r0, r8, r0
 8027974:	b29b      	uxth	r3, r3
 8027976:	fb09 0303 	mla	r3, r9, r3, r0
 802797a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802797c:	fb0a 3300 	mla	r3, sl, r0, r3
 8027980:	fb0c 3304 	mla	r3, ip, r4, r3
 8027984:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027988:	2b00      	cmp	r3, #0
 802798a:	f000 80cc 	beq.w	8027b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802798e:	9808      	ldr	r0, [sp, #32]
 8027990:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027994:	9c08      	ldr	r4, [sp, #32]
 8027996:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802799a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802799e:	f000 80d5 	beq.w	8027b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80279a2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80279a6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80279aa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80279ae:	fb0a fc0c 	mul.w	ip, sl, ip
 80279b2:	fb09 f707 	mul.w	r7, r9, r7
 80279b6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80279ba:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80279be:	f107 0b20 	add.w	fp, r7, #32
 80279c2:	44cc      	add	ip, r9
 80279c4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80279c8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80279cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80279d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80279d4:	ea4c 0909 	orr.w	r9, ip, r9
 80279d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80279dc:	8847      	ldrh	r7, [r0, #2]
 80279de:	d019      	beq.n	8027a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80279e0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80279e4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80279e8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80279ec:	fb0a fc0c 	mul.w	ip, sl, ip
 80279f0:	fb08 f807 	mul.w	r8, r8, r7
 80279f4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80279f8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80279fc:	f108 0b20 	add.w	fp, r8, #32
 8027a00:	44bc      	add	ip, r7
 8027a02:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027a06:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027a0a:	0a3f      	lsrs	r7, r7, #8
 8027a0c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027a10:	ea4c 0707 	orr.w	r7, ip, r7
 8027a14:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027a18:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027a1c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027a20:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027a24:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027a28:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027a2c:	ea4c 0909 	orr.w	r9, ip, r9
 8027a30:	ea4a 0707 	orr.w	r7, sl, r7
 8027a34:	2d00      	cmp	r5, #0
 8027a36:	f000 808b 	beq.w	8027b50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8027a3a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027a3e:	3901      	subs	r1, #1
 8027a40:	0049      	lsls	r1, r1, #1
 8027a42:	3102      	adds	r1, #2
 8027a44:	eb00 0c01 	add.w	ip, r0, r1
 8027a48:	5a41      	ldrh	r1, [r0, r1]
 8027a4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027a4c:	28ff      	cmp	r0, #255	; 0xff
 8027a4e:	d019      	beq.n	8027a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8027a50:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027a54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027a56:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027a5a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027a5e:	fb04 fa01 	mul.w	sl, r4, r1
 8027a62:	fb08 f800 	mul.w	r8, r8, r0
 8027a66:	f10a 0020 	add.w	r0, sl, #32
 8027a6a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027a6e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027a72:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027a76:	4441      	add	r1, r8
 8027a78:	0a00      	lsrs	r0, r0, #8
 8027a7a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027a7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027a82:	4301      	orrs	r1, r0
 8027a84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027a86:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027a8a:	2cff      	cmp	r4, #255	; 0xff
 8027a8c:	d01a      	beq.n	8027ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8027a8e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027a92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027a96:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027a9a:	fb04 fa00 	mul.w	sl, r4, r0
 8027a9e:	fb08 f80c 	mul.w	r8, r8, ip
 8027aa2:	f10a 0c20 	add.w	ip, sl, #32
 8027aa6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027aaa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027aae:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027ab2:	4440      	add	r0, r8
 8027ab4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ab8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027abc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027ac0:	ea40 000c 	orr.w	r0, r0, ip
 8027ac4:	fb15 fc02 	smulbb	ip, r5, r2
 8027ac8:	f1c5 0810 	rsb	r8, r5, #16
 8027acc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027ad0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027ad4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027ad8:	eba8 0802 	sub.w	r8, r8, r2
 8027adc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027ae0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027ae4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027ae8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027aec:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027af0:	ea4a 0101 	orr.w	r1, sl, r1
 8027af4:	437a      	muls	r2, r7
 8027af6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027afa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027afe:	fb09 2208 	mla	r2, r9, r8, r2
 8027b02:	ea4b 0000 	orr.w	r0, fp, r0
 8027b06:	fb05 2201 	mla	r2, r5, r1, r2
 8027b0a:	fb0c 2200 	mla	r2, ip, r0, r2
 8027b0e:	0d57      	lsrs	r7, r2, #21
 8027b10:	0952      	lsrs	r2, r2, #5
 8027b12:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027b16:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027b1a:	433a      	orrs	r2, r7
 8027b1c:	2bff      	cmp	r3, #255	; 0xff
 8027b1e:	b292      	uxth	r2, r2
 8027b20:	d127      	bne.n	8027b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8027b22:	f8ae 2000 	strh.w	r2, [lr]
 8027b26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027b28:	f10e 0e02 	add.w	lr, lr, #2
 8027b2c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027b2e:	4413      	add	r3, r2
 8027b30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027b32:	931d      	str	r3, [sp, #116]	; 0x74
 8027b34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b36:	441a      	add	r2, r3
 8027b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027b3a:	3b01      	subs	r3, #1
 8027b3c:	921e      	str	r2, [sp, #120]	; 0x78
 8027b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027b40:	e627      	b.n	8027792 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8027b42:	fb08 f000 	mul.w	r0, r8, r0
 8027b46:	fb09 0303 	mla	r3, r9, r3, r0
 8027b4a:	e71b      	b.n	8027984 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8027b4c:	46b9      	mov	r9, r7
 8027b4e:	e743      	b.n	80279d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8027b50:	f1c2 0110 	rsb	r1, r2, #16
 8027b54:	437a      	muls	r2, r7
 8027b56:	fb09 2901 	mla	r9, r9, r1, r2
 8027b5a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027b5e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027b62:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027b66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027b6a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027b6e:	4302      	orrs	r2, r0
 8027b70:	e7d4      	b.n	8027b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8027b72:	f8be 7000 	ldrh.w	r7, [lr]
 8027b76:	43db      	mvns	r3, r3
 8027b78:	4c1b      	ldr	r4, [pc, #108]	; (8027be8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8027b7a:	1238      	asrs	r0, r7, #8
 8027b7c:	fa5f fc83 	uxtb.w	ip, r3
 8027b80:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027b84:	10fd      	asrs	r5, r7, #3
 8027b86:	00fb      	lsls	r3, r7, #3
 8027b88:	fb00 f00c 	mul.w	r0, r0, ip
 8027b8c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027b90:	b2db      	uxtb	r3, r3
 8027b92:	fb05 f10c 	mul.w	r1, r5, ip
 8027b96:	1c45      	adds	r5, r0, #1
 8027b98:	fb03 f30c 	mul.w	r3, r3, ip
 8027b9c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027ba0:	1215      	asrs	r5, r2, #8
 8027ba2:	f025 0507 	bic.w	r5, r5, #7
 8027ba6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027baa:	1c4d      	adds	r5, r1, #1
 8027bac:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027bb0:	10d1      	asrs	r1, r2, #3
 8027bb2:	b2c0      	uxtb	r0, r0
 8027bb4:	f021 0103 	bic.w	r1, r1, #3
 8027bb8:	00d2      	lsls	r2, r2, #3
 8027bba:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027bbe:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027bc2:	00c9      	lsls	r1, r1, #3
 8027bc4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027bc8:	4308      	orrs	r0, r1
 8027bca:	1c59      	adds	r1, r3, #1
 8027bcc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027bd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027bd4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027bd8:	4318      	orrs	r0, r3
 8027bda:	f8ae 0000 	strh.w	r0, [lr]
 8027bde:	e7a2      	b.n	8027b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8027be0:	b013      	add	sp, #76	; 0x4c
 8027be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027be6:	bf00      	nop
 8027be8:	fffff800 	.word	0xfffff800

08027bec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027bf0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8027bf4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027bf8:	fb05 4c03 	mla	ip, r5, r3, r4
 8027bfc:	2d00      	cmp	r5, #0
 8027bfe:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8027c02:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8027c06:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027c0a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8027c0e:	8808      	ldrh	r0, [r1, #0]
 8027c10:	f2c0 80a7 	blt.w	8027d62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027c14:	45aa      	cmp	sl, r5
 8027c16:	f340 80a4 	ble.w	8027d62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027c1a:	2c00      	cmp	r4, #0
 8027c1c:	f2c0 809f 	blt.w	8027d5e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027c20:	42a3      	cmp	r3, r4
 8027c22:	f340 809c 	ble.w	8027d5e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027c26:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8027c2a:	1c62      	adds	r2, r4, #1
 8027c2c:	f100 809c 	bmi.w	8027d68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027c30:	4293      	cmp	r3, r2
 8027c32:	f340 8099 	ble.w	8027d68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027c36:	f1b9 0f00 	cmp.w	r9, #0
 8027c3a:	f000 8095 	beq.w	8027d68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027c3e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8027c42:	3501      	adds	r5, #1
 8027c44:	f100 8094 	bmi.w	8027d70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027c48:	45aa      	cmp	sl, r5
 8027c4a:	f340 8091 	ble.w	8027d70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027c4e:	2f00      	cmp	r7, #0
 8027c50:	f000 808e 	beq.w	8027d70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027c54:	2c00      	cmp	r4, #0
 8027c56:	f2c0 8089 	blt.w	8027d6c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027c5a:	42a3      	cmp	r3, r4
 8027c5c:	f340 8086 	ble.w	8027d6c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027c60:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8027c64:	3401      	adds	r4, #1
 8027c66:	f100 8086 	bmi.w	8027d76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027c6a:	42a3      	cmp	r3, r4
 8027c6c:	f340 8083 	ble.w	8027d76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027c70:	f1b9 0f00 	cmp.w	r9, #0
 8027c74:	d07f      	beq.n	8027d76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027c76:	3301      	adds	r3, #1
 8027c78:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8027c7c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8027c80:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8027c84:	fb19 fe07 	smulbb	lr, r9, r7
 8027c88:	f1c7 0210 	rsb	r2, r7, #16
 8027c8c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027c90:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8027c94:	eba2 0209 	sub.w	r2, r2, r9
 8027c98:	ea44 0808 	orr.w	r8, r4, r8
 8027c9c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8027ca0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027ca4:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8027ca8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027cac:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8027cb0:	ea44 0c0c 	orr.w	ip, r4, ip
 8027cb4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8027cb8:	fb04 f40c 	mul.w	r4, r4, ip
 8027cbc:	fb02 4808 	mla	r8, r2, r8, r4
 8027cc0:	041a      	lsls	r2, r3, #16
 8027cc2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027cc6:	b2b4      	uxth	r4, r6
 8027cc8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027ccc:	43f6      	mvns	r6, r6
 8027cce:	4313      	orrs	r3, r2
 8027cd0:	042a      	lsls	r2, r5, #16
 8027cd2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027cd6:	b2f6      	uxtb	r6, r6
 8027cd8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027cdc:	fb0e 8303 	mla	r3, lr, r3, r8
 8027ce0:	432a      	orrs	r2, r5
 8027ce2:	fb07 3202 	mla	r2, r7, r2, r3
 8027ce6:	10c7      	asrs	r7, r0, #3
 8027ce8:	0d53      	lsrs	r3, r2, #21
 8027cea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027cee:	0952      	lsrs	r2, r2, #5
 8027cf0:	fb17 f706 	smulbb	r7, r7, r6
 8027cf4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027cf8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027cfc:	431a      	orrs	r2, r3
 8027cfe:	b293      	uxth	r3, r2
 8027d00:	1202      	asrs	r2, r0, #8
 8027d02:	121d      	asrs	r5, r3, #8
 8027d04:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027d08:	00c0      	lsls	r0, r0, #3
 8027d0a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027d0e:	fb12 f206 	smulbb	r2, r2, r6
 8027d12:	b2c0      	uxtb	r0, r0
 8027d14:	fb05 2504 	mla	r5, r5, r4, r2
 8027d18:	10da      	asrs	r2, r3, #3
 8027d1a:	fb10 f006 	smulbb	r0, r0, r6
 8027d1e:	00db      	lsls	r3, r3, #3
 8027d20:	b2ad      	uxth	r5, r5
 8027d22:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027d26:	b2db      	uxtb	r3, r3
 8027d28:	fb02 7204 	mla	r2, r2, r4, r7
 8027d2c:	fb03 0004 	mla	r0, r3, r4, r0
 8027d30:	1c6b      	adds	r3, r5, #1
 8027d32:	b292      	uxth	r2, r2
 8027d34:	b280      	uxth	r0, r0
 8027d36:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027d3a:	1c43      	adds	r3, r0, #1
 8027d3c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027d40:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027d44:	1c50      	adds	r0, r2, #1
 8027d46:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027d4a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027d4e:	0952      	lsrs	r2, r2, #5
 8027d50:	432b      	orrs	r3, r5
 8027d52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027d56:	4313      	orrs	r3, r2
 8027d58:	800b      	strh	r3, [r1, #0]
 8027d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027d5e:	4680      	mov	r8, r0
 8027d60:	e763      	b.n	8027c2a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8027d62:	4684      	mov	ip, r0
 8027d64:	4680      	mov	r8, r0
 8027d66:	e76c      	b.n	8027c42 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027d68:	4684      	mov	ip, r0
 8027d6a:	e76a      	b.n	8027c42 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8027d6c:	4605      	mov	r5, r0
 8027d6e:	e779      	b.n	8027c64 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8027d70:	4603      	mov	r3, r0
 8027d72:	4605      	mov	r5, r0
 8027d74:	e782      	b.n	8027c7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8027d76:	4603      	mov	r3, r0
 8027d78:	e780      	b.n	8027c7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08027d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d7e:	b093      	sub	sp, #76	; 0x4c
 8027d80:	461d      	mov	r5, r3
 8027d82:	9210      	str	r2, [sp, #64]	; 0x40
 8027d84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027d86:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8027d8a:	910a      	str	r1, [sp, #40]	; 0x28
 8027d8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8027d8e:	6859      	ldr	r1, [r3, #4]
 8027d90:	681b      	ldr	r3, [r3, #0]
 8027d92:	9011      	str	r0, [sp, #68]	; 0x44
 8027d94:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8027d98:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8027d9c:	fb01 2707 	mla	r7, r1, r7, r2
 8027da0:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027da4:	9307      	str	r3, [sp, #28]
 8027da6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027da8:	681b      	ldr	r3, [r3, #0]
 8027daa:	9309      	str	r3, [sp, #36]	; 0x24
 8027dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027dae:	43db      	mvns	r3, r3
 8027db0:	b2db      	uxtb	r3, r3
 8027db2:	9308      	str	r3, [sp, #32]
 8027db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027db6:	2b00      	cmp	r3, #0
 8027db8:	dc03      	bgt.n	8027dc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027dba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	f340 8205 	ble.w	80281cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027dc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027dc4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027dc8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027dcc:	1e48      	subs	r0, r1, #1
 8027dce:	f102 3cff 	add.w	ip, r2, #4294967295
 8027dd2:	2d00      	cmp	r5, #0
 8027dd4:	f340 80da 	ble.w	8027f8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027dd8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027ddc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027de0:	d406      	bmi.n	8027df0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027de2:	4586      	cmp	lr, r0
 8027de4:	da04      	bge.n	8027df0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027de6:	2b00      	cmp	r3, #0
 8027de8:	db02      	blt.n	8027df0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027dea:	4563      	cmp	r3, ip
 8027dec:	f2c0 80cf 	blt.w	8027f8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027df0:	f11e 0e01 	adds.w	lr, lr, #1
 8027df4:	f100 80c1 	bmi.w	8027f7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027df8:	4571      	cmp	r1, lr
 8027dfa:	f2c0 80be 	blt.w	8027f7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027dfe:	3301      	adds	r3, #1
 8027e00:	f100 80bb 	bmi.w	8027f7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027e04:	429a      	cmp	r2, r3
 8027e06:	f2c0 80b8 	blt.w	8027f7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027e0a:	46a9      	mov	r9, r5
 8027e0c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027e10:	f1b9 0f00 	cmp.w	r9, #0
 8027e14:	f340 80d8 	ble.w	8027fc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8027e18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027e1a:	1421      	asrs	r1, r4, #16
 8027e1c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027e20:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027e24:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027e28:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027e2c:	f100 8112 	bmi.w	8028054 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8027e30:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027e34:	4551      	cmp	r1, sl
 8027e36:	f280 810d 	bge.w	8028054 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8027e3a:	2800      	cmp	r0, #0
 8027e3c:	f2c0 810a 	blt.w	8028054 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8027e40:	f103 3aff 	add.w	sl, r3, #4294967295
 8027e44:	4550      	cmp	r0, sl
 8027e46:	f280 8105 	bge.w	8028054 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8027e4a:	fa0f f38e 	sxth.w	r3, lr
 8027e4e:	fb00 1103 	mla	r1, r0, r3, r1
 8027e52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027e54:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8027e58:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027e5c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8027e60:	f1bc 0f00 	cmp.w	ip, #0
 8027e64:	d007      	beq.n	8027e76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8027e66:	005b      	lsls	r3, r3, #1
 8027e68:	eb0a 0003 	add.w	r0, sl, r3
 8027e6c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8027e70:	930c      	str	r3, [sp, #48]	; 0x30
 8027e72:	8843      	ldrh	r3, [r0, #2]
 8027e74:	930d      	str	r3, [sp, #52]	; 0x34
 8027e76:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027e7a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027e7e:	fb12 f30c 	smulbb	r3, r2, ip
 8027e82:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027e86:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027e8a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027e8e:	10db      	asrs	r3, r3, #3
 8027e90:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027e94:	ea40 000e 	orr.w	r0, r0, lr
 8027e98:	f1cc 0e10 	rsb	lr, ip, #16
 8027e9c:	ea4a 0101 	orr.w	r1, sl, r1
 8027ea0:	9f08      	ldr	r7, [sp, #32]
 8027ea2:	ebae 0e02 	sub.w	lr, lr, r2
 8027ea6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027eaa:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027eae:	4351      	muls	r1, r2
 8027eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027eb2:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027eb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027eb8:	0410      	lsls	r0, r2, #16
 8027eba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027ebe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027ec2:	4310      	orrs	r0, r2
 8027ec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027ec6:	0412      	lsls	r2, r2, #16
 8027ec8:	fb03 e000 	mla	r0, r3, r0, lr
 8027ecc:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027ed0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027ed4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027ed8:	ea42 020e 	orr.w	r2, r2, lr
 8027edc:	fb03 0302 	mla	r3, r3, r2, r0
 8027ee0:	f8b8 0000 	ldrh.w	r0, [r8]
 8027ee4:	0d5a      	lsrs	r2, r3, #21
 8027ee6:	095b      	lsrs	r3, r3, #5
 8027ee8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027eec:	1201      	asrs	r1, r0, #8
 8027eee:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027ef2:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027ef6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027efa:	00c0      	lsls	r0, r0, #3
 8027efc:	4313      	orrs	r3, r2
 8027efe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8027f02:	fb11 f107 	smulbb	r1, r1, r7
 8027f06:	b2c0      	uxtb	r0, r0
 8027f08:	b29b      	uxth	r3, r3
 8027f0a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8027f0e:	fb10 f007 	smulbb	r0, r0, r7
 8027f12:	fb1e fe07 	smulbb	lr, lr, r7
 8027f16:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027f1a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027f1e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027f22:	10d9      	asrs	r1, r3, #3
 8027f24:	00db      	lsls	r3, r3, #3
 8027f26:	fa1f fc8c 	uxth.w	ip, ip
 8027f2a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027f2e:	b2db      	uxtb	r3, r3
 8027f30:	fb01 e102 	mla	r1, r1, r2, lr
 8027f34:	fb03 0302 	mla	r3, r3, r2, r0
 8027f38:	b289      	uxth	r1, r1
 8027f3a:	b29a      	uxth	r2, r3
 8027f3c:	f10c 0301 	add.w	r3, ip, #1
 8027f40:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027f44:	1c53      	adds	r3, r2, #1
 8027f46:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027f4a:	1c4a      	adds	r2, r1, #1
 8027f4c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8027f50:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027f54:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027f58:	0949      	lsrs	r1, r1, #5
 8027f5a:	ea43 030c 	orr.w	r3, r3, ip
 8027f5e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027f62:	430b      	orrs	r3, r1
 8027f64:	f8a8 3000 	strh.w	r3, [r8]
 8027f68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027f6a:	f108 0802 	add.w	r8, r8, #2
 8027f6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8027f72:	441c      	add	r4, r3
 8027f74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027f76:	441e      	add	r6, r3
 8027f78:	e74a      	b.n	8027e10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027f7c:	3d01      	subs	r5, #1
 8027f7e:	441c      	add	r4, r3
 8027f80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027f82:	441e      	add	r6, r3
 8027f84:	9b07      	ldr	r3, [sp, #28]
 8027f86:	3302      	adds	r3, #2
 8027f88:	9307      	str	r3, [sp, #28]
 8027f8a:	e722      	b.n	8027dd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027f8c:	d022      	beq.n	8027fd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8027f8e:	1e6b      	subs	r3, r5, #1
 8027f90:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027f92:	fb00 4003 	mla	r0, r0, r3, r4
 8027f96:	1400      	asrs	r0, r0, #16
 8027f98:	f53f af37 	bmi.w	8027e0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027f9c:	3901      	subs	r1, #1
 8027f9e:	4288      	cmp	r0, r1
 8027fa0:	f6bf af33 	bge.w	8027e0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027fa4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027fa6:	fb01 6303 	mla	r3, r1, r3, r6
 8027faa:	141b      	asrs	r3, r3, #16
 8027fac:	f53f af2d 	bmi.w	8027e0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027fb0:	3a01      	subs	r2, #1
 8027fb2:	4293      	cmp	r3, r2
 8027fb4:	f6bf af29 	bge.w	8027e0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027fb8:	46a8      	mov	r8, r5
 8027fba:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8027fbe:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8027fc2:	f1b8 0f00 	cmp.w	r8, #0
 8027fc6:	dc60      	bgt.n	802808a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8027fc8:	9b07      	ldr	r3, [sp, #28]
 8027fca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027fce:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027fd2:	9307      	str	r3, [sp, #28]
 8027fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027fd6:	2b00      	cmp	r3, #0
 8027fd8:	f340 80f8 	ble.w	80281cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027fe0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027fe2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027fe6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027fea:	eef0 6a62 	vmov.f32	s13, s5
 8027fee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ff2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027ff6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ffa:	ee16 4a90 	vmov	r4, s13
 8027ffe:	eef0 6a43 	vmov.f32	s13, s6
 8028002:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028006:	ee16 6a90 	vmov	r6, s13
 802800a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802800e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028012:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028016:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802801a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802801e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028022:	ee12 2a90 	vmov	r2, s5
 8028026:	eef0 2a47 	vmov.f32	s5, s14
 802802a:	fb92 f3f3 	sdiv	r3, r2, r3
 802802e:	ee13 2a10 	vmov	r2, s6
 8028032:	931f      	str	r3, [sp, #124]	; 0x7c
 8028034:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028036:	eeb0 3a67 	vmov.f32	s6, s15
 802803a:	fb92 f3f3 	sdiv	r3, r2, r3
 802803e:	9320      	str	r3, [sp, #128]	; 0x80
 8028040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028042:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028044:	3b01      	subs	r3, #1
 8028046:	930a      	str	r3, [sp, #40]	; 0x28
 8028048:	bf08      	it	eq
 802804a:	4615      	moveq	r5, r2
 802804c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802804e:	bf18      	it	ne
 8028050:	461d      	movne	r5, r3
 8028052:	e6af      	b.n	8027db4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028054:	f111 0a01 	adds.w	sl, r1, #1
 8028058:	d486      	bmi.n	8027f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802805a:	45d6      	cmp	lr, sl
 802805c:	db84      	blt.n	8027f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802805e:	f110 0a01 	adds.w	sl, r0, #1
 8028062:	d481      	bmi.n	8027f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028064:	4553      	cmp	r3, sl
 8028066:	f6ff af7f 	blt.w	8027f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802806a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802806c:	b21b      	sxth	r3, r3
 802806e:	9101      	str	r1, [sp, #4]
 8028070:	4641      	mov	r1, r8
 8028072:	9300      	str	r3, [sp, #0]
 8028074:	fa0f f38e 	sxth.w	r3, lr
 8028078:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802807c:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028082:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028084:	f7ff fdb2 	bl	8027bec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8028088:	e76e      	b.n	8027f68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802808a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802808c:	1430      	asrs	r0, r6, #16
 802808e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028090:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028094:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028098:	1423      	asrs	r3, r4, #16
 802809a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802809e:	fb01 3000 	mla	r0, r1, r0, r3
 80280a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80280a4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80280a8:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80280ac:	8858      	ldrh	r0, [r3, #2]
 80280ae:	f1be 0f00 	cmp.w	lr, #0
 80280b2:	d00b      	beq.n	80280cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80280b4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80280b8:	3901      	subs	r1, #1
 80280ba:	0049      	lsls	r1, r1, #1
 80280bc:	3102      	adds	r1, #2
 80280be:	eb03 0b01 	add.w	fp, r3, r1
 80280c2:	5a5b      	ldrh	r3, [r3, r1]
 80280c4:	930e      	str	r3, [sp, #56]	; 0x38
 80280c6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80280ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80280cc:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80280d0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80280d4:	fb12 f30e 	smulbb	r3, r2, lr
 80280d8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80280dc:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80280e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80280e4:	10db      	asrs	r3, r3, #3
 80280e6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80280ea:	ea41 010c 	orr.w	r1, r1, ip
 80280ee:	f1ce 0c10 	rsb	ip, lr, #16
 80280f2:	ea4b 0000 	orr.w	r0, fp, r0
 80280f6:	9f08      	ldr	r7, [sp, #32]
 80280f8:	ebac 0c02 	sub.w	ip, ip, r2
 80280fc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028100:	f108 38ff 	add.w	r8, r8, #4294967295
 8028104:	4350      	muls	r0, r2
 8028106:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802810a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802810c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8028110:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028112:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028116:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802811a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802811c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028120:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028124:	0412      	lsls	r2, r2, #16
 8028126:	ea4b 0101 	orr.w	r1, fp, r1
 802812a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802812e:	fb03 c101 	mla	r1, r3, r1, ip
 8028132:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028136:	4302      	orrs	r2, r0
 8028138:	fb03 1202 	mla	r2, r3, r2, r1
 802813c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8028140:	0952      	lsrs	r2, r2, #5
 8028142:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8028146:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802814a:	f8b9 2000 	ldrh.w	r2, [r9]
 802814e:	ea4b 0303 	orr.w	r3, fp, r3
 8028152:	1211      	asrs	r1, r2, #8
 8028154:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8028158:	b29b      	uxth	r3, r3
 802815a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802815e:	00d2      	lsls	r2, r2, #3
 8028160:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8028164:	fb11 f107 	smulbb	r1, r1, r7
 8028168:	1218      	asrs	r0, r3, #8
 802816a:	fb1c fc07 	smulbb	ip, ip, r7
 802816e:	b2d2      	uxtb	r2, r2
 8028170:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028174:	fb12 f207 	smulbb	r2, r2, r7
 8028178:	fb00 100a 	mla	r0, r0, sl, r1
 802817c:	10d9      	asrs	r1, r3, #3
 802817e:	00db      	lsls	r3, r3, #3
 8028180:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028184:	b280      	uxth	r0, r0
 8028186:	b2db      	uxtb	r3, r3
 8028188:	fb01 c10a 	mla	r1, r1, sl, ip
 802818c:	fb03 230a 	mla	r3, r3, sl, r2
 8028190:	1c42      	adds	r2, r0, #1
 8028192:	b289      	uxth	r1, r1
 8028194:	b29b      	uxth	r3, r3
 8028196:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802819a:	f101 0c01 	add.w	ip, r1, #1
 802819e:	1c5a      	adds	r2, r3, #1
 80281a0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80281a4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80281a8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80281ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80281ae:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80281b2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80281b6:	441c      	add	r4, r3
 80281b8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80281bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80281be:	4310      	orrs	r0, r2
 80281c0:	441e      	add	r6, r3
 80281c2:	ea40 000c 	orr.w	r0, r0, ip
 80281c6:	f829 0b02 	strh.w	r0, [r9], #2
 80281ca:	e6fa      	b.n	8027fc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80281cc:	b013      	add	sp, #76	; 0x4c
 80281ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080281d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80281d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80281d6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80281da:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80281de:	fb0e 4703 	mla	r7, lr, r3, r4
 80281e2:	f1be 0f00 	cmp.w	lr, #0
 80281e6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80281ea:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80281ee:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 80281f2:	8808      	ldrh	r0, [r1, #0]
 80281f4:	db60      	blt.n	80282b8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80281f6:	45f1      	cmp	r9, lr
 80281f8:	dd5e      	ble.n	80282b8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80281fa:	2c00      	cmp	r4, #0
 80281fc:	db5a      	blt.n	80282b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80281fe:	42a3      	cmp	r3, r4
 8028200:	dd58      	ble.n	80282b4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8028202:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8028206:	1c62      	adds	r2, r4, #1
 8028208:	d459      	bmi.n	80282be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802820a:	4293      	cmp	r3, r2
 802820c:	dd57      	ble.n	80282be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802820e:	2d00      	cmp	r5, #0
 8028210:	d055      	beq.n	80282be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8028212:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8028216:	f11e 0e01 	adds.w	lr, lr, #1
 802821a:	d454      	bmi.n	80282c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802821c:	45f1      	cmp	r9, lr
 802821e:	dd52      	ble.n	80282c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028220:	2e00      	cmp	r6, #0
 8028222:	d050      	beq.n	80282c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028224:	2c00      	cmp	r4, #0
 8028226:	db4c      	blt.n	80282c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8028228:	42a3      	cmp	r3, r4
 802822a:	dd4a      	ble.n	80282c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802822c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8028230:	3401      	adds	r4, #1
 8028232:	d405      	bmi.n	8028240 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028234:	42a3      	cmp	r3, r4
 8028236:	dd03      	ble.n	8028240 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028238:	b115      	cbz	r5, 8028240 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802823a:	3301      	adds	r3, #1
 802823c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8028240:	fb15 f406 	smulbb	r4, r5, r6
 8028244:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8028248:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802824c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028250:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8028254:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8028258:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802825c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028260:	ea43 0c0c 	orr.w	ip, r3, ip
 8028264:	f1c6 0310 	rsb	r3, r6, #16
 8028268:	ea4e 0707 	orr.w	r7, lr, r7
 802826c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8028270:	1b5b      	subs	r3, r3, r5
 8028272:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8028276:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802827a:	437d      	muls	r5, r7
 802827c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8028280:	0403      	lsls	r3, r0, #16
 8028282:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028286:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802828a:	4318      	orrs	r0, r3
 802828c:	0413      	lsls	r3, r2, #16
 802828e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028292:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8028296:	fb04 c000 	mla	r0, r4, r0, ip
 802829a:	4313      	orrs	r3, r2
 802829c:	fb06 0003 	mla	r0, r6, r3, r0
 80282a0:	0d43      	lsrs	r3, r0, #21
 80282a2:	0940      	lsrs	r0, r0, #5
 80282a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80282a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80282ac:	4318      	orrs	r0, r3
 80282ae:	8008      	strh	r0, [r1, #0]
 80282b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80282b4:	4684      	mov	ip, r0
 80282b6:	e7a6      	b.n	8028206 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80282b8:	4607      	mov	r7, r0
 80282ba:	4684      	mov	ip, r0
 80282bc:	e7ab      	b.n	8028216 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80282be:	4607      	mov	r7, r0
 80282c0:	e7a9      	b.n	8028216 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80282c2:	4602      	mov	r2, r0
 80282c4:	e7b4      	b.n	8028230 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80282c6:	4602      	mov	r2, r0
 80282c8:	e7ba      	b.n	8028240 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080282ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80282ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282ce:	b08f      	sub	sp, #60	; 0x3c
 80282d0:	461d      	mov	r5, r3
 80282d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80282d4:	9107      	str	r1, [sp, #28]
 80282d6:	920c      	str	r2, [sp, #48]	; 0x30
 80282d8:	6859      	ldr	r1, [r3, #4]
 80282da:	681b      	ldr	r3, [r3, #0]
 80282dc:	900d      	str	r0, [sp, #52]	; 0x34
 80282de:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80282e2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 80282e6:	fb01 2707 	mla	r7, r1, r7, r2
 80282ea:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80282ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80282f0:	f8d3 8000 	ldr.w	r8, [r3]
 80282f4:	9b07      	ldr	r3, [sp, #28]
 80282f6:	2b00      	cmp	r3, #0
 80282f8:	dc03      	bgt.n	8028302 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80282fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80282fc:	2b00      	cmp	r3, #0
 80282fe:	f340 8182 	ble.w	8028606 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8028302:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028304:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028308:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802830c:	1e48      	subs	r0, r1, #1
 802830e:	f102 3cff 	add.w	ip, r2, #4294967295
 8028312:	2d00      	cmp	r5, #0
 8028314:	f340 809b 	ble.w	802844e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8028318:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802831c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028320:	d406      	bmi.n	8028330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028322:	4586      	cmp	lr, r0
 8028324:	da04      	bge.n	8028330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028326:	2b00      	cmp	r3, #0
 8028328:	db02      	blt.n	8028330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802832a:	4563      	cmp	r3, ip
 802832c:	f2c0 8090 	blt.w	8028450 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028330:	f11e 0e01 	adds.w	lr, lr, #1
 8028334:	f100 8084 	bmi.w	8028440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028338:	4571      	cmp	r1, lr
 802833a:	f2c0 8081 	blt.w	8028440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802833e:	3301      	adds	r3, #1
 8028340:	d47e      	bmi.n	8028440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028342:	429a      	cmp	r2, r3
 8028344:	db7c      	blt.n	8028440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028346:	46aa      	mov	sl, r5
 8028348:	46b9      	mov	r9, r7
 802834a:	f1ba 0f00 	cmp.w	sl, #0
 802834e:	f340 8099 	ble.w	8028484 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8028352:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028354:	1421      	asrs	r1, r4, #16
 8028356:	ea4f 4026 	mov.w	r0, r6, asr #16
 802835a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802835e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028362:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028366:	f100 80d1 	bmi.w	802850c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802836a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802836e:	4559      	cmp	r1, fp
 8028370:	f280 80cc 	bge.w	802850c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8028374:	2800      	cmp	r0, #0
 8028376:	f2c0 80c9 	blt.w	802850c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802837a:	f103 3bff 	add.w	fp, r3, #4294967295
 802837e:	4558      	cmp	r0, fp
 8028380:	f280 80c4 	bge.w	802850c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8028384:	fa0f fe8e 	sxth.w	lr, lr
 8028388:	fb00 110e 	mla	r1, r0, lr, r1
 802838c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028390:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8028394:	8841      	ldrh	r1, [r0, #2]
 8028396:	f1bc 0f00 	cmp.w	ip, #0
 802839a:	d00b      	beq.n	80283b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802839c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80283a0:	3b01      	subs	r3, #1
 80283a2:	005b      	lsls	r3, r3, #1
 80283a4:	3302      	adds	r3, #2
 80283a6:	eb00 0e03 	add.w	lr, r0, r3
 80283aa:	5ac3      	ldrh	r3, [r0, r3]
 80283ac:	9308      	str	r3, [sp, #32]
 80283ae:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80283b2:	9309      	str	r3, [sp, #36]	; 0x24
 80283b4:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80283b8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80283bc:	fb12 f30c 	smulbb	r3, r2, ip
 80283c0:	f1cc 0e10 	rsb	lr, ip, #16
 80283c4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80283c8:	10db      	asrs	r3, r3, #3
 80283ca:	ebae 0e02 	sub.w	lr, lr, r2
 80283ce:	ea40 000b 	orr.w	r0, r0, fp
 80283d2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80283d6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80283da:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80283de:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80283e2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80283e6:	ea4b 0101 	orr.w	r1, fp, r1
 80283ea:	4351      	muls	r1, r2
 80283ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80283ee:	fb0e 1e00 	mla	lr, lr, r0, r1
 80283f2:	0410      	lsls	r0, r2, #16
 80283f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80283f8:	9908      	ldr	r1, [sp, #32]
 80283fa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80283fe:	4310      	orrs	r0, r2
 8028400:	9a08      	ldr	r2, [sp, #32]
 8028402:	0412      	lsls	r2, r2, #16
 8028404:	fb03 e000 	mla	r0, r3, r0, lr
 8028408:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802840c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028410:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028414:	ea42 020e 	orr.w	r2, r2, lr
 8028418:	fb03 0302 	mla	r3, r3, r2, r0
 802841c:	0d5a      	lsrs	r2, r3, #21
 802841e:	095b      	lsrs	r3, r3, #5
 8028420:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028424:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028428:	4313      	orrs	r3, r2
 802842a:	f8a9 3000 	strh.w	r3, [r9]
 802842e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028430:	f109 0902 	add.w	r9, r9, #2
 8028434:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028438:	441c      	add	r4, r3
 802843a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802843c:	441e      	add	r6, r3
 802843e:	e784      	b.n	802834a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8028440:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028442:	3d01      	subs	r5, #1
 8028444:	3702      	adds	r7, #2
 8028446:	441c      	add	r4, r3
 8028448:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802844a:	441e      	add	r6, r3
 802844c:	e761      	b.n	8028312 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802844e:	d01d      	beq.n	802848c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028450:	1e6b      	subs	r3, r5, #1
 8028452:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8028454:	fb00 4003 	mla	r0, r0, r3, r4
 8028458:	1400      	asrs	r0, r0, #16
 802845a:	f53f af74 	bmi.w	8028346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802845e:	3901      	subs	r1, #1
 8028460:	4288      	cmp	r0, r1
 8028462:	f6bf af70 	bge.w	8028346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028466:	991c      	ldr	r1, [sp, #112]	; 0x70
 8028468:	fb01 6303 	mla	r3, r1, r3, r6
 802846c:	141b      	asrs	r3, r3, #16
 802846e:	f53f af6a 	bmi.w	8028346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028472:	3a01      	subs	r2, #1
 8028474:	4293      	cmp	r3, r2
 8028476:	f6bf af66 	bge.w	8028346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802847a:	46a9      	mov	r9, r5
 802847c:	46ba      	mov	sl, r7
 802847e:	f1b9 0f00 	cmp.w	r9, #0
 8028482:	dc5b      	bgt.n	802853c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8028484:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028488:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802848c:	9b07      	ldr	r3, [sp, #28]
 802848e:	2b00      	cmp	r3, #0
 8028490:	f340 80b9 	ble.w	8028606 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8028494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028498:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802849a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802849e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80284a2:	eef0 6a62 	vmov.f32	s13, s5
 80284a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80284aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80284ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80284b2:	ee16 4a90 	vmov	r4, s13
 80284b6:	eef0 6a43 	vmov.f32	s13, s6
 80284ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80284be:	ee16 6a90 	vmov	r6, s13
 80284c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80284c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80284ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80284ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80284d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80284d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80284da:	ee12 2a90 	vmov	r2, s5
 80284de:	eef0 2a47 	vmov.f32	s5, s14
 80284e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80284e6:	ee13 2a10 	vmov	r2, s6
 80284ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80284ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80284ee:	eeb0 3a67 	vmov.f32	s6, s15
 80284f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80284f6:	931c      	str	r3, [sp, #112]	; 0x70
 80284f8:	9b07      	ldr	r3, [sp, #28]
 80284fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80284fc:	3b01      	subs	r3, #1
 80284fe:	9307      	str	r3, [sp, #28]
 8028500:	bf08      	it	eq
 8028502:	4615      	moveq	r5, r2
 8028504:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028506:	bf18      	it	ne
 8028508:	461d      	movne	r5, r3
 802850a:	e6f3      	b.n	80282f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802850c:	f111 0b01 	adds.w	fp, r1, #1
 8028510:	d48d      	bmi.n	802842e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028512:	45de      	cmp	lr, fp
 8028514:	db8b      	blt.n	802842e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028516:	f110 0b01 	adds.w	fp, r0, #1
 802851a:	d488      	bmi.n	802842e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802851c:	455b      	cmp	r3, fp
 802851e:	db86      	blt.n	802842e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028520:	b21b      	sxth	r3, r3
 8028522:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028526:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802852a:	9300      	str	r3, [sp, #0]
 802852c:	4642      	mov	r2, r8
 802852e:	fa0f f38e 	sxth.w	r3, lr
 8028532:	4649      	mov	r1, r9
 8028534:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028536:	f7ff fe4c 	bl	80281d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802853a:	e778      	b.n	802842e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802853c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802853e:	1420      	asrs	r0, r4, #16
 8028540:	1431      	asrs	r1, r6, #16
 8028542:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028546:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802854a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802854e:	fb03 0101 	mla	r1, r3, r1, r0
 8028552:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028556:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802855a:	8841      	ldrh	r1, [r0, #2]
 802855c:	f1be 0f00 	cmp.w	lr, #0
 8028560:	d00b      	beq.n	802857a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8028562:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8028566:	3b01      	subs	r3, #1
 8028568:	005b      	lsls	r3, r3, #1
 802856a:	3302      	adds	r3, #2
 802856c:	eb00 0b03 	add.w	fp, r0, r3
 8028570:	5ac3      	ldrh	r3, [r0, r3]
 8028572:	930a      	str	r3, [sp, #40]	; 0x28
 8028574:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028578:	930b      	str	r3, [sp, #44]	; 0x2c
 802857a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802857e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028582:	fb12 f30e 	smulbb	r3, r2, lr
 8028586:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802858a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802858e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028592:	10db      	asrs	r3, r3, #3
 8028594:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028598:	ea40 000c 	orr.w	r0, r0, ip
 802859c:	f1ce 0c10 	rsb	ip, lr, #16
 80285a0:	ea4b 0101 	orr.w	r1, fp, r1
 80285a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80285a8:	ebac 0c02 	sub.w	ip, ip, r2
 80285ac:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80285b0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80285b4:	4351      	muls	r1, r2
 80285b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80285b8:	fb0c 1c00 	mla	ip, ip, r0, r1
 80285bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80285be:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80285c2:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80285c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80285c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80285cc:	0412      	lsls	r2, r2, #16
 80285ce:	ea4b 0000 	orr.w	r0, fp, r0
 80285d2:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80285d6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80285da:	fb03 c000 	mla	r0, r3, r0, ip
 80285de:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80285e2:	ea42 0b0b 	orr.w	fp, r2, fp
 80285e6:	fb03 000b 	mla	r0, r3, fp, r0
 80285ea:	0d43      	lsrs	r3, r0, #21
 80285ec:	0940      	lsrs	r0, r0, #5
 80285ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80285f2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80285f6:	4318      	orrs	r0, r3
 80285f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80285fa:	441c      	add	r4, r3
 80285fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80285fe:	f82a 0b02 	strh.w	r0, [sl], #2
 8028602:	441e      	add	r6, r3
 8028604:	e73b      	b.n	802847e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8028606:	b00f      	add	sp, #60	; 0x3c
 8028608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802860c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802860c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028610:	b085      	sub	sp, #20
 8028612:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8028616:	9102      	str	r1, [sp, #8]
 8028618:	2c00      	cmp	r4, #0
 802861a:	fb04 7103 	mla	r1, r4, r3, r7
 802861e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8028622:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8028626:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802862a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802862e:	f2c0 811b 	blt.w	8028868 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028632:	45a6      	cmp	lr, r4
 8028634:	f340 8118 	ble.w	8028868 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028638:	2f00      	cmp	r7, #0
 802863a:	f2c0 8113 	blt.w	8028864 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802863e:	42bb      	cmp	r3, r7
 8028640:	f340 8110 	ble.w	8028864 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028644:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8028648:	1c7a      	adds	r2, r7, #1
 802864a:	f100 8110 	bmi.w	802886e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802864e:	4293      	cmp	r3, r2
 8028650:	f340 810d 	ble.w	802886e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8028654:	2e00      	cmp	r6, #0
 8028656:	f000 810c 	beq.w	8028872 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802865a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802865e:	3401      	adds	r4, #1
 8028660:	f100 810b 	bmi.w	802887a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8028664:	45a6      	cmp	lr, r4
 8028666:	f340 8108 	ble.w	802887a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802866a:	2800      	cmp	r0, #0
 802866c:	f000 8108 	beq.w	8028880 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8028670:	2f00      	cmp	r7, #0
 8028672:	f2c0 8100 	blt.w	8028876 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8028676:	42bb      	cmp	r3, r7
 8028678:	f340 80fd 	ble.w	8028876 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802867c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028680:	3701      	adds	r7, #1
 8028682:	f100 8100 	bmi.w	8028886 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8028686:	42bb      	cmp	r3, r7
 8028688:	f340 80fd 	ble.w	8028886 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802868c:	2e00      	cmp	r6, #0
 802868e:	f000 80fc 	beq.w	802888a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8028692:	3301      	adds	r3, #1
 8028694:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8028698:	b2b6      	uxth	r6, r6
 802869a:	b280      	uxth	r0, r0
 802869c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80286a0:	fb00 fe06 	mul.w	lr, r0, r6
 80286a4:	0136      	lsls	r6, r6, #4
 80286a6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80286aa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80286ae:	eba6 070e 	sub.w	r7, r6, lr
 80286b2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80286b6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80286ba:	b280      	uxth	r0, r0
 80286bc:	b2bf      	uxth	r7, r7
 80286be:	1a1b      	subs	r3, r3, r0
 80286c0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80286c4:	fb0a f607 	mul.w	r6, sl, r7
 80286c8:	b29b      	uxth	r3, r3
 80286ca:	fb0b 6603 	mla	r6, fp, r3, r6
 80286ce:	fb00 6609 	mla	r6, r0, r9, r6
 80286d2:	fb0e 6608 	mla	r6, lr, r8, r6
 80286d6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80286da:	9600      	str	r6, [sp, #0]
 80286dc:	2e00      	cmp	r6, #0
 80286de:	f000 80be 	beq.w	802885e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80286e2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80286e6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80286ea:	9e02      	ldr	r6, [sp, #8]
 80286ec:	fb0b fc0c 	mul.w	ip, fp, ip
 80286f0:	fb0b f505 	mul.w	r5, fp, r5
 80286f4:	8836      	ldrh	r6, [r6, #0]
 80286f6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80286fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80286fe:	9501      	str	r5, [sp, #4]
 8028700:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8028704:	44dc      	add	ip, fp
 8028706:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802870a:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802870e:	9503      	str	r5, [sp, #12]
 8028710:	9d01      	ldr	r5, [sp, #4]
 8028712:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8028716:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802871a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802871e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028722:	fb0a fc0c 	mul.w	ip, sl, ip
 8028726:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802872a:	fb0a fa01 	mul.w	sl, sl, r1
 802872e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028732:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028736:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802873a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802873e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028742:	4465      	add	r5, ip
 8028744:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028748:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802874c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028750:	fb09 fc0c 	mul.w	ip, r9, ip
 8028754:	0a2d      	lsrs	r5, r5, #8
 8028756:	fb09 f904 	mul.w	r9, r9, r4
 802875a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802875e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028762:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028766:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802876a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802876e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028772:	437d      	muls	r5, r7
 8028774:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028778:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802877c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028780:	4461      	add	r1, ip
 8028782:	fb08 f404 	mul.w	r4, r8, r4
 8028786:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802878a:	fb08 f802 	mul.w	r8, r8, r2
 802878e:	0a09      	lsrs	r1, r1, #8
 8028790:	0a22      	lsrs	r2, r4, #8
 8028792:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8028796:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802879a:	fb07 f70a 	mul.w	r7, r7, sl
 802879e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80287a2:	4414      	add	r4, r2
 80287a4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80287a8:	0a24      	lsrs	r4, r4, #8
 80287aa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80287ae:	9a03      	ldr	r2, [sp, #12]
 80287b0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80287b4:	fb02 5503 	mla	r5, r2, r3, r5
 80287b8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80287bc:	9a00      	ldr	r2, [sp, #0]
 80287be:	fb04 540e 	mla	r4, r4, lr, r5
 80287c2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80287c6:	1235      	asrs	r5, r6, #8
 80287c8:	fb01 4100 	mla	r1, r1, r0, r4
 80287cc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80287d0:	0a09      	lsrs	r1, r1, #8
 80287d2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80287d6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80287da:	fb03 7101 	mla	r1, r3, r1, r7
 80287de:	fb0e 1e08 	mla	lr, lr, r8, r1
 80287e2:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80287e6:	fb00 e101 	mla	r1, r0, r1, lr
 80287ea:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80287ee:	b287      	uxth	r7, r0
 80287f0:	0a09      	lsrs	r1, r1, #8
 80287f2:	437a      	muls	r2, r7
 80287f4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80287f8:	1c53      	adds	r3, r2, #1
 80287fa:	4321      	orrs	r1, r4
 80287fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028800:	0c0a      	lsrs	r2, r1, #16
 8028802:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8028806:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802880a:	b2c8      	uxtb	r0, r1
 802880c:	fb12 f207 	smulbb	r2, r2, r7
 8028810:	fb14 f407 	smulbb	r4, r4, r7
 8028814:	b2db      	uxtb	r3, r3
 8028816:	fb10 f007 	smulbb	r0, r0, r7
 802881a:	fb05 2503 	mla	r5, r5, r3, r2
 802881e:	10f2      	asrs	r2, r6, #3
 8028820:	00f6      	lsls	r6, r6, #3
 8028822:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028826:	b2ad      	uxth	r5, r5
 8028828:	b2f6      	uxtb	r6, r6
 802882a:	fb02 4203 	mla	r2, r2, r3, r4
 802882e:	fb06 0303 	mla	r3, r6, r3, r0
 8028832:	b294      	uxth	r4, r2
 8028834:	b299      	uxth	r1, r3
 8028836:	1c6b      	adds	r3, r5, #1
 8028838:	1c62      	adds	r2, r4, #1
 802883a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802883e:	1c4b      	adds	r3, r1, #1
 8028840:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028844:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8028848:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802884c:	0952      	lsrs	r2, r2, #5
 802884e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028852:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028856:	432b      	orrs	r3, r5
 8028858:	4313      	orrs	r3, r2
 802885a:	9a02      	ldr	r2, [sp, #8]
 802885c:	8013      	strh	r3, [r2, #0]
 802885e:	b005      	add	sp, #20
 8028860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028864:	2500      	movs	r5, #0
 8028866:	e6ef      	b.n	8028648 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8028868:	2100      	movs	r1, #0
 802886a:	460d      	mov	r5, r1
 802886c:	e6f7      	b.n	802865e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802886e:	2100      	movs	r1, #0
 8028870:	e6f5      	b.n	802865e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028872:	4631      	mov	r1, r6
 8028874:	e6f3      	b.n	802865e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028876:	2400      	movs	r4, #0
 8028878:	e702      	b.n	8028680 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802887a:	2200      	movs	r2, #0
 802887c:	4614      	mov	r4, r2
 802887e:	e70b      	b.n	8028698 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028880:	4602      	mov	r2, r0
 8028882:	4604      	mov	r4, r0
 8028884:	e708      	b.n	8028698 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028886:	2200      	movs	r2, #0
 8028888:	e706      	b.n	8028698 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802888a:	4632      	mov	r2, r6
 802888c:	e704      	b.n	8028698 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802888e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802888e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028892:	b09d      	sub	sp, #116	; 0x74
 8028894:	9219      	str	r2, [sp, #100]	; 0x64
 8028896:	9307      	str	r3, [sp, #28]
 8028898:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802889a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802889e:	901b      	str	r0, [sp, #108]	; 0x6c
 80288a0:	931a      	str	r3, [sp, #104]	; 0x68
 80288a2:	6850      	ldr	r0, [r2, #4]
 80288a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80288a6:	6812      	ldr	r2, [r2, #0]
 80288a8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80288ac:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80288b0:	fb00 1303 	mla	r3, r0, r3, r1
 80288b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80288b8:	930a      	str	r3, [sp, #40]	; 0x28
 80288ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80288bc:	681b      	ldr	r3, [r3, #0]
 80288be:	9310      	str	r3, [sp, #64]	; 0x40
 80288c0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80288c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80288c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	dc03      	bgt.n	80288d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80288cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80288ce:	2b00      	cmp	r3, #0
 80288d0:	f340 8375 	ble.w	8028fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80288d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80288d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80288da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80288de:	1e48      	subs	r0, r1, #1
 80288e0:	1e57      	subs	r7, r2, #1
 80288e2:	9b07      	ldr	r3, [sp, #28]
 80288e4:	2b00      	cmp	r3, #0
 80288e6:	f340 818e 	ble.w	8028c06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80288ea:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80288ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80288f2:	d406      	bmi.n	8028902 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80288f4:	4584      	cmp	ip, r0
 80288f6:	da04      	bge.n	8028902 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80288f8:	2b00      	cmp	r3, #0
 80288fa:	db02      	blt.n	8028902 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80288fc:	42bb      	cmp	r3, r7
 80288fe:	f2c0 8183 	blt.w	8028c08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8028902:	f11c 0c01 	adds.w	ip, ip, #1
 8028906:	f100 8173 	bmi.w	8028bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802890a:	4561      	cmp	r1, ip
 802890c:	f2c0 8170 	blt.w	8028bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028910:	3301      	adds	r3, #1
 8028912:	f100 816d 	bmi.w	8028bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028916:	429a      	cmp	r2, r3
 8028918:	f2c0 816a 	blt.w	8028bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802891c:	9b07      	ldr	r3, [sp, #28]
 802891e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028920:	9318      	str	r3, [sp, #96]	; 0x60
 8028922:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028924:	2b00      	cmp	r3, #0
 8028926:	f340 818c 	ble.w	8028c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802892a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802892c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028930:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028932:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028936:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802893a:	1422      	asrs	r2, r4, #16
 802893c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028940:	689b      	ldr	r3, [r3, #8]
 8028942:	f100 81cd 	bmi.w	8028ce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028946:	f103 38ff 	add.w	r8, r3, #4294967295
 802894a:	4542      	cmp	r2, r8
 802894c:	f280 81c8 	bge.w	8028ce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028950:	f1bc 0f00 	cmp.w	ip, #0
 8028954:	f2c0 81c4 	blt.w	8028ce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028958:	f10e 38ff 	add.w	r8, lr, #4294967295
 802895c:	45c4      	cmp	ip, r8
 802895e:	f280 81bf 	bge.w	8028ce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028962:	b21b      	sxth	r3, r3
 8028964:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028966:	fb0c 2203 	mla	r2, ip, r3, r2
 802896a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802896e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028972:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028976:	2800      	cmp	r0, #0
 8028978:	f000 81a9 	beq.w	8028cce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802897c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028980:	950c      	str	r5, [sp, #48]	; 0x30
 8028982:	0e2d      	lsrs	r5, r5, #24
 8028984:	9513      	str	r5, [sp, #76]	; 0x4c
 8028986:	b181      	cbz	r1, 80289aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802898c:	3b01      	subs	r3, #1
 802898e:	009b      	lsls	r3, r3, #2
 8028990:	3304      	adds	r3, #4
 8028992:	eb08 0c03 	add.w	ip, r8, r3
 8028996:	f858 3003 	ldr.w	r3, [r8, r3]
 802899a:	9308      	str	r3, [sp, #32]
 802899c:	0e1b      	lsrs	r3, r3, #24
 802899e:	9311      	str	r3, [sp, #68]	; 0x44
 80289a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80289a4:	930d      	str	r3, [sp, #52]	; 0x34
 80289a6:	0e1b      	lsrs	r3, r3, #24
 80289a8:	9314      	str	r3, [sp, #80]	; 0x50
 80289aa:	b280      	uxth	r0, r0
 80289ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80289ae:	b289      	uxth	r1, r1
 80289b0:	fb00 f901 	mul.w	r9, r0, r1
 80289b4:	0100      	lsls	r0, r0, #4
 80289b6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80289ba:	eba0 0809 	sub.w	r8, r0, r9
 80289be:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80289c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80289c4:	b289      	uxth	r1, r1
 80289c6:	fa1f f888 	uxth.w	r8, r8
 80289ca:	1a5b      	subs	r3, r3, r1
 80289cc:	fb08 f000 	mul.w	r0, r8, r0
 80289d0:	b29b      	uxth	r3, r3
 80289d2:	fb03 000e 	mla	r0, r3, lr, r0
 80289d6:	fb01 0005 	mla	r0, r1, r5, r0
 80289da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80289dc:	fb09 0005 	mla	r0, r9, r5, r0
 80289e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80289e4:	2800      	cmp	r0, #0
 80289e6:	f000 80fa 	beq.w	8028bde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80289ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80289ee:	d01b      	beq.n	8028a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80289f0:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80289f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80289f8:	fb0e fa0a 	mul.w	sl, lr, sl
 80289fc:	fb0e fe02 	mul.w	lr, lr, r2
 8028a00:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028a04:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028a08:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028a0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028a10:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028a14:	4452      	add	r2, sl
 8028a16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a1a:	0a12      	lsrs	r2, r2, #8
 8028a1c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028a20:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028a24:	ea42 020c 	orr.w	r2, r2, ip
 8028a28:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028a2a:	2dff      	cmp	r5, #255	; 0xff
 8028a2c:	d021      	beq.n	8028a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8028a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028a30:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028a34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028a36:	fb05 fb0b 	mul.w	fp, r5, fp
 8028a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028a3c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028a40:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028a42:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028a46:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028a4a:	fb05 fa0a 	mul.w	sl, r5, sl
 8028a4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028a52:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028a56:	44de      	add	lr, fp
 8028a58:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028a5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028a64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028a68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028a6c:	ea4e 050a 	orr.w	r5, lr, sl
 8028a70:	950c      	str	r5, [sp, #48]	; 0x30
 8028a72:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028a74:	2dff      	cmp	r5, #255	; 0xff
 8028a76:	d021      	beq.n	8028abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8028a78:	9d08      	ldr	r5, [sp, #32]
 8028a7a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028a7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028a80:	fb05 fb0b 	mul.w	fp, r5, fp
 8028a84:	9d08      	ldr	r5, [sp, #32]
 8028a86:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028a8a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028a8c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028a90:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028a94:	fb05 fa0a 	mul.w	sl, r5, sl
 8028a98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028a9c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028aa0:	44de      	add	lr, fp
 8028aa2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028aa6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028aaa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028aae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ab2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028ab6:	ea4e 050a 	orr.w	r5, lr, sl
 8028aba:	9508      	str	r5, [sp, #32]
 8028abc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028abe:	2dff      	cmp	r5, #255	; 0xff
 8028ac0:	d021      	beq.n	8028b06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8028ac2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028ac4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028ac8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028aca:	fb05 fb0b 	mul.w	fp, r5, fp
 8028ace:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028ad0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028ad4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028ad6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028ada:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028ade:	fb05 fa0a 	mul.w	sl, r5, sl
 8028ae2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ae6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028aea:	44de      	add	lr, fp
 8028aec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028af0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028af4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028af8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028afc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b00:	ea4e 050a 	orr.w	r5, lr, sl
 8028b04:	950d      	str	r5, [sp, #52]	; 0x34
 8028b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028b08:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028b0c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028b10:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028b14:	9d08      	ldr	r5, [sp, #32]
 8028b16:	fb08 fc0c 	mul.w	ip, r8, ip
 8028b1a:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028b1e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028b22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028b24:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028b28:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028b2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028b2e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028b32:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028b36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028b38:	fb08 f80e 	mul.w	r8, r8, lr
 8028b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b40:	fb03 8202 	mla	r2, r3, r2, r8
 8028b44:	9b08      	ldr	r3, [sp, #32]
 8028b46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028b4a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8028b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028b50:	fb01 220a 	mla	r2, r1, sl, r2
 8028b54:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8028b58:	883b      	ldrh	r3, [r7, #0]
 8028b5a:	fb09 2901 	mla	r9, r9, r1, r2
 8028b5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028b60:	1219      	asrs	r1, r3, #8
 8028b62:	4342      	muls	r2, r0
 8028b64:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028b68:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028b6c:	1c50      	adds	r0, r2, #1
 8028b6e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028b72:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028b76:	ea4c 0c09 	orr.w	ip, ip, r9
 8028b7a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028b7e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028b82:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028b86:	fa5f fc8c 	uxtb.w	ip, ip
 8028b8a:	fb12 f205 	smulbb	r2, r2, r5
 8028b8e:	b2c0      	uxtb	r0, r0
 8028b90:	fb1c fc05 	smulbb	ip, ip, r5
 8028b94:	fb01 2100 	mla	r1, r1, r0, r2
 8028b98:	10da      	asrs	r2, r3, #3
 8028b9a:	fb1e fe05 	smulbb	lr, lr, r5
 8028b9e:	00db      	lsls	r3, r3, #3
 8028ba0:	b289      	uxth	r1, r1
 8028ba2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028ba6:	b2db      	uxtb	r3, r3
 8028ba8:	fb02 e200 	mla	r2, r2, r0, lr
 8028bac:	fb03 c300 	mla	r3, r3, r0, ip
 8028bb0:	b292      	uxth	r2, r2
 8028bb2:	fa1f fc83 	uxth.w	ip, r3
 8028bb6:	1c4b      	adds	r3, r1, #1
 8028bb8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028bbc:	f10c 0301 	add.w	r3, ip, #1
 8028bc0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028bc4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028bc8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028bcc:	430b      	orrs	r3, r1
 8028bce:	1c51      	adds	r1, r2, #1
 8028bd0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028bd4:	0952      	lsrs	r2, r2, #5
 8028bd6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028bda:	4313      	orrs	r3, r2
 8028bdc:	803b      	strh	r3, [r7, #0]
 8028bde:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028be0:	3702      	adds	r7, #2
 8028be2:	441c      	add	r4, r3
 8028be4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028be6:	441e      	add	r6, r3
 8028be8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028bea:	3b01      	subs	r3, #1
 8028bec:	9318      	str	r3, [sp, #96]	; 0x60
 8028bee:	e698      	b.n	8028922 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028bf0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028bf2:	441c      	add	r4, r3
 8028bf4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028bf6:	441e      	add	r6, r3
 8028bf8:	9b07      	ldr	r3, [sp, #28]
 8028bfa:	3b01      	subs	r3, #1
 8028bfc:	9307      	str	r3, [sp, #28]
 8028bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028c00:	3302      	adds	r3, #2
 8028c02:	930a      	str	r3, [sp, #40]	; 0x28
 8028c04:	e66d      	b.n	80288e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8028c06:	d023      	beq.n	8028c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028c08:	9b07      	ldr	r3, [sp, #28]
 8028c0a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8028c0c:	3b01      	subs	r3, #1
 8028c0e:	fb00 4003 	mla	r0, r0, r3, r4
 8028c12:	1400      	asrs	r0, r0, #16
 8028c14:	f53f ae82 	bmi.w	802891c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028c18:	3901      	subs	r1, #1
 8028c1a:	4288      	cmp	r0, r1
 8028c1c:	f6bf ae7e 	bge.w	802891c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028c20:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8028c22:	fb01 6303 	mla	r3, r1, r3, r6
 8028c26:	141b      	asrs	r3, r3, #16
 8028c28:	f53f ae78 	bmi.w	802891c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028c2c:	3a01      	subs	r2, #1
 8028c2e:	4293      	cmp	r3, r2
 8028c30:	f6bf ae74 	bge.w	802891c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028c34:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028c38:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8028c3c:	f1bb 0f00 	cmp.w	fp, #0
 8028c40:	dc6c      	bgt.n	8028d1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8028c42:	9b07      	ldr	r3, [sp, #28]
 8028c44:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028c4a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8028c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028c52:	2b00      	cmp	r3, #0
 8028c54:	f340 81b3 	ble.w	8028fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028c5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028c5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028c62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028c66:	eef0 6a62 	vmov.f32	s13, s5
 8028c6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028c6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028c72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c76:	ee16 4a90 	vmov	r4, s13
 8028c7a:	eef0 6a43 	vmov.f32	s13, s6
 8028c7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c82:	ee16 6a90 	vmov	r6, s13
 8028c86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028c8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028c8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028c92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028c96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028c9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028c9e:	ee12 2a90 	vmov	r2, s5
 8028ca2:	eef0 2a47 	vmov.f32	s5, s14
 8028ca6:	fb92 f3f3 	sdiv	r3, r2, r3
 8028caa:	ee13 2a10 	vmov	r2, s6
 8028cae:	9329      	str	r3, [sp, #164]	; 0xa4
 8028cb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028cb2:	eeb0 3a67 	vmov.f32	s6, s15
 8028cb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8028cba:	932a      	str	r3, [sp, #168]	; 0xa8
 8028cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028cbe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8028cc0:	3b01      	subs	r3, #1
 8028cc2:	9317      	str	r3, [sp, #92]	; 0x5c
 8028cc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028cc6:	bf08      	it	eq
 8028cc8:	4613      	moveq	r3, r2
 8028cca:	9307      	str	r3, [sp, #28]
 8028ccc:	e5fb      	b.n	80288c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028cce:	2900      	cmp	r1, #0
 8028cd0:	f43f ae6b 	beq.w	80289aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028cd4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028cd8:	9308      	str	r3, [sp, #32]
 8028cda:	0e1b      	lsrs	r3, r3, #24
 8028cdc:	9311      	str	r3, [sp, #68]	; 0x44
 8028cde:	e664      	b.n	80289aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028ce0:	f112 0801 	adds.w	r8, r2, #1
 8028ce4:	f53f af7b 	bmi.w	8028bde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028ce8:	4543      	cmp	r3, r8
 8028cea:	f6ff af78 	blt.w	8028bde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028cee:	f11c 0801 	adds.w	r8, ip, #1
 8028cf2:	f53f af74 	bmi.w	8028bde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028cf6:	45c6      	cmp	lr, r8
 8028cf8:	f6ff af71 	blt.w	8028bde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028cfc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8028cfe:	b21b      	sxth	r3, r3
 8028d00:	9201      	str	r2, [sp, #4]
 8028d02:	fa0f f28e 	sxth.w	r2, lr
 8028d06:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028d0a:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028d0e:	9200      	str	r2, [sp, #0]
 8028d10:	4639      	mov	r1, r7
 8028d12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028d14:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8028d16:	f7ff fc79 	bl	802860c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8028d1a:	e760      	b.n	8028bde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028d1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028d1e:	1427      	asrs	r7, r4, #16
 8028d20:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028d22:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028d26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028d2a:	1433      	asrs	r3, r6, #16
 8028d2c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028d30:	fb01 7303 	mla	r3, r1, r3, r7
 8028d34:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8028d38:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028d3c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028d40:	2a00      	cmp	r2, #0
 8028d42:	f000 8133 	beq.w	8028fac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8028d46:	687d      	ldr	r5, [r7, #4]
 8028d48:	950e      	str	r5, [sp, #56]	; 0x38
 8028d4a:	0e2d      	lsrs	r5, r5, #24
 8028d4c:	9515      	str	r5, [sp, #84]	; 0x54
 8028d4e:	b178      	cbz	r0, 8028d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028d50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8028d54:	3901      	subs	r1, #1
 8028d56:	0089      	lsls	r1, r1, #2
 8028d58:	3104      	adds	r1, #4
 8028d5a:	eb07 0e01 	add.w	lr, r7, r1
 8028d5e:	5879      	ldr	r1, [r7, r1]
 8028d60:	9109      	str	r1, [sp, #36]	; 0x24
 8028d62:	0e09      	lsrs	r1, r1, #24
 8028d64:	9112      	str	r1, [sp, #72]	; 0x48
 8028d66:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028d6a:	910f      	str	r1, [sp, #60]	; 0x3c
 8028d6c:	0e09      	lsrs	r1, r1, #24
 8028d6e:	9116      	str	r1, [sp, #88]	; 0x58
 8028d70:	b292      	uxth	r2, r2
 8028d72:	9915      	ldr	r1, [sp, #84]	; 0x54
 8028d74:	b280      	uxth	r0, r0
 8028d76:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028d78:	fb02 f800 	mul.w	r8, r2, r0
 8028d7c:	0112      	lsls	r2, r2, #4
 8028d7e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028d82:	eba2 0e08 	sub.w	lr, r2, r8
 8028d86:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028d8a:	b280      	uxth	r0, r0
 8028d8c:	fa1f fe8e 	uxth.w	lr, lr
 8028d90:	1a12      	subs	r2, r2, r0
 8028d92:	fb0e f101 	mul.w	r1, lr, r1
 8028d96:	b292      	uxth	r2, r2
 8028d98:	fb02 110c 	mla	r1, r2, ip, r1
 8028d9c:	fb00 1105 	mla	r1, r0, r5, r1
 8028da0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028da2:	fb08 1105 	mla	r1, r8, r5, r1
 8028da6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028daa:	2900      	cmp	r1, #0
 8028dac:	f000 80f5 	beq.w	8028f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8028db0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028db4:	d019      	beq.n	8028dea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8028db6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028dbe:	fb0c fa0a 	mul.w	sl, ip, sl
 8028dc2:	fb0c fc03 	mul.w	ip, ip, r3
 8028dc6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028dca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028dce:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028dd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028dd6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028dda:	4453      	add	r3, sl
 8028ddc:	0a3f      	lsrs	r7, r7, #8
 8028dde:	0a1b      	lsrs	r3, r3, #8
 8028de0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028de4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028de8:	433b      	orrs	r3, r7
 8028dea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028dec:	2dff      	cmp	r5, #255	; 0xff
 8028dee:	d020      	beq.n	8028e32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8028df0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028df2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028df6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028df8:	436f      	muls	r7, r5
 8028dfa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028dfc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028e00:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028e04:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028e06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028e0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028e0e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e12:	44bc      	add	ip, r7
 8028e14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028e18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028e20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028e24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028e2c:	ea4c 050a 	orr.w	r5, ip, sl
 8028e30:	950e      	str	r5, [sp, #56]	; 0x38
 8028e32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028e34:	2dff      	cmp	r5, #255	; 0xff
 8028e36:	d020      	beq.n	8028e7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8028e38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028e3a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028e3e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028e40:	436f      	muls	r7, r5
 8028e42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028e44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028e48:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028e4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028e4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028e52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028e56:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e5a:	44bc      	add	ip, r7
 8028e5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028e60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028e68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028e6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028e74:	ea4c 050a 	orr.w	r5, ip, sl
 8028e78:	9509      	str	r5, [sp, #36]	; 0x24
 8028e7a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028e7c:	2dff      	cmp	r5, #255	; 0xff
 8028e7e:	d020      	beq.n	8028ec2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8028e80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028e82:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028e86:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028e88:	436f      	muls	r7, r5
 8028e8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028e8c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028e90:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028e94:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028e96:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028e9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028e9e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028ea2:	44bc      	add	ip, r7
 8028ea4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028ea8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028eac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028eb0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028eb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028eb8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028ebc:	ea4c 050a 	orr.w	r5, ip, sl
 8028ec0:	950f      	str	r5, [sp, #60]	; 0x3c
 8028ec2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028ec4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028ec8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028ecc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028ed0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028ed2:	fb0e f707 	mul.w	r7, lr, r7
 8028ed6:	fb02 770c 	mla	r7, r2, ip, r7
 8028eda:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028ede:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028ee0:	fb00 770c 	mla	r7, r0, ip, r7
 8028ee4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028ee8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028eea:	fb08 770c 	mla	r7, r8, ip, r7
 8028eee:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028ef2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028ef4:	fb0e fe0c 	mul.w	lr, lr, ip
 8028ef8:	0a3f      	lsrs	r7, r7, #8
 8028efa:	fb02 e303 	mla	r3, r2, r3, lr
 8028efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028f00:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028f04:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8028f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028f0a:	fb00 330a 	mla	r3, r0, sl, r3
 8028f0e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028f12:	f8b9 0000 	ldrh.w	r0, [r9]
 8028f16:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028f1c:	1202      	asrs	r2, r0, #8
 8028f1e:	4359      	muls	r1, r3
 8028f20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f24:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028f28:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028f2c:	1c4b      	adds	r3, r1, #1
 8028f2e:	ea47 070c 	orr.w	r7, r7, ip
 8028f32:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028f36:	0c3b      	lsrs	r3, r7, #16
 8028f38:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028f3c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028f40:	b2ff      	uxtb	r7, r7
 8028f42:	fb13 f305 	smulbb	r3, r3, r5
 8028f46:	b2c9      	uxtb	r1, r1
 8028f48:	fb17 f705 	smulbb	r7, r7, r5
 8028f4c:	fb02 3201 	mla	r2, r2, r1, r3
 8028f50:	10c3      	asrs	r3, r0, #3
 8028f52:	fb1c fc05 	smulbb	ip, ip, r5
 8028f56:	00c0      	lsls	r0, r0, #3
 8028f58:	b292      	uxth	r2, r2
 8028f5a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028f5e:	b2c0      	uxtb	r0, r0
 8028f60:	fb03 c301 	mla	r3, r3, r1, ip
 8028f64:	fb00 7001 	mla	r0, r0, r1, r7
 8028f68:	1c51      	adds	r1, r2, #1
 8028f6a:	b29b      	uxth	r3, r3
 8028f6c:	b280      	uxth	r0, r0
 8028f6e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028f72:	f100 0c01 	add.w	ip, r0, #1
 8028f76:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8028f7a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028f7e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028f82:	ea4c 0202 	orr.w	r2, ip, r2
 8028f86:	f103 0c01 	add.w	ip, r3, #1
 8028f8a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028f8e:	095b      	lsrs	r3, r3, #5
 8028f90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028f94:	431a      	orrs	r2, r3
 8028f96:	f8a9 2000 	strh.w	r2, [r9]
 8028f9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028f9c:	f109 0902 	add.w	r9, r9, #2
 8028fa0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028fa4:	441c      	add	r4, r3
 8028fa6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028fa8:	441e      	add	r6, r3
 8028faa:	e647      	b.n	8028c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8028fac:	2800      	cmp	r0, #0
 8028fae:	f43f aedf 	beq.w	8028d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028fb2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8028fb6:	9109      	str	r1, [sp, #36]	; 0x24
 8028fb8:	0e09      	lsrs	r1, r1, #24
 8028fba:	9112      	str	r1, [sp, #72]	; 0x48
 8028fbc:	e6d8      	b.n	8028d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028fbe:	b01d      	add	sp, #116	; 0x74
 8028fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028fc4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8028fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fc8:	b085      	sub	sp, #20
 8028fca:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8028fce:	9102      	str	r1, [sp, #8]
 8028fd0:	2c00      	cmp	r4, #0
 8028fd2:	fb04 7103 	mla	r1, r4, r3, r7
 8028fd6:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8028fda:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8028fde:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8028fe2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8028fe6:	f2c0 810c 	blt.w	8029202 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8028fea:	45a6      	cmp	lr, r4
 8028fec:	f340 8109 	ble.w	8029202 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8028ff0:	2f00      	cmp	r7, #0
 8028ff2:	f2c0 8104 	blt.w	80291fe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8028ff6:	42bb      	cmp	r3, r7
 8028ff8:	f340 8101 	ble.w	80291fe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8028ffc:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8029000:	1c7a      	adds	r2, r7, #1
 8029002:	f100 8101 	bmi.w	8029208 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8029006:	4293      	cmp	r3, r2
 8029008:	f340 80fe 	ble.w	8029208 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802900c:	2e00      	cmp	r6, #0
 802900e:	f000 80fd 	beq.w	802920c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8029012:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029016:	3401      	adds	r4, #1
 8029018:	f100 80fc 	bmi.w	8029214 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802901c:	45a6      	cmp	lr, r4
 802901e:	f340 80f9 	ble.w	8029214 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8029022:	2800      	cmp	r0, #0
 8029024:	f000 80f9 	beq.w	802921a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8029028:	2f00      	cmp	r7, #0
 802902a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802902e:	f2c0 80ef 	blt.w	8029210 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029032:	42bb      	cmp	r3, r7
 8029034:	f340 80ec 	ble.w	8029210 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029038:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802903c:	3701      	adds	r7, #1
 802903e:	f100 80ef 	bmi.w	8029220 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029042:	42bb      	cmp	r3, r7
 8029044:	f340 80ec 	ble.w	8029220 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029048:	2e00      	cmp	r6, #0
 802904a:	f000 80eb 	beq.w	8029224 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802904e:	6852      	ldr	r2, [r2, #4]
 8029050:	b2b6      	uxth	r6, r6
 8029052:	b280      	uxth	r0, r0
 8029054:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8029058:	fb00 fe06 	mul.w	lr, r0, r6
 802905c:	0136      	lsls	r6, r6, #4
 802905e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8029062:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8029066:	eba6 070e 	sub.w	r7, r6, lr
 802906a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802906e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029072:	b280      	uxth	r0, r0
 8029074:	b2bf      	uxth	r7, r7
 8029076:	1a1b      	subs	r3, r3, r0
 8029078:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802907c:	fb07 f60a 	mul.w	r6, r7, sl
 8029080:	b29b      	uxth	r3, r3
 8029082:	fb0b 6603 	mla	r6, fp, r3, r6
 8029086:	fb00 6609 	mla	r6, r0, r9, r6
 802908a:	fb0e 6608 	mla	r6, lr, r8, r6
 802908e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8029092:	9600      	str	r6, [sp, #0]
 8029094:	2e00      	cmp	r6, #0
 8029096:	f000 80af 	beq.w	80291f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802909a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802909e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80290a2:	9e02      	ldr	r6, [sp, #8]
 80290a4:	fb0b fc0c 	mul.w	ip, fp, ip
 80290a8:	fb0b f505 	mul.w	r5, fp, r5
 80290ac:	8836      	ldrh	r6, [r6, #0]
 80290ae:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80290b2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80290b6:	9501      	str	r5, [sp, #4]
 80290b8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80290bc:	44dc      	add	ip, fp
 80290be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80290c2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80290c6:	9503      	str	r5, [sp, #12]
 80290c8:	9d01      	ldr	r5, [sp, #4]
 80290ca:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80290ce:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80290d2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80290d6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80290da:	fb0a fc0c 	mul.w	ip, sl, ip
 80290de:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80290e2:	fb0a fa01 	mul.w	sl, sl, r1
 80290e6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80290ea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80290ee:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80290f2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80290f6:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80290fa:	4465      	add	r5, ip
 80290fc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8029100:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029104:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029108:	fb09 fc0c 	mul.w	ip, r9, ip
 802910c:	0a2d      	lsrs	r5, r5, #8
 802910e:	fb09 f904 	mul.w	r9, r9, r4
 8029112:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029116:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802911a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802911e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8029122:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029126:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802912a:	437d      	muls	r5, r7
 802912c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8029130:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8029134:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029138:	4461      	add	r1, ip
 802913a:	fb08 f404 	mul.w	r4, r8, r4
 802913e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029142:	fb08 f802 	mul.w	r8, r8, r2
 8029146:	0a09      	lsrs	r1, r1, #8
 8029148:	0a22      	lsrs	r2, r4, #8
 802914a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802914e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8029152:	fb07 f70a 	mul.w	r7, r7, sl
 8029156:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802915a:	4414      	add	r4, r2
 802915c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8029160:	0a24      	lsrs	r4, r4, #8
 8029162:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8029166:	9a03      	ldr	r2, [sp, #12]
 8029168:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802916c:	fb02 5503 	mla	r5, r2, r3, r5
 8029170:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029174:	fb04 540e 	mla	r4, r4, lr, r5
 8029178:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802917c:	fb01 4100 	mla	r1, r1, r0, r4
 8029180:	0a09      	lsrs	r1, r1, #8
 8029182:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8029186:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802918a:	fb03 7101 	mla	r1, r3, r1, r7
 802918e:	9b00      	ldr	r3, [sp, #0]
 8029190:	fb0e 1e08 	mla	lr, lr, r8, r1
 8029194:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8029198:	43da      	mvns	r2, r3
 802919a:	1233      	asrs	r3, r6, #8
 802919c:	fb00 e101 	mla	r1, r0, r1, lr
 80291a0:	10f0      	asrs	r0, r6, #3
 80291a2:	b2d2      	uxtb	r2, r2
 80291a4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80291a8:	0a09      	lsrs	r1, r1, #8
 80291aa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80291ae:	00f6      	lsls	r6, r6, #3
 80291b0:	4353      	muls	r3, r2
 80291b2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80291b6:	4350      	muls	r0, r2
 80291b8:	b2f6      	uxtb	r6, r6
 80291ba:	4321      	orrs	r1, r4
 80291bc:	4356      	muls	r6, r2
 80291be:	1c5a      	adds	r2, r3, #1
 80291c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80291c4:	0c0b      	lsrs	r3, r1, #16
 80291c6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80291ca:	1c42      	adds	r2, r0, #1
 80291cc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80291d0:	0a0a      	lsrs	r2, r1, #8
 80291d2:	021b      	lsls	r3, r3, #8
 80291d4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80291d8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80291dc:	00d2      	lsls	r2, r2, #3
 80291de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80291e2:	4313      	orrs	r3, r2
 80291e4:	1c72      	adds	r2, r6, #1
 80291e6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80291ea:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80291ee:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80291f2:	4319      	orrs	r1, r3
 80291f4:	9b02      	ldr	r3, [sp, #8]
 80291f6:	8019      	strh	r1, [r3, #0]
 80291f8:	b005      	add	sp, #20
 80291fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80291fe:	2500      	movs	r5, #0
 8029200:	e6fe      	b.n	8029000 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8029202:	2100      	movs	r1, #0
 8029204:	460d      	mov	r5, r1
 8029206:	e706      	b.n	8029016 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029208:	2100      	movs	r1, #0
 802920a:	e704      	b.n	8029016 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802920c:	4631      	mov	r1, r6
 802920e:	e702      	b.n	8029016 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029210:	2400      	movs	r4, #0
 8029212:	e713      	b.n	802903c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8029214:	2200      	movs	r2, #0
 8029216:	4614      	mov	r4, r2
 8029218:	e71a      	b.n	8029050 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802921a:	4602      	mov	r2, r0
 802921c:	4604      	mov	r4, r0
 802921e:	e717      	b.n	8029050 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029220:	2200      	movs	r2, #0
 8029222:	e715      	b.n	8029050 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029224:	4632      	mov	r2, r6
 8029226:	e713      	b.n	8029050 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08029228 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802922c:	b09b      	sub	sp, #108	; 0x6c
 802922e:	9218      	str	r2, [sp, #96]	; 0x60
 8029230:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029232:	9019      	str	r0, [sp, #100]	; 0x64
 8029234:	9116      	str	r1, [sp, #88]	; 0x58
 8029236:	6850      	ldr	r0, [r2, #4]
 8029238:	9307      	str	r3, [sp, #28]
 802923a:	6812      	ldr	r2, [r2, #0]
 802923c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8029240:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8029244:	fb00 1303 	mla	r3, r0, r3, r1
 8029248:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802924c:	930a      	str	r3, [sp, #40]	; 0x28
 802924e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029250:	681b      	ldr	r3, [r3, #0]
 8029252:	930f      	str	r3, [sp, #60]	; 0x3c
 8029254:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029256:	2b00      	cmp	r3, #0
 8029258:	dc03      	bgt.n	8029262 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802925a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802925c:	2b00      	cmp	r3, #0
 802925e:	f340 8387 	ble.w	8029970 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8029262:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029264:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029268:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802926c:	1e48      	subs	r0, r1, #1
 802926e:	1e57      	subs	r7, r2, #1
 8029270:	9b07      	ldr	r3, [sp, #28]
 8029272:	2b00      	cmp	r3, #0
 8029274:	f340 8166 	ble.w	8029544 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8029278:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802927c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029280:	d406      	bmi.n	8029290 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029282:	4584      	cmp	ip, r0
 8029284:	da04      	bge.n	8029290 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029286:	2b00      	cmp	r3, #0
 8029288:	db02      	blt.n	8029290 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802928a:	42bb      	cmp	r3, r7
 802928c:	f2c0 815b 	blt.w	8029546 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8029290:	f11c 0c01 	adds.w	ip, ip, #1
 8029294:	f100 814b 	bmi.w	802952e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029298:	4561      	cmp	r1, ip
 802929a:	f2c0 8148 	blt.w	802952e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802929e:	3301      	adds	r3, #1
 80292a0:	f100 8145 	bmi.w	802952e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80292a4:	429a      	cmp	r2, r3
 80292a6:	f2c0 8142 	blt.w	802952e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80292aa:	9b07      	ldr	r3, [sp, #28]
 80292ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80292ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80292b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80292b2:	2b00      	cmp	r3, #0
 80292b4:	f340 8165 	ble.w	8029582 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80292b8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80292ba:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80292be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80292c0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80292c4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80292c8:	1422      	asrs	r2, r4, #16
 80292ca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80292ce:	689b      	ldr	r3, [r3, #8]
 80292d0:	f100 81d5 	bmi.w	802967e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80292d4:	f103 38ff 	add.w	r8, r3, #4294967295
 80292d8:	4542      	cmp	r2, r8
 80292da:	f280 81d0 	bge.w	802967e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80292de:	f1bc 0f00 	cmp.w	ip, #0
 80292e2:	f2c0 81cc 	blt.w	802967e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80292e6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80292ea:	45c4      	cmp	ip, r8
 80292ec:	f280 81c7 	bge.w	802967e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80292f0:	b21b      	sxth	r3, r3
 80292f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80292f4:	fb0c 2203 	mla	r2, ip, r3, r2
 80292f8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80292fc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029300:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029304:	2900      	cmp	r1, #0
 8029306:	f000 8182 	beq.w	802960e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802930a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802930e:	950b      	str	r5, [sp, #44]	; 0x2c
 8029310:	0e2d      	lsrs	r5, r5, #24
 8029312:	9512      	str	r5, [sp, #72]	; 0x48
 8029314:	b180      	cbz	r0, 8029338 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029316:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802931a:	3b01      	subs	r3, #1
 802931c:	009b      	lsls	r3, r3, #2
 802931e:	3304      	adds	r3, #4
 8029320:	eb08 0c03 	add.w	ip, r8, r3
 8029324:	f858 3003 	ldr.w	r3, [r8, r3]
 8029328:	9308      	str	r3, [sp, #32]
 802932a:	0e1b      	lsrs	r3, r3, #24
 802932c:	9310      	str	r3, [sp, #64]	; 0x40
 802932e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029332:	930c      	str	r3, [sp, #48]	; 0x30
 8029334:	0e1b      	lsrs	r3, r3, #24
 8029336:	9313      	str	r3, [sp, #76]	; 0x4c
 8029338:	b289      	uxth	r1, r1
 802933a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802933c:	b280      	uxth	r0, r0
 802933e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029340:	fb01 f900 	mul.w	r9, r1, r0
 8029344:	0109      	lsls	r1, r1, #4
 8029346:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802934a:	eba1 0809 	sub.w	r8, r1, r9
 802934e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8029352:	b280      	uxth	r0, r0
 8029354:	fa1f f888 	uxth.w	r8, r8
 8029358:	1a09      	subs	r1, r1, r0
 802935a:	fb08 f303 	mul.w	r3, r8, r3
 802935e:	b289      	uxth	r1, r1
 8029360:	fb01 330e 	mla	r3, r1, lr, r3
 8029364:	fb00 3305 	mla	r3, r0, r5, r3
 8029368:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802936a:	fb09 3305 	mla	r3, r9, r5, r3
 802936e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029372:	2b00      	cmp	r3, #0
 8029374:	f000 80d2 	beq.w	802951c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029378:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802937c:	d01b      	beq.n	80293b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802937e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8029382:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029386:	fb0e fa0a 	mul.w	sl, lr, sl
 802938a:	fb0e fe02 	mul.w	lr, lr, r2
 802938e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029392:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029396:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802939a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802939e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80293a2:	4452      	add	r2, sl
 80293a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80293a8:	0a12      	lsrs	r2, r2, #8
 80293aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80293ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80293b2:	ea42 020c 	orr.w	r2, r2, ip
 80293b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80293b8:	2dff      	cmp	r5, #255	; 0xff
 80293ba:	d021      	beq.n	8029400 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80293bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80293be:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80293c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80293c4:	fb05 fb0b 	mul.w	fp, r5, fp
 80293c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80293ca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80293ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80293d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80293d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80293d8:	fb05 fa0a 	mul.w	sl, r5, sl
 80293dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80293e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80293e4:	44de      	add	lr, fp
 80293e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80293ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80293ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80293f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80293f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80293fa:	ea4e 050a 	orr.w	r5, lr, sl
 80293fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8029400:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029402:	2dff      	cmp	r5, #255	; 0xff
 8029404:	d021      	beq.n	802944a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8029406:	9d08      	ldr	r5, [sp, #32]
 8029408:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802940c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802940e:	fb05 fb0b 	mul.w	fp, r5, fp
 8029412:	9d08      	ldr	r5, [sp, #32]
 8029414:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029418:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802941a:	fb05 fa0e 	mul.w	sl, r5, lr
 802941e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029422:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029426:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802942a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802942e:	44de      	add	lr, fp
 8029430:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029434:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029438:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802943c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029440:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029444:	ea4e 050a 	orr.w	r5, lr, sl
 8029448:	9508      	str	r5, [sp, #32]
 802944a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802944c:	2dff      	cmp	r5, #255	; 0xff
 802944e:	d021      	beq.n	8029494 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029450:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029452:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029456:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029458:	fb05 fb0b 	mul.w	fp, r5, fp
 802945c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802945e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029462:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029464:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029468:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802946c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029470:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029474:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029478:	44de      	add	lr, fp
 802947a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802947e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029482:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029486:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802948a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802948e:	ea4e 050a 	orr.w	r5, lr, sl
 8029492:	950c      	str	r5, [sp, #48]	; 0x30
 8029494:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029496:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802949a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802949e:	2bff      	cmp	r3, #255	; 0xff
 80294a0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80294a4:	9d08      	ldr	r5, [sp, #32]
 80294a6:	fb08 fc0c 	mul.w	ip, r8, ip
 80294aa:	fb01 cc0e 	mla	ip, r1, lr, ip
 80294ae:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80294b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80294b4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80294b8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80294bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80294be:	fb09 cc0e 	mla	ip, r9, lr, ip
 80294c2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80294c6:	fb08 f80e 	mul.w	r8, r8, lr
 80294ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80294ce:	fb01 8202 	mla	r2, r1, r2, r8
 80294d2:	9908      	ldr	r1, [sp, #32]
 80294d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80294d8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80294dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80294de:	fb00 220a 	mla	r2, r0, sl, r2
 80294e2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80294e6:	fb09 2900 	mla	r9, r9, r0, r2
 80294ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80294ee:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80294f2:	ea4c 0c09 	orr.w	ip, ip, r9
 80294f6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80294fa:	f040 8091 	bne.w	8029620 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80294fe:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8029502:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8029506:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802950a:	f022 0207 	bic.w	r2, r2, #7
 802950e:	431a      	orrs	r2, r3
 8029510:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029514:	ea4c 0c02 	orr.w	ip, ip, r2
 8029518:	f8a7 c000 	strh.w	ip, [r7]
 802951c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802951e:	3702      	adds	r7, #2
 8029520:	441c      	add	r4, r3
 8029522:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029524:	441e      	add	r6, r3
 8029526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029528:	3b01      	subs	r3, #1
 802952a:	9317      	str	r3, [sp, #92]	; 0x5c
 802952c:	e6c0      	b.n	80292b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802952e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029530:	441c      	add	r4, r3
 8029532:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029534:	441e      	add	r6, r3
 8029536:	9b07      	ldr	r3, [sp, #28]
 8029538:	3b01      	subs	r3, #1
 802953a:	9307      	str	r3, [sp, #28]
 802953c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802953e:	3302      	adds	r3, #2
 8029540:	930a      	str	r3, [sp, #40]	; 0x28
 8029542:	e695      	b.n	8029270 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029544:	d024      	beq.n	8029590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8029546:	9b07      	ldr	r3, [sp, #28]
 8029548:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802954a:	3b01      	subs	r3, #1
 802954c:	fb00 4003 	mla	r0, r0, r3, r4
 8029550:	1400      	asrs	r0, r0, #16
 8029552:	f53f aeaa 	bmi.w	80292aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029556:	3901      	subs	r1, #1
 8029558:	4288      	cmp	r0, r1
 802955a:	f6bf aea6 	bge.w	80292aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802955e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029560:	fb01 6303 	mla	r3, r1, r3, r6
 8029564:	141b      	asrs	r3, r3, #16
 8029566:	f53f aea0 	bmi.w	80292aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802956a:	3a01      	subs	r2, #1
 802956c:	4293      	cmp	r3, r2
 802956e:	f6bf ae9c 	bge.w	80292aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029572:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029576:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802957a:	f1bb 0f00 	cmp.w	fp, #0
 802957e:	f300 809a 	bgt.w	80296b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8029582:	9b07      	ldr	r3, [sp, #28]
 8029584:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802958a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802958e:	930a      	str	r3, [sp, #40]	; 0x28
 8029590:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029592:	2b00      	cmp	r3, #0
 8029594:	f340 81ec 	ble.w	8029970 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8029598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802959c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802959e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80295a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80295a6:	eef0 6a62 	vmov.f32	s13, s5
 80295aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80295ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80295b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80295b6:	ee16 4a90 	vmov	r4, s13
 80295ba:	eef0 6a43 	vmov.f32	s13, s6
 80295be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80295c2:	ee16 6a90 	vmov	r6, s13
 80295c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80295ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80295ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80295d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80295d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80295da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80295de:	ee12 2a90 	vmov	r2, s5
 80295e2:	eef0 2a47 	vmov.f32	s5, s14
 80295e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80295ea:	ee13 2a10 	vmov	r2, s6
 80295ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80295f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80295f2:	eeb0 3a67 	vmov.f32	s6, s15
 80295f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80295fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80295fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80295fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8029600:	3b01      	subs	r3, #1
 8029602:	9316      	str	r3, [sp, #88]	; 0x58
 8029604:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029606:	bf08      	it	eq
 8029608:	4613      	moveq	r3, r2
 802960a:	9307      	str	r3, [sp, #28]
 802960c:	e622      	b.n	8029254 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802960e:	2800      	cmp	r0, #0
 8029610:	f43f ae92 	beq.w	8029338 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029614:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029618:	9308      	str	r3, [sp, #32]
 802961a:	0e1b      	lsrs	r3, r3, #24
 802961c:	9310      	str	r3, [sp, #64]	; 0x40
 802961e:	e68b      	b.n	8029338 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029620:	8839      	ldrh	r1, [r7, #0]
 8029622:	43db      	mvns	r3, r3
 8029624:	4dd4      	ldr	r5, [pc, #848]	; (8029978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8029626:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802962a:	fa5f f883 	uxtb.w	r8, r3
 802962e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8029632:	10c8      	asrs	r0, r1, #3
 8029634:	00cb      	lsls	r3, r1, #3
 8029636:	fb0e fe08 	mul.w	lr, lr, r8
 802963a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802963e:	b2db      	uxtb	r3, r3
 8029640:	f10e 0101 	add.w	r1, lr, #1
 8029644:	fb00 f008 	mul.w	r0, r0, r8
 8029648:	fb03 f308 	mul.w	r3, r3, r8
 802964c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029650:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029654:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029658:	f100 0e01 	add.w	lr, r0, #1
 802965c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029660:	b2c9      	uxtb	r1, r1
 8029662:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029666:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802966a:	00d2      	lsls	r2, r2, #3
 802966c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029670:	430a      	orrs	r2, r1
 8029672:	1c59      	adds	r1, r3, #1
 8029674:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029678:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802967c:	e748      	b.n	8029510 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802967e:	f112 0801 	adds.w	r8, r2, #1
 8029682:	f53f af4b 	bmi.w	802951c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029686:	4543      	cmp	r3, r8
 8029688:	f6ff af48 	blt.w	802951c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802968c:	f11c 0801 	adds.w	r8, ip, #1
 8029690:	f53f af44 	bmi.w	802951c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029694:	45c6      	cmp	lr, r8
 8029696:	f6ff af41 	blt.w	802951c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802969a:	b21b      	sxth	r3, r3
 802969c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80296a0:	fa0f f28e 	sxth.w	r2, lr
 80296a4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80296a8:	9200      	str	r2, [sp, #0]
 80296aa:	4639      	mov	r1, r7
 80296ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80296ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80296b0:	f7ff fc88 	bl	8028fc4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80296b4:	e732      	b.n	802951c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80296b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80296b8:	1421      	asrs	r1, r4, #16
 80296ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80296bc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80296c0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80296c4:	1433      	asrs	r3, r6, #16
 80296c6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80296ca:	fb07 1303 	mla	r3, r7, r3, r1
 80296ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80296d0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80296d4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80296d8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80296dc:	2a00      	cmp	r2, #0
 80296de:	f000 8108 	beq.w	80298f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80296e2:	684d      	ldr	r5, [r1, #4]
 80296e4:	950d      	str	r5, [sp, #52]	; 0x34
 80296e6:	0e2d      	lsrs	r5, r5, #24
 80296e8:	9514      	str	r5, [sp, #80]	; 0x50
 80296ea:	b178      	cbz	r0, 802970c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80296ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80296f0:	3f01      	subs	r7, #1
 80296f2:	00bf      	lsls	r7, r7, #2
 80296f4:	3704      	adds	r7, #4
 80296f6:	eb01 0e07 	add.w	lr, r1, r7
 80296fa:	59c9      	ldr	r1, [r1, r7]
 80296fc:	9109      	str	r1, [sp, #36]	; 0x24
 80296fe:	0e09      	lsrs	r1, r1, #24
 8029700:	9111      	str	r1, [sp, #68]	; 0x44
 8029702:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029706:	910e      	str	r1, [sp, #56]	; 0x38
 8029708:	0e09      	lsrs	r1, r1, #24
 802970a:	9115      	str	r1, [sp, #84]	; 0x54
 802970c:	b292      	uxth	r2, r2
 802970e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029710:	b280      	uxth	r0, r0
 8029712:	fb02 f900 	mul.w	r9, r2, r0
 8029716:	0112      	lsls	r2, r2, #4
 8029718:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802971c:	eba2 0e09 	sub.w	lr, r2, r9
 8029720:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8029724:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029726:	b280      	uxth	r0, r0
 8029728:	fa1f fe8e 	uxth.w	lr, lr
 802972c:	1a09      	subs	r1, r1, r0
 802972e:	fb0e f202 	mul.w	r2, lr, r2
 8029732:	b289      	uxth	r1, r1
 8029734:	fb01 220c 	mla	r2, r1, ip, r2
 8029738:	fb00 2205 	mla	r2, r0, r5, r2
 802973c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802973e:	fb09 2205 	mla	r2, r9, r5, r2
 8029742:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029746:	2a00      	cmp	r2, #0
 8029748:	f000 80ca 	beq.w	80298e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802974c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029750:	d019      	beq.n	8029786 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8029752:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802975a:	fb0c fa0a 	mul.w	sl, ip, sl
 802975e:	fb0c fc03 	mul.w	ip, ip, r3
 8029762:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029766:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802976a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802976e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029772:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029776:	4453      	add	r3, sl
 8029778:	0a3f      	lsrs	r7, r7, #8
 802977a:	0a1b      	lsrs	r3, r3, #8
 802977c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029780:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029784:	433b      	orrs	r3, r7
 8029786:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029788:	2dff      	cmp	r5, #255	; 0xff
 802978a:	d020      	beq.n	80297ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802978c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802978e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029792:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029794:	436f      	muls	r7, r5
 8029796:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029798:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802979c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80297a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80297a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80297a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80297aa:	fb05 fa0a 	mul.w	sl, r5, sl
 80297ae:	44bc      	add	ip, r7
 80297b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80297b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80297b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80297bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80297c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80297c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80297c8:	ea4c 050a 	orr.w	r5, ip, sl
 80297cc:	950d      	str	r5, [sp, #52]	; 0x34
 80297ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80297d0:	2dff      	cmp	r5, #255	; 0xff
 80297d2:	d020      	beq.n	8029816 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80297d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80297d6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80297da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80297dc:	436f      	muls	r7, r5
 80297de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80297e0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80297e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80297e6:	fb05 fa0c 	mul.w	sl, r5, ip
 80297ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80297ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80297f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80297f6:	44bc      	add	ip, r7
 80297f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80297fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029800:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029804:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029808:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802980c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029810:	ea4c 050a 	orr.w	r5, ip, sl
 8029814:	9509      	str	r5, [sp, #36]	; 0x24
 8029816:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029818:	2dff      	cmp	r5, #255	; 0xff
 802981a:	d020      	beq.n	802985e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802981c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802981e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029822:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029824:	436f      	muls	r7, r5
 8029826:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029828:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802982c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029830:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029832:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029836:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802983a:	fb05 fa0a 	mul.w	sl, r5, sl
 802983e:	44bc      	add	ip, r7
 8029840:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029844:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029848:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802984c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029850:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029854:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029858:	ea4c 050a 	orr.w	r5, ip, sl
 802985c:	950e      	str	r5, [sp, #56]	; 0x38
 802985e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029860:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029864:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029868:	2aff      	cmp	r2, #255	; 0xff
 802986a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802986e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029870:	fb0e f707 	mul.w	r7, lr, r7
 8029874:	fb01 770c 	mla	r7, r1, ip, r7
 8029878:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802987c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802987e:	fb00 770c 	mla	r7, r0, ip, r7
 8029882:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029886:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029888:	fb09 770c 	mla	r7, r9, ip, r7
 802988c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029890:	fb0e fe0c 	mul.w	lr, lr, ip
 8029894:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029898:	fb01 e303 	mla	r3, r1, r3, lr
 802989c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802989e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80298a2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80298a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80298a8:	fb00 330a 	mla	r3, r0, sl, r3
 80298ac:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80298b0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80298b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80298b8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80298bc:	ea47 070c 	orr.w	r7, r7, ip
 80298c0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80298c4:	d11e      	bne.n	8029904 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80298c6:	097a      	lsrs	r2, r7, #5
 80298c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80298cc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80298d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80298d4:	f023 0307 	bic.w	r3, r3, #7
 80298d8:	4313      	orrs	r3, r2
 80298da:	431f      	orrs	r7, r3
 80298dc:	f8a8 7000 	strh.w	r7, [r8]
 80298e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80298e2:	f108 0802 	add.w	r8, r8, #2
 80298e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80298ea:	441c      	add	r4, r3
 80298ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80298ee:	441e      	add	r6, r3
 80298f0:	e643      	b.n	802957a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80298f2:	2800      	cmp	r0, #0
 80298f4:	f43f af0a 	beq.w	802970c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80298f8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80298fc:	9109      	str	r1, [sp, #36]	; 0x24
 80298fe:	0e09      	lsrs	r1, r1, #24
 8029900:	9111      	str	r1, [sp, #68]	; 0x44
 8029902:	e703      	b.n	802970c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029904:	f8b8 1000 	ldrh.w	r1, [r8]
 8029908:	43d2      	mvns	r2, r2
 802990a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802990e:	fa5f fe82 	uxtb.w	lr, r2
 8029912:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8029916:	10c8      	asrs	r0, r1, #3
 8029918:	00ca      	lsls	r2, r1, #3
 802991a:	fb0c fc0e 	mul.w	ip, ip, lr
 802991e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029922:	b2d2      	uxtb	r2, r2
 8029924:	f10c 0101 	add.w	r1, ip, #1
 8029928:	fb00 f00e 	mul.w	r0, r0, lr
 802992c:	fb02 f20e 	mul.w	r2, r2, lr
 8029930:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029934:	0c39      	lsrs	r1, r7, #16
 8029936:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802993a:	490f      	ldr	r1, [pc, #60]	; (8029978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802993c:	fa5f fc8c 	uxtb.w	ip, ip
 8029940:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029944:	1c41      	adds	r1, r0, #1
 8029946:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802994a:	1c51      	adds	r1, r2, #1
 802994c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029950:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029954:	00c0      	lsls	r0, r0, #3
 8029956:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802995a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802995e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029962:	ea4c 0c00 	orr.w	ip, ip, r0
 8029966:	ea47 0c0c 	orr.w	ip, r7, ip
 802996a:	f8a8 c000 	strh.w	ip, [r8]
 802996e:	e7b7      	b.n	80298e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8029970:	b01b      	add	sp, #108	; 0x6c
 8029972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029976:	bf00      	nop
 8029978:	fffff800 	.word	0xfffff800

0802997c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802997c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029980:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8029984:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029988:	2d00      	cmp	r5, #0
 802998a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802998e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8029992:	fb05 0e03 	mla	lr, r5, r3, r0
 8029996:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802999a:	f2c0 808c 	blt.w	8029ab6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802999e:	45a9      	cmp	r9, r5
 80299a0:	f340 8089 	ble.w	8029ab6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80299a4:	2800      	cmp	r0, #0
 80299a6:	f2c0 8084 	blt.w	8029ab2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80299aa:	4580      	cmp	r8, r0
 80299ac:	f340 8081 	ble.w	8029ab2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80299b0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80299b4:	f01e 0f01 	tst.w	lr, #1
 80299b8:	5d16      	ldrb	r6, [r2, r4]
 80299ba:	bf0c      	ite	eq
 80299bc:	f006 060f 	andeq.w	r6, r6, #15
 80299c0:	1136      	asrne	r6, r6, #4
 80299c2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80299c6:	b2f6      	uxtb	r6, r6
 80299c8:	1c44      	adds	r4, r0, #1
 80299ca:	d477      	bmi.n	8029abc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80299cc:	45a0      	cmp	r8, r4
 80299ce:	dd75      	ble.n	8029abc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80299d0:	2f00      	cmp	r7, #0
 80299d2:	d075      	beq.n	8029ac0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80299d4:	f10e 0a01 	add.w	sl, lr, #1
 80299d8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80299dc:	f01a 0f01 	tst.w	sl, #1
 80299e0:	5d14      	ldrb	r4, [r2, r4]
 80299e2:	bf0c      	ite	eq
 80299e4:	f004 040f 	andeq.w	r4, r4, #15
 80299e8:	1124      	asrne	r4, r4, #4
 80299ea:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80299ee:	b2e4      	uxtb	r4, r4
 80299f0:	3501      	adds	r5, #1
 80299f2:	d469      	bmi.n	8029ac8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80299f4:	45a9      	cmp	r9, r5
 80299f6:	dd67      	ble.n	8029ac8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80299f8:	f1bc 0f00 	cmp.w	ip, #0
 80299fc:	d067      	beq.n	8029ace <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80299fe:	2800      	cmp	r0, #0
 8029a00:	db60      	blt.n	8029ac4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029a02:	4580      	cmp	r8, r0
 8029a04:	dd5e      	ble.n	8029ac4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029a06:	eb03 090e 	add.w	r9, r3, lr
 8029a0a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8029a0e:	f019 0f01 	tst.w	r9, #1
 8029a12:	5d55      	ldrb	r5, [r2, r5]
 8029a14:	bf0c      	ite	eq
 8029a16:	f005 050f 	andeq.w	r5, r5, #15
 8029a1a:	112d      	asrne	r5, r5, #4
 8029a1c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029a20:	b2ed      	uxtb	r5, r5
 8029a22:	3001      	adds	r0, #1
 8029a24:	d456      	bmi.n	8029ad4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029a26:	4580      	cmp	r8, r0
 8029a28:	dd54      	ble.n	8029ad4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029a2a:	2f00      	cmp	r7, #0
 8029a2c:	d054      	beq.n	8029ad8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8029a2e:	3301      	adds	r3, #1
 8029a30:	449e      	add	lr, r3
 8029a32:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029a36:	f01e 0f01 	tst.w	lr, #1
 8029a3a:	5cd0      	ldrb	r0, [r2, r3]
 8029a3c:	bf0c      	ite	eq
 8029a3e:	f000 000f 	andeq.w	r0, r0, #15
 8029a42:	1100      	asrne	r0, r0, #4
 8029a44:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029a48:	b2c3      	uxtb	r3, r0
 8029a4a:	b2ba      	uxth	r2, r7
 8029a4c:	fa1f fc8c 	uxth.w	ip, ip
 8029a50:	fb02 f00c 	mul.w	r0, r2, ip
 8029a54:	0112      	lsls	r2, r2, #4
 8029a56:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8029a5a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8029a5e:	1a12      	subs	r2, r2, r0
 8029a60:	fa1f fc8c 	uxth.w	ip, ip
 8029a64:	b292      	uxth	r2, r2
 8029a66:	eba7 070c 	sub.w	r7, r7, ip
 8029a6a:	4362      	muls	r2, r4
 8029a6c:	b2bf      	uxth	r7, r7
 8029a6e:	fb06 2207 	mla	r2, r6, r7, r2
 8029a72:	fb0c 2505 	mla	r5, ip, r5, r2
 8029a76:	fb00 5303 	mla	r3, r0, r3, r5
 8029a7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029a7e:	b1b3      	cbz	r3, 8029aae <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029a80:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8029a84:	435a      	muls	r2, r3
 8029a86:	1c53      	adds	r3, r2, #1
 8029a88:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029a8c:	4a2d      	ldr	r2, [pc, #180]	; (8029b44 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8029a8e:	121b      	asrs	r3, r3, #8
 8029a90:	6812      	ldr	r2, [r2, #0]
 8029a92:	2bff      	cmp	r3, #255	; 0xff
 8029a94:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029a98:	d120      	bne.n	8029adc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8029a9a:	0950      	lsrs	r0, r2, #5
 8029a9c:	4b2a      	ldr	r3, [pc, #168]	; (8029b48 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8029a9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029aa2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029aa6:	4033      	ands	r3, r6
 8029aa8:	4318      	orrs	r0, r3
 8029aaa:	4302      	orrs	r2, r0
 8029aac:	800a      	strh	r2, [r1, #0]
 8029aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029ab2:	2600      	movs	r6, #0
 8029ab4:	e788      	b.n	80299c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8029ab6:	2400      	movs	r4, #0
 8029ab8:	4626      	mov	r6, r4
 8029aba:	e799      	b.n	80299f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029abc:	2400      	movs	r4, #0
 8029abe:	e797      	b.n	80299f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029ac0:	463c      	mov	r4, r7
 8029ac2:	e795      	b.n	80299f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029ac4:	2500      	movs	r5, #0
 8029ac6:	e7ac      	b.n	8029a22 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8029ac8:	2300      	movs	r3, #0
 8029aca:	461d      	mov	r5, r3
 8029acc:	e7bd      	b.n	8029a4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029ace:	4663      	mov	r3, ip
 8029ad0:	4665      	mov	r5, ip
 8029ad2:	e7ba      	b.n	8029a4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029ad4:	2300      	movs	r3, #0
 8029ad6:	e7b8      	b.n	8029a4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029ad8:	463b      	mov	r3, r7
 8029ada:	e7b6      	b.n	8029a4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029adc:	880d      	ldrh	r5, [r1, #0]
 8029ade:	b29f      	uxth	r7, r3
 8029ae0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029ae4:	43db      	mvns	r3, r3
 8029ae6:	122c      	asrs	r4, r5, #8
 8029ae8:	fb10 f007 	smulbb	r0, r0, r7
 8029aec:	b2db      	uxtb	r3, r3
 8029aee:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029af2:	b2f6      	uxtb	r6, r6
 8029af4:	b2d2      	uxtb	r2, r2
 8029af6:	fb04 0403 	mla	r4, r4, r3, r0
 8029afa:	10e8      	asrs	r0, r5, #3
 8029afc:	fb12 f207 	smulbb	r2, r2, r7
 8029b00:	00ed      	lsls	r5, r5, #3
 8029b02:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029b06:	b2a4      	uxth	r4, r4
 8029b08:	fb16 f607 	smulbb	r6, r6, r7
 8029b0c:	b2ed      	uxtb	r5, r5
 8029b0e:	fb00 6603 	mla	r6, r0, r3, r6
 8029b12:	fb05 2303 	mla	r3, r5, r3, r2
 8029b16:	b2b0      	uxth	r0, r6
 8029b18:	b29a      	uxth	r2, r3
 8029b1a:	1c63      	adds	r3, r4, #1
 8029b1c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029b20:	1c53      	adds	r3, r2, #1
 8029b22:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029b26:	1c42      	adds	r2, r0, #1
 8029b28:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029b2c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029b30:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029b34:	0940      	lsrs	r0, r0, #5
 8029b36:	4323      	orrs	r3, r4
 8029b38:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029b3c:	4303      	orrs	r3, r0
 8029b3e:	800b      	strh	r3, [r1, #0]
 8029b40:	e7b5      	b.n	8029aae <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029b42:	bf00      	nop
 8029b44:	20015fc4 	.word	0x20015fc4
 8029b48:	00fff800 	.word	0x00fff800

08029b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b50:	b097      	sub	sp, #92	; 0x5c
 8029b52:	9214      	str	r2, [sp, #80]	; 0x50
 8029b54:	9309      	str	r3, [sp, #36]	; 0x24
 8029b56:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8029b58:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8029b5c:	9015      	str	r0, [sp, #84]	; 0x54
 8029b5e:	910d      	str	r1, [sp, #52]	; 0x34
 8029b60:	6850      	ldr	r0, [r2, #4]
 8029b62:	930f      	str	r3, [sp, #60]	; 0x3c
 8029b64:	6812      	ldr	r2, [r2, #0]
 8029b66:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8029b6a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8029b6e:	fb00 1303 	mla	r3, r0, r3, r1
 8029b72:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029b76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029b78:	689b      	ldr	r3, [r3, #8]
 8029b7a:	3301      	adds	r3, #1
 8029b7c:	f023 0301 	bic.w	r3, r3, #1
 8029b80:	930a      	str	r3, [sp, #40]	; 0x28
 8029b82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029b84:	681f      	ldr	r7, [r3, #0]
 8029b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029b88:	2b00      	cmp	r3, #0
 8029b8a:	dc03      	bgt.n	8029b94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029b8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029b8e:	2b00      	cmp	r3, #0
 8029b90:	f340 8289 	ble.w	802a0a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8029b94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029b96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029b9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029b9e:	1e48      	subs	r0, r1, #1
 8029ba0:	f102 3cff 	add.w	ip, r2, #4294967295
 8029ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029ba6:	2b00      	cmp	r3, #0
 8029ba8:	f340 80c5 	ble.w	8029d36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029bac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029bb0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029bb4:	d406      	bmi.n	8029bc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029bb6:	4586      	cmp	lr, r0
 8029bb8:	da04      	bge.n	8029bc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029bba:	2b00      	cmp	r3, #0
 8029bbc:	db02      	blt.n	8029bc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029bbe:	4563      	cmp	r3, ip
 8029bc0:	f2c0 80ba 	blt.w	8029d38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8029bc4:	f11e 0e01 	adds.w	lr, lr, #1
 8029bc8:	f100 80ab 	bmi.w	8029d22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029bcc:	4571      	cmp	r1, lr
 8029bce:	f2c0 80a8 	blt.w	8029d22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029bd2:	3301      	adds	r3, #1
 8029bd4:	f100 80a5 	bmi.w	8029d22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029bd8:	429a      	cmp	r2, r3
 8029bda:	f2c0 80a2 	blt.w	8029d22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029be0:	46c8      	mov	r8, r9
 8029be2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8029be6:	930e      	str	r3, [sp, #56]	; 0x38
 8029be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029bea:	2b00      	cmp	r3, #0
 8029bec:	f340 80c4 	ble.w	8029d78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8029bf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029bf2:	1430      	asrs	r0, r6, #16
 8029bf4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029bf8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029bfc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029c00:	1423      	asrs	r3, r4, #16
 8029c02:	f100 814f 	bmi.w	8029ea4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029c06:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029c0a:	455b      	cmp	r3, fp
 8029c0c:	f280 814a 	bge.w	8029ea4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029c10:	2800      	cmp	r0, #0
 8029c12:	f2c0 8147 	blt.w	8029ea4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029c16:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029c1a:	4558      	cmp	r0, fp
 8029c1c:	f280 8142 	bge.w	8029ea4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029c20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029c22:	fb00 3305 	mla	r3, r0, r5, r3
 8029c26:	0858      	lsrs	r0, r3, #1
 8029c28:	07dd      	lsls	r5, r3, #31
 8029c2a:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029c2e:	bf54      	ite	pl
 8029c30:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029c34:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029c38:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029c3c:	fa5f fc8c 	uxtb.w	ip, ip
 8029c40:	2a00      	cmp	r2, #0
 8029c42:	f000 80dd 	beq.w	8029e00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8029c46:	1c58      	adds	r0, r3, #1
 8029c48:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029c4c:	07c0      	lsls	r0, r0, #31
 8029c4e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029c52:	bf54      	ite	pl
 8029c54:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029c58:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029c5c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029c60:	fa5f f08e 	uxtb.w	r0, lr
 8029c64:	9010      	str	r0, [sp, #64]	; 0x40
 8029c66:	b1d9      	cbz	r1, 8029ca0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8029c68:	4453      	add	r3, sl
 8029c6a:	0858      	lsrs	r0, r3, #1
 8029c6c:	07dd      	lsls	r5, r3, #31
 8029c6e:	f103 0301 	add.w	r3, r3, #1
 8029c72:	5c38      	ldrb	r0, [r7, r0]
 8029c74:	bf54      	ite	pl
 8029c76:	f000 000f 	andpl.w	r0, r0, #15
 8029c7a:	1100      	asrmi	r0, r0, #4
 8029c7c:	07dd      	lsls	r5, r3, #31
 8029c7e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029c82:	b2c0      	uxtb	r0, r0
 8029c84:	900b      	str	r0, [sp, #44]	; 0x2c
 8029c86:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8029c8a:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029c8e:	bf54      	ite	pl
 8029c90:	f00e 030f 	andpl.w	r3, lr, #15
 8029c94:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029c98:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029c9c:	b2db      	uxtb	r3, r3
 8029c9e:	9311      	str	r3, [sp, #68]	; 0x44
 8029ca0:	b292      	uxth	r2, r2
 8029ca2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029ca4:	b289      	uxth	r1, r1
 8029ca6:	fb02 f301 	mul.w	r3, r2, r1
 8029caa:	0112      	lsls	r2, r2, #4
 8029cac:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029cb0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029cb4:	1ad2      	subs	r2, r2, r3
 8029cb6:	b289      	uxth	r1, r1
 8029cb8:	b292      	uxth	r2, r2
 8029cba:	1a40      	subs	r0, r0, r1
 8029cbc:	436a      	muls	r2, r5
 8029cbe:	b280      	uxth	r0, r0
 8029cc0:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029cc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029cc6:	fb01 c102 	mla	r1, r1, r2, ip
 8029cca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8029ccc:	fb03 1302 	mla	r3, r3, r2, r1
 8029cd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029cd4:	b1db      	cbz	r3, 8029d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029cd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029cd8:	4353      	muls	r3, r2
 8029cda:	1c5a      	adds	r2, r3, #1
 8029cdc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029ce0:	4ac6      	ldr	r2, [pc, #792]	; (8029ffc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8029ce2:	121b      	asrs	r3, r3, #8
 8029ce4:	6812      	ldr	r2, [r2, #0]
 8029ce6:	2bff      	cmp	r3, #255	; 0xff
 8029ce8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029cec:	f040 8099 	bne.w	8029e22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8029cf0:	0953      	lsrs	r3, r2, #5
 8029cf2:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8029cf6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029cfa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029cfe:	f02c 0c07 	bic.w	ip, ip, #7
 8029d02:	ea43 0c0c 	orr.w	ip, r3, ip
 8029d06:	ea4c 0202 	orr.w	r2, ip, r2
 8029d0a:	f8a8 2000 	strh.w	r2, [r8]
 8029d0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029d10:	f108 0802 	add.w	r8, r8, #2
 8029d14:	441c      	add	r4, r3
 8029d16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029d18:	441e      	add	r6, r3
 8029d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029d1c:	3b01      	subs	r3, #1
 8029d1e:	930e      	str	r3, [sp, #56]	; 0x38
 8029d20:	e762      	b.n	8029be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029d22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029d24:	f109 0902 	add.w	r9, r9, #2
 8029d28:	441c      	add	r4, r3
 8029d2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029d2c:	441e      	add	r6, r3
 8029d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029d30:	3b01      	subs	r3, #1
 8029d32:	9309      	str	r3, [sp, #36]	; 0x24
 8029d34:	e736      	b.n	8029ba4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029d36:	d024      	beq.n	8029d82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8029d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029d3a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8029d3c:	3b01      	subs	r3, #1
 8029d3e:	fb00 4003 	mla	r0, r0, r3, r4
 8029d42:	1400      	asrs	r0, r0, #16
 8029d44:	f53f af4b 	bmi.w	8029bde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029d48:	3901      	subs	r1, #1
 8029d4a:	4288      	cmp	r0, r1
 8029d4c:	f6bf af47 	bge.w	8029bde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029d50:	9924      	ldr	r1, [sp, #144]	; 0x90
 8029d52:	fb01 6303 	mla	r3, r1, r3, r6
 8029d56:	141b      	asrs	r3, r3, #16
 8029d58:	f53f af41 	bmi.w	8029bde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029d5c:	3a01      	subs	r2, #1
 8029d5e:	4293      	cmp	r3, r2
 8029d60:	f6bf af3d 	bge.w	8029bde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029d64:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8029d68:	46c8      	mov	r8, r9
 8029d6a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8029d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8029d70:	f1bb 0f00 	cmp.w	fp, #0
 8029d74:	f300 80b7 	bgt.w	8029ee6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8029d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029d7a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029d7e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029d84:	2b00      	cmp	r3, #0
 8029d86:	f340 818e 	ble.w	802a0a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8029d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029d8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029d90:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029d94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029d98:	eef0 6a62 	vmov.f32	s13, s5
 8029d9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029da0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029da4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029da8:	ee16 4a90 	vmov	r4, s13
 8029dac:	eef0 6a43 	vmov.f32	s13, s6
 8029db0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029db4:	ee16 6a90 	vmov	r6, s13
 8029db8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029dbc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029dc0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029dc4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029dc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029dcc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029dd0:	ee12 2a90 	vmov	r2, s5
 8029dd4:	eef0 2a47 	vmov.f32	s5, s14
 8029dd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8029ddc:	ee13 2a10 	vmov	r2, s6
 8029de0:	9323      	str	r3, [sp, #140]	; 0x8c
 8029de2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029de4:	eeb0 3a67 	vmov.f32	s6, s15
 8029de8:	fb92 f3f3 	sdiv	r3, r2, r3
 8029dec:	9324      	str	r3, [sp, #144]	; 0x90
 8029dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029df0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029df2:	3b01      	subs	r3, #1
 8029df4:	930d      	str	r3, [sp, #52]	; 0x34
 8029df6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029df8:	bf08      	it	eq
 8029dfa:	4613      	moveq	r3, r2
 8029dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8029dfe:	e6c2      	b.n	8029b86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029e00:	2900      	cmp	r1, #0
 8029e02:	f43f af4d 	beq.w	8029ca0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8029e06:	eb0a 0003 	add.w	r0, sl, r3
 8029e0a:	0843      	lsrs	r3, r0, #1
 8029e0c:	07c0      	lsls	r0, r0, #31
 8029e0e:	5cfb      	ldrb	r3, [r7, r3]
 8029e10:	bf54      	ite	pl
 8029e12:	f003 030f 	andpl.w	r3, r3, #15
 8029e16:	111b      	asrmi	r3, r3, #4
 8029e18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029e1c:	b2db      	uxtb	r3, r3
 8029e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029e20:	e73e      	b.n	8029ca0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8029e22:	f8b8 e000 	ldrh.w	lr, [r8]
 8029e26:	fa1f fb83 	uxth.w	fp, r3
 8029e2a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029e2e:	43db      	mvns	r3, r3
 8029e30:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029e34:	fb11 f10b 	smulbb	r1, r1, fp
 8029e38:	b2db      	uxtb	r3, r3
 8029e3a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029e3e:	fa5f fc8c 	uxtb.w	ip, ip
 8029e42:	b2d2      	uxtb	r2, r2
 8029e44:	fb00 1003 	mla	r0, r0, r3, r1
 8029e48:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029e4c:	fb1c fc0b 	smulbb	ip, ip, fp
 8029e50:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029e54:	b280      	uxth	r0, r0
 8029e56:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029e5a:	fb12 fb0b 	smulbb	fp, r2, fp
 8029e5e:	fa5f fe8e 	uxtb.w	lr, lr
 8029e62:	fb01 cc03 	mla	ip, r1, r3, ip
 8029e66:	fb0e bb03 	mla	fp, lr, r3, fp
 8029e6a:	1c43      	adds	r3, r0, #1
 8029e6c:	fa1f fc8c 	uxth.w	ip, ip
 8029e70:	fa1f fb8b 	uxth.w	fp, fp
 8029e74:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029e78:	f10c 0101 	add.w	r1, ip, #1
 8029e7c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8029e80:	f10b 0001 	add.w	r0, fp, #1
 8029e84:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029e88:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029e8c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029e90:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029e94:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029e98:	4318      	orrs	r0, r3
 8029e9a:	ea40 000c 	orr.w	r0, r0, ip
 8029e9e:	f8a8 0000 	strh.w	r0, [r8]
 8029ea2:	e734      	b.n	8029d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029ea4:	f113 0b01 	adds.w	fp, r3, #1
 8029ea8:	f53f af31 	bmi.w	8029d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029eac:	45dc      	cmp	ip, fp
 8029eae:	f6ff af2e 	blt.w	8029d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029eb2:	f110 0b01 	adds.w	fp, r0, #1
 8029eb6:	f53f af2a 	bmi.w	8029d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029eba:	45de      	cmp	lr, fp
 8029ebc:	f6ff af27 	blt.w	8029d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029ec0:	9302      	str	r3, [sp, #8]
 8029ec2:	fa0f f38e 	sxth.w	r3, lr
 8029ec6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029ec8:	9301      	str	r3, [sp, #4]
 8029eca:	fa0f f38c 	sxth.w	r3, ip
 8029ece:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029ed2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8029ed6:	9300      	str	r3, [sp, #0]
 8029ed8:	463a      	mov	r2, r7
 8029eda:	4653      	mov	r3, sl
 8029edc:	4641      	mov	r1, r8
 8029ede:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029ee0:	f7ff fd4c 	bl	802997c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8029ee4:	e713      	b.n	8029d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029ee6:	1422      	asrs	r2, r4, #16
 8029ee8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029eea:	1433      	asrs	r3, r6, #16
 8029eec:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029ef0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029ef4:	fb05 2303 	mla	r3, r5, r3, r2
 8029ef8:	085a      	lsrs	r2, r3, #1
 8029efa:	07dd      	lsls	r5, r3, #31
 8029efc:	5cba      	ldrb	r2, [r7, r2]
 8029efe:	bf54      	ite	pl
 8029f00:	f002 020f 	andpl.w	r2, r2, #15
 8029f04:	1112      	asrmi	r2, r2, #4
 8029f06:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029f0a:	b2d2      	uxtb	r2, r2
 8029f0c:	2900      	cmp	r1, #0
 8029f0e:	d077      	beq.n	802a000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8029f10:	f103 0e01 	add.w	lr, r3, #1
 8029f14:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8029f18:	f01e 0f01 	tst.w	lr, #1
 8029f1c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029f20:	bf0c      	ite	eq
 8029f22:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029f26:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8029f2a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029f2e:	fa5f f58c 	uxtb.w	r5, ip
 8029f32:	9512      	str	r5, [sp, #72]	; 0x48
 8029f34:	b308      	cbz	r0, 8029f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8029f36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029f38:	442b      	add	r3, r5
 8029f3a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029f3e:	07dd      	lsls	r5, r3, #31
 8029f40:	f103 0301 	add.w	r3, r3, #1
 8029f44:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029f48:	bf54      	ite	pl
 8029f4a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029f4e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029f52:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029f56:	fa5f f58c 	uxtb.w	r5, ip
 8029f5a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029f5e:	950c      	str	r5, [sp, #48]	; 0x30
 8029f60:	07dd      	lsls	r5, r3, #31
 8029f62:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029f66:	bf54      	ite	pl
 8029f68:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029f6c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029f70:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029f74:	fa5f f38c 	uxtb.w	r3, ip
 8029f78:	9313      	str	r3, [sp, #76]	; 0x4c
 8029f7a:	b289      	uxth	r1, r1
 8029f7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029f7e:	b280      	uxth	r0, r0
 8029f80:	fb01 f300 	mul.w	r3, r1, r0
 8029f84:	0109      	lsls	r1, r1, #4
 8029f86:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8029f8a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8029f8e:	1ac9      	subs	r1, r1, r3
 8029f90:	b280      	uxth	r0, r0
 8029f92:	b289      	uxth	r1, r1
 8029f94:	ebac 0c00 	sub.w	ip, ip, r0
 8029f98:	4369      	muls	r1, r5
 8029f9a:	fa1f fc8c 	uxth.w	ip, ip
 8029f9e:	fb02 120c 	mla	r2, r2, ip, r1
 8029fa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029fa4:	fb00 2001 	mla	r0, r0, r1, r2
 8029fa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8029faa:	fb03 0302 	mla	r3, r3, r2, r0
 8029fae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029fb2:	b1d3      	cbz	r3, 8029fea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8029fb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029fb6:	4353      	muls	r3, r2
 8029fb8:	1c5a      	adds	r2, r3, #1
 8029fba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029fbe:	4a0f      	ldr	r2, [pc, #60]	; (8029ffc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8029fc0:	121b      	asrs	r3, r3, #8
 8029fc2:	6812      	ldr	r2, [r2, #0]
 8029fc4:	2bff      	cmp	r3, #255	; 0xff
 8029fc6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029fca:	d12d      	bne.n	802a028 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8029fcc:	0953      	lsrs	r3, r2, #5
 8029fce:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8029fd2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029fd6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029fda:	f02c 0c07 	bic.w	ip, ip, #7
 8029fde:	ea43 0c0c 	orr.w	ip, r3, ip
 8029fe2:	ea4c 0202 	orr.w	r2, ip, r2
 8029fe6:	f8a8 2000 	strh.w	r2, [r8]
 8029fea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029fec:	f108 0802 	add.w	r8, r8, #2
 8029ff0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029ff4:	441c      	add	r4, r3
 8029ff6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029ff8:	441e      	add	r6, r3
 8029ffa:	e6b9      	b.n	8029d70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8029ffc:	20015fc4 	.word	0x20015fc4
 802a000:	2800      	cmp	r0, #0
 802a002:	d0ba      	beq.n	8029f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802a004:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a006:	442b      	add	r3, r5
 802a008:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a00c:	07db      	lsls	r3, r3, #31
 802a00e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a012:	bf54      	ite	pl
 802a014:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a018:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a01c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a020:	fa5f f38c 	uxtb.w	r3, ip
 802a024:	930c      	str	r3, [sp, #48]	; 0x30
 802a026:	e7a8      	b.n	8029f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802a028:	f8b8 e000 	ldrh.w	lr, [r8]
 802a02c:	fa1f fa83 	uxth.w	sl, r3
 802a030:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a034:	43db      	mvns	r3, r3
 802a036:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a03a:	fb11 f10a 	smulbb	r1, r1, sl
 802a03e:	b2db      	uxtb	r3, r3
 802a040:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a044:	b2d2      	uxtb	r2, r2
 802a046:	fa5f fc8c 	uxtb.w	ip, ip
 802a04a:	fb00 1003 	mla	r0, r0, r3, r1
 802a04e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a052:	fb12 f20a 	smulbb	r2, r2, sl
 802a056:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a05a:	b280      	uxth	r0, r0
 802a05c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a060:	fb1c fc0a 	smulbb	ip, ip, sl
 802a064:	fa5f fe8e 	uxtb.w	lr, lr
 802a068:	fb0e 2203 	mla	r2, lr, r3, r2
 802a06c:	fb01 cc03 	mla	ip, r1, r3, ip
 802a070:	1c43      	adds	r3, r0, #1
 802a072:	b292      	uxth	r2, r2
 802a074:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a078:	1c51      	adds	r1, r2, #1
 802a07a:	fa1f fc8c 	uxth.w	ip, ip
 802a07e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802a082:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a086:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a08a:	4308      	orrs	r0, r1
 802a08c:	f10c 0101 	add.w	r1, ip, #1
 802a090:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a094:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a098:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a09c:	ea40 000c 	orr.w	r0, r0, ip
 802a0a0:	f8a8 0000 	strh.w	r0, [r8]
 802a0a4:	e7a1      	b.n	8029fea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802a0a6:	b017      	add	sp, #92	; 0x5c
 802a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a0ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a0b0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802a0b4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a0b8:	2d00      	cmp	r5, #0
 802a0ba:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a0be:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802a0c2:	fb05 0e03 	mla	lr, r5, r3, r0
 802a0c6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802a0ca:	f2c0 80b0 	blt.w	802a22e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a0ce:	45a9      	cmp	r9, r5
 802a0d0:	f340 80ad 	ble.w	802a22e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a0d4:	2800      	cmp	r0, #0
 802a0d6:	f2c0 80a8 	blt.w	802a22a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a0da:	4580      	cmp	r8, r0
 802a0dc:	f340 80a5 	ble.w	802a22a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a0e0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a0e4:	f01e 0f01 	tst.w	lr, #1
 802a0e8:	5d16      	ldrb	r6, [r2, r4]
 802a0ea:	bf0c      	ite	eq
 802a0ec:	f006 060f 	andeq.w	r6, r6, #15
 802a0f0:	1136      	asrne	r6, r6, #4
 802a0f2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a0f6:	b2f6      	uxtb	r6, r6
 802a0f8:	1c44      	adds	r4, r0, #1
 802a0fa:	f100 809b 	bmi.w	802a234 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a0fe:	45a0      	cmp	r8, r4
 802a100:	f340 8098 	ble.w	802a234 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a104:	2f00      	cmp	r7, #0
 802a106:	f000 8097 	beq.w	802a238 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802a10a:	f10e 0a01 	add.w	sl, lr, #1
 802a10e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a112:	f01a 0f01 	tst.w	sl, #1
 802a116:	5d14      	ldrb	r4, [r2, r4]
 802a118:	bf0c      	ite	eq
 802a11a:	f004 040f 	andeq.w	r4, r4, #15
 802a11e:	1124      	asrne	r4, r4, #4
 802a120:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a124:	b2e4      	uxtb	r4, r4
 802a126:	3501      	adds	r5, #1
 802a128:	f100 808a 	bmi.w	802a240 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a12c:	45a9      	cmp	r9, r5
 802a12e:	f340 8087 	ble.w	802a240 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a132:	f1bc 0f00 	cmp.w	ip, #0
 802a136:	f000 8086 	beq.w	802a246 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802a13a:	2800      	cmp	r0, #0
 802a13c:	db7e      	blt.n	802a23c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a13e:	4580      	cmp	r8, r0
 802a140:	dd7c      	ble.n	802a23c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a142:	eb03 090e 	add.w	r9, r3, lr
 802a146:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a14a:	f019 0f01 	tst.w	r9, #1
 802a14e:	5d55      	ldrb	r5, [r2, r5]
 802a150:	bf0c      	ite	eq
 802a152:	f005 050f 	andeq.w	r5, r5, #15
 802a156:	112d      	asrne	r5, r5, #4
 802a158:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a15c:	b2ed      	uxtb	r5, r5
 802a15e:	3001      	adds	r0, #1
 802a160:	d474      	bmi.n	802a24c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a162:	4580      	cmp	r8, r0
 802a164:	dd72      	ble.n	802a24c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a166:	2f00      	cmp	r7, #0
 802a168:	d072      	beq.n	802a250 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a16a:	3301      	adds	r3, #1
 802a16c:	449e      	add	lr, r3
 802a16e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a172:	f01e 0f01 	tst.w	lr, #1
 802a176:	5cd0      	ldrb	r0, [r2, r3]
 802a178:	bf0c      	ite	eq
 802a17a:	f000 000f 	andeq.w	r0, r0, #15
 802a17e:	1100      	asrne	r0, r0, #4
 802a180:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a184:	b2c3      	uxtb	r3, r0
 802a186:	b2ba      	uxth	r2, r7
 802a188:	fa1f fc8c 	uxth.w	ip, ip
 802a18c:	fb02 f00c 	mul.w	r0, r2, ip
 802a190:	0112      	lsls	r2, r2, #4
 802a192:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a196:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802a19a:	1a12      	subs	r2, r2, r0
 802a19c:	fa1f fc8c 	uxth.w	ip, ip
 802a1a0:	b292      	uxth	r2, r2
 802a1a2:	eba7 070c 	sub.w	r7, r7, ip
 802a1a6:	4362      	muls	r2, r4
 802a1a8:	b2bf      	uxth	r7, r7
 802a1aa:	fb06 2207 	mla	r2, r6, r7, r2
 802a1ae:	fb0c 2505 	mla	r5, ip, r5, r2
 802a1b2:	fb00 5303 	mla	r3, r0, r3, r5
 802a1b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a1ba:	b3a3      	cbz	r3, 802a226 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802a1bc:	4a25      	ldr	r2, [pc, #148]	; (802a254 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802a1be:	880e      	ldrh	r6, [r1, #0]
 802a1c0:	6815      	ldr	r5, [r2, #0]
 802a1c2:	b29a      	uxth	r2, r3
 802a1c4:	1234      	asrs	r4, r6, #8
 802a1c6:	43db      	mvns	r3, r3
 802a1c8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a1cc:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a1d0:	b2db      	uxtb	r3, r3
 802a1d2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802a1d6:	fb10 f002 	smulbb	r0, r0, r2
 802a1da:	b2ed      	uxtb	r5, r5
 802a1dc:	fb17 f702 	smulbb	r7, r7, r2
 802a1e0:	fb04 0403 	mla	r4, r4, r3, r0
 802a1e4:	10f0      	asrs	r0, r6, #3
 802a1e6:	fb15 f202 	smulbb	r2, r5, r2
 802a1ea:	00f6      	lsls	r6, r6, #3
 802a1ec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a1f0:	b2a4      	uxth	r4, r4
 802a1f2:	b2f6      	uxtb	r6, r6
 802a1f4:	fb00 7003 	mla	r0, r0, r3, r7
 802a1f8:	fb06 2303 	mla	r3, r6, r3, r2
 802a1fc:	b280      	uxth	r0, r0
 802a1fe:	b29a      	uxth	r2, r3
 802a200:	1c63      	adds	r3, r4, #1
 802a202:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a206:	1c53      	adds	r3, r2, #1
 802a208:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a20c:	1c42      	adds	r2, r0, #1
 802a20e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802a212:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a216:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a21a:	0940      	lsrs	r0, r0, #5
 802a21c:	4323      	orrs	r3, r4
 802a21e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a222:	4303      	orrs	r3, r0
 802a224:	800b      	strh	r3, [r1, #0]
 802a226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a22a:	2600      	movs	r6, #0
 802a22c:	e764      	b.n	802a0f8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802a22e:	2400      	movs	r4, #0
 802a230:	4626      	mov	r6, r4
 802a232:	e778      	b.n	802a126 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a234:	2400      	movs	r4, #0
 802a236:	e776      	b.n	802a126 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a238:	463c      	mov	r4, r7
 802a23a:	e774      	b.n	802a126 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a23c:	2500      	movs	r5, #0
 802a23e:	e78e      	b.n	802a15e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802a240:	2300      	movs	r3, #0
 802a242:	461d      	mov	r5, r3
 802a244:	e79f      	b.n	802a186 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a246:	4663      	mov	r3, ip
 802a248:	4665      	mov	r5, ip
 802a24a:	e79c      	b.n	802a186 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a24c:	2300      	movs	r3, #0
 802a24e:	e79a      	b.n	802a186 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a250:	463b      	mov	r3, r7
 802a252:	e798      	b.n	802a186 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a254:	20015fc4 	.word	0x20015fc4

0802a258 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a25c:	b093      	sub	sp, #76	; 0x4c
 802a25e:	461d      	mov	r5, r3
 802a260:	920c      	str	r2, [sp, #48]	; 0x30
 802a262:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802a264:	9011      	str	r0, [sp, #68]	; 0x44
 802a266:	9107      	str	r1, [sp, #28]
 802a268:	6850      	ldr	r0, [r2, #4]
 802a26a:	6812      	ldr	r2, [r2, #0]
 802a26c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802a270:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802a274:	fb00 1303 	mla	r3, r0, r3, r1
 802a278:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a27c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a27e:	689b      	ldr	r3, [r3, #8]
 802a280:	3301      	adds	r3, #1
 802a282:	f023 0301 	bic.w	r3, r3, #1
 802a286:	9306      	str	r3, [sp, #24]
 802a288:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a28a:	681f      	ldr	r7, [r3, #0]
 802a28c:	9b07      	ldr	r3, [sp, #28]
 802a28e:	2b00      	cmp	r3, #0
 802a290:	dc03      	bgt.n	802a29a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802a292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a294:	2b00      	cmp	r3, #0
 802a296:	f340 8267 	ble.w	802a768 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802a29a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a29c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a2a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a2a4:	1e48      	subs	r0, r1, #1
 802a2a6:	f102 3cff 	add.w	ip, r2, #4294967295
 802a2aa:	2d00      	cmp	r5, #0
 802a2ac:	f340 80b7 	ble.w	802a41e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a2b0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a2b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a2b8:	d406      	bmi.n	802a2c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a2ba:	4586      	cmp	lr, r0
 802a2bc:	da04      	bge.n	802a2c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a2be:	2b00      	cmp	r3, #0
 802a2c0:	db02      	blt.n	802a2c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a2c2:	4563      	cmp	r3, ip
 802a2c4:	f2c0 80ac 	blt.w	802a420 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802a2c8:	f11e 0e01 	adds.w	lr, lr, #1
 802a2cc:	f100 809f 	bmi.w	802a40e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a2d0:	4571      	cmp	r1, lr
 802a2d2:	f2c0 809c 	blt.w	802a40e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a2d6:	3301      	adds	r3, #1
 802a2d8:	f100 8099 	bmi.w	802a40e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a2dc:	429a      	cmp	r2, r3
 802a2de:	f2c0 8096 	blt.w	802a40e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a2e2:	46c8      	mov	r8, r9
 802a2e4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a2e8:	9509      	str	r5, [sp, #36]	; 0x24
 802a2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a2ec:	2b00      	cmp	r3, #0
 802a2ee:	f340 80b5 	ble.w	802a45c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802a2f2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a2f6:	1430      	asrs	r0, r6, #16
 802a2f8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a2fc:	9308      	str	r3, [sp, #32]
 802a2fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a300:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a304:	1423      	asrs	r3, r4, #16
 802a306:	f100 813f 	bmi.w	802a588 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a30a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a30e:	455b      	cmp	r3, fp
 802a310:	f280 813a 	bge.w	802a588 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a314:	2800      	cmp	r0, #0
 802a316:	f2c0 8137 	blt.w	802a588 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a31a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a31e:	4558      	cmp	r0, fp
 802a320:	f280 8132 	bge.w	802a588 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a324:	9a06      	ldr	r2, [sp, #24]
 802a326:	fb00 3302 	mla	r3, r0, r2, r3
 802a32a:	0858      	lsrs	r0, r3, #1
 802a32c:	07da      	lsls	r2, r3, #31
 802a32e:	9a08      	ldr	r2, [sp, #32]
 802a330:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a334:	bf54      	ite	pl
 802a336:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a33a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a33e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a342:	fa5f fc8c 	uxtb.w	ip, ip
 802a346:	2a00      	cmp	r2, #0
 802a348:	f000 80cc 	beq.w	802a4e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802a34c:	1c58      	adds	r0, r3, #1
 802a34e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a352:	07c0      	lsls	r0, r0, #31
 802a354:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a358:	bf54      	ite	pl
 802a35a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a35e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a362:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a366:	fa5f fe8e 	uxtb.w	lr, lr
 802a36a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802a36e:	b1b9      	cbz	r1, 802a3a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a370:	4453      	add	r3, sl
 802a372:	0858      	lsrs	r0, r3, #1
 802a374:	07da      	lsls	r2, r3, #31
 802a376:	5c38      	ldrb	r0, [r7, r0]
 802a378:	bf54      	ite	pl
 802a37a:	f000 000f 	andpl.w	r0, r0, #15
 802a37e:	1100      	asrmi	r0, r0, #4
 802a380:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a384:	b2c0      	uxtb	r0, r0
 802a386:	900a      	str	r0, [sp, #40]	; 0x28
 802a388:	1c58      	adds	r0, r3, #1
 802a38a:	0843      	lsrs	r3, r0, #1
 802a38c:	07c2      	lsls	r2, r0, #31
 802a38e:	5cfb      	ldrb	r3, [r7, r3]
 802a390:	bf54      	ite	pl
 802a392:	f003 030f 	andpl.w	r3, r3, #15
 802a396:	111b      	asrmi	r3, r3, #4
 802a398:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a39c:	b2db      	uxtb	r3, r3
 802a39e:	930e      	str	r3, [sp, #56]	; 0x38
 802a3a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a3a4:	b289      	uxth	r1, r1
 802a3a6:	fb02 f301 	mul.w	r3, r2, r1
 802a3aa:	0112      	lsls	r2, r2, #4
 802a3ac:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a3b0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a3b4:	1ad2      	subs	r2, r2, r3
 802a3b6:	b289      	uxth	r1, r1
 802a3b8:	b292      	uxth	r2, r2
 802a3ba:	1a40      	subs	r0, r0, r1
 802a3bc:	fa1f fe80 	uxth.w	lr, r0
 802a3c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a3c2:	4342      	muls	r2, r0
 802a3c4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a3c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a3ca:	fb01 c102 	mla	r1, r1, r2, ip
 802a3ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a3d0:	fb03 1302 	mla	r3, r3, r2, r1
 802a3d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a3d8:	2bff      	cmp	r3, #255	; 0xff
 802a3da:	f040 8094 	bne.w	802a506 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802a3de:	4bbf      	ldr	r3, [pc, #764]	; (802a6dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a3e0:	681a      	ldr	r2, [r3, #0]
 802a3e2:	4bbf      	ldr	r3, [pc, #764]	; (802a6e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802a3e4:	0951      	lsrs	r1, r2, #5
 802a3e6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a3ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a3ee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a3f2:	430b      	orrs	r3, r1
 802a3f4:	4313      	orrs	r3, r2
 802a3f6:	f8a8 3000 	strh.w	r3, [r8]
 802a3fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a3fc:	f108 0802 	add.w	r8, r8, #2
 802a400:	441c      	add	r4, r3
 802a402:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a404:	441e      	add	r6, r3
 802a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a408:	3b01      	subs	r3, #1
 802a40a:	9309      	str	r3, [sp, #36]	; 0x24
 802a40c:	e76d      	b.n	802a2ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a40e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a410:	3d01      	subs	r5, #1
 802a412:	f109 0902 	add.w	r9, r9, #2
 802a416:	441c      	add	r4, r3
 802a418:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a41a:	441e      	add	r6, r3
 802a41c:	e745      	b.n	802a2aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802a41e:	d021      	beq.n	802a464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802a420:	1e6b      	subs	r3, r5, #1
 802a422:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802a424:	fb00 4003 	mla	r0, r0, r3, r4
 802a428:	1400      	asrs	r0, r0, #16
 802a42a:	f53f af5a 	bmi.w	802a2e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a42e:	3901      	subs	r1, #1
 802a430:	4288      	cmp	r0, r1
 802a432:	f6bf af56 	bge.w	802a2e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a436:	9920      	ldr	r1, [sp, #128]	; 0x80
 802a438:	fb01 6303 	mla	r3, r1, r3, r6
 802a43c:	141b      	asrs	r3, r3, #16
 802a43e:	f53f af50 	bmi.w	802a2e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a442:	3a01      	subs	r2, #1
 802a444:	4293      	cmp	r3, r2
 802a446:	f6bf af4c 	bge.w	802a2e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a44a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a44e:	46a8      	mov	r8, r5
 802a450:	46ce      	mov	lr, r9
 802a452:	9308      	str	r3, [sp, #32]
 802a454:	f1b8 0f00 	cmp.w	r8, #0
 802a458:	f300 80b6 	bgt.w	802a5c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802a45c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a460:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a464:	9b07      	ldr	r3, [sp, #28]
 802a466:	2b00      	cmp	r3, #0
 802a468:	f340 817e 	ble.w	802a768 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802a46c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a470:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a472:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a476:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a47a:	eef0 6a62 	vmov.f32	s13, s5
 802a47e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a482:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a486:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a48a:	ee16 4a90 	vmov	r4, s13
 802a48e:	eef0 6a43 	vmov.f32	s13, s6
 802a492:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a496:	ee16 6a90 	vmov	r6, s13
 802a49a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a49e:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a4a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a4a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a4aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a4ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a4b2:	ee12 2a90 	vmov	r2, s5
 802a4b6:	eef0 2a47 	vmov.f32	s5, s14
 802a4ba:	fb92 f3f3 	sdiv	r3, r2, r3
 802a4be:	ee13 2a10 	vmov	r2, s6
 802a4c2:	931f      	str	r3, [sp, #124]	; 0x7c
 802a4c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a4c6:	eeb0 3a67 	vmov.f32	s6, s15
 802a4ca:	fb92 f3f3 	sdiv	r3, r2, r3
 802a4ce:	9320      	str	r3, [sp, #128]	; 0x80
 802a4d0:	9b07      	ldr	r3, [sp, #28]
 802a4d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a4d4:	3b01      	subs	r3, #1
 802a4d6:	9307      	str	r3, [sp, #28]
 802a4d8:	bf08      	it	eq
 802a4da:	4615      	moveq	r5, r2
 802a4dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a4de:	bf18      	it	ne
 802a4e0:	461d      	movne	r5, r3
 802a4e2:	e6d3      	b.n	802a28c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802a4e4:	2900      	cmp	r1, #0
 802a4e6:	f43f af5b 	beq.w	802a3a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a4ea:	eb0a 0003 	add.w	r0, sl, r3
 802a4ee:	0843      	lsrs	r3, r0, #1
 802a4f0:	07c0      	lsls	r0, r0, #31
 802a4f2:	5cfb      	ldrb	r3, [r7, r3]
 802a4f4:	bf54      	ite	pl
 802a4f6:	f003 030f 	andpl.w	r3, r3, #15
 802a4fa:	111b      	asrmi	r3, r3, #4
 802a4fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a500:	b2db      	uxtb	r3, r3
 802a502:	930a      	str	r3, [sp, #40]	; 0x28
 802a504:	e74c      	b.n	802a3a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a506:	2b00      	cmp	r3, #0
 802a508:	f43f af77 	beq.w	802a3fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a50c:	4a73      	ldr	r2, [pc, #460]	; (802a6dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a50e:	fa1f fe83 	uxth.w	lr, r3
 802a512:	f8b8 c000 	ldrh.w	ip, [r8]
 802a516:	43db      	mvns	r3, r3
 802a518:	6810      	ldr	r0, [r2, #0]
 802a51a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a51e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a522:	b2db      	uxtb	r3, r3
 802a524:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a528:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a52c:	fb12 f20e 	smulbb	r2, r2, lr
 802a530:	b2c0      	uxtb	r0, r0
 802a532:	fb1b fb0e 	smulbb	fp, fp, lr
 802a536:	fb01 2103 	mla	r1, r1, r3, r2
 802a53a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a53e:	fb10 fe0e 	smulbb	lr, r0, lr
 802a542:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a546:	b289      	uxth	r1, r1
 802a548:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a54c:	fa5f fc8c 	uxtb.w	ip, ip
 802a550:	fb02 b203 	mla	r2, r2, r3, fp
 802a554:	1c48      	adds	r0, r1, #1
 802a556:	fb0c e303 	mla	r3, ip, r3, lr
 802a55a:	b292      	uxth	r2, r2
 802a55c:	b29b      	uxth	r3, r3
 802a55e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a562:	f102 0b01 	add.w	fp, r2, #1
 802a566:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802a56a:	1c59      	adds	r1, r3, #1
 802a56c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a570:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a574:	0952      	lsrs	r2, r2, #5
 802a576:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a57a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a57e:	4301      	orrs	r1, r0
 802a580:	4311      	orrs	r1, r2
 802a582:	f8a8 1000 	strh.w	r1, [r8]
 802a586:	e738      	b.n	802a3fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a588:	f113 0b01 	adds.w	fp, r3, #1
 802a58c:	f53f af35 	bmi.w	802a3fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a590:	45dc      	cmp	ip, fp
 802a592:	f6ff af32 	blt.w	802a3fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a596:	f110 0b01 	adds.w	fp, r0, #1
 802a59a:	f53f af2e 	bmi.w	802a3fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a59e:	45de      	cmp	lr, fp
 802a5a0:	f6ff af2b 	blt.w	802a3fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a5a4:	9302      	str	r3, [sp, #8]
 802a5a6:	fa0f f38e 	sxth.w	r3, lr
 802a5aa:	9a08      	ldr	r2, [sp, #32]
 802a5ac:	9301      	str	r3, [sp, #4]
 802a5ae:	fa0f f38c 	sxth.w	r3, ip
 802a5b2:	9105      	str	r1, [sp, #20]
 802a5b4:	4641      	mov	r1, r8
 802a5b6:	9300      	str	r3, [sp, #0]
 802a5b8:	4653      	mov	r3, sl
 802a5ba:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a5be:	463a      	mov	r2, r7
 802a5c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 802a5c2:	f7ff fd73 	bl	802a0ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a5c6:	e718      	b.n	802a3fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a5c8:	1422      	asrs	r2, r4, #16
 802a5ca:	9906      	ldr	r1, [sp, #24]
 802a5cc:	1433      	asrs	r3, r6, #16
 802a5ce:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a5d2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a5d6:	fb01 2303 	mla	r3, r1, r3, r2
 802a5da:	085a      	lsrs	r2, r3, #1
 802a5dc:	07d9      	lsls	r1, r3, #31
 802a5de:	5cba      	ldrb	r2, [r7, r2]
 802a5e0:	bf54      	ite	pl
 802a5e2:	f002 020f 	andpl.w	r2, r2, #15
 802a5e6:	1112      	asrmi	r2, r2, #4
 802a5e8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a5ec:	b2d2      	uxtb	r2, r2
 802a5ee:	2800      	cmp	r0, #0
 802a5f0:	d063      	beq.n	802a6ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802a5f2:	f103 0a01 	add.w	sl, r3, #1
 802a5f6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a5fa:	f01a 0f01 	tst.w	sl, #1
 802a5fe:	5c79      	ldrb	r1, [r7, r1]
 802a600:	bf0c      	ite	eq
 802a602:	f001 010f 	andeq.w	r1, r1, #15
 802a606:	1109      	asrne	r1, r1, #4
 802a608:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a60c:	b2c9      	uxtb	r1, r1
 802a60e:	910f      	str	r1, [sp, #60]	; 0x3c
 802a610:	f1bc 0f00 	cmp.w	ip, #0
 802a614:	d01a      	beq.n	802a64c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802a616:	9908      	ldr	r1, [sp, #32]
 802a618:	440b      	add	r3, r1
 802a61a:	0859      	lsrs	r1, r3, #1
 802a61c:	f013 0f01 	tst.w	r3, #1
 802a620:	f103 0301 	add.w	r3, r3, #1
 802a624:	5c79      	ldrb	r1, [r7, r1]
 802a626:	bf0c      	ite	eq
 802a628:	f001 010f 	andeq.w	r1, r1, #15
 802a62c:	1109      	asrne	r1, r1, #4
 802a62e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a632:	b2c9      	uxtb	r1, r1
 802a634:	910b      	str	r1, [sp, #44]	; 0x2c
 802a636:	0859      	lsrs	r1, r3, #1
 802a638:	07db      	lsls	r3, r3, #31
 802a63a:	5c79      	ldrb	r1, [r7, r1]
 802a63c:	bf54      	ite	pl
 802a63e:	f001 010f 	andpl.w	r1, r1, #15
 802a642:	1109      	asrmi	r1, r1, #4
 802a644:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a648:	b2c9      	uxtb	r1, r1
 802a64a:	9110      	str	r1, [sp, #64]	; 0x40
 802a64c:	b280      	uxth	r0, r0
 802a64e:	fa1f fc8c 	uxth.w	ip, ip
 802a652:	fb00 f30c 	mul.w	r3, r0, ip
 802a656:	0100      	lsls	r0, r0, #4
 802a658:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a65c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802a660:	1ac0      	subs	r0, r0, r3
 802a662:	fa1f fc8c 	uxth.w	ip, ip
 802a666:	b280      	uxth	r0, r0
 802a668:	eba1 010c 	sub.w	r1, r1, ip
 802a66c:	fa1f fa81 	uxth.w	sl, r1
 802a670:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a672:	4348      	muls	r0, r1
 802a674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802a676:	fb02 020a 	mla	r2, r2, sl, r0
 802a67a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a67e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a680:	fb03 c302 	mla	r3, r3, r2, ip
 802a684:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a688:	2bff      	cmp	r3, #255	; 0xff
 802a68a:	d12b      	bne.n	802a6e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802a68c:	4b13      	ldr	r3, [pc, #76]	; (802a6dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a68e:	681a      	ldr	r2, [r3, #0]
 802a690:	4b13      	ldr	r3, [pc, #76]	; (802a6e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802a692:	0951      	lsrs	r1, r2, #5
 802a694:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a698:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a69c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a6a0:	430b      	orrs	r3, r1
 802a6a2:	4313      	orrs	r3, r2
 802a6a4:	f8ae 3000 	strh.w	r3, [lr]
 802a6a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a6aa:	f10e 0e02 	add.w	lr, lr, #2
 802a6ae:	f108 38ff 	add.w	r8, r8, #4294967295
 802a6b2:	441c      	add	r4, r3
 802a6b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a6b6:	441e      	add	r6, r3
 802a6b8:	e6cc      	b.n	802a454 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a6ba:	f1bc 0f00 	cmp.w	ip, #0
 802a6be:	d0c5      	beq.n	802a64c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802a6c0:	9908      	ldr	r1, [sp, #32]
 802a6c2:	440b      	add	r3, r1
 802a6c4:	0859      	lsrs	r1, r3, #1
 802a6c6:	07db      	lsls	r3, r3, #31
 802a6c8:	5c79      	ldrb	r1, [r7, r1]
 802a6ca:	bf54      	ite	pl
 802a6cc:	f001 010f 	andpl.w	r1, r1, #15
 802a6d0:	1109      	asrmi	r1, r1, #4
 802a6d2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a6d6:	b2c9      	uxtb	r1, r1
 802a6d8:	910b      	str	r1, [sp, #44]	; 0x2c
 802a6da:	e7b7      	b.n	802a64c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802a6dc:	20015fc4 	.word	0x20015fc4
 802a6e0:	fffff800 	.word	0xfffff800
 802a6e4:	2b00      	cmp	r3, #0
 802a6e6:	d0df      	beq.n	802a6a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802a6e8:	4a21      	ldr	r2, [pc, #132]	; (802a770 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802a6ea:	fa1f fa83 	uxth.w	sl, r3
 802a6ee:	f8be c000 	ldrh.w	ip, [lr]
 802a6f2:	43db      	mvns	r3, r3
 802a6f4:	6810      	ldr	r0, [r2, #0]
 802a6f6:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a6fa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a6fe:	b2db      	uxtb	r3, r3
 802a700:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a704:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a708:	fb12 f20a 	smulbb	r2, r2, sl
 802a70c:	b2c0      	uxtb	r0, r0
 802a70e:	fb1b fb0a 	smulbb	fp, fp, sl
 802a712:	fb01 2103 	mla	r1, r1, r3, r2
 802a716:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a71a:	fb10 f00a 	smulbb	r0, r0, sl
 802a71e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a722:	b289      	uxth	r1, r1
 802a724:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a728:	fa5f fc8c 	uxtb.w	ip, ip
 802a72c:	fb02 b203 	mla	r2, r2, r3, fp
 802a730:	fb0c 0003 	mla	r0, ip, r3, r0
 802a734:	1c4b      	adds	r3, r1, #1
 802a736:	b292      	uxth	r2, r2
 802a738:	b280      	uxth	r0, r0
 802a73a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a73e:	f100 0b01 	add.w	fp, r0, #1
 802a742:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802a746:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a74a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a74e:	ea4b 0101 	orr.w	r1, fp, r1
 802a752:	f102 0b01 	add.w	fp, r2, #1
 802a756:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a75a:	0952      	lsrs	r2, r2, #5
 802a75c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a760:	4311      	orrs	r1, r2
 802a762:	f8ae 1000 	strh.w	r1, [lr]
 802a766:	e79f      	b.n	802a6a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802a768:	b013      	add	sp, #76	; 0x4c
 802a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a76e:	bf00      	nop
 802a770:	20015fc4 	.word	0x20015fc4

0802a774 <CRC_Lock>:
 802a774:	4a20      	ldr	r2, [pc, #128]	; (802a7f8 <CRC_Lock+0x84>)
 802a776:	b530      	push	{r4, r5, lr}
 802a778:	6813      	ldr	r3, [r2, #0]
 802a77a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802a77e:	f24c 2540 	movw	r5, #49728	; 0xc240
 802a782:	f023 0301 	bic.w	r3, r3, #1
 802a786:	6013      	str	r3, [r2, #0]
 802a788:	4b1c      	ldr	r3, [pc, #112]	; (802a7fc <CRC_Lock+0x88>)
 802a78a:	681a      	ldr	r2, [r3, #0]
 802a78c:	4022      	ands	r2, r4
 802a78e:	42aa      	cmp	r2, r5
 802a790:	d005      	beq.n	802a79e <CRC_Lock+0x2a>
 802a792:	681b      	ldr	r3, [r3, #0]
 802a794:	f24c 2270 	movw	r2, #49776	; 0xc270
 802a798:	4023      	ands	r3, r4
 802a79a:	4293      	cmp	r3, r2
 802a79c:	d124      	bne.n	802a7e8 <CRC_Lock+0x74>
 802a79e:	4b18      	ldr	r3, [pc, #96]	; (802a800 <CRC_Lock+0x8c>)
 802a7a0:	681b      	ldr	r3, [r3, #0]
 802a7a2:	bb0b      	cbnz	r3, 802a7e8 <CRC_Lock+0x74>
 802a7a4:	4b17      	ldr	r3, [pc, #92]	; (802a804 <CRC_Lock+0x90>)
 802a7a6:	681a      	ldr	r2, [r3, #0]
 802a7a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a7ac:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802a7b0:	d00d      	beq.n	802a7ce <CRC_Lock+0x5a>
 802a7b2:	681a      	ldr	r2, [r3, #0]
 802a7b4:	f240 4483 	movw	r4, #1155	; 0x483
 802a7b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a7bc:	42a2      	cmp	r2, r4
 802a7be:	d006      	beq.n	802a7ce <CRC_Lock+0x5a>
 802a7c0:	681b      	ldr	r3, [r3, #0]
 802a7c2:	f240 4285 	movw	r2, #1157	; 0x485
 802a7c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a7ca:	4293      	cmp	r3, r2
 802a7cc:	d10c      	bne.n	802a7e8 <CRC_Lock+0x74>
 802a7ce:	4b0e      	ldr	r3, [pc, #56]	; (802a808 <CRC_Lock+0x94>)
 802a7d0:	2201      	movs	r2, #1
 802a7d2:	601a      	str	r2, [r3, #0]
 802a7d4:	681a      	ldr	r2, [r3, #0]
 802a7d6:	2a00      	cmp	r2, #0
 802a7d8:	d1fc      	bne.n	802a7d4 <CRC_Lock+0x60>
 802a7da:	4b0c      	ldr	r3, [pc, #48]	; (802a80c <CRC_Lock+0x98>)
 802a7dc:	6018      	str	r0, [r3, #0]
 802a7de:	6818      	ldr	r0, [r3, #0]
 802a7e0:	1a43      	subs	r3, r0, r1
 802a7e2:	4258      	negs	r0, r3
 802a7e4:	4158      	adcs	r0, r3
 802a7e6:	bd30      	pop	{r4, r5, pc}
 802a7e8:	4b09      	ldr	r3, [pc, #36]	; (802a810 <CRC_Lock+0x9c>)
 802a7ea:	2201      	movs	r2, #1
 802a7ec:	601a      	str	r2, [r3, #0]
 802a7ee:	681a      	ldr	r2, [r3, #0]
 802a7f0:	2a00      	cmp	r2, #0
 802a7f2:	d1fc      	bne.n	802a7ee <CRC_Lock+0x7a>
 802a7f4:	4b07      	ldr	r3, [pc, #28]	; (802a814 <CRC_Lock+0xa0>)
 802a7f6:	e7f1      	b.n	802a7dc <CRC_Lock+0x68>
 802a7f8:	e0002000 	.word	0xe0002000
 802a7fc:	e000ed00 	.word	0xe000ed00
 802a800:	e0042000 	.word	0xe0042000
 802a804:	5c001000 	.word	0x5c001000
 802a808:	58024c08 	.word	0x58024c08
 802a80c:	58024c00 	.word	0x58024c00
 802a810:	40023008 	.word	0x40023008
 802a814:	40023000 	.word	0x40023000

0802a818 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802a818:	6101      	str	r1, [r0, #16]
 802a81a:	4770      	bx	lr

0802a81c <_ZN8touchgfx8Gestures4tickEv>:
 802a81c:	7b83      	ldrb	r3, [r0, #14]
 802a81e:	b14b      	cbz	r3, 802a834 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802a820:	8903      	ldrh	r3, [r0, #8]
 802a822:	3301      	adds	r3, #1
 802a824:	b29b      	uxth	r3, r3
 802a826:	2b07      	cmp	r3, #7
 802a828:	8103      	strh	r3, [r0, #8]
 802a82a:	bf81      	itttt	hi
 802a82c:	2300      	movhi	r3, #0
 802a82e:	8143      	strhhi	r3, [r0, #10]
 802a830:	8183      	strhhi	r3, [r0, #12]
 802a832:	7383      	strbhi	r3, [r0, #14]
 802a834:	4770      	bx	lr
	...

0802a838 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802a838:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802a83c:	4698      	mov	r8, r3
 802a83e:	8883      	ldrh	r3, [r0, #4]
 802a840:	4604      	mov	r4, r0
 802a842:	4617      	mov	r7, r2
 802a844:	f8ad 3006 	strh.w	r3, [sp, #6]
 802a848:	eba8 0303 	sub.w	r3, r8, r3
 802a84c:	4a19      	ldr	r2, [pc, #100]	; (802a8b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802a84e:	460e      	mov	r6, r1
 802a850:	b21b      	sxth	r3, r3
 802a852:	88c1      	ldrh	r1, [r0, #6]
 802a854:	9200      	str	r2, [sp, #0]
 802a856:	2000      	movs	r0, #0
 802a858:	2b00      	cmp	r3, #0
 802a85a:	8aa2      	ldrh	r2, [r4, #20]
 802a85c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802a860:	bfb8      	it	lt
 802a862:	425b      	neglt	r3, r3
 802a864:	f88d 0004 	strb.w	r0, [sp, #4]
 802a868:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a86c:	b21b      	sxth	r3, r3
 802a86e:	f8ad 800a 	strh.w	r8, [sp, #10]
 802a872:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a876:	4293      	cmp	r3, r2
 802a878:	dc07      	bgt.n	802a88a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802a87a:	1a69      	subs	r1, r5, r1
 802a87c:	b209      	sxth	r1, r1
 802a87e:	2900      	cmp	r1, #0
 802a880:	bfb8      	it	lt
 802a882:	4249      	neglt	r1, r1
 802a884:	b209      	sxth	r1, r1
 802a886:	428a      	cmp	r2, r1
 802a888:	da10      	bge.n	802a8ac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802a88a:	6920      	ldr	r0, [r4, #16]
 802a88c:	4669      	mov	r1, sp
 802a88e:	eba8 0606 	sub.w	r6, r8, r6
 802a892:	1bef      	subs	r7, r5, r7
 802a894:	6803      	ldr	r3, [r0, #0]
 802a896:	685b      	ldr	r3, [r3, #4]
 802a898:	4798      	blx	r3
 802a89a:	2300      	movs	r3, #0
 802a89c:	2001      	movs	r0, #1
 802a89e:	8166      	strh	r6, [r4, #10]
 802a8a0:	8123      	strh	r3, [r4, #8]
 802a8a2:	81a7      	strh	r7, [r4, #12]
 802a8a4:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a8a8:	80e5      	strh	r5, [r4, #6]
 802a8aa:	73a0      	strb	r0, [r4, #14]
 802a8ac:	b004      	add	sp, #16
 802a8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a8b2:	bf00      	nop
 802a8b4:	080307e4 	.word	0x080307e4

0802a8b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a8ba:	461e      	mov	r6, r3
 802a8bc:	1e4b      	subs	r3, r1, #1
 802a8be:	b085      	sub	sp, #20
 802a8c0:	4604      	mov	r4, r0
 802a8c2:	2b01      	cmp	r3, #1
 802a8c4:	460d      	mov	r5, r1
 802a8c6:	4617      	mov	r7, r2
 802a8c8:	d84b      	bhi.n	802a962 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802a8ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a8ce:	1cd3      	adds	r3, r2, #3
 802a8d0:	b29b      	uxth	r3, r3
 802a8d2:	2b06      	cmp	r3, #6
 802a8d4:	d916      	bls.n	802a904 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802a8d6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802a978 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a8da:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a8de:	f8cd c004 	str.w	ip, [sp, #4]
 802a8e2:	f04f 0c00 	mov.w	ip, #0
 802a8e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a8ea:	6900      	ldr	r0, [r0, #16]
 802a8ec:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a8f0:	a901      	add	r1, sp, #4
 802a8f2:	f88d c008 	strb.w	ip, [sp, #8]
 802a8f6:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a8fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a8fe:	6803      	ldr	r3, [r0, #0]
 802a900:	689b      	ldr	r3, [r3, #8]
 802a902:	4798      	blx	r3
 802a904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a908:	1cd3      	adds	r3, r2, #3
 802a90a:	b29b      	uxth	r3, r3
 802a90c:	2b06      	cmp	r3, #6
 802a90e:	d916      	bls.n	802a93e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a910:	f8df c064 	ldr.w	ip, [pc, #100]	; 802a978 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a914:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a918:	f8cd c004 	str.w	ip, [sp, #4]
 802a91c:	f04f 0c01 	mov.w	ip, #1
 802a920:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a924:	6920      	ldr	r0, [r4, #16]
 802a926:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a92a:	a901      	add	r1, sp, #4
 802a92c:	f88d c008 	strb.w	ip, [sp, #8]
 802a930:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a934:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a938:	6803      	ldr	r3, [r0, #0]
 802a93a:	689b      	ldr	r3, [r3, #8]
 802a93c:	4798      	blx	r3
 802a93e:	4b0d      	ldr	r3, [pc, #52]	; (802a974 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a940:	a901      	add	r1, sp, #4
 802a942:	6920      	ldr	r0, [r4, #16]
 802a944:	9301      	str	r3, [sp, #4]
 802a946:	2300      	movs	r3, #0
 802a948:	f88d 5008 	strb.w	r5, [sp, #8]
 802a94c:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a950:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a954:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a958:	6803      	ldr	r3, [r0, #0]
 802a95a:	681b      	ldr	r3, [r3, #0]
 802a95c:	4798      	blx	r3
 802a95e:	b005      	add	sp, #20
 802a960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a962:	2900      	cmp	r1, #0
 802a964:	d1eb      	bne.n	802a93e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a966:	80a2      	strh	r2, [r4, #4]
 802a968:	80c6      	strh	r6, [r0, #6]
 802a96a:	60a1      	str	r1, [r4, #8]
 802a96c:	81a1      	strh	r1, [r4, #12]
 802a96e:	73a1      	strb	r1, [r4, #14]
 802a970:	e7e5      	b.n	802a93e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a972:	bf00      	nop
 802a974:	080307d0 	.word	0x080307d0
 802a978:	080307f8 	.word	0x080307f8

0802a97c <__aeabi_atexit>:
 802a97c:	460b      	mov	r3, r1
 802a97e:	4601      	mov	r1, r0
 802a980:	4618      	mov	r0, r3
 802a982:	f000 b853 	b.w	802aa2c <__cxa_atexit>

0802a986 <_ZdlPvj>:
 802a986:	f000 b812 	b.w	802a9ae <_ZdlPv>

0802a98a <__cxa_guard_acquire>:
 802a98a:	6803      	ldr	r3, [r0, #0]
 802a98c:	07db      	lsls	r3, r3, #31
 802a98e:	d406      	bmi.n	802a99e <__cxa_guard_acquire+0x14>
 802a990:	7843      	ldrb	r3, [r0, #1]
 802a992:	b103      	cbz	r3, 802a996 <__cxa_guard_acquire+0xc>
 802a994:	deff      	udf	#255	; 0xff
 802a996:	2301      	movs	r3, #1
 802a998:	7043      	strb	r3, [r0, #1]
 802a99a:	4618      	mov	r0, r3
 802a99c:	4770      	bx	lr
 802a99e:	2000      	movs	r0, #0
 802a9a0:	4770      	bx	lr

0802a9a2 <__cxa_guard_release>:
 802a9a2:	2301      	movs	r3, #1
 802a9a4:	6003      	str	r3, [r0, #0]
 802a9a6:	4770      	bx	lr

0802a9a8 <__cxa_pure_virtual>:
 802a9a8:	b508      	push	{r3, lr}
 802a9aa:	f000 f80f 	bl	802a9cc <_ZSt9terminatev>

0802a9ae <_ZdlPv>:
 802a9ae:	f000 b989 	b.w	802acc4 <free>

0802a9b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a9b2:	b508      	push	{r3, lr}
 802a9b4:	4780      	blx	r0
 802a9b6:	f000 f80e 	bl	802a9d6 <abort>
	...

0802a9bc <_ZSt13get_terminatev>:
 802a9bc:	4b02      	ldr	r3, [pc, #8]	; (802a9c8 <_ZSt13get_terminatev+0xc>)
 802a9be:	6818      	ldr	r0, [r3, #0]
 802a9c0:	f3bf 8f5b 	dmb	ish
 802a9c4:	4770      	bx	lr
 802a9c6:	bf00      	nop
 802a9c8:	200000b8 	.word	0x200000b8

0802a9cc <_ZSt9terminatev>:
 802a9cc:	b508      	push	{r3, lr}
 802a9ce:	f7ff fff5 	bl	802a9bc <_ZSt13get_terminatev>
 802a9d2:	f7ff ffee 	bl	802a9b2 <_ZN10__cxxabiv111__terminateEPFvvE>

0802a9d6 <abort>:
 802a9d6:	b508      	push	{r3, lr}
 802a9d8:	2006      	movs	r0, #6
 802a9da:	f000 fe01 	bl	802b5e0 <raise>
 802a9de:	2001      	movs	r0, #1
 802a9e0:	f7d7 f854 	bl	8001a8c <_exit>

0802a9e4 <__assert_func>:
 802a9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a9e6:	4614      	mov	r4, r2
 802a9e8:	461a      	mov	r2, r3
 802a9ea:	4b09      	ldr	r3, [pc, #36]	; (802aa10 <__assert_func+0x2c>)
 802a9ec:	681b      	ldr	r3, [r3, #0]
 802a9ee:	4605      	mov	r5, r0
 802a9f0:	68d8      	ldr	r0, [r3, #12]
 802a9f2:	b14c      	cbz	r4, 802aa08 <__assert_func+0x24>
 802a9f4:	4b07      	ldr	r3, [pc, #28]	; (802aa14 <__assert_func+0x30>)
 802a9f6:	9100      	str	r1, [sp, #0]
 802a9f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a9fc:	4906      	ldr	r1, [pc, #24]	; (802aa18 <__assert_func+0x34>)
 802a9fe:	462b      	mov	r3, r5
 802aa00:	f000 f8fe 	bl	802ac00 <fiprintf>
 802aa04:	f7ff ffe7 	bl	802a9d6 <abort>
 802aa08:	4b04      	ldr	r3, [pc, #16]	; (802aa1c <__assert_func+0x38>)
 802aa0a:	461c      	mov	r4, r3
 802aa0c:	e7f3      	b.n	802a9f6 <__assert_func+0x12>
 802aa0e:	bf00      	nop
 802aa10:	200000bc 	.word	0x200000bc
 802aa14:	08030ac0 	.word	0x08030ac0
 802aa18:	08030acd 	.word	0x08030acd
 802aa1c:	08030afb 	.word	0x08030afb

0802aa20 <atexit>:
 802aa20:	2300      	movs	r3, #0
 802aa22:	4601      	mov	r1, r0
 802aa24:	461a      	mov	r2, r3
 802aa26:	4618      	mov	r0, r3
 802aa28:	f000 bf40 	b.w	802b8ac <__register_exitproc>

0802aa2c <__cxa_atexit>:
 802aa2c:	b510      	push	{r4, lr}
 802aa2e:	4c05      	ldr	r4, [pc, #20]	; (802aa44 <__cxa_atexit+0x18>)
 802aa30:	4613      	mov	r3, r2
 802aa32:	b12c      	cbz	r4, 802aa40 <__cxa_atexit+0x14>
 802aa34:	460a      	mov	r2, r1
 802aa36:	4601      	mov	r1, r0
 802aa38:	2002      	movs	r0, #2
 802aa3a:	f000 ff37 	bl	802b8ac <__register_exitproc>
 802aa3e:	bd10      	pop	{r4, pc}
 802aa40:	4620      	mov	r0, r4
 802aa42:	e7fc      	b.n	802aa3e <__cxa_atexit+0x12>
 802aa44:	0802b8ad 	.word	0x0802b8ad

0802aa48 <__errno>:
 802aa48:	4b01      	ldr	r3, [pc, #4]	; (802aa50 <__errno+0x8>)
 802aa4a:	6818      	ldr	r0, [r3, #0]
 802aa4c:	4770      	bx	lr
 802aa4e:	bf00      	nop
 802aa50:	200000bc 	.word	0x200000bc

0802aa54 <std>:
 802aa54:	2300      	movs	r3, #0
 802aa56:	b510      	push	{r4, lr}
 802aa58:	4604      	mov	r4, r0
 802aa5a:	e9c0 3300 	strd	r3, r3, [r0]
 802aa5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802aa62:	6083      	str	r3, [r0, #8]
 802aa64:	8181      	strh	r1, [r0, #12]
 802aa66:	6643      	str	r3, [r0, #100]	; 0x64
 802aa68:	81c2      	strh	r2, [r0, #14]
 802aa6a:	6183      	str	r3, [r0, #24]
 802aa6c:	4619      	mov	r1, r3
 802aa6e:	2208      	movs	r2, #8
 802aa70:	305c      	adds	r0, #92	; 0x5c
 802aa72:	f000 f93d 	bl	802acf0 <memset>
 802aa76:	4b05      	ldr	r3, [pc, #20]	; (802aa8c <std+0x38>)
 802aa78:	6263      	str	r3, [r4, #36]	; 0x24
 802aa7a:	4b05      	ldr	r3, [pc, #20]	; (802aa90 <std+0x3c>)
 802aa7c:	62a3      	str	r3, [r4, #40]	; 0x28
 802aa7e:	4b05      	ldr	r3, [pc, #20]	; (802aa94 <std+0x40>)
 802aa80:	62e3      	str	r3, [r4, #44]	; 0x2c
 802aa82:	4b05      	ldr	r3, [pc, #20]	; (802aa98 <std+0x44>)
 802aa84:	6224      	str	r4, [r4, #32]
 802aa86:	6323      	str	r3, [r4, #48]	; 0x30
 802aa88:	bd10      	pop	{r4, pc}
 802aa8a:	bf00      	nop
 802aa8c:	0802b659 	.word	0x0802b659
 802aa90:	0802b67b 	.word	0x0802b67b
 802aa94:	0802b6b3 	.word	0x0802b6b3
 802aa98:	0802b6d7 	.word	0x0802b6d7

0802aa9c <_cleanup_r>:
 802aa9c:	4901      	ldr	r1, [pc, #4]	; (802aaa4 <_cleanup_r+0x8>)
 802aa9e:	f000 b8c1 	b.w	802ac24 <_fwalk_reent>
 802aaa2:	bf00      	nop
 802aaa4:	0802ba9d 	.word	0x0802ba9d

0802aaa8 <__sfmoreglue>:
 802aaa8:	b570      	push	{r4, r5, r6, lr}
 802aaaa:	2268      	movs	r2, #104	; 0x68
 802aaac:	1e4d      	subs	r5, r1, #1
 802aaae:	4355      	muls	r5, r2
 802aab0:	460e      	mov	r6, r1
 802aab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802aab6:	f000 f98f 	bl	802add8 <_malloc_r>
 802aaba:	4604      	mov	r4, r0
 802aabc:	b140      	cbz	r0, 802aad0 <__sfmoreglue+0x28>
 802aabe:	2100      	movs	r1, #0
 802aac0:	e9c0 1600 	strd	r1, r6, [r0]
 802aac4:	300c      	adds	r0, #12
 802aac6:	60a0      	str	r0, [r4, #8]
 802aac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802aacc:	f000 f910 	bl	802acf0 <memset>
 802aad0:	4620      	mov	r0, r4
 802aad2:	bd70      	pop	{r4, r5, r6, pc}

0802aad4 <__sfp_lock_acquire>:
 802aad4:	4801      	ldr	r0, [pc, #4]	; (802aadc <__sfp_lock_acquire+0x8>)
 802aad6:	f000 b8ea 	b.w	802acae <__retarget_lock_acquire_recursive>
 802aada:	bf00      	nop
 802aadc:	200160ba 	.word	0x200160ba

0802aae0 <__sfp_lock_release>:
 802aae0:	4801      	ldr	r0, [pc, #4]	; (802aae8 <__sfp_lock_release+0x8>)
 802aae2:	f000 b8e6 	b.w	802acb2 <__retarget_lock_release_recursive>
 802aae6:	bf00      	nop
 802aae8:	200160ba 	.word	0x200160ba

0802aaec <__sinit_lock_acquire>:
 802aaec:	4801      	ldr	r0, [pc, #4]	; (802aaf4 <__sinit_lock_acquire+0x8>)
 802aaee:	f000 b8de 	b.w	802acae <__retarget_lock_acquire_recursive>
 802aaf2:	bf00      	nop
 802aaf4:	200160bb 	.word	0x200160bb

0802aaf8 <__sinit_lock_release>:
 802aaf8:	4801      	ldr	r0, [pc, #4]	; (802ab00 <__sinit_lock_release+0x8>)
 802aafa:	f000 b8da 	b.w	802acb2 <__retarget_lock_release_recursive>
 802aafe:	bf00      	nop
 802ab00:	200160bb 	.word	0x200160bb

0802ab04 <__sinit>:
 802ab04:	b510      	push	{r4, lr}
 802ab06:	4604      	mov	r4, r0
 802ab08:	f7ff fff0 	bl	802aaec <__sinit_lock_acquire>
 802ab0c:	69a3      	ldr	r3, [r4, #24]
 802ab0e:	b11b      	cbz	r3, 802ab18 <__sinit+0x14>
 802ab10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ab14:	f7ff bff0 	b.w	802aaf8 <__sinit_lock_release>
 802ab18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802ab1c:	6523      	str	r3, [r4, #80]	; 0x50
 802ab1e:	4b13      	ldr	r3, [pc, #76]	; (802ab6c <__sinit+0x68>)
 802ab20:	4a13      	ldr	r2, [pc, #76]	; (802ab70 <__sinit+0x6c>)
 802ab22:	681b      	ldr	r3, [r3, #0]
 802ab24:	62a2      	str	r2, [r4, #40]	; 0x28
 802ab26:	42a3      	cmp	r3, r4
 802ab28:	bf04      	itt	eq
 802ab2a:	2301      	moveq	r3, #1
 802ab2c:	61a3      	streq	r3, [r4, #24]
 802ab2e:	4620      	mov	r0, r4
 802ab30:	f000 f820 	bl	802ab74 <__sfp>
 802ab34:	6060      	str	r0, [r4, #4]
 802ab36:	4620      	mov	r0, r4
 802ab38:	f000 f81c 	bl	802ab74 <__sfp>
 802ab3c:	60a0      	str	r0, [r4, #8]
 802ab3e:	4620      	mov	r0, r4
 802ab40:	f000 f818 	bl	802ab74 <__sfp>
 802ab44:	2200      	movs	r2, #0
 802ab46:	60e0      	str	r0, [r4, #12]
 802ab48:	2104      	movs	r1, #4
 802ab4a:	6860      	ldr	r0, [r4, #4]
 802ab4c:	f7ff ff82 	bl	802aa54 <std>
 802ab50:	68a0      	ldr	r0, [r4, #8]
 802ab52:	2201      	movs	r2, #1
 802ab54:	2109      	movs	r1, #9
 802ab56:	f7ff ff7d 	bl	802aa54 <std>
 802ab5a:	68e0      	ldr	r0, [r4, #12]
 802ab5c:	2202      	movs	r2, #2
 802ab5e:	2112      	movs	r1, #18
 802ab60:	f7ff ff78 	bl	802aa54 <std>
 802ab64:	2301      	movs	r3, #1
 802ab66:	61a3      	str	r3, [r4, #24]
 802ab68:	e7d2      	b.n	802ab10 <__sinit+0xc>
 802ab6a:	bf00      	nop
 802ab6c:	08030b5c 	.word	0x08030b5c
 802ab70:	0802aa9d 	.word	0x0802aa9d

0802ab74 <__sfp>:
 802ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ab76:	4607      	mov	r7, r0
 802ab78:	f7ff ffac 	bl	802aad4 <__sfp_lock_acquire>
 802ab7c:	4b1e      	ldr	r3, [pc, #120]	; (802abf8 <__sfp+0x84>)
 802ab7e:	681e      	ldr	r6, [r3, #0]
 802ab80:	69b3      	ldr	r3, [r6, #24]
 802ab82:	b913      	cbnz	r3, 802ab8a <__sfp+0x16>
 802ab84:	4630      	mov	r0, r6
 802ab86:	f7ff ffbd 	bl	802ab04 <__sinit>
 802ab8a:	3648      	adds	r6, #72	; 0x48
 802ab8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802ab90:	3b01      	subs	r3, #1
 802ab92:	d503      	bpl.n	802ab9c <__sfp+0x28>
 802ab94:	6833      	ldr	r3, [r6, #0]
 802ab96:	b30b      	cbz	r3, 802abdc <__sfp+0x68>
 802ab98:	6836      	ldr	r6, [r6, #0]
 802ab9a:	e7f7      	b.n	802ab8c <__sfp+0x18>
 802ab9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802aba0:	b9d5      	cbnz	r5, 802abd8 <__sfp+0x64>
 802aba2:	4b16      	ldr	r3, [pc, #88]	; (802abfc <__sfp+0x88>)
 802aba4:	60e3      	str	r3, [r4, #12]
 802aba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802abaa:	6665      	str	r5, [r4, #100]	; 0x64
 802abac:	f000 f87e 	bl	802acac <__retarget_lock_init_recursive>
 802abb0:	f7ff ff96 	bl	802aae0 <__sfp_lock_release>
 802abb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802abb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802abbc:	6025      	str	r5, [r4, #0]
 802abbe:	61a5      	str	r5, [r4, #24]
 802abc0:	2208      	movs	r2, #8
 802abc2:	4629      	mov	r1, r5
 802abc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802abc8:	f000 f892 	bl	802acf0 <memset>
 802abcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802abd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802abd4:	4620      	mov	r0, r4
 802abd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802abd8:	3468      	adds	r4, #104	; 0x68
 802abda:	e7d9      	b.n	802ab90 <__sfp+0x1c>
 802abdc:	2104      	movs	r1, #4
 802abde:	4638      	mov	r0, r7
 802abe0:	f7ff ff62 	bl	802aaa8 <__sfmoreglue>
 802abe4:	4604      	mov	r4, r0
 802abe6:	6030      	str	r0, [r6, #0]
 802abe8:	2800      	cmp	r0, #0
 802abea:	d1d5      	bne.n	802ab98 <__sfp+0x24>
 802abec:	f7ff ff78 	bl	802aae0 <__sfp_lock_release>
 802abf0:	230c      	movs	r3, #12
 802abf2:	603b      	str	r3, [r7, #0]
 802abf4:	e7ee      	b.n	802abd4 <__sfp+0x60>
 802abf6:	bf00      	nop
 802abf8:	08030b5c 	.word	0x08030b5c
 802abfc:	ffff0001 	.word	0xffff0001

0802ac00 <fiprintf>:
 802ac00:	b40e      	push	{r1, r2, r3}
 802ac02:	b503      	push	{r0, r1, lr}
 802ac04:	4601      	mov	r1, r0
 802ac06:	ab03      	add	r3, sp, #12
 802ac08:	4805      	ldr	r0, [pc, #20]	; (802ac20 <fiprintf+0x20>)
 802ac0a:	f853 2b04 	ldr.w	r2, [r3], #4
 802ac0e:	6800      	ldr	r0, [r0, #0]
 802ac10:	9301      	str	r3, [sp, #4]
 802ac12:	f000 f97f 	bl	802af14 <_vfiprintf_r>
 802ac16:	b002      	add	sp, #8
 802ac18:	f85d eb04 	ldr.w	lr, [sp], #4
 802ac1c:	b003      	add	sp, #12
 802ac1e:	4770      	bx	lr
 802ac20:	200000bc 	.word	0x200000bc

0802ac24 <_fwalk_reent>:
 802ac24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ac28:	4606      	mov	r6, r0
 802ac2a:	4688      	mov	r8, r1
 802ac2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802ac30:	2700      	movs	r7, #0
 802ac32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ac36:	f1b9 0901 	subs.w	r9, r9, #1
 802ac3a:	d505      	bpl.n	802ac48 <_fwalk_reent+0x24>
 802ac3c:	6824      	ldr	r4, [r4, #0]
 802ac3e:	2c00      	cmp	r4, #0
 802ac40:	d1f7      	bne.n	802ac32 <_fwalk_reent+0xe>
 802ac42:	4638      	mov	r0, r7
 802ac44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ac48:	89ab      	ldrh	r3, [r5, #12]
 802ac4a:	2b01      	cmp	r3, #1
 802ac4c:	d907      	bls.n	802ac5e <_fwalk_reent+0x3a>
 802ac4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ac52:	3301      	adds	r3, #1
 802ac54:	d003      	beq.n	802ac5e <_fwalk_reent+0x3a>
 802ac56:	4629      	mov	r1, r5
 802ac58:	4630      	mov	r0, r6
 802ac5a:	47c0      	blx	r8
 802ac5c:	4307      	orrs	r7, r0
 802ac5e:	3568      	adds	r5, #104	; 0x68
 802ac60:	e7e9      	b.n	802ac36 <_fwalk_reent+0x12>
	...

0802ac64 <__libc_init_array>:
 802ac64:	b570      	push	{r4, r5, r6, lr}
 802ac66:	4d0d      	ldr	r5, [pc, #52]	; (802ac9c <__libc_init_array+0x38>)
 802ac68:	4c0d      	ldr	r4, [pc, #52]	; (802aca0 <__libc_init_array+0x3c>)
 802ac6a:	1b64      	subs	r4, r4, r5
 802ac6c:	10a4      	asrs	r4, r4, #2
 802ac6e:	2600      	movs	r6, #0
 802ac70:	42a6      	cmp	r6, r4
 802ac72:	d109      	bne.n	802ac88 <__libc_init_array+0x24>
 802ac74:	4d0b      	ldr	r5, [pc, #44]	; (802aca4 <__libc_init_array+0x40>)
 802ac76:	4c0c      	ldr	r4, [pc, #48]	; (802aca8 <__libc_init_array+0x44>)
 802ac78:	f001 f9b0 	bl	802bfdc <_init>
 802ac7c:	1b64      	subs	r4, r4, r5
 802ac7e:	10a4      	asrs	r4, r4, #2
 802ac80:	2600      	movs	r6, #0
 802ac82:	42a6      	cmp	r6, r4
 802ac84:	d105      	bne.n	802ac92 <__libc_init_array+0x2e>
 802ac86:	bd70      	pop	{r4, r5, r6, pc}
 802ac88:	f855 3b04 	ldr.w	r3, [r5], #4
 802ac8c:	4798      	blx	r3
 802ac8e:	3601      	adds	r6, #1
 802ac90:	e7ee      	b.n	802ac70 <__libc_init_array+0xc>
 802ac92:	f855 3b04 	ldr.w	r3, [r5], #4
 802ac96:	4798      	blx	r3
 802ac98:	3601      	adds	r6, #1
 802ac9a:	e7f2      	b.n	802ac82 <__libc_init_array+0x1e>
 802ac9c:	08030be4 	.word	0x08030be4
 802aca0:	08030be4 	.word	0x08030be4
 802aca4:	08030be4 	.word	0x08030be4
 802aca8:	08030c00 	.word	0x08030c00

0802acac <__retarget_lock_init_recursive>:
 802acac:	4770      	bx	lr

0802acae <__retarget_lock_acquire_recursive>:
 802acae:	4770      	bx	lr

0802acb0 <__retarget_lock_release>:
 802acb0:	4770      	bx	lr

0802acb2 <__retarget_lock_release_recursive>:
 802acb2:	4770      	bx	lr

0802acb4 <malloc>:
 802acb4:	4b02      	ldr	r3, [pc, #8]	; (802acc0 <malloc+0xc>)
 802acb6:	4601      	mov	r1, r0
 802acb8:	6818      	ldr	r0, [r3, #0]
 802acba:	f000 b88d 	b.w	802add8 <_malloc_r>
 802acbe:	bf00      	nop
 802acc0:	200000bc 	.word	0x200000bc

0802acc4 <free>:
 802acc4:	4b02      	ldr	r3, [pc, #8]	; (802acd0 <free+0xc>)
 802acc6:	4601      	mov	r1, r0
 802acc8:	6818      	ldr	r0, [r3, #0]
 802acca:	f000 b819 	b.w	802ad00 <_free_r>
 802acce:	bf00      	nop
 802acd0:	200000bc 	.word	0x200000bc

0802acd4 <memcpy>:
 802acd4:	440a      	add	r2, r1
 802acd6:	4291      	cmp	r1, r2
 802acd8:	f100 33ff 	add.w	r3, r0, #4294967295
 802acdc:	d100      	bne.n	802ace0 <memcpy+0xc>
 802acde:	4770      	bx	lr
 802ace0:	b510      	push	{r4, lr}
 802ace2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ace6:	f803 4f01 	strb.w	r4, [r3, #1]!
 802acea:	4291      	cmp	r1, r2
 802acec:	d1f9      	bne.n	802ace2 <memcpy+0xe>
 802acee:	bd10      	pop	{r4, pc}

0802acf0 <memset>:
 802acf0:	4402      	add	r2, r0
 802acf2:	4603      	mov	r3, r0
 802acf4:	4293      	cmp	r3, r2
 802acf6:	d100      	bne.n	802acfa <memset+0xa>
 802acf8:	4770      	bx	lr
 802acfa:	f803 1b01 	strb.w	r1, [r3], #1
 802acfe:	e7f9      	b.n	802acf4 <memset+0x4>

0802ad00 <_free_r>:
 802ad00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ad02:	2900      	cmp	r1, #0
 802ad04:	d044      	beq.n	802ad90 <_free_r+0x90>
 802ad06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ad0a:	9001      	str	r0, [sp, #4]
 802ad0c:	2b00      	cmp	r3, #0
 802ad0e:	f1a1 0404 	sub.w	r4, r1, #4
 802ad12:	bfb8      	it	lt
 802ad14:	18e4      	addlt	r4, r4, r3
 802ad16:	f000 ff8f 	bl	802bc38 <__malloc_lock>
 802ad1a:	4a1e      	ldr	r2, [pc, #120]	; (802ad94 <_free_r+0x94>)
 802ad1c:	9801      	ldr	r0, [sp, #4]
 802ad1e:	6813      	ldr	r3, [r2, #0]
 802ad20:	b933      	cbnz	r3, 802ad30 <_free_r+0x30>
 802ad22:	6063      	str	r3, [r4, #4]
 802ad24:	6014      	str	r4, [r2, #0]
 802ad26:	b003      	add	sp, #12
 802ad28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ad2c:	f000 bf8a 	b.w	802bc44 <__malloc_unlock>
 802ad30:	42a3      	cmp	r3, r4
 802ad32:	d908      	bls.n	802ad46 <_free_r+0x46>
 802ad34:	6825      	ldr	r5, [r4, #0]
 802ad36:	1961      	adds	r1, r4, r5
 802ad38:	428b      	cmp	r3, r1
 802ad3a:	bf01      	itttt	eq
 802ad3c:	6819      	ldreq	r1, [r3, #0]
 802ad3e:	685b      	ldreq	r3, [r3, #4]
 802ad40:	1949      	addeq	r1, r1, r5
 802ad42:	6021      	streq	r1, [r4, #0]
 802ad44:	e7ed      	b.n	802ad22 <_free_r+0x22>
 802ad46:	461a      	mov	r2, r3
 802ad48:	685b      	ldr	r3, [r3, #4]
 802ad4a:	b10b      	cbz	r3, 802ad50 <_free_r+0x50>
 802ad4c:	42a3      	cmp	r3, r4
 802ad4e:	d9fa      	bls.n	802ad46 <_free_r+0x46>
 802ad50:	6811      	ldr	r1, [r2, #0]
 802ad52:	1855      	adds	r5, r2, r1
 802ad54:	42a5      	cmp	r5, r4
 802ad56:	d10b      	bne.n	802ad70 <_free_r+0x70>
 802ad58:	6824      	ldr	r4, [r4, #0]
 802ad5a:	4421      	add	r1, r4
 802ad5c:	1854      	adds	r4, r2, r1
 802ad5e:	42a3      	cmp	r3, r4
 802ad60:	6011      	str	r1, [r2, #0]
 802ad62:	d1e0      	bne.n	802ad26 <_free_r+0x26>
 802ad64:	681c      	ldr	r4, [r3, #0]
 802ad66:	685b      	ldr	r3, [r3, #4]
 802ad68:	6053      	str	r3, [r2, #4]
 802ad6a:	4421      	add	r1, r4
 802ad6c:	6011      	str	r1, [r2, #0]
 802ad6e:	e7da      	b.n	802ad26 <_free_r+0x26>
 802ad70:	d902      	bls.n	802ad78 <_free_r+0x78>
 802ad72:	230c      	movs	r3, #12
 802ad74:	6003      	str	r3, [r0, #0]
 802ad76:	e7d6      	b.n	802ad26 <_free_r+0x26>
 802ad78:	6825      	ldr	r5, [r4, #0]
 802ad7a:	1961      	adds	r1, r4, r5
 802ad7c:	428b      	cmp	r3, r1
 802ad7e:	bf04      	itt	eq
 802ad80:	6819      	ldreq	r1, [r3, #0]
 802ad82:	685b      	ldreq	r3, [r3, #4]
 802ad84:	6063      	str	r3, [r4, #4]
 802ad86:	bf04      	itt	eq
 802ad88:	1949      	addeq	r1, r1, r5
 802ad8a:	6021      	streq	r1, [r4, #0]
 802ad8c:	6054      	str	r4, [r2, #4]
 802ad8e:	e7ca      	b.n	802ad26 <_free_r+0x26>
 802ad90:	b003      	add	sp, #12
 802ad92:	bd30      	pop	{r4, r5, pc}
 802ad94:	200160bc 	.word	0x200160bc

0802ad98 <sbrk_aligned>:
 802ad98:	b570      	push	{r4, r5, r6, lr}
 802ad9a:	4e0e      	ldr	r6, [pc, #56]	; (802add4 <sbrk_aligned+0x3c>)
 802ad9c:	460c      	mov	r4, r1
 802ad9e:	6831      	ldr	r1, [r6, #0]
 802ada0:	4605      	mov	r5, r0
 802ada2:	b911      	cbnz	r1, 802adaa <sbrk_aligned+0x12>
 802ada4:	f000 fbe4 	bl	802b570 <_sbrk_r>
 802ada8:	6030      	str	r0, [r6, #0]
 802adaa:	4621      	mov	r1, r4
 802adac:	4628      	mov	r0, r5
 802adae:	f000 fbdf 	bl	802b570 <_sbrk_r>
 802adb2:	1c43      	adds	r3, r0, #1
 802adb4:	d00a      	beq.n	802adcc <sbrk_aligned+0x34>
 802adb6:	1cc4      	adds	r4, r0, #3
 802adb8:	f024 0403 	bic.w	r4, r4, #3
 802adbc:	42a0      	cmp	r0, r4
 802adbe:	d007      	beq.n	802add0 <sbrk_aligned+0x38>
 802adc0:	1a21      	subs	r1, r4, r0
 802adc2:	4628      	mov	r0, r5
 802adc4:	f000 fbd4 	bl	802b570 <_sbrk_r>
 802adc8:	3001      	adds	r0, #1
 802adca:	d101      	bne.n	802add0 <sbrk_aligned+0x38>
 802adcc:	f04f 34ff 	mov.w	r4, #4294967295
 802add0:	4620      	mov	r0, r4
 802add2:	bd70      	pop	{r4, r5, r6, pc}
 802add4:	200160c0 	.word	0x200160c0

0802add8 <_malloc_r>:
 802add8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802addc:	1ccd      	adds	r5, r1, #3
 802adde:	f025 0503 	bic.w	r5, r5, #3
 802ade2:	3508      	adds	r5, #8
 802ade4:	2d0c      	cmp	r5, #12
 802ade6:	bf38      	it	cc
 802ade8:	250c      	movcc	r5, #12
 802adea:	2d00      	cmp	r5, #0
 802adec:	4607      	mov	r7, r0
 802adee:	db01      	blt.n	802adf4 <_malloc_r+0x1c>
 802adf0:	42a9      	cmp	r1, r5
 802adf2:	d905      	bls.n	802ae00 <_malloc_r+0x28>
 802adf4:	230c      	movs	r3, #12
 802adf6:	603b      	str	r3, [r7, #0]
 802adf8:	2600      	movs	r6, #0
 802adfa:	4630      	mov	r0, r6
 802adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ae00:	4e2e      	ldr	r6, [pc, #184]	; (802aebc <_malloc_r+0xe4>)
 802ae02:	f000 ff19 	bl	802bc38 <__malloc_lock>
 802ae06:	6833      	ldr	r3, [r6, #0]
 802ae08:	461c      	mov	r4, r3
 802ae0a:	bb34      	cbnz	r4, 802ae5a <_malloc_r+0x82>
 802ae0c:	4629      	mov	r1, r5
 802ae0e:	4638      	mov	r0, r7
 802ae10:	f7ff ffc2 	bl	802ad98 <sbrk_aligned>
 802ae14:	1c43      	adds	r3, r0, #1
 802ae16:	4604      	mov	r4, r0
 802ae18:	d14d      	bne.n	802aeb6 <_malloc_r+0xde>
 802ae1a:	6834      	ldr	r4, [r6, #0]
 802ae1c:	4626      	mov	r6, r4
 802ae1e:	2e00      	cmp	r6, #0
 802ae20:	d140      	bne.n	802aea4 <_malloc_r+0xcc>
 802ae22:	6823      	ldr	r3, [r4, #0]
 802ae24:	4631      	mov	r1, r6
 802ae26:	4638      	mov	r0, r7
 802ae28:	eb04 0803 	add.w	r8, r4, r3
 802ae2c:	f000 fba0 	bl	802b570 <_sbrk_r>
 802ae30:	4580      	cmp	r8, r0
 802ae32:	d13a      	bne.n	802aeaa <_malloc_r+0xd2>
 802ae34:	6821      	ldr	r1, [r4, #0]
 802ae36:	3503      	adds	r5, #3
 802ae38:	1a6d      	subs	r5, r5, r1
 802ae3a:	f025 0503 	bic.w	r5, r5, #3
 802ae3e:	3508      	adds	r5, #8
 802ae40:	2d0c      	cmp	r5, #12
 802ae42:	bf38      	it	cc
 802ae44:	250c      	movcc	r5, #12
 802ae46:	4629      	mov	r1, r5
 802ae48:	4638      	mov	r0, r7
 802ae4a:	f7ff ffa5 	bl	802ad98 <sbrk_aligned>
 802ae4e:	3001      	adds	r0, #1
 802ae50:	d02b      	beq.n	802aeaa <_malloc_r+0xd2>
 802ae52:	6823      	ldr	r3, [r4, #0]
 802ae54:	442b      	add	r3, r5
 802ae56:	6023      	str	r3, [r4, #0]
 802ae58:	e00e      	b.n	802ae78 <_malloc_r+0xa0>
 802ae5a:	6822      	ldr	r2, [r4, #0]
 802ae5c:	1b52      	subs	r2, r2, r5
 802ae5e:	d41e      	bmi.n	802ae9e <_malloc_r+0xc6>
 802ae60:	2a0b      	cmp	r2, #11
 802ae62:	d916      	bls.n	802ae92 <_malloc_r+0xba>
 802ae64:	1961      	adds	r1, r4, r5
 802ae66:	42a3      	cmp	r3, r4
 802ae68:	6025      	str	r5, [r4, #0]
 802ae6a:	bf18      	it	ne
 802ae6c:	6059      	strne	r1, [r3, #4]
 802ae6e:	6863      	ldr	r3, [r4, #4]
 802ae70:	bf08      	it	eq
 802ae72:	6031      	streq	r1, [r6, #0]
 802ae74:	5162      	str	r2, [r4, r5]
 802ae76:	604b      	str	r3, [r1, #4]
 802ae78:	4638      	mov	r0, r7
 802ae7a:	f104 060b 	add.w	r6, r4, #11
 802ae7e:	f000 fee1 	bl	802bc44 <__malloc_unlock>
 802ae82:	f026 0607 	bic.w	r6, r6, #7
 802ae86:	1d23      	adds	r3, r4, #4
 802ae88:	1af2      	subs	r2, r6, r3
 802ae8a:	d0b6      	beq.n	802adfa <_malloc_r+0x22>
 802ae8c:	1b9b      	subs	r3, r3, r6
 802ae8e:	50a3      	str	r3, [r4, r2]
 802ae90:	e7b3      	b.n	802adfa <_malloc_r+0x22>
 802ae92:	6862      	ldr	r2, [r4, #4]
 802ae94:	42a3      	cmp	r3, r4
 802ae96:	bf0c      	ite	eq
 802ae98:	6032      	streq	r2, [r6, #0]
 802ae9a:	605a      	strne	r2, [r3, #4]
 802ae9c:	e7ec      	b.n	802ae78 <_malloc_r+0xa0>
 802ae9e:	4623      	mov	r3, r4
 802aea0:	6864      	ldr	r4, [r4, #4]
 802aea2:	e7b2      	b.n	802ae0a <_malloc_r+0x32>
 802aea4:	4634      	mov	r4, r6
 802aea6:	6876      	ldr	r6, [r6, #4]
 802aea8:	e7b9      	b.n	802ae1e <_malloc_r+0x46>
 802aeaa:	230c      	movs	r3, #12
 802aeac:	603b      	str	r3, [r7, #0]
 802aeae:	4638      	mov	r0, r7
 802aeb0:	f000 fec8 	bl	802bc44 <__malloc_unlock>
 802aeb4:	e7a1      	b.n	802adfa <_malloc_r+0x22>
 802aeb6:	6025      	str	r5, [r4, #0]
 802aeb8:	e7de      	b.n	802ae78 <_malloc_r+0xa0>
 802aeba:	bf00      	nop
 802aebc:	200160bc 	.word	0x200160bc

0802aec0 <__sfputc_r>:
 802aec0:	6893      	ldr	r3, [r2, #8]
 802aec2:	3b01      	subs	r3, #1
 802aec4:	2b00      	cmp	r3, #0
 802aec6:	b410      	push	{r4}
 802aec8:	6093      	str	r3, [r2, #8]
 802aeca:	da08      	bge.n	802aede <__sfputc_r+0x1e>
 802aecc:	6994      	ldr	r4, [r2, #24]
 802aece:	42a3      	cmp	r3, r4
 802aed0:	db01      	blt.n	802aed6 <__sfputc_r+0x16>
 802aed2:	290a      	cmp	r1, #10
 802aed4:	d103      	bne.n	802aede <__sfputc_r+0x1e>
 802aed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802aeda:	f000 bc15 	b.w	802b708 <__swbuf_r>
 802aede:	6813      	ldr	r3, [r2, #0]
 802aee0:	1c58      	adds	r0, r3, #1
 802aee2:	6010      	str	r0, [r2, #0]
 802aee4:	7019      	strb	r1, [r3, #0]
 802aee6:	4608      	mov	r0, r1
 802aee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802aeec:	4770      	bx	lr

0802aeee <__sfputs_r>:
 802aeee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aef0:	4606      	mov	r6, r0
 802aef2:	460f      	mov	r7, r1
 802aef4:	4614      	mov	r4, r2
 802aef6:	18d5      	adds	r5, r2, r3
 802aef8:	42ac      	cmp	r4, r5
 802aefa:	d101      	bne.n	802af00 <__sfputs_r+0x12>
 802aefc:	2000      	movs	r0, #0
 802aefe:	e007      	b.n	802af10 <__sfputs_r+0x22>
 802af00:	f814 1b01 	ldrb.w	r1, [r4], #1
 802af04:	463a      	mov	r2, r7
 802af06:	4630      	mov	r0, r6
 802af08:	f7ff ffda 	bl	802aec0 <__sfputc_r>
 802af0c:	1c43      	adds	r3, r0, #1
 802af0e:	d1f3      	bne.n	802aef8 <__sfputs_r+0xa>
 802af10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802af14 <_vfiprintf_r>:
 802af14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af18:	460d      	mov	r5, r1
 802af1a:	b09d      	sub	sp, #116	; 0x74
 802af1c:	4614      	mov	r4, r2
 802af1e:	4698      	mov	r8, r3
 802af20:	4606      	mov	r6, r0
 802af22:	b118      	cbz	r0, 802af2c <_vfiprintf_r+0x18>
 802af24:	6983      	ldr	r3, [r0, #24]
 802af26:	b90b      	cbnz	r3, 802af2c <_vfiprintf_r+0x18>
 802af28:	f7ff fdec 	bl	802ab04 <__sinit>
 802af2c:	4b89      	ldr	r3, [pc, #548]	; (802b154 <_vfiprintf_r+0x240>)
 802af2e:	429d      	cmp	r5, r3
 802af30:	d11b      	bne.n	802af6a <_vfiprintf_r+0x56>
 802af32:	6875      	ldr	r5, [r6, #4]
 802af34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802af36:	07d9      	lsls	r1, r3, #31
 802af38:	d405      	bmi.n	802af46 <_vfiprintf_r+0x32>
 802af3a:	89ab      	ldrh	r3, [r5, #12]
 802af3c:	059a      	lsls	r2, r3, #22
 802af3e:	d402      	bmi.n	802af46 <_vfiprintf_r+0x32>
 802af40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802af42:	f7ff feb4 	bl	802acae <__retarget_lock_acquire_recursive>
 802af46:	89ab      	ldrh	r3, [r5, #12]
 802af48:	071b      	lsls	r3, r3, #28
 802af4a:	d501      	bpl.n	802af50 <_vfiprintf_r+0x3c>
 802af4c:	692b      	ldr	r3, [r5, #16]
 802af4e:	b9eb      	cbnz	r3, 802af8c <_vfiprintf_r+0x78>
 802af50:	4629      	mov	r1, r5
 802af52:	4630      	mov	r0, r6
 802af54:	f000 fc3c 	bl	802b7d0 <__swsetup_r>
 802af58:	b1c0      	cbz	r0, 802af8c <_vfiprintf_r+0x78>
 802af5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802af5c:	07dc      	lsls	r4, r3, #31
 802af5e:	d50e      	bpl.n	802af7e <_vfiprintf_r+0x6a>
 802af60:	f04f 30ff 	mov.w	r0, #4294967295
 802af64:	b01d      	add	sp, #116	; 0x74
 802af66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af6a:	4b7b      	ldr	r3, [pc, #492]	; (802b158 <_vfiprintf_r+0x244>)
 802af6c:	429d      	cmp	r5, r3
 802af6e:	d101      	bne.n	802af74 <_vfiprintf_r+0x60>
 802af70:	68b5      	ldr	r5, [r6, #8]
 802af72:	e7df      	b.n	802af34 <_vfiprintf_r+0x20>
 802af74:	4b79      	ldr	r3, [pc, #484]	; (802b15c <_vfiprintf_r+0x248>)
 802af76:	429d      	cmp	r5, r3
 802af78:	bf08      	it	eq
 802af7a:	68f5      	ldreq	r5, [r6, #12]
 802af7c:	e7da      	b.n	802af34 <_vfiprintf_r+0x20>
 802af7e:	89ab      	ldrh	r3, [r5, #12]
 802af80:	0598      	lsls	r0, r3, #22
 802af82:	d4ed      	bmi.n	802af60 <_vfiprintf_r+0x4c>
 802af84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802af86:	f7ff fe94 	bl	802acb2 <__retarget_lock_release_recursive>
 802af8a:	e7e9      	b.n	802af60 <_vfiprintf_r+0x4c>
 802af8c:	2300      	movs	r3, #0
 802af8e:	9309      	str	r3, [sp, #36]	; 0x24
 802af90:	2320      	movs	r3, #32
 802af92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802af96:	f8cd 800c 	str.w	r8, [sp, #12]
 802af9a:	2330      	movs	r3, #48	; 0x30
 802af9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802b160 <_vfiprintf_r+0x24c>
 802afa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802afa4:	f04f 0901 	mov.w	r9, #1
 802afa8:	4623      	mov	r3, r4
 802afaa:	469a      	mov	sl, r3
 802afac:	f813 2b01 	ldrb.w	r2, [r3], #1
 802afb0:	b10a      	cbz	r2, 802afb6 <_vfiprintf_r+0xa2>
 802afb2:	2a25      	cmp	r2, #37	; 0x25
 802afb4:	d1f9      	bne.n	802afaa <_vfiprintf_r+0x96>
 802afb6:	ebba 0b04 	subs.w	fp, sl, r4
 802afba:	d00b      	beq.n	802afd4 <_vfiprintf_r+0xc0>
 802afbc:	465b      	mov	r3, fp
 802afbe:	4622      	mov	r2, r4
 802afc0:	4629      	mov	r1, r5
 802afc2:	4630      	mov	r0, r6
 802afc4:	f7ff ff93 	bl	802aeee <__sfputs_r>
 802afc8:	3001      	adds	r0, #1
 802afca:	f000 80aa 	beq.w	802b122 <_vfiprintf_r+0x20e>
 802afce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802afd0:	445a      	add	r2, fp
 802afd2:	9209      	str	r2, [sp, #36]	; 0x24
 802afd4:	f89a 3000 	ldrb.w	r3, [sl]
 802afd8:	2b00      	cmp	r3, #0
 802afda:	f000 80a2 	beq.w	802b122 <_vfiprintf_r+0x20e>
 802afde:	2300      	movs	r3, #0
 802afe0:	f04f 32ff 	mov.w	r2, #4294967295
 802afe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802afe8:	f10a 0a01 	add.w	sl, sl, #1
 802afec:	9304      	str	r3, [sp, #16]
 802afee:	9307      	str	r3, [sp, #28]
 802aff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802aff4:	931a      	str	r3, [sp, #104]	; 0x68
 802aff6:	4654      	mov	r4, sl
 802aff8:	2205      	movs	r2, #5
 802affa:	f814 1b01 	ldrb.w	r1, [r4], #1
 802affe:	4858      	ldr	r0, [pc, #352]	; (802b160 <_vfiprintf_r+0x24c>)
 802b000:	f7d5 f906 	bl	8000210 <memchr>
 802b004:	9a04      	ldr	r2, [sp, #16]
 802b006:	b9d8      	cbnz	r0, 802b040 <_vfiprintf_r+0x12c>
 802b008:	06d1      	lsls	r1, r2, #27
 802b00a:	bf44      	itt	mi
 802b00c:	2320      	movmi	r3, #32
 802b00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b012:	0713      	lsls	r3, r2, #28
 802b014:	bf44      	itt	mi
 802b016:	232b      	movmi	r3, #43	; 0x2b
 802b018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b01c:	f89a 3000 	ldrb.w	r3, [sl]
 802b020:	2b2a      	cmp	r3, #42	; 0x2a
 802b022:	d015      	beq.n	802b050 <_vfiprintf_r+0x13c>
 802b024:	9a07      	ldr	r2, [sp, #28]
 802b026:	4654      	mov	r4, sl
 802b028:	2000      	movs	r0, #0
 802b02a:	f04f 0c0a 	mov.w	ip, #10
 802b02e:	4621      	mov	r1, r4
 802b030:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b034:	3b30      	subs	r3, #48	; 0x30
 802b036:	2b09      	cmp	r3, #9
 802b038:	d94e      	bls.n	802b0d8 <_vfiprintf_r+0x1c4>
 802b03a:	b1b0      	cbz	r0, 802b06a <_vfiprintf_r+0x156>
 802b03c:	9207      	str	r2, [sp, #28]
 802b03e:	e014      	b.n	802b06a <_vfiprintf_r+0x156>
 802b040:	eba0 0308 	sub.w	r3, r0, r8
 802b044:	fa09 f303 	lsl.w	r3, r9, r3
 802b048:	4313      	orrs	r3, r2
 802b04a:	9304      	str	r3, [sp, #16]
 802b04c:	46a2      	mov	sl, r4
 802b04e:	e7d2      	b.n	802aff6 <_vfiprintf_r+0xe2>
 802b050:	9b03      	ldr	r3, [sp, #12]
 802b052:	1d19      	adds	r1, r3, #4
 802b054:	681b      	ldr	r3, [r3, #0]
 802b056:	9103      	str	r1, [sp, #12]
 802b058:	2b00      	cmp	r3, #0
 802b05a:	bfbb      	ittet	lt
 802b05c:	425b      	neglt	r3, r3
 802b05e:	f042 0202 	orrlt.w	r2, r2, #2
 802b062:	9307      	strge	r3, [sp, #28]
 802b064:	9307      	strlt	r3, [sp, #28]
 802b066:	bfb8      	it	lt
 802b068:	9204      	strlt	r2, [sp, #16]
 802b06a:	7823      	ldrb	r3, [r4, #0]
 802b06c:	2b2e      	cmp	r3, #46	; 0x2e
 802b06e:	d10c      	bne.n	802b08a <_vfiprintf_r+0x176>
 802b070:	7863      	ldrb	r3, [r4, #1]
 802b072:	2b2a      	cmp	r3, #42	; 0x2a
 802b074:	d135      	bne.n	802b0e2 <_vfiprintf_r+0x1ce>
 802b076:	9b03      	ldr	r3, [sp, #12]
 802b078:	1d1a      	adds	r2, r3, #4
 802b07a:	681b      	ldr	r3, [r3, #0]
 802b07c:	9203      	str	r2, [sp, #12]
 802b07e:	2b00      	cmp	r3, #0
 802b080:	bfb8      	it	lt
 802b082:	f04f 33ff 	movlt.w	r3, #4294967295
 802b086:	3402      	adds	r4, #2
 802b088:	9305      	str	r3, [sp, #20]
 802b08a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802b170 <_vfiprintf_r+0x25c>
 802b08e:	7821      	ldrb	r1, [r4, #0]
 802b090:	2203      	movs	r2, #3
 802b092:	4650      	mov	r0, sl
 802b094:	f7d5 f8bc 	bl	8000210 <memchr>
 802b098:	b140      	cbz	r0, 802b0ac <_vfiprintf_r+0x198>
 802b09a:	2340      	movs	r3, #64	; 0x40
 802b09c:	eba0 000a 	sub.w	r0, r0, sl
 802b0a0:	fa03 f000 	lsl.w	r0, r3, r0
 802b0a4:	9b04      	ldr	r3, [sp, #16]
 802b0a6:	4303      	orrs	r3, r0
 802b0a8:	3401      	adds	r4, #1
 802b0aa:	9304      	str	r3, [sp, #16]
 802b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b0b0:	482c      	ldr	r0, [pc, #176]	; (802b164 <_vfiprintf_r+0x250>)
 802b0b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b0b6:	2206      	movs	r2, #6
 802b0b8:	f7d5 f8aa 	bl	8000210 <memchr>
 802b0bc:	2800      	cmp	r0, #0
 802b0be:	d03f      	beq.n	802b140 <_vfiprintf_r+0x22c>
 802b0c0:	4b29      	ldr	r3, [pc, #164]	; (802b168 <_vfiprintf_r+0x254>)
 802b0c2:	bb1b      	cbnz	r3, 802b10c <_vfiprintf_r+0x1f8>
 802b0c4:	9b03      	ldr	r3, [sp, #12]
 802b0c6:	3307      	adds	r3, #7
 802b0c8:	f023 0307 	bic.w	r3, r3, #7
 802b0cc:	3308      	adds	r3, #8
 802b0ce:	9303      	str	r3, [sp, #12]
 802b0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b0d2:	443b      	add	r3, r7
 802b0d4:	9309      	str	r3, [sp, #36]	; 0x24
 802b0d6:	e767      	b.n	802afa8 <_vfiprintf_r+0x94>
 802b0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 802b0dc:	460c      	mov	r4, r1
 802b0de:	2001      	movs	r0, #1
 802b0e0:	e7a5      	b.n	802b02e <_vfiprintf_r+0x11a>
 802b0e2:	2300      	movs	r3, #0
 802b0e4:	3401      	adds	r4, #1
 802b0e6:	9305      	str	r3, [sp, #20]
 802b0e8:	4619      	mov	r1, r3
 802b0ea:	f04f 0c0a 	mov.w	ip, #10
 802b0ee:	4620      	mov	r0, r4
 802b0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b0f4:	3a30      	subs	r2, #48	; 0x30
 802b0f6:	2a09      	cmp	r2, #9
 802b0f8:	d903      	bls.n	802b102 <_vfiprintf_r+0x1ee>
 802b0fa:	2b00      	cmp	r3, #0
 802b0fc:	d0c5      	beq.n	802b08a <_vfiprintf_r+0x176>
 802b0fe:	9105      	str	r1, [sp, #20]
 802b100:	e7c3      	b.n	802b08a <_vfiprintf_r+0x176>
 802b102:	fb0c 2101 	mla	r1, ip, r1, r2
 802b106:	4604      	mov	r4, r0
 802b108:	2301      	movs	r3, #1
 802b10a:	e7f0      	b.n	802b0ee <_vfiprintf_r+0x1da>
 802b10c:	ab03      	add	r3, sp, #12
 802b10e:	9300      	str	r3, [sp, #0]
 802b110:	462a      	mov	r2, r5
 802b112:	4b16      	ldr	r3, [pc, #88]	; (802b16c <_vfiprintf_r+0x258>)
 802b114:	a904      	add	r1, sp, #16
 802b116:	4630      	mov	r0, r6
 802b118:	f3af 8000 	nop.w
 802b11c:	4607      	mov	r7, r0
 802b11e:	1c78      	adds	r0, r7, #1
 802b120:	d1d6      	bne.n	802b0d0 <_vfiprintf_r+0x1bc>
 802b122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b124:	07d9      	lsls	r1, r3, #31
 802b126:	d405      	bmi.n	802b134 <_vfiprintf_r+0x220>
 802b128:	89ab      	ldrh	r3, [r5, #12]
 802b12a:	059a      	lsls	r2, r3, #22
 802b12c:	d402      	bmi.n	802b134 <_vfiprintf_r+0x220>
 802b12e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b130:	f7ff fdbf 	bl	802acb2 <__retarget_lock_release_recursive>
 802b134:	89ab      	ldrh	r3, [r5, #12]
 802b136:	065b      	lsls	r3, r3, #25
 802b138:	f53f af12 	bmi.w	802af60 <_vfiprintf_r+0x4c>
 802b13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b13e:	e711      	b.n	802af64 <_vfiprintf_r+0x50>
 802b140:	ab03      	add	r3, sp, #12
 802b142:	9300      	str	r3, [sp, #0]
 802b144:	462a      	mov	r2, r5
 802b146:	4b09      	ldr	r3, [pc, #36]	; (802b16c <_vfiprintf_r+0x258>)
 802b148:	a904      	add	r1, sp, #16
 802b14a:	4630      	mov	r0, r6
 802b14c:	f000 f880 	bl	802b250 <_printf_i>
 802b150:	e7e4      	b.n	802b11c <_vfiprintf_r+0x208>
 802b152:	bf00      	nop
 802b154:	08030b1c 	.word	0x08030b1c
 802b158:	08030b3c 	.word	0x08030b3c
 802b15c:	08030afc 	.word	0x08030afc
 802b160:	08030b60 	.word	0x08030b60
 802b164:	08030b6a 	.word	0x08030b6a
 802b168:	00000000 	.word	0x00000000
 802b16c:	0802aeef 	.word	0x0802aeef
 802b170:	08030b66 	.word	0x08030b66

0802b174 <_printf_common>:
 802b174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b178:	4616      	mov	r6, r2
 802b17a:	4699      	mov	r9, r3
 802b17c:	688a      	ldr	r2, [r1, #8]
 802b17e:	690b      	ldr	r3, [r1, #16]
 802b180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b184:	4293      	cmp	r3, r2
 802b186:	bfb8      	it	lt
 802b188:	4613      	movlt	r3, r2
 802b18a:	6033      	str	r3, [r6, #0]
 802b18c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b190:	4607      	mov	r7, r0
 802b192:	460c      	mov	r4, r1
 802b194:	b10a      	cbz	r2, 802b19a <_printf_common+0x26>
 802b196:	3301      	adds	r3, #1
 802b198:	6033      	str	r3, [r6, #0]
 802b19a:	6823      	ldr	r3, [r4, #0]
 802b19c:	0699      	lsls	r1, r3, #26
 802b19e:	bf42      	ittt	mi
 802b1a0:	6833      	ldrmi	r3, [r6, #0]
 802b1a2:	3302      	addmi	r3, #2
 802b1a4:	6033      	strmi	r3, [r6, #0]
 802b1a6:	6825      	ldr	r5, [r4, #0]
 802b1a8:	f015 0506 	ands.w	r5, r5, #6
 802b1ac:	d106      	bne.n	802b1bc <_printf_common+0x48>
 802b1ae:	f104 0a19 	add.w	sl, r4, #25
 802b1b2:	68e3      	ldr	r3, [r4, #12]
 802b1b4:	6832      	ldr	r2, [r6, #0]
 802b1b6:	1a9b      	subs	r3, r3, r2
 802b1b8:	42ab      	cmp	r3, r5
 802b1ba:	dc26      	bgt.n	802b20a <_printf_common+0x96>
 802b1bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802b1c0:	1e13      	subs	r3, r2, #0
 802b1c2:	6822      	ldr	r2, [r4, #0]
 802b1c4:	bf18      	it	ne
 802b1c6:	2301      	movne	r3, #1
 802b1c8:	0692      	lsls	r2, r2, #26
 802b1ca:	d42b      	bmi.n	802b224 <_printf_common+0xb0>
 802b1cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b1d0:	4649      	mov	r1, r9
 802b1d2:	4638      	mov	r0, r7
 802b1d4:	47c0      	blx	r8
 802b1d6:	3001      	adds	r0, #1
 802b1d8:	d01e      	beq.n	802b218 <_printf_common+0xa4>
 802b1da:	6823      	ldr	r3, [r4, #0]
 802b1dc:	68e5      	ldr	r5, [r4, #12]
 802b1de:	6832      	ldr	r2, [r6, #0]
 802b1e0:	f003 0306 	and.w	r3, r3, #6
 802b1e4:	2b04      	cmp	r3, #4
 802b1e6:	bf08      	it	eq
 802b1e8:	1aad      	subeq	r5, r5, r2
 802b1ea:	68a3      	ldr	r3, [r4, #8]
 802b1ec:	6922      	ldr	r2, [r4, #16]
 802b1ee:	bf0c      	ite	eq
 802b1f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b1f4:	2500      	movne	r5, #0
 802b1f6:	4293      	cmp	r3, r2
 802b1f8:	bfc4      	itt	gt
 802b1fa:	1a9b      	subgt	r3, r3, r2
 802b1fc:	18ed      	addgt	r5, r5, r3
 802b1fe:	2600      	movs	r6, #0
 802b200:	341a      	adds	r4, #26
 802b202:	42b5      	cmp	r5, r6
 802b204:	d11a      	bne.n	802b23c <_printf_common+0xc8>
 802b206:	2000      	movs	r0, #0
 802b208:	e008      	b.n	802b21c <_printf_common+0xa8>
 802b20a:	2301      	movs	r3, #1
 802b20c:	4652      	mov	r2, sl
 802b20e:	4649      	mov	r1, r9
 802b210:	4638      	mov	r0, r7
 802b212:	47c0      	blx	r8
 802b214:	3001      	adds	r0, #1
 802b216:	d103      	bne.n	802b220 <_printf_common+0xac>
 802b218:	f04f 30ff 	mov.w	r0, #4294967295
 802b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b220:	3501      	adds	r5, #1
 802b222:	e7c6      	b.n	802b1b2 <_printf_common+0x3e>
 802b224:	18e1      	adds	r1, r4, r3
 802b226:	1c5a      	adds	r2, r3, #1
 802b228:	2030      	movs	r0, #48	; 0x30
 802b22a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b22e:	4422      	add	r2, r4
 802b230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b238:	3302      	adds	r3, #2
 802b23a:	e7c7      	b.n	802b1cc <_printf_common+0x58>
 802b23c:	2301      	movs	r3, #1
 802b23e:	4622      	mov	r2, r4
 802b240:	4649      	mov	r1, r9
 802b242:	4638      	mov	r0, r7
 802b244:	47c0      	blx	r8
 802b246:	3001      	adds	r0, #1
 802b248:	d0e6      	beq.n	802b218 <_printf_common+0xa4>
 802b24a:	3601      	adds	r6, #1
 802b24c:	e7d9      	b.n	802b202 <_printf_common+0x8e>
	...

0802b250 <_printf_i>:
 802b250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b254:	7e0f      	ldrb	r7, [r1, #24]
 802b256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b258:	2f78      	cmp	r7, #120	; 0x78
 802b25a:	4691      	mov	r9, r2
 802b25c:	4680      	mov	r8, r0
 802b25e:	460c      	mov	r4, r1
 802b260:	469a      	mov	sl, r3
 802b262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802b266:	d807      	bhi.n	802b278 <_printf_i+0x28>
 802b268:	2f62      	cmp	r7, #98	; 0x62
 802b26a:	d80a      	bhi.n	802b282 <_printf_i+0x32>
 802b26c:	2f00      	cmp	r7, #0
 802b26e:	f000 80d8 	beq.w	802b422 <_printf_i+0x1d2>
 802b272:	2f58      	cmp	r7, #88	; 0x58
 802b274:	f000 80a3 	beq.w	802b3be <_printf_i+0x16e>
 802b278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b27c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802b280:	e03a      	b.n	802b2f8 <_printf_i+0xa8>
 802b282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802b286:	2b15      	cmp	r3, #21
 802b288:	d8f6      	bhi.n	802b278 <_printf_i+0x28>
 802b28a:	a101      	add	r1, pc, #4	; (adr r1, 802b290 <_printf_i+0x40>)
 802b28c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b290:	0802b2e9 	.word	0x0802b2e9
 802b294:	0802b2fd 	.word	0x0802b2fd
 802b298:	0802b279 	.word	0x0802b279
 802b29c:	0802b279 	.word	0x0802b279
 802b2a0:	0802b279 	.word	0x0802b279
 802b2a4:	0802b279 	.word	0x0802b279
 802b2a8:	0802b2fd 	.word	0x0802b2fd
 802b2ac:	0802b279 	.word	0x0802b279
 802b2b0:	0802b279 	.word	0x0802b279
 802b2b4:	0802b279 	.word	0x0802b279
 802b2b8:	0802b279 	.word	0x0802b279
 802b2bc:	0802b409 	.word	0x0802b409
 802b2c0:	0802b32d 	.word	0x0802b32d
 802b2c4:	0802b3eb 	.word	0x0802b3eb
 802b2c8:	0802b279 	.word	0x0802b279
 802b2cc:	0802b279 	.word	0x0802b279
 802b2d0:	0802b42b 	.word	0x0802b42b
 802b2d4:	0802b279 	.word	0x0802b279
 802b2d8:	0802b32d 	.word	0x0802b32d
 802b2dc:	0802b279 	.word	0x0802b279
 802b2e0:	0802b279 	.word	0x0802b279
 802b2e4:	0802b3f3 	.word	0x0802b3f3
 802b2e8:	682b      	ldr	r3, [r5, #0]
 802b2ea:	1d1a      	adds	r2, r3, #4
 802b2ec:	681b      	ldr	r3, [r3, #0]
 802b2ee:	602a      	str	r2, [r5, #0]
 802b2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b2f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b2f8:	2301      	movs	r3, #1
 802b2fa:	e0a3      	b.n	802b444 <_printf_i+0x1f4>
 802b2fc:	6820      	ldr	r0, [r4, #0]
 802b2fe:	6829      	ldr	r1, [r5, #0]
 802b300:	0606      	lsls	r6, r0, #24
 802b302:	f101 0304 	add.w	r3, r1, #4
 802b306:	d50a      	bpl.n	802b31e <_printf_i+0xce>
 802b308:	680e      	ldr	r6, [r1, #0]
 802b30a:	602b      	str	r3, [r5, #0]
 802b30c:	2e00      	cmp	r6, #0
 802b30e:	da03      	bge.n	802b318 <_printf_i+0xc8>
 802b310:	232d      	movs	r3, #45	; 0x2d
 802b312:	4276      	negs	r6, r6
 802b314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b318:	485e      	ldr	r0, [pc, #376]	; (802b494 <_printf_i+0x244>)
 802b31a:	230a      	movs	r3, #10
 802b31c:	e019      	b.n	802b352 <_printf_i+0x102>
 802b31e:	680e      	ldr	r6, [r1, #0]
 802b320:	602b      	str	r3, [r5, #0]
 802b322:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b326:	bf18      	it	ne
 802b328:	b236      	sxthne	r6, r6
 802b32a:	e7ef      	b.n	802b30c <_printf_i+0xbc>
 802b32c:	682b      	ldr	r3, [r5, #0]
 802b32e:	6820      	ldr	r0, [r4, #0]
 802b330:	1d19      	adds	r1, r3, #4
 802b332:	6029      	str	r1, [r5, #0]
 802b334:	0601      	lsls	r1, r0, #24
 802b336:	d501      	bpl.n	802b33c <_printf_i+0xec>
 802b338:	681e      	ldr	r6, [r3, #0]
 802b33a:	e002      	b.n	802b342 <_printf_i+0xf2>
 802b33c:	0646      	lsls	r6, r0, #25
 802b33e:	d5fb      	bpl.n	802b338 <_printf_i+0xe8>
 802b340:	881e      	ldrh	r6, [r3, #0]
 802b342:	4854      	ldr	r0, [pc, #336]	; (802b494 <_printf_i+0x244>)
 802b344:	2f6f      	cmp	r7, #111	; 0x6f
 802b346:	bf0c      	ite	eq
 802b348:	2308      	moveq	r3, #8
 802b34a:	230a      	movne	r3, #10
 802b34c:	2100      	movs	r1, #0
 802b34e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b352:	6865      	ldr	r5, [r4, #4]
 802b354:	60a5      	str	r5, [r4, #8]
 802b356:	2d00      	cmp	r5, #0
 802b358:	bfa2      	ittt	ge
 802b35a:	6821      	ldrge	r1, [r4, #0]
 802b35c:	f021 0104 	bicge.w	r1, r1, #4
 802b360:	6021      	strge	r1, [r4, #0]
 802b362:	b90e      	cbnz	r6, 802b368 <_printf_i+0x118>
 802b364:	2d00      	cmp	r5, #0
 802b366:	d04d      	beq.n	802b404 <_printf_i+0x1b4>
 802b368:	4615      	mov	r5, r2
 802b36a:	fbb6 f1f3 	udiv	r1, r6, r3
 802b36e:	fb03 6711 	mls	r7, r3, r1, r6
 802b372:	5dc7      	ldrb	r7, [r0, r7]
 802b374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802b378:	4637      	mov	r7, r6
 802b37a:	42bb      	cmp	r3, r7
 802b37c:	460e      	mov	r6, r1
 802b37e:	d9f4      	bls.n	802b36a <_printf_i+0x11a>
 802b380:	2b08      	cmp	r3, #8
 802b382:	d10b      	bne.n	802b39c <_printf_i+0x14c>
 802b384:	6823      	ldr	r3, [r4, #0]
 802b386:	07de      	lsls	r6, r3, #31
 802b388:	d508      	bpl.n	802b39c <_printf_i+0x14c>
 802b38a:	6923      	ldr	r3, [r4, #16]
 802b38c:	6861      	ldr	r1, [r4, #4]
 802b38e:	4299      	cmp	r1, r3
 802b390:	bfde      	ittt	le
 802b392:	2330      	movle	r3, #48	; 0x30
 802b394:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b398:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b39c:	1b52      	subs	r2, r2, r5
 802b39e:	6122      	str	r2, [r4, #16]
 802b3a0:	f8cd a000 	str.w	sl, [sp]
 802b3a4:	464b      	mov	r3, r9
 802b3a6:	aa03      	add	r2, sp, #12
 802b3a8:	4621      	mov	r1, r4
 802b3aa:	4640      	mov	r0, r8
 802b3ac:	f7ff fee2 	bl	802b174 <_printf_common>
 802b3b0:	3001      	adds	r0, #1
 802b3b2:	d14c      	bne.n	802b44e <_printf_i+0x1fe>
 802b3b4:	f04f 30ff 	mov.w	r0, #4294967295
 802b3b8:	b004      	add	sp, #16
 802b3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b3be:	4835      	ldr	r0, [pc, #212]	; (802b494 <_printf_i+0x244>)
 802b3c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802b3c4:	6829      	ldr	r1, [r5, #0]
 802b3c6:	6823      	ldr	r3, [r4, #0]
 802b3c8:	f851 6b04 	ldr.w	r6, [r1], #4
 802b3cc:	6029      	str	r1, [r5, #0]
 802b3ce:	061d      	lsls	r5, r3, #24
 802b3d0:	d514      	bpl.n	802b3fc <_printf_i+0x1ac>
 802b3d2:	07df      	lsls	r7, r3, #31
 802b3d4:	bf44      	itt	mi
 802b3d6:	f043 0320 	orrmi.w	r3, r3, #32
 802b3da:	6023      	strmi	r3, [r4, #0]
 802b3dc:	b91e      	cbnz	r6, 802b3e6 <_printf_i+0x196>
 802b3de:	6823      	ldr	r3, [r4, #0]
 802b3e0:	f023 0320 	bic.w	r3, r3, #32
 802b3e4:	6023      	str	r3, [r4, #0]
 802b3e6:	2310      	movs	r3, #16
 802b3e8:	e7b0      	b.n	802b34c <_printf_i+0xfc>
 802b3ea:	6823      	ldr	r3, [r4, #0]
 802b3ec:	f043 0320 	orr.w	r3, r3, #32
 802b3f0:	6023      	str	r3, [r4, #0]
 802b3f2:	2378      	movs	r3, #120	; 0x78
 802b3f4:	4828      	ldr	r0, [pc, #160]	; (802b498 <_printf_i+0x248>)
 802b3f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802b3fa:	e7e3      	b.n	802b3c4 <_printf_i+0x174>
 802b3fc:	0659      	lsls	r1, r3, #25
 802b3fe:	bf48      	it	mi
 802b400:	b2b6      	uxthmi	r6, r6
 802b402:	e7e6      	b.n	802b3d2 <_printf_i+0x182>
 802b404:	4615      	mov	r5, r2
 802b406:	e7bb      	b.n	802b380 <_printf_i+0x130>
 802b408:	682b      	ldr	r3, [r5, #0]
 802b40a:	6826      	ldr	r6, [r4, #0]
 802b40c:	6961      	ldr	r1, [r4, #20]
 802b40e:	1d18      	adds	r0, r3, #4
 802b410:	6028      	str	r0, [r5, #0]
 802b412:	0635      	lsls	r5, r6, #24
 802b414:	681b      	ldr	r3, [r3, #0]
 802b416:	d501      	bpl.n	802b41c <_printf_i+0x1cc>
 802b418:	6019      	str	r1, [r3, #0]
 802b41a:	e002      	b.n	802b422 <_printf_i+0x1d2>
 802b41c:	0670      	lsls	r0, r6, #25
 802b41e:	d5fb      	bpl.n	802b418 <_printf_i+0x1c8>
 802b420:	8019      	strh	r1, [r3, #0]
 802b422:	2300      	movs	r3, #0
 802b424:	6123      	str	r3, [r4, #16]
 802b426:	4615      	mov	r5, r2
 802b428:	e7ba      	b.n	802b3a0 <_printf_i+0x150>
 802b42a:	682b      	ldr	r3, [r5, #0]
 802b42c:	1d1a      	adds	r2, r3, #4
 802b42e:	602a      	str	r2, [r5, #0]
 802b430:	681d      	ldr	r5, [r3, #0]
 802b432:	6862      	ldr	r2, [r4, #4]
 802b434:	2100      	movs	r1, #0
 802b436:	4628      	mov	r0, r5
 802b438:	f7d4 feea 	bl	8000210 <memchr>
 802b43c:	b108      	cbz	r0, 802b442 <_printf_i+0x1f2>
 802b43e:	1b40      	subs	r0, r0, r5
 802b440:	6060      	str	r0, [r4, #4]
 802b442:	6863      	ldr	r3, [r4, #4]
 802b444:	6123      	str	r3, [r4, #16]
 802b446:	2300      	movs	r3, #0
 802b448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b44c:	e7a8      	b.n	802b3a0 <_printf_i+0x150>
 802b44e:	6923      	ldr	r3, [r4, #16]
 802b450:	462a      	mov	r2, r5
 802b452:	4649      	mov	r1, r9
 802b454:	4640      	mov	r0, r8
 802b456:	47d0      	blx	sl
 802b458:	3001      	adds	r0, #1
 802b45a:	d0ab      	beq.n	802b3b4 <_printf_i+0x164>
 802b45c:	6823      	ldr	r3, [r4, #0]
 802b45e:	079b      	lsls	r3, r3, #30
 802b460:	d413      	bmi.n	802b48a <_printf_i+0x23a>
 802b462:	68e0      	ldr	r0, [r4, #12]
 802b464:	9b03      	ldr	r3, [sp, #12]
 802b466:	4298      	cmp	r0, r3
 802b468:	bfb8      	it	lt
 802b46a:	4618      	movlt	r0, r3
 802b46c:	e7a4      	b.n	802b3b8 <_printf_i+0x168>
 802b46e:	2301      	movs	r3, #1
 802b470:	4632      	mov	r2, r6
 802b472:	4649      	mov	r1, r9
 802b474:	4640      	mov	r0, r8
 802b476:	47d0      	blx	sl
 802b478:	3001      	adds	r0, #1
 802b47a:	d09b      	beq.n	802b3b4 <_printf_i+0x164>
 802b47c:	3501      	adds	r5, #1
 802b47e:	68e3      	ldr	r3, [r4, #12]
 802b480:	9903      	ldr	r1, [sp, #12]
 802b482:	1a5b      	subs	r3, r3, r1
 802b484:	42ab      	cmp	r3, r5
 802b486:	dcf2      	bgt.n	802b46e <_printf_i+0x21e>
 802b488:	e7eb      	b.n	802b462 <_printf_i+0x212>
 802b48a:	2500      	movs	r5, #0
 802b48c:	f104 0619 	add.w	r6, r4, #25
 802b490:	e7f5      	b.n	802b47e <_printf_i+0x22e>
 802b492:	bf00      	nop
 802b494:	08030b71 	.word	0x08030b71
 802b498:	08030b82 	.word	0x08030b82

0802b49c <cleanup_glue>:
 802b49c:	b538      	push	{r3, r4, r5, lr}
 802b49e:	460c      	mov	r4, r1
 802b4a0:	6809      	ldr	r1, [r1, #0]
 802b4a2:	4605      	mov	r5, r0
 802b4a4:	b109      	cbz	r1, 802b4aa <cleanup_glue+0xe>
 802b4a6:	f7ff fff9 	bl	802b49c <cleanup_glue>
 802b4aa:	4621      	mov	r1, r4
 802b4ac:	4628      	mov	r0, r5
 802b4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b4b2:	f7ff bc25 	b.w	802ad00 <_free_r>
	...

0802b4b8 <_reclaim_reent>:
 802b4b8:	4b2c      	ldr	r3, [pc, #176]	; (802b56c <_reclaim_reent+0xb4>)
 802b4ba:	681b      	ldr	r3, [r3, #0]
 802b4bc:	4283      	cmp	r3, r0
 802b4be:	b570      	push	{r4, r5, r6, lr}
 802b4c0:	4604      	mov	r4, r0
 802b4c2:	d051      	beq.n	802b568 <_reclaim_reent+0xb0>
 802b4c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802b4c6:	b143      	cbz	r3, 802b4da <_reclaim_reent+0x22>
 802b4c8:	68db      	ldr	r3, [r3, #12]
 802b4ca:	2b00      	cmp	r3, #0
 802b4cc:	d14a      	bne.n	802b564 <_reclaim_reent+0xac>
 802b4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b4d0:	6819      	ldr	r1, [r3, #0]
 802b4d2:	b111      	cbz	r1, 802b4da <_reclaim_reent+0x22>
 802b4d4:	4620      	mov	r0, r4
 802b4d6:	f7ff fc13 	bl	802ad00 <_free_r>
 802b4da:	6961      	ldr	r1, [r4, #20]
 802b4dc:	b111      	cbz	r1, 802b4e4 <_reclaim_reent+0x2c>
 802b4de:	4620      	mov	r0, r4
 802b4e0:	f7ff fc0e 	bl	802ad00 <_free_r>
 802b4e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802b4e6:	b111      	cbz	r1, 802b4ee <_reclaim_reent+0x36>
 802b4e8:	4620      	mov	r0, r4
 802b4ea:	f7ff fc09 	bl	802ad00 <_free_r>
 802b4ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802b4f0:	b111      	cbz	r1, 802b4f8 <_reclaim_reent+0x40>
 802b4f2:	4620      	mov	r0, r4
 802b4f4:	f7ff fc04 	bl	802ad00 <_free_r>
 802b4f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802b4fa:	b111      	cbz	r1, 802b502 <_reclaim_reent+0x4a>
 802b4fc:	4620      	mov	r0, r4
 802b4fe:	f7ff fbff 	bl	802ad00 <_free_r>
 802b502:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b504:	b111      	cbz	r1, 802b50c <_reclaim_reent+0x54>
 802b506:	4620      	mov	r0, r4
 802b508:	f7ff fbfa 	bl	802ad00 <_free_r>
 802b50c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802b50e:	b111      	cbz	r1, 802b516 <_reclaim_reent+0x5e>
 802b510:	4620      	mov	r0, r4
 802b512:	f7ff fbf5 	bl	802ad00 <_free_r>
 802b516:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802b518:	b111      	cbz	r1, 802b520 <_reclaim_reent+0x68>
 802b51a:	4620      	mov	r0, r4
 802b51c:	f7ff fbf0 	bl	802ad00 <_free_r>
 802b520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b522:	b111      	cbz	r1, 802b52a <_reclaim_reent+0x72>
 802b524:	4620      	mov	r0, r4
 802b526:	f7ff fbeb 	bl	802ad00 <_free_r>
 802b52a:	69a3      	ldr	r3, [r4, #24]
 802b52c:	b1e3      	cbz	r3, 802b568 <_reclaim_reent+0xb0>
 802b52e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802b530:	4620      	mov	r0, r4
 802b532:	4798      	blx	r3
 802b534:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802b536:	b1b9      	cbz	r1, 802b568 <_reclaim_reent+0xb0>
 802b538:	4620      	mov	r0, r4
 802b53a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802b53e:	f7ff bfad 	b.w	802b49c <cleanup_glue>
 802b542:	5949      	ldr	r1, [r1, r5]
 802b544:	b941      	cbnz	r1, 802b558 <_reclaim_reent+0xa0>
 802b546:	3504      	adds	r5, #4
 802b548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b54a:	2d80      	cmp	r5, #128	; 0x80
 802b54c:	68d9      	ldr	r1, [r3, #12]
 802b54e:	d1f8      	bne.n	802b542 <_reclaim_reent+0x8a>
 802b550:	4620      	mov	r0, r4
 802b552:	f7ff fbd5 	bl	802ad00 <_free_r>
 802b556:	e7ba      	b.n	802b4ce <_reclaim_reent+0x16>
 802b558:	680e      	ldr	r6, [r1, #0]
 802b55a:	4620      	mov	r0, r4
 802b55c:	f7ff fbd0 	bl	802ad00 <_free_r>
 802b560:	4631      	mov	r1, r6
 802b562:	e7ef      	b.n	802b544 <_reclaim_reent+0x8c>
 802b564:	2500      	movs	r5, #0
 802b566:	e7ef      	b.n	802b548 <_reclaim_reent+0x90>
 802b568:	bd70      	pop	{r4, r5, r6, pc}
 802b56a:	bf00      	nop
 802b56c:	200000bc 	.word	0x200000bc

0802b570 <_sbrk_r>:
 802b570:	b538      	push	{r3, r4, r5, lr}
 802b572:	4d06      	ldr	r5, [pc, #24]	; (802b58c <_sbrk_r+0x1c>)
 802b574:	2300      	movs	r3, #0
 802b576:	4604      	mov	r4, r0
 802b578:	4608      	mov	r0, r1
 802b57a:	602b      	str	r3, [r5, #0]
 802b57c:	f7d6 fab4 	bl	8001ae8 <_sbrk>
 802b580:	1c43      	adds	r3, r0, #1
 802b582:	d102      	bne.n	802b58a <_sbrk_r+0x1a>
 802b584:	682b      	ldr	r3, [r5, #0]
 802b586:	b103      	cbz	r3, 802b58a <_sbrk_r+0x1a>
 802b588:	6023      	str	r3, [r4, #0]
 802b58a:	bd38      	pop	{r3, r4, r5, pc}
 802b58c:	200161cc 	.word	0x200161cc

0802b590 <_raise_r>:
 802b590:	291f      	cmp	r1, #31
 802b592:	b538      	push	{r3, r4, r5, lr}
 802b594:	4604      	mov	r4, r0
 802b596:	460d      	mov	r5, r1
 802b598:	d904      	bls.n	802b5a4 <_raise_r+0x14>
 802b59a:	2316      	movs	r3, #22
 802b59c:	6003      	str	r3, [r0, #0]
 802b59e:	f04f 30ff 	mov.w	r0, #4294967295
 802b5a2:	bd38      	pop	{r3, r4, r5, pc}
 802b5a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b5a6:	b112      	cbz	r2, 802b5ae <_raise_r+0x1e>
 802b5a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b5ac:	b94b      	cbnz	r3, 802b5c2 <_raise_r+0x32>
 802b5ae:	4620      	mov	r0, r4
 802b5b0:	f000 f830 	bl	802b614 <_getpid_r>
 802b5b4:	462a      	mov	r2, r5
 802b5b6:	4601      	mov	r1, r0
 802b5b8:	4620      	mov	r0, r4
 802b5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b5be:	f000 b817 	b.w	802b5f0 <_kill_r>
 802b5c2:	2b01      	cmp	r3, #1
 802b5c4:	d00a      	beq.n	802b5dc <_raise_r+0x4c>
 802b5c6:	1c59      	adds	r1, r3, #1
 802b5c8:	d103      	bne.n	802b5d2 <_raise_r+0x42>
 802b5ca:	2316      	movs	r3, #22
 802b5cc:	6003      	str	r3, [r0, #0]
 802b5ce:	2001      	movs	r0, #1
 802b5d0:	e7e7      	b.n	802b5a2 <_raise_r+0x12>
 802b5d2:	2400      	movs	r4, #0
 802b5d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b5d8:	4628      	mov	r0, r5
 802b5da:	4798      	blx	r3
 802b5dc:	2000      	movs	r0, #0
 802b5de:	e7e0      	b.n	802b5a2 <_raise_r+0x12>

0802b5e0 <raise>:
 802b5e0:	4b02      	ldr	r3, [pc, #8]	; (802b5ec <raise+0xc>)
 802b5e2:	4601      	mov	r1, r0
 802b5e4:	6818      	ldr	r0, [r3, #0]
 802b5e6:	f7ff bfd3 	b.w	802b590 <_raise_r>
 802b5ea:	bf00      	nop
 802b5ec:	200000bc 	.word	0x200000bc

0802b5f0 <_kill_r>:
 802b5f0:	b538      	push	{r3, r4, r5, lr}
 802b5f2:	4d07      	ldr	r5, [pc, #28]	; (802b610 <_kill_r+0x20>)
 802b5f4:	2300      	movs	r3, #0
 802b5f6:	4604      	mov	r4, r0
 802b5f8:	4608      	mov	r0, r1
 802b5fa:	4611      	mov	r1, r2
 802b5fc:	602b      	str	r3, [r5, #0]
 802b5fe:	f7d6 fa3d 	bl	8001a7c <_kill>
 802b602:	1c43      	adds	r3, r0, #1
 802b604:	d102      	bne.n	802b60c <_kill_r+0x1c>
 802b606:	682b      	ldr	r3, [r5, #0]
 802b608:	b103      	cbz	r3, 802b60c <_kill_r+0x1c>
 802b60a:	6023      	str	r3, [r4, #0]
 802b60c:	bd38      	pop	{r3, r4, r5, pc}
 802b60e:	bf00      	nop
 802b610:	200161cc 	.word	0x200161cc

0802b614 <_getpid_r>:
 802b614:	f7d6 ba30 	b.w	8001a78 <_getpid>

0802b618 <siprintf>:
 802b618:	b40e      	push	{r1, r2, r3}
 802b61a:	b500      	push	{lr}
 802b61c:	b09c      	sub	sp, #112	; 0x70
 802b61e:	ab1d      	add	r3, sp, #116	; 0x74
 802b620:	9002      	str	r0, [sp, #8]
 802b622:	9006      	str	r0, [sp, #24]
 802b624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802b628:	4809      	ldr	r0, [pc, #36]	; (802b650 <siprintf+0x38>)
 802b62a:	9107      	str	r1, [sp, #28]
 802b62c:	9104      	str	r1, [sp, #16]
 802b62e:	4909      	ldr	r1, [pc, #36]	; (802b654 <siprintf+0x3c>)
 802b630:	f853 2b04 	ldr.w	r2, [r3], #4
 802b634:	9105      	str	r1, [sp, #20]
 802b636:	6800      	ldr	r0, [r0, #0]
 802b638:	9301      	str	r3, [sp, #4]
 802b63a:	a902      	add	r1, sp, #8
 802b63c:	f000 fb92 	bl	802bd64 <_svfiprintf_r>
 802b640:	9b02      	ldr	r3, [sp, #8]
 802b642:	2200      	movs	r2, #0
 802b644:	701a      	strb	r2, [r3, #0]
 802b646:	b01c      	add	sp, #112	; 0x70
 802b648:	f85d eb04 	ldr.w	lr, [sp], #4
 802b64c:	b003      	add	sp, #12
 802b64e:	4770      	bx	lr
 802b650:	200000bc 	.word	0x200000bc
 802b654:	ffff0208 	.word	0xffff0208

0802b658 <__sread>:
 802b658:	b510      	push	{r4, lr}
 802b65a:	460c      	mov	r4, r1
 802b65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b660:	f000 fc80 	bl	802bf64 <_read_r>
 802b664:	2800      	cmp	r0, #0
 802b666:	bfab      	itete	ge
 802b668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b66a:	89a3      	ldrhlt	r3, [r4, #12]
 802b66c:	181b      	addge	r3, r3, r0
 802b66e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b672:	bfac      	ite	ge
 802b674:	6563      	strge	r3, [r4, #84]	; 0x54
 802b676:	81a3      	strhlt	r3, [r4, #12]
 802b678:	bd10      	pop	{r4, pc}

0802b67a <__swrite>:
 802b67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b67e:	461f      	mov	r7, r3
 802b680:	898b      	ldrh	r3, [r1, #12]
 802b682:	05db      	lsls	r3, r3, #23
 802b684:	4605      	mov	r5, r0
 802b686:	460c      	mov	r4, r1
 802b688:	4616      	mov	r6, r2
 802b68a:	d505      	bpl.n	802b698 <__swrite+0x1e>
 802b68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b690:	2302      	movs	r3, #2
 802b692:	2200      	movs	r2, #0
 802b694:	f000 fa3e 	bl	802bb14 <_lseek_r>
 802b698:	89a3      	ldrh	r3, [r4, #12]
 802b69a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b69e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b6a2:	81a3      	strh	r3, [r4, #12]
 802b6a4:	4632      	mov	r2, r6
 802b6a6:	463b      	mov	r3, r7
 802b6a8:	4628      	mov	r0, r5
 802b6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b6ae:	f000 b87d 	b.w	802b7ac <_write_r>

0802b6b2 <__sseek>:
 802b6b2:	b510      	push	{r4, lr}
 802b6b4:	460c      	mov	r4, r1
 802b6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b6ba:	f000 fa2b 	bl	802bb14 <_lseek_r>
 802b6be:	1c43      	adds	r3, r0, #1
 802b6c0:	89a3      	ldrh	r3, [r4, #12]
 802b6c2:	bf15      	itete	ne
 802b6c4:	6560      	strne	r0, [r4, #84]	; 0x54
 802b6c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b6ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b6ce:	81a3      	strheq	r3, [r4, #12]
 802b6d0:	bf18      	it	ne
 802b6d2:	81a3      	strhne	r3, [r4, #12]
 802b6d4:	bd10      	pop	{r4, pc}

0802b6d6 <__sclose>:
 802b6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b6da:	f000 b949 	b.w	802b970 <_close_r>

0802b6de <strncmp>:
 802b6de:	b510      	push	{r4, lr}
 802b6e0:	b17a      	cbz	r2, 802b702 <strncmp+0x24>
 802b6e2:	4603      	mov	r3, r0
 802b6e4:	3901      	subs	r1, #1
 802b6e6:	1884      	adds	r4, r0, r2
 802b6e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 802b6ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802b6f0:	4290      	cmp	r0, r2
 802b6f2:	d101      	bne.n	802b6f8 <strncmp+0x1a>
 802b6f4:	42a3      	cmp	r3, r4
 802b6f6:	d101      	bne.n	802b6fc <strncmp+0x1e>
 802b6f8:	1a80      	subs	r0, r0, r2
 802b6fa:	bd10      	pop	{r4, pc}
 802b6fc:	2800      	cmp	r0, #0
 802b6fe:	d1f3      	bne.n	802b6e8 <strncmp+0xa>
 802b700:	e7fa      	b.n	802b6f8 <strncmp+0x1a>
 802b702:	4610      	mov	r0, r2
 802b704:	e7f9      	b.n	802b6fa <strncmp+0x1c>
	...

0802b708 <__swbuf_r>:
 802b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b70a:	460e      	mov	r6, r1
 802b70c:	4614      	mov	r4, r2
 802b70e:	4605      	mov	r5, r0
 802b710:	b118      	cbz	r0, 802b71a <__swbuf_r+0x12>
 802b712:	6983      	ldr	r3, [r0, #24]
 802b714:	b90b      	cbnz	r3, 802b71a <__swbuf_r+0x12>
 802b716:	f7ff f9f5 	bl	802ab04 <__sinit>
 802b71a:	4b21      	ldr	r3, [pc, #132]	; (802b7a0 <__swbuf_r+0x98>)
 802b71c:	429c      	cmp	r4, r3
 802b71e:	d12b      	bne.n	802b778 <__swbuf_r+0x70>
 802b720:	686c      	ldr	r4, [r5, #4]
 802b722:	69a3      	ldr	r3, [r4, #24]
 802b724:	60a3      	str	r3, [r4, #8]
 802b726:	89a3      	ldrh	r3, [r4, #12]
 802b728:	071a      	lsls	r2, r3, #28
 802b72a:	d52f      	bpl.n	802b78c <__swbuf_r+0x84>
 802b72c:	6923      	ldr	r3, [r4, #16]
 802b72e:	b36b      	cbz	r3, 802b78c <__swbuf_r+0x84>
 802b730:	6923      	ldr	r3, [r4, #16]
 802b732:	6820      	ldr	r0, [r4, #0]
 802b734:	1ac0      	subs	r0, r0, r3
 802b736:	6963      	ldr	r3, [r4, #20]
 802b738:	b2f6      	uxtb	r6, r6
 802b73a:	4283      	cmp	r3, r0
 802b73c:	4637      	mov	r7, r6
 802b73e:	dc04      	bgt.n	802b74a <__swbuf_r+0x42>
 802b740:	4621      	mov	r1, r4
 802b742:	4628      	mov	r0, r5
 802b744:	f000 f9aa 	bl	802ba9c <_fflush_r>
 802b748:	bb30      	cbnz	r0, 802b798 <__swbuf_r+0x90>
 802b74a:	68a3      	ldr	r3, [r4, #8]
 802b74c:	3b01      	subs	r3, #1
 802b74e:	60a3      	str	r3, [r4, #8]
 802b750:	6823      	ldr	r3, [r4, #0]
 802b752:	1c5a      	adds	r2, r3, #1
 802b754:	6022      	str	r2, [r4, #0]
 802b756:	701e      	strb	r6, [r3, #0]
 802b758:	6963      	ldr	r3, [r4, #20]
 802b75a:	3001      	adds	r0, #1
 802b75c:	4283      	cmp	r3, r0
 802b75e:	d004      	beq.n	802b76a <__swbuf_r+0x62>
 802b760:	89a3      	ldrh	r3, [r4, #12]
 802b762:	07db      	lsls	r3, r3, #31
 802b764:	d506      	bpl.n	802b774 <__swbuf_r+0x6c>
 802b766:	2e0a      	cmp	r6, #10
 802b768:	d104      	bne.n	802b774 <__swbuf_r+0x6c>
 802b76a:	4621      	mov	r1, r4
 802b76c:	4628      	mov	r0, r5
 802b76e:	f000 f995 	bl	802ba9c <_fflush_r>
 802b772:	b988      	cbnz	r0, 802b798 <__swbuf_r+0x90>
 802b774:	4638      	mov	r0, r7
 802b776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b778:	4b0a      	ldr	r3, [pc, #40]	; (802b7a4 <__swbuf_r+0x9c>)
 802b77a:	429c      	cmp	r4, r3
 802b77c:	d101      	bne.n	802b782 <__swbuf_r+0x7a>
 802b77e:	68ac      	ldr	r4, [r5, #8]
 802b780:	e7cf      	b.n	802b722 <__swbuf_r+0x1a>
 802b782:	4b09      	ldr	r3, [pc, #36]	; (802b7a8 <__swbuf_r+0xa0>)
 802b784:	429c      	cmp	r4, r3
 802b786:	bf08      	it	eq
 802b788:	68ec      	ldreq	r4, [r5, #12]
 802b78a:	e7ca      	b.n	802b722 <__swbuf_r+0x1a>
 802b78c:	4621      	mov	r1, r4
 802b78e:	4628      	mov	r0, r5
 802b790:	f000 f81e 	bl	802b7d0 <__swsetup_r>
 802b794:	2800      	cmp	r0, #0
 802b796:	d0cb      	beq.n	802b730 <__swbuf_r+0x28>
 802b798:	f04f 37ff 	mov.w	r7, #4294967295
 802b79c:	e7ea      	b.n	802b774 <__swbuf_r+0x6c>
 802b79e:	bf00      	nop
 802b7a0:	08030b1c 	.word	0x08030b1c
 802b7a4:	08030b3c 	.word	0x08030b3c
 802b7a8:	08030afc 	.word	0x08030afc

0802b7ac <_write_r>:
 802b7ac:	b538      	push	{r3, r4, r5, lr}
 802b7ae:	4d07      	ldr	r5, [pc, #28]	; (802b7cc <_write_r+0x20>)
 802b7b0:	4604      	mov	r4, r0
 802b7b2:	4608      	mov	r0, r1
 802b7b4:	4611      	mov	r1, r2
 802b7b6:	2200      	movs	r2, #0
 802b7b8:	602a      	str	r2, [r5, #0]
 802b7ba:	461a      	mov	r2, r3
 802b7bc:	f7d6 f97a 	bl	8001ab4 <_write>
 802b7c0:	1c43      	adds	r3, r0, #1
 802b7c2:	d102      	bne.n	802b7ca <_write_r+0x1e>
 802b7c4:	682b      	ldr	r3, [r5, #0]
 802b7c6:	b103      	cbz	r3, 802b7ca <_write_r+0x1e>
 802b7c8:	6023      	str	r3, [r4, #0]
 802b7ca:	bd38      	pop	{r3, r4, r5, pc}
 802b7cc:	200161cc 	.word	0x200161cc

0802b7d0 <__swsetup_r>:
 802b7d0:	4b32      	ldr	r3, [pc, #200]	; (802b89c <__swsetup_r+0xcc>)
 802b7d2:	b570      	push	{r4, r5, r6, lr}
 802b7d4:	681d      	ldr	r5, [r3, #0]
 802b7d6:	4606      	mov	r6, r0
 802b7d8:	460c      	mov	r4, r1
 802b7da:	b125      	cbz	r5, 802b7e6 <__swsetup_r+0x16>
 802b7dc:	69ab      	ldr	r3, [r5, #24]
 802b7de:	b913      	cbnz	r3, 802b7e6 <__swsetup_r+0x16>
 802b7e0:	4628      	mov	r0, r5
 802b7e2:	f7ff f98f 	bl	802ab04 <__sinit>
 802b7e6:	4b2e      	ldr	r3, [pc, #184]	; (802b8a0 <__swsetup_r+0xd0>)
 802b7e8:	429c      	cmp	r4, r3
 802b7ea:	d10f      	bne.n	802b80c <__swsetup_r+0x3c>
 802b7ec:	686c      	ldr	r4, [r5, #4]
 802b7ee:	89a3      	ldrh	r3, [r4, #12]
 802b7f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b7f4:	0719      	lsls	r1, r3, #28
 802b7f6:	d42c      	bmi.n	802b852 <__swsetup_r+0x82>
 802b7f8:	06dd      	lsls	r5, r3, #27
 802b7fa:	d411      	bmi.n	802b820 <__swsetup_r+0x50>
 802b7fc:	2309      	movs	r3, #9
 802b7fe:	6033      	str	r3, [r6, #0]
 802b800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b804:	81a3      	strh	r3, [r4, #12]
 802b806:	f04f 30ff 	mov.w	r0, #4294967295
 802b80a:	e03e      	b.n	802b88a <__swsetup_r+0xba>
 802b80c:	4b25      	ldr	r3, [pc, #148]	; (802b8a4 <__swsetup_r+0xd4>)
 802b80e:	429c      	cmp	r4, r3
 802b810:	d101      	bne.n	802b816 <__swsetup_r+0x46>
 802b812:	68ac      	ldr	r4, [r5, #8]
 802b814:	e7eb      	b.n	802b7ee <__swsetup_r+0x1e>
 802b816:	4b24      	ldr	r3, [pc, #144]	; (802b8a8 <__swsetup_r+0xd8>)
 802b818:	429c      	cmp	r4, r3
 802b81a:	bf08      	it	eq
 802b81c:	68ec      	ldreq	r4, [r5, #12]
 802b81e:	e7e6      	b.n	802b7ee <__swsetup_r+0x1e>
 802b820:	0758      	lsls	r0, r3, #29
 802b822:	d512      	bpl.n	802b84a <__swsetup_r+0x7a>
 802b824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b826:	b141      	cbz	r1, 802b83a <__swsetup_r+0x6a>
 802b828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b82c:	4299      	cmp	r1, r3
 802b82e:	d002      	beq.n	802b836 <__swsetup_r+0x66>
 802b830:	4630      	mov	r0, r6
 802b832:	f7ff fa65 	bl	802ad00 <_free_r>
 802b836:	2300      	movs	r3, #0
 802b838:	6363      	str	r3, [r4, #52]	; 0x34
 802b83a:	89a3      	ldrh	r3, [r4, #12]
 802b83c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b840:	81a3      	strh	r3, [r4, #12]
 802b842:	2300      	movs	r3, #0
 802b844:	6063      	str	r3, [r4, #4]
 802b846:	6923      	ldr	r3, [r4, #16]
 802b848:	6023      	str	r3, [r4, #0]
 802b84a:	89a3      	ldrh	r3, [r4, #12]
 802b84c:	f043 0308 	orr.w	r3, r3, #8
 802b850:	81a3      	strh	r3, [r4, #12]
 802b852:	6923      	ldr	r3, [r4, #16]
 802b854:	b94b      	cbnz	r3, 802b86a <__swsetup_r+0x9a>
 802b856:	89a3      	ldrh	r3, [r4, #12]
 802b858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b85c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b860:	d003      	beq.n	802b86a <__swsetup_r+0x9a>
 802b862:	4621      	mov	r1, r4
 802b864:	4630      	mov	r0, r6
 802b866:	f000 f98d 	bl	802bb84 <__smakebuf_r>
 802b86a:	89a0      	ldrh	r0, [r4, #12]
 802b86c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b870:	f010 0301 	ands.w	r3, r0, #1
 802b874:	d00a      	beq.n	802b88c <__swsetup_r+0xbc>
 802b876:	2300      	movs	r3, #0
 802b878:	60a3      	str	r3, [r4, #8]
 802b87a:	6963      	ldr	r3, [r4, #20]
 802b87c:	425b      	negs	r3, r3
 802b87e:	61a3      	str	r3, [r4, #24]
 802b880:	6923      	ldr	r3, [r4, #16]
 802b882:	b943      	cbnz	r3, 802b896 <__swsetup_r+0xc6>
 802b884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b888:	d1ba      	bne.n	802b800 <__swsetup_r+0x30>
 802b88a:	bd70      	pop	{r4, r5, r6, pc}
 802b88c:	0781      	lsls	r1, r0, #30
 802b88e:	bf58      	it	pl
 802b890:	6963      	ldrpl	r3, [r4, #20]
 802b892:	60a3      	str	r3, [r4, #8]
 802b894:	e7f4      	b.n	802b880 <__swsetup_r+0xb0>
 802b896:	2000      	movs	r0, #0
 802b898:	e7f7      	b.n	802b88a <__swsetup_r+0xba>
 802b89a:	bf00      	nop
 802b89c:	200000bc 	.word	0x200000bc
 802b8a0:	08030b1c 	.word	0x08030b1c
 802b8a4:	08030b3c 	.word	0x08030b3c
 802b8a8:	08030afc 	.word	0x08030afc

0802b8ac <__register_exitproc>:
 802b8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b8b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802b96c <__register_exitproc+0xc0>
 802b8b4:	4606      	mov	r6, r0
 802b8b6:	f8d8 0000 	ldr.w	r0, [r8]
 802b8ba:	461f      	mov	r7, r3
 802b8bc:	460d      	mov	r5, r1
 802b8be:	4691      	mov	r9, r2
 802b8c0:	f7ff f9f5 	bl	802acae <__retarget_lock_acquire_recursive>
 802b8c4:	4b25      	ldr	r3, [pc, #148]	; (802b95c <__register_exitproc+0xb0>)
 802b8c6:	681c      	ldr	r4, [r3, #0]
 802b8c8:	b934      	cbnz	r4, 802b8d8 <__register_exitproc+0x2c>
 802b8ca:	4c25      	ldr	r4, [pc, #148]	; (802b960 <__register_exitproc+0xb4>)
 802b8cc:	601c      	str	r4, [r3, #0]
 802b8ce:	4b25      	ldr	r3, [pc, #148]	; (802b964 <__register_exitproc+0xb8>)
 802b8d0:	b113      	cbz	r3, 802b8d8 <__register_exitproc+0x2c>
 802b8d2:	681b      	ldr	r3, [r3, #0]
 802b8d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b8d8:	6863      	ldr	r3, [r4, #4]
 802b8da:	2b1f      	cmp	r3, #31
 802b8dc:	dd07      	ble.n	802b8ee <__register_exitproc+0x42>
 802b8de:	f8d8 0000 	ldr.w	r0, [r8]
 802b8e2:	f7ff f9e6 	bl	802acb2 <__retarget_lock_release_recursive>
 802b8e6:	f04f 30ff 	mov.w	r0, #4294967295
 802b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b8ee:	b34e      	cbz	r6, 802b944 <__register_exitproc+0x98>
 802b8f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b8f4:	b988      	cbnz	r0, 802b91a <__register_exitproc+0x6e>
 802b8f6:	4b1c      	ldr	r3, [pc, #112]	; (802b968 <__register_exitproc+0xbc>)
 802b8f8:	b923      	cbnz	r3, 802b904 <__register_exitproc+0x58>
 802b8fa:	f8d8 0000 	ldr.w	r0, [r8]
 802b8fe:	f7ff f9d7 	bl	802acb0 <__retarget_lock_release>
 802b902:	e7f0      	b.n	802b8e6 <__register_exitproc+0x3a>
 802b904:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b908:	f7ff f9d4 	bl	802acb4 <malloc>
 802b90c:	2800      	cmp	r0, #0
 802b90e:	d0f4      	beq.n	802b8fa <__register_exitproc+0x4e>
 802b910:	2300      	movs	r3, #0
 802b912:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802b916:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b91a:	6863      	ldr	r3, [r4, #4]
 802b91c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b920:	2201      	movs	r2, #1
 802b922:	409a      	lsls	r2, r3
 802b924:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b928:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802b92c:	4313      	orrs	r3, r2
 802b92e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b932:	2e02      	cmp	r6, #2
 802b934:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802b938:	bf02      	ittt	eq
 802b93a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802b93e:	4313      	orreq	r3, r2
 802b940:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802b944:	6863      	ldr	r3, [r4, #4]
 802b946:	f8d8 0000 	ldr.w	r0, [r8]
 802b94a:	1c5a      	adds	r2, r3, #1
 802b94c:	3302      	adds	r3, #2
 802b94e:	6062      	str	r2, [r4, #4]
 802b950:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802b954:	f7ff f9ad 	bl	802acb2 <__retarget_lock_release_recursive>
 802b958:	2000      	movs	r0, #0
 802b95a:	e7c6      	b.n	802b8ea <__register_exitproc+0x3e>
 802b95c:	2001625c 	.word	0x2001625c
 802b960:	200161d0 	.word	0x200161d0
 802b964:	08030b94 	.word	0x08030b94
 802b968:	0802acb5 	.word	0x0802acb5
 802b96c:	20000120 	.word	0x20000120

0802b970 <_close_r>:
 802b970:	b538      	push	{r3, r4, r5, lr}
 802b972:	4d06      	ldr	r5, [pc, #24]	; (802b98c <_close_r+0x1c>)
 802b974:	2300      	movs	r3, #0
 802b976:	4604      	mov	r4, r0
 802b978:	4608      	mov	r0, r1
 802b97a:	602b      	str	r3, [r5, #0]
 802b97c:	f7d6 f8a8 	bl	8001ad0 <_close>
 802b980:	1c43      	adds	r3, r0, #1
 802b982:	d102      	bne.n	802b98a <_close_r+0x1a>
 802b984:	682b      	ldr	r3, [r5, #0]
 802b986:	b103      	cbz	r3, 802b98a <_close_r+0x1a>
 802b988:	6023      	str	r3, [r4, #0]
 802b98a:	bd38      	pop	{r3, r4, r5, pc}
 802b98c:	200161cc 	.word	0x200161cc

0802b990 <__sflush_r>:
 802b990:	898a      	ldrh	r2, [r1, #12]
 802b992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b996:	4605      	mov	r5, r0
 802b998:	0710      	lsls	r0, r2, #28
 802b99a:	460c      	mov	r4, r1
 802b99c:	d458      	bmi.n	802ba50 <__sflush_r+0xc0>
 802b99e:	684b      	ldr	r3, [r1, #4]
 802b9a0:	2b00      	cmp	r3, #0
 802b9a2:	dc05      	bgt.n	802b9b0 <__sflush_r+0x20>
 802b9a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b9a6:	2b00      	cmp	r3, #0
 802b9a8:	dc02      	bgt.n	802b9b0 <__sflush_r+0x20>
 802b9aa:	2000      	movs	r0, #0
 802b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b9b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b9b2:	2e00      	cmp	r6, #0
 802b9b4:	d0f9      	beq.n	802b9aa <__sflush_r+0x1a>
 802b9b6:	2300      	movs	r3, #0
 802b9b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b9bc:	682f      	ldr	r7, [r5, #0]
 802b9be:	602b      	str	r3, [r5, #0]
 802b9c0:	d032      	beq.n	802ba28 <__sflush_r+0x98>
 802b9c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b9c4:	89a3      	ldrh	r3, [r4, #12]
 802b9c6:	075a      	lsls	r2, r3, #29
 802b9c8:	d505      	bpl.n	802b9d6 <__sflush_r+0x46>
 802b9ca:	6863      	ldr	r3, [r4, #4]
 802b9cc:	1ac0      	subs	r0, r0, r3
 802b9ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b9d0:	b10b      	cbz	r3, 802b9d6 <__sflush_r+0x46>
 802b9d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b9d4:	1ac0      	subs	r0, r0, r3
 802b9d6:	2300      	movs	r3, #0
 802b9d8:	4602      	mov	r2, r0
 802b9da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b9dc:	6a21      	ldr	r1, [r4, #32]
 802b9de:	4628      	mov	r0, r5
 802b9e0:	47b0      	blx	r6
 802b9e2:	1c43      	adds	r3, r0, #1
 802b9e4:	89a3      	ldrh	r3, [r4, #12]
 802b9e6:	d106      	bne.n	802b9f6 <__sflush_r+0x66>
 802b9e8:	6829      	ldr	r1, [r5, #0]
 802b9ea:	291d      	cmp	r1, #29
 802b9ec:	d82c      	bhi.n	802ba48 <__sflush_r+0xb8>
 802b9ee:	4a2a      	ldr	r2, [pc, #168]	; (802ba98 <__sflush_r+0x108>)
 802b9f0:	40ca      	lsrs	r2, r1
 802b9f2:	07d6      	lsls	r6, r2, #31
 802b9f4:	d528      	bpl.n	802ba48 <__sflush_r+0xb8>
 802b9f6:	2200      	movs	r2, #0
 802b9f8:	6062      	str	r2, [r4, #4]
 802b9fa:	04d9      	lsls	r1, r3, #19
 802b9fc:	6922      	ldr	r2, [r4, #16]
 802b9fe:	6022      	str	r2, [r4, #0]
 802ba00:	d504      	bpl.n	802ba0c <__sflush_r+0x7c>
 802ba02:	1c42      	adds	r2, r0, #1
 802ba04:	d101      	bne.n	802ba0a <__sflush_r+0x7a>
 802ba06:	682b      	ldr	r3, [r5, #0]
 802ba08:	b903      	cbnz	r3, 802ba0c <__sflush_r+0x7c>
 802ba0a:	6560      	str	r0, [r4, #84]	; 0x54
 802ba0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ba0e:	602f      	str	r7, [r5, #0]
 802ba10:	2900      	cmp	r1, #0
 802ba12:	d0ca      	beq.n	802b9aa <__sflush_r+0x1a>
 802ba14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ba18:	4299      	cmp	r1, r3
 802ba1a:	d002      	beq.n	802ba22 <__sflush_r+0x92>
 802ba1c:	4628      	mov	r0, r5
 802ba1e:	f7ff f96f 	bl	802ad00 <_free_r>
 802ba22:	2000      	movs	r0, #0
 802ba24:	6360      	str	r0, [r4, #52]	; 0x34
 802ba26:	e7c1      	b.n	802b9ac <__sflush_r+0x1c>
 802ba28:	6a21      	ldr	r1, [r4, #32]
 802ba2a:	2301      	movs	r3, #1
 802ba2c:	4628      	mov	r0, r5
 802ba2e:	47b0      	blx	r6
 802ba30:	1c41      	adds	r1, r0, #1
 802ba32:	d1c7      	bne.n	802b9c4 <__sflush_r+0x34>
 802ba34:	682b      	ldr	r3, [r5, #0]
 802ba36:	2b00      	cmp	r3, #0
 802ba38:	d0c4      	beq.n	802b9c4 <__sflush_r+0x34>
 802ba3a:	2b1d      	cmp	r3, #29
 802ba3c:	d001      	beq.n	802ba42 <__sflush_r+0xb2>
 802ba3e:	2b16      	cmp	r3, #22
 802ba40:	d101      	bne.n	802ba46 <__sflush_r+0xb6>
 802ba42:	602f      	str	r7, [r5, #0]
 802ba44:	e7b1      	b.n	802b9aa <__sflush_r+0x1a>
 802ba46:	89a3      	ldrh	r3, [r4, #12]
 802ba48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ba4c:	81a3      	strh	r3, [r4, #12]
 802ba4e:	e7ad      	b.n	802b9ac <__sflush_r+0x1c>
 802ba50:	690f      	ldr	r7, [r1, #16]
 802ba52:	2f00      	cmp	r7, #0
 802ba54:	d0a9      	beq.n	802b9aa <__sflush_r+0x1a>
 802ba56:	0793      	lsls	r3, r2, #30
 802ba58:	680e      	ldr	r6, [r1, #0]
 802ba5a:	bf08      	it	eq
 802ba5c:	694b      	ldreq	r3, [r1, #20]
 802ba5e:	600f      	str	r7, [r1, #0]
 802ba60:	bf18      	it	ne
 802ba62:	2300      	movne	r3, #0
 802ba64:	eba6 0807 	sub.w	r8, r6, r7
 802ba68:	608b      	str	r3, [r1, #8]
 802ba6a:	f1b8 0f00 	cmp.w	r8, #0
 802ba6e:	dd9c      	ble.n	802b9aa <__sflush_r+0x1a>
 802ba70:	6a21      	ldr	r1, [r4, #32]
 802ba72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802ba74:	4643      	mov	r3, r8
 802ba76:	463a      	mov	r2, r7
 802ba78:	4628      	mov	r0, r5
 802ba7a:	47b0      	blx	r6
 802ba7c:	2800      	cmp	r0, #0
 802ba7e:	dc06      	bgt.n	802ba8e <__sflush_r+0xfe>
 802ba80:	89a3      	ldrh	r3, [r4, #12]
 802ba82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ba86:	81a3      	strh	r3, [r4, #12]
 802ba88:	f04f 30ff 	mov.w	r0, #4294967295
 802ba8c:	e78e      	b.n	802b9ac <__sflush_r+0x1c>
 802ba8e:	4407      	add	r7, r0
 802ba90:	eba8 0800 	sub.w	r8, r8, r0
 802ba94:	e7e9      	b.n	802ba6a <__sflush_r+0xda>
 802ba96:	bf00      	nop
 802ba98:	20400001 	.word	0x20400001

0802ba9c <_fflush_r>:
 802ba9c:	b538      	push	{r3, r4, r5, lr}
 802ba9e:	690b      	ldr	r3, [r1, #16]
 802baa0:	4605      	mov	r5, r0
 802baa2:	460c      	mov	r4, r1
 802baa4:	b913      	cbnz	r3, 802baac <_fflush_r+0x10>
 802baa6:	2500      	movs	r5, #0
 802baa8:	4628      	mov	r0, r5
 802baaa:	bd38      	pop	{r3, r4, r5, pc}
 802baac:	b118      	cbz	r0, 802bab6 <_fflush_r+0x1a>
 802baae:	6983      	ldr	r3, [r0, #24]
 802bab0:	b90b      	cbnz	r3, 802bab6 <_fflush_r+0x1a>
 802bab2:	f7ff f827 	bl	802ab04 <__sinit>
 802bab6:	4b14      	ldr	r3, [pc, #80]	; (802bb08 <_fflush_r+0x6c>)
 802bab8:	429c      	cmp	r4, r3
 802baba:	d11b      	bne.n	802baf4 <_fflush_r+0x58>
 802babc:	686c      	ldr	r4, [r5, #4]
 802babe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bac2:	2b00      	cmp	r3, #0
 802bac4:	d0ef      	beq.n	802baa6 <_fflush_r+0xa>
 802bac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802bac8:	07d0      	lsls	r0, r2, #31
 802baca:	d404      	bmi.n	802bad6 <_fflush_r+0x3a>
 802bacc:	0599      	lsls	r1, r3, #22
 802bace:	d402      	bmi.n	802bad6 <_fflush_r+0x3a>
 802bad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802bad2:	f7ff f8ec 	bl	802acae <__retarget_lock_acquire_recursive>
 802bad6:	4628      	mov	r0, r5
 802bad8:	4621      	mov	r1, r4
 802bada:	f7ff ff59 	bl	802b990 <__sflush_r>
 802bade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802bae0:	07da      	lsls	r2, r3, #31
 802bae2:	4605      	mov	r5, r0
 802bae4:	d4e0      	bmi.n	802baa8 <_fflush_r+0xc>
 802bae6:	89a3      	ldrh	r3, [r4, #12]
 802bae8:	059b      	lsls	r3, r3, #22
 802baea:	d4dd      	bmi.n	802baa8 <_fflush_r+0xc>
 802baec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802baee:	f7ff f8e0 	bl	802acb2 <__retarget_lock_release_recursive>
 802baf2:	e7d9      	b.n	802baa8 <_fflush_r+0xc>
 802baf4:	4b05      	ldr	r3, [pc, #20]	; (802bb0c <_fflush_r+0x70>)
 802baf6:	429c      	cmp	r4, r3
 802baf8:	d101      	bne.n	802bafe <_fflush_r+0x62>
 802bafa:	68ac      	ldr	r4, [r5, #8]
 802bafc:	e7df      	b.n	802babe <_fflush_r+0x22>
 802bafe:	4b04      	ldr	r3, [pc, #16]	; (802bb10 <_fflush_r+0x74>)
 802bb00:	429c      	cmp	r4, r3
 802bb02:	bf08      	it	eq
 802bb04:	68ec      	ldreq	r4, [r5, #12]
 802bb06:	e7da      	b.n	802babe <_fflush_r+0x22>
 802bb08:	08030b1c 	.word	0x08030b1c
 802bb0c:	08030b3c 	.word	0x08030b3c
 802bb10:	08030afc 	.word	0x08030afc

0802bb14 <_lseek_r>:
 802bb14:	b538      	push	{r3, r4, r5, lr}
 802bb16:	4d07      	ldr	r5, [pc, #28]	; (802bb34 <_lseek_r+0x20>)
 802bb18:	4604      	mov	r4, r0
 802bb1a:	4608      	mov	r0, r1
 802bb1c:	4611      	mov	r1, r2
 802bb1e:	2200      	movs	r2, #0
 802bb20:	602a      	str	r2, [r5, #0]
 802bb22:	461a      	mov	r2, r3
 802bb24:	f7d5 ffde 	bl	8001ae4 <_lseek>
 802bb28:	1c43      	adds	r3, r0, #1
 802bb2a:	d102      	bne.n	802bb32 <_lseek_r+0x1e>
 802bb2c:	682b      	ldr	r3, [r5, #0]
 802bb2e:	b103      	cbz	r3, 802bb32 <_lseek_r+0x1e>
 802bb30:	6023      	str	r3, [r4, #0]
 802bb32:	bd38      	pop	{r3, r4, r5, pc}
 802bb34:	200161cc 	.word	0x200161cc

0802bb38 <__swhatbuf_r>:
 802bb38:	b570      	push	{r4, r5, r6, lr}
 802bb3a:	460e      	mov	r6, r1
 802bb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bb40:	2900      	cmp	r1, #0
 802bb42:	b096      	sub	sp, #88	; 0x58
 802bb44:	4614      	mov	r4, r2
 802bb46:	461d      	mov	r5, r3
 802bb48:	da08      	bge.n	802bb5c <__swhatbuf_r+0x24>
 802bb4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802bb4e:	2200      	movs	r2, #0
 802bb50:	602a      	str	r2, [r5, #0]
 802bb52:	061a      	lsls	r2, r3, #24
 802bb54:	d410      	bmi.n	802bb78 <__swhatbuf_r+0x40>
 802bb56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bb5a:	e00e      	b.n	802bb7a <__swhatbuf_r+0x42>
 802bb5c:	466a      	mov	r2, sp
 802bb5e:	f000 fa13 	bl	802bf88 <_fstat_r>
 802bb62:	2800      	cmp	r0, #0
 802bb64:	dbf1      	blt.n	802bb4a <__swhatbuf_r+0x12>
 802bb66:	9a01      	ldr	r2, [sp, #4]
 802bb68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802bb6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802bb70:	425a      	negs	r2, r3
 802bb72:	415a      	adcs	r2, r3
 802bb74:	602a      	str	r2, [r5, #0]
 802bb76:	e7ee      	b.n	802bb56 <__swhatbuf_r+0x1e>
 802bb78:	2340      	movs	r3, #64	; 0x40
 802bb7a:	2000      	movs	r0, #0
 802bb7c:	6023      	str	r3, [r4, #0]
 802bb7e:	b016      	add	sp, #88	; 0x58
 802bb80:	bd70      	pop	{r4, r5, r6, pc}
	...

0802bb84 <__smakebuf_r>:
 802bb84:	898b      	ldrh	r3, [r1, #12]
 802bb86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802bb88:	079d      	lsls	r5, r3, #30
 802bb8a:	4606      	mov	r6, r0
 802bb8c:	460c      	mov	r4, r1
 802bb8e:	d507      	bpl.n	802bba0 <__smakebuf_r+0x1c>
 802bb90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802bb94:	6023      	str	r3, [r4, #0]
 802bb96:	6123      	str	r3, [r4, #16]
 802bb98:	2301      	movs	r3, #1
 802bb9a:	6163      	str	r3, [r4, #20]
 802bb9c:	b002      	add	sp, #8
 802bb9e:	bd70      	pop	{r4, r5, r6, pc}
 802bba0:	ab01      	add	r3, sp, #4
 802bba2:	466a      	mov	r2, sp
 802bba4:	f7ff ffc8 	bl	802bb38 <__swhatbuf_r>
 802bba8:	9900      	ldr	r1, [sp, #0]
 802bbaa:	4605      	mov	r5, r0
 802bbac:	4630      	mov	r0, r6
 802bbae:	f7ff f913 	bl	802add8 <_malloc_r>
 802bbb2:	b948      	cbnz	r0, 802bbc8 <__smakebuf_r+0x44>
 802bbb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bbb8:	059a      	lsls	r2, r3, #22
 802bbba:	d4ef      	bmi.n	802bb9c <__smakebuf_r+0x18>
 802bbbc:	f023 0303 	bic.w	r3, r3, #3
 802bbc0:	f043 0302 	orr.w	r3, r3, #2
 802bbc4:	81a3      	strh	r3, [r4, #12]
 802bbc6:	e7e3      	b.n	802bb90 <__smakebuf_r+0xc>
 802bbc8:	4b0d      	ldr	r3, [pc, #52]	; (802bc00 <__smakebuf_r+0x7c>)
 802bbca:	62b3      	str	r3, [r6, #40]	; 0x28
 802bbcc:	89a3      	ldrh	r3, [r4, #12]
 802bbce:	6020      	str	r0, [r4, #0]
 802bbd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bbd4:	81a3      	strh	r3, [r4, #12]
 802bbd6:	9b00      	ldr	r3, [sp, #0]
 802bbd8:	6163      	str	r3, [r4, #20]
 802bbda:	9b01      	ldr	r3, [sp, #4]
 802bbdc:	6120      	str	r0, [r4, #16]
 802bbde:	b15b      	cbz	r3, 802bbf8 <__smakebuf_r+0x74>
 802bbe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bbe4:	4630      	mov	r0, r6
 802bbe6:	f000 f9e1 	bl	802bfac <_isatty_r>
 802bbea:	b128      	cbz	r0, 802bbf8 <__smakebuf_r+0x74>
 802bbec:	89a3      	ldrh	r3, [r4, #12]
 802bbee:	f023 0303 	bic.w	r3, r3, #3
 802bbf2:	f043 0301 	orr.w	r3, r3, #1
 802bbf6:	81a3      	strh	r3, [r4, #12]
 802bbf8:	89a0      	ldrh	r0, [r4, #12]
 802bbfa:	4305      	orrs	r5, r0
 802bbfc:	81a5      	strh	r5, [r4, #12]
 802bbfe:	e7cd      	b.n	802bb9c <__smakebuf_r+0x18>
 802bc00:	0802aa9d 	.word	0x0802aa9d

0802bc04 <memmove>:
 802bc04:	4288      	cmp	r0, r1
 802bc06:	b510      	push	{r4, lr}
 802bc08:	eb01 0402 	add.w	r4, r1, r2
 802bc0c:	d902      	bls.n	802bc14 <memmove+0x10>
 802bc0e:	4284      	cmp	r4, r0
 802bc10:	4623      	mov	r3, r4
 802bc12:	d807      	bhi.n	802bc24 <memmove+0x20>
 802bc14:	1e43      	subs	r3, r0, #1
 802bc16:	42a1      	cmp	r1, r4
 802bc18:	d008      	beq.n	802bc2c <memmove+0x28>
 802bc1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802bc1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802bc22:	e7f8      	b.n	802bc16 <memmove+0x12>
 802bc24:	4402      	add	r2, r0
 802bc26:	4601      	mov	r1, r0
 802bc28:	428a      	cmp	r2, r1
 802bc2a:	d100      	bne.n	802bc2e <memmove+0x2a>
 802bc2c:	bd10      	pop	{r4, pc}
 802bc2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802bc32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802bc36:	e7f7      	b.n	802bc28 <memmove+0x24>

0802bc38 <__malloc_lock>:
 802bc38:	4801      	ldr	r0, [pc, #4]	; (802bc40 <__malloc_lock+0x8>)
 802bc3a:	f7ff b838 	b.w	802acae <__retarget_lock_acquire_recursive>
 802bc3e:	bf00      	nop
 802bc40:	200160b9 	.word	0x200160b9

0802bc44 <__malloc_unlock>:
 802bc44:	4801      	ldr	r0, [pc, #4]	; (802bc4c <__malloc_unlock+0x8>)
 802bc46:	f7ff b834 	b.w	802acb2 <__retarget_lock_release_recursive>
 802bc4a:	bf00      	nop
 802bc4c:	200160b9 	.word	0x200160b9

0802bc50 <_realloc_r>:
 802bc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bc54:	4680      	mov	r8, r0
 802bc56:	4614      	mov	r4, r2
 802bc58:	460e      	mov	r6, r1
 802bc5a:	b921      	cbnz	r1, 802bc66 <_realloc_r+0x16>
 802bc5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bc60:	4611      	mov	r1, r2
 802bc62:	f7ff b8b9 	b.w	802add8 <_malloc_r>
 802bc66:	b92a      	cbnz	r2, 802bc74 <_realloc_r+0x24>
 802bc68:	f7ff f84a 	bl	802ad00 <_free_r>
 802bc6c:	4625      	mov	r5, r4
 802bc6e:	4628      	mov	r0, r5
 802bc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bc74:	f000 f9aa 	bl	802bfcc <_malloc_usable_size_r>
 802bc78:	4284      	cmp	r4, r0
 802bc7a:	4607      	mov	r7, r0
 802bc7c:	d802      	bhi.n	802bc84 <_realloc_r+0x34>
 802bc7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802bc82:	d812      	bhi.n	802bcaa <_realloc_r+0x5a>
 802bc84:	4621      	mov	r1, r4
 802bc86:	4640      	mov	r0, r8
 802bc88:	f7ff f8a6 	bl	802add8 <_malloc_r>
 802bc8c:	4605      	mov	r5, r0
 802bc8e:	2800      	cmp	r0, #0
 802bc90:	d0ed      	beq.n	802bc6e <_realloc_r+0x1e>
 802bc92:	42bc      	cmp	r4, r7
 802bc94:	4622      	mov	r2, r4
 802bc96:	4631      	mov	r1, r6
 802bc98:	bf28      	it	cs
 802bc9a:	463a      	movcs	r2, r7
 802bc9c:	f7ff f81a 	bl	802acd4 <memcpy>
 802bca0:	4631      	mov	r1, r6
 802bca2:	4640      	mov	r0, r8
 802bca4:	f7ff f82c 	bl	802ad00 <_free_r>
 802bca8:	e7e1      	b.n	802bc6e <_realloc_r+0x1e>
 802bcaa:	4635      	mov	r5, r6
 802bcac:	e7df      	b.n	802bc6e <_realloc_r+0x1e>

0802bcae <__ssputs_r>:
 802bcae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bcb2:	688e      	ldr	r6, [r1, #8]
 802bcb4:	429e      	cmp	r6, r3
 802bcb6:	4682      	mov	sl, r0
 802bcb8:	460c      	mov	r4, r1
 802bcba:	4690      	mov	r8, r2
 802bcbc:	461f      	mov	r7, r3
 802bcbe:	d838      	bhi.n	802bd32 <__ssputs_r+0x84>
 802bcc0:	898a      	ldrh	r2, [r1, #12]
 802bcc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802bcc6:	d032      	beq.n	802bd2e <__ssputs_r+0x80>
 802bcc8:	6825      	ldr	r5, [r4, #0]
 802bcca:	6909      	ldr	r1, [r1, #16]
 802bccc:	eba5 0901 	sub.w	r9, r5, r1
 802bcd0:	6965      	ldr	r5, [r4, #20]
 802bcd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802bcd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802bcda:	3301      	adds	r3, #1
 802bcdc:	444b      	add	r3, r9
 802bcde:	106d      	asrs	r5, r5, #1
 802bce0:	429d      	cmp	r5, r3
 802bce2:	bf38      	it	cc
 802bce4:	461d      	movcc	r5, r3
 802bce6:	0553      	lsls	r3, r2, #21
 802bce8:	d531      	bpl.n	802bd4e <__ssputs_r+0xa0>
 802bcea:	4629      	mov	r1, r5
 802bcec:	f7ff f874 	bl	802add8 <_malloc_r>
 802bcf0:	4606      	mov	r6, r0
 802bcf2:	b950      	cbnz	r0, 802bd0a <__ssputs_r+0x5c>
 802bcf4:	230c      	movs	r3, #12
 802bcf6:	f8ca 3000 	str.w	r3, [sl]
 802bcfa:	89a3      	ldrh	r3, [r4, #12]
 802bcfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bd00:	81a3      	strh	r3, [r4, #12]
 802bd02:	f04f 30ff 	mov.w	r0, #4294967295
 802bd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bd0a:	6921      	ldr	r1, [r4, #16]
 802bd0c:	464a      	mov	r2, r9
 802bd0e:	f7fe ffe1 	bl	802acd4 <memcpy>
 802bd12:	89a3      	ldrh	r3, [r4, #12]
 802bd14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802bd18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bd1c:	81a3      	strh	r3, [r4, #12]
 802bd1e:	6126      	str	r6, [r4, #16]
 802bd20:	6165      	str	r5, [r4, #20]
 802bd22:	444e      	add	r6, r9
 802bd24:	eba5 0509 	sub.w	r5, r5, r9
 802bd28:	6026      	str	r6, [r4, #0]
 802bd2a:	60a5      	str	r5, [r4, #8]
 802bd2c:	463e      	mov	r6, r7
 802bd2e:	42be      	cmp	r6, r7
 802bd30:	d900      	bls.n	802bd34 <__ssputs_r+0x86>
 802bd32:	463e      	mov	r6, r7
 802bd34:	6820      	ldr	r0, [r4, #0]
 802bd36:	4632      	mov	r2, r6
 802bd38:	4641      	mov	r1, r8
 802bd3a:	f7ff ff63 	bl	802bc04 <memmove>
 802bd3e:	68a3      	ldr	r3, [r4, #8]
 802bd40:	1b9b      	subs	r3, r3, r6
 802bd42:	60a3      	str	r3, [r4, #8]
 802bd44:	6823      	ldr	r3, [r4, #0]
 802bd46:	4433      	add	r3, r6
 802bd48:	6023      	str	r3, [r4, #0]
 802bd4a:	2000      	movs	r0, #0
 802bd4c:	e7db      	b.n	802bd06 <__ssputs_r+0x58>
 802bd4e:	462a      	mov	r2, r5
 802bd50:	f7ff ff7e 	bl	802bc50 <_realloc_r>
 802bd54:	4606      	mov	r6, r0
 802bd56:	2800      	cmp	r0, #0
 802bd58:	d1e1      	bne.n	802bd1e <__ssputs_r+0x70>
 802bd5a:	6921      	ldr	r1, [r4, #16]
 802bd5c:	4650      	mov	r0, sl
 802bd5e:	f7fe ffcf 	bl	802ad00 <_free_r>
 802bd62:	e7c7      	b.n	802bcf4 <__ssputs_r+0x46>

0802bd64 <_svfiprintf_r>:
 802bd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bd68:	4698      	mov	r8, r3
 802bd6a:	898b      	ldrh	r3, [r1, #12]
 802bd6c:	061b      	lsls	r3, r3, #24
 802bd6e:	b09d      	sub	sp, #116	; 0x74
 802bd70:	4607      	mov	r7, r0
 802bd72:	460d      	mov	r5, r1
 802bd74:	4614      	mov	r4, r2
 802bd76:	d50e      	bpl.n	802bd96 <_svfiprintf_r+0x32>
 802bd78:	690b      	ldr	r3, [r1, #16]
 802bd7a:	b963      	cbnz	r3, 802bd96 <_svfiprintf_r+0x32>
 802bd7c:	2140      	movs	r1, #64	; 0x40
 802bd7e:	f7ff f82b 	bl	802add8 <_malloc_r>
 802bd82:	6028      	str	r0, [r5, #0]
 802bd84:	6128      	str	r0, [r5, #16]
 802bd86:	b920      	cbnz	r0, 802bd92 <_svfiprintf_r+0x2e>
 802bd88:	230c      	movs	r3, #12
 802bd8a:	603b      	str	r3, [r7, #0]
 802bd8c:	f04f 30ff 	mov.w	r0, #4294967295
 802bd90:	e0d1      	b.n	802bf36 <_svfiprintf_r+0x1d2>
 802bd92:	2340      	movs	r3, #64	; 0x40
 802bd94:	616b      	str	r3, [r5, #20]
 802bd96:	2300      	movs	r3, #0
 802bd98:	9309      	str	r3, [sp, #36]	; 0x24
 802bd9a:	2320      	movs	r3, #32
 802bd9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802bda0:	f8cd 800c 	str.w	r8, [sp, #12]
 802bda4:	2330      	movs	r3, #48	; 0x30
 802bda6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802bf50 <_svfiprintf_r+0x1ec>
 802bdaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802bdae:	f04f 0901 	mov.w	r9, #1
 802bdb2:	4623      	mov	r3, r4
 802bdb4:	469a      	mov	sl, r3
 802bdb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bdba:	b10a      	cbz	r2, 802bdc0 <_svfiprintf_r+0x5c>
 802bdbc:	2a25      	cmp	r2, #37	; 0x25
 802bdbe:	d1f9      	bne.n	802bdb4 <_svfiprintf_r+0x50>
 802bdc0:	ebba 0b04 	subs.w	fp, sl, r4
 802bdc4:	d00b      	beq.n	802bdde <_svfiprintf_r+0x7a>
 802bdc6:	465b      	mov	r3, fp
 802bdc8:	4622      	mov	r2, r4
 802bdca:	4629      	mov	r1, r5
 802bdcc:	4638      	mov	r0, r7
 802bdce:	f7ff ff6e 	bl	802bcae <__ssputs_r>
 802bdd2:	3001      	adds	r0, #1
 802bdd4:	f000 80aa 	beq.w	802bf2c <_svfiprintf_r+0x1c8>
 802bdd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802bdda:	445a      	add	r2, fp
 802bddc:	9209      	str	r2, [sp, #36]	; 0x24
 802bdde:	f89a 3000 	ldrb.w	r3, [sl]
 802bde2:	2b00      	cmp	r3, #0
 802bde4:	f000 80a2 	beq.w	802bf2c <_svfiprintf_r+0x1c8>
 802bde8:	2300      	movs	r3, #0
 802bdea:	f04f 32ff 	mov.w	r2, #4294967295
 802bdee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bdf2:	f10a 0a01 	add.w	sl, sl, #1
 802bdf6:	9304      	str	r3, [sp, #16]
 802bdf8:	9307      	str	r3, [sp, #28]
 802bdfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802bdfe:	931a      	str	r3, [sp, #104]	; 0x68
 802be00:	4654      	mov	r4, sl
 802be02:	2205      	movs	r2, #5
 802be04:	f814 1b01 	ldrb.w	r1, [r4], #1
 802be08:	4851      	ldr	r0, [pc, #324]	; (802bf50 <_svfiprintf_r+0x1ec>)
 802be0a:	f7d4 fa01 	bl	8000210 <memchr>
 802be0e:	9a04      	ldr	r2, [sp, #16]
 802be10:	b9d8      	cbnz	r0, 802be4a <_svfiprintf_r+0xe6>
 802be12:	06d0      	lsls	r0, r2, #27
 802be14:	bf44      	itt	mi
 802be16:	2320      	movmi	r3, #32
 802be18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802be1c:	0711      	lsls	r1, r2, #28
 802be1e:	bf44      	itt	mi
 802be20:	232b      	movmi	r3, #43	; 0x2b
 802be22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802be26:	f89a 3000 	ldrb.w	r3, [sl]
 802be2a:	2b2a      	cmp	r3, #42	; 0x2a
 802be2c:	d015      	beq.n	802be5a <_svfiprintf_r+0xf6>
 802be2e:	9a07      	ldr	r2, [sp, #28]
 802be30:	4654      	mov	r4, sl
 802be32:	2000      	movs	r0, #0
 802be34:	f04f 0c0a 	mov.w	ip, #10
 802be38:	4621      	mov	r1, r4
 802be3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802be3e:	3b30      	subs	r3, #48	; 0x30
 802be40:	2b09      	cmp	r3, #9
 802be42:	d94e      	bls.n	802bee2 <_svfiprintf_r+0x17e>
 802be44:	b1b0      	cbz	r0, 802be74 <_svfiprintf_r+0x110>
 802be46:	9207      	str	r2, [sp, #28]
 802be48:	e014      	b.n	802be74 <_svfiprintf_r+0x110>
 802be4a:	eba0 0308 	sub.w	r3, r0, r8
 802be4e:	fa09 f303 	lsl.w	r3, r9, r3
 802be52:	4313      	orrs	r3, r2
 802be54:	9304      	str	r3, [sp, #16]
 802be56:	46a2      	mov	sl, r4
 802be58:	e7d2      	b.n	802be00 <_svfiprintf_r+0x9c>
 802be5a:	9b03      	ldr	r3, [sp, #12]
 802be5c:	1d19      	adds	r1, r3, #4
 802be5e:	681b      	ldr	r3, [r3, #0]
 802be60:	9103      	str	r1, [sp, #12]
 802be62:	2b00      	cmp	r3, #0
 802be64:	bfbb      	ittet	lt
 802be66:	425b      	neglt	r3, r3
 802be68:	f042 0202 	orrlt.w	r2, r2, #2
 802be6c:	9307      	strge	r3, [sp, #28]
 802be6e:	9307      	strlt	r3, [sp, #28]
 802be70:	bfb8      	it	lt
 802be72:	9204      	strlt	r2, [sp, #16]
 802be74:	7823      	ldrb	r3, [r4, #0]
 802be76:	2b2e      	cmp	r3, #46	; 0x2e
 802be78:	d10c      	bne.n	802be94 <_svfiprintf_r+0x130>
 802be7a:	7863      	ldrb	r3, [r4, #1]
 802be7c:	2b2a      	cmp	r3, #42	; 0x2a
 802be7e:	d135      	bne.n	802beec <_svfiprintf_r+0x188>
 802be80:	9b03      	ldr	r3, [sp, #12]
 802be82:	1d1a      	adds	r2, r3, #4
 802be84:	681b      	ldr	r3, [r3, #0]
 802be86:	9203      	str	r2, [sp, #12]
 802be88:	2b00      	cmp	r3, #0
 802be8a:	bfb8      	it	lt
 802be8c:	f04f 33ff 	movlt.w	r3, #4294967295
 802be90:	3402      	adds	r4, #2
 802be92:	9305      	str	r3, [sp, #20]
 802be94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802bf60 <_svfiprintf_r+0x1fc>
 802be98:	7821      	ldrb	r1, [r4, #0]
 802be9a:	2203      	movs	r2, #3
 802be9c:	4650      	mov	r0, sl
 802be9e:	f7d4 f9b7 	bl	8000210 <memchr>
 802bea2:	b140      	cbz	r0, 802beb6 <_svfiprintf_r+0x152>
 802bea4:	2340      	movs	r3, #64	; 0x40
 802bea6:	eba0 000a 	sub.w	r0, r0, sl
 802beaa:	fa03 f000 	lsl.w	r0, r3, r0
 802beae:	9b04      	ldr	r3, [sp, #16]
 802beb0:	4303      	orrs	r3, r0
 802beb2:	3401      	adds	r4, #1
 802beb4:	9304      	str	r3, [sp, #16]
 802beb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802beba:	4826      	ldr	r0, [pc, #152]	; (802bf54 <_svfiprintf_r+0x1f0>)
 802bebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802bec0:	2206      	movs	r2, #6
 802bec2:	f7d4 f9a5 	bl	8000210 <memchr>
 802bec6:	2800      	cmp	r0, #0
 802bec8:	d038      	beq.n	802bf3c <_svfiprintf_r+0x1d8>
 802beca:	4b23      	ldr	r3, [pc, #140]	; (802bf58 <_svfiprintf_r+0x1f4>)
 802becc:	bb1b      	cbnz	r3, 802bf16 <_svfiprintf_r+0x1b2>
 802bece:	9b03      	ldr	r3, [sp, #12]
 802bed0:	3307      	adds	r3, #7
 802bed2:	f023 0307 	bic.w	r3, r3, #7
 802bed6:	3308      	adds	r3, #8
 802bed8:	9303      	str	r3, [sp, #12]
 802beda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bedc:	4433      	add	r3, r6
 802bede:	9309      	str	r3, [sp, #36]	; 0x24
 802bee0:	e767      	b.n	802bdb2 <_svfiprintf_r+0x4e>
 802bee2:	fb0c 3202 	mla	r2, ip, r2, r3
 802bee6:	460c      	mov	r4, r1
 802bee8:	2001      	movs	r0, #1
 802beea:	e7a5      	b.n	802be38 <_svfiprintf_r+0xd4>
 802beec:	2300      	movs	r3, #0
 802beee:	3401      	adds	r4, #1
 802bef0:	9305      	str	r3, [sp, #20]
 802bef2:	4619      	mov	r1, r3
 802bef4:	f04f 0c0a 	mov.w	ip, #10
 802bef8:	4620      	mov	r0, r4
 802befa:	f810 2b01 	ldrb.w	r2, [r0], #1
 802befe:	3a30      	subs	r2, #48	; 0x30
 802bf00:	2a09      	cmp	r2, #9
 802bf02:	d903      	bls.n	802bf0c <_svfiprintf_r+0x1a8>
 802bf04:	2b00      	cmp	r3, #0
 802bf06:	d0c5      	beq.n	802be94 <_svfiprintf_r+0x130>
 802bf08:	9105      	str	r1, [sp, #20]
 802bf0a:	e7c3      	b.n	802be94 <_svfiprintf_r+0x130>
 802bf0c:	fb0c 2101 	mla	r1, ip, r1, r2
 802bf10:	4604      	mov	r4, r0
 802bf12:	2301      	movs	r3, #1
 802bf14:	e7f0      	b.n	802bef8 <_svfiprintf_r+0x194>
 802bf16:	ab03      	add	r3, sp, #12
 802bf18:	9300      	str	r3, [sp, #0]
 802bf1a:	462a      	mov	r2, r5
 802bf1c:	4b0f      	ldr	r3, [pc, #60]	; (802bf5c <_svfiprintf_r+0x1f8>)
 802bf1e:	a904      	add	r1, sp, #16
 802bf20:	4638      	mov	r0, r7
 802bf22:	f3af 8000 	nop.w
 802bf26:	1c42      	adds	r2, r0, #1
 802bf28:	4606      	mov	r6, r0
 802bf2a:	d1d6      	bne.n	802beda <_svfiprintf_r+0x176>
 802bf2c:	89ab      	ldrh	r3, [r5, #12]
 802bf2e:	065b      	lsls	r3, r3, #25
 802bf30:	f53f af2c 	bmi.w	802bd8c <_svfiprintf_r+0x28>
 802bf34:	9809      	ldr	r0, [sp, #36]	; 0x24
 802bf36:	b01d      	add	sp, #116	; 0x74
 802bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bf3c:	ab03      	add	r3, sp, #12
 802bf3e:	9300      	str	r3, [sp, #0]
 802bf40:	462a      	mov	r2, r5
 802bf42:	4b06      	ldr	r3, [pc, #24]	; (802bf5c <_svfiprintf_r+0x1f8>)
 802bf44:	a904      	add	r1, sp, #16
 802bf46:	4638      	mov	r0, r7
 802bf48:	f7ff f982 	bl	802b250 <_printf_i>
 802bf4c:	e7eb      	b.n	802bf26 <_svfiprintf_r+0x1c2>
 802bf4e:	bf00      	nop
 802bf50:	08030b60 	.word	0x08030b60
 802bf54:	08030b6a 	.word	0x08030b6a
 802bf58:	00000000 	.word	0x00000000
 802bf5c:	0802bcaf 	.word	0x0802bcaf
 802bf60:	08030b66 	.word	0x08030b66

0802bf64 <_read_r>:
 802bf64:	b538      	push	{r3, r4, r5, lr}
 802bf66:	4d07      	ldr	r5, [pc, #28]	; (802bf84 <_read_r+0x20>)
 802bf68:	4604      	mov	r4, r0
 802bf6a:	4608      	mov	r0, r1
 802bf6c:	4611      	mov	r1, r2
 802bf6e:	2200      	movs	r2, #0
 802bf70:	602a      	str	r2, [r5, #0]
 802bf72:	461a      	mov	r2, r3
 802bf74:	f7d5 fd90 	bl	8001a98 <_read>
 802bf78:	1c43      	adds	r3, r0, #1
 802bf7a:	d102      	bne.n	802bf82 <_read_r+0x1e>
 802bf7c:	682b      	ldr	r3, [r5, #0]
 802bf7e:	b103      	cbz	r3, 802bf82 <_read_r+0x1e>
 802bf80:	6023      	str	r3, [r4, #0]
 802bf82:	bd38      	pop	{r3, r4, r5, pc}
 802bf84:	200161cc 	.word	0x200161cc

0802bf88 <_fstat_r>:
 802bf88:	b538      	push	{r3, r4, r5, lr}
 802bf8a:	4d07      	ldr	r5, [pc, #28]	; (802bfa8 <_fstat_r+0x20>)
 802bf8c:	2300      	movs	r3, #0
 802bf8e:	4604      	mov	r4, r0
 802bf90:	4608      	mov	r0, r1
 802bf92:	4611      	mov	r1, r2
 802bf94:	602b      	str	r3, [r5, #0]
 802bf96:	f7d5 fd9e 	bl	8001ad6 <_fstat>
 802bf9a:	1c43      	adds	r3, r0, #1
 802bf9c:	d102      	bne.n	802bfa4 <_fstat_r+0x1c>
 802bf9e:	682b      	ldr	r3, [r5, #0]
 802bfa0:	b103      	cbz	r3, 802bfa4 <_fstat_r+0x1c>
 802bfa2:	6023      	str	r3, [r4, #0]
 802bfa4:	bd38      	pop	{r3, r4, r5, pc}
 802bfa6:	bf00      	nop
 802bfa8:	200161cc 	.word	0x200161cc

0802bfac <_isatty_r>:
 802bfac:	b538      	push	{r3, r4, r5, lr}
 802bfae:	4d06      	ldr	r5, [pc, #24]	; (802bfc8 <_isatty_r+0x1c>)
 802bfb0:	2300      	movs	r3, #0
 802bfb2:	4604      	mov	r4, r0
 802bfb4:	4608      	mov	r0, r1
 802bfb6:	602b      	str	r3, [r5, #0]
 802bfb8:	f7d5 fd92 	bl	8001ae0 <_isatty>
 802bfbc:	1c43      	adds	r3, r0, #1
 802bfbe:	d102      	bne.n	802bfc6 <_isatty_r+0x1a>
 802bfc0:	682b      	ldr	r3, [r5, #0]
 802bfc2:	b103      	cbz	r3, 802bfc6 <_isatty_r+0x1a>
 802bfc4:	6023      	str	r3, [r4, #0]
 802bfc6:	bd38      	pop	{r3, r4, r5, pc}
 802bfc8:	200161cc 	.word	0x200161cc

0802bfcc <_malloc_usable_size_r>:
 802bfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bfd0:	1f18      	subs	r0, r3, #4
 802bfd2:	2b00      	cmp	r3, #0
 802bfd4:	bfbc      	itt	lt
 802bfd6:	580b      	ldrlt	r3, [r1, r0]
 802bfd8:	18c0      	addlt	r0, r0, r3
 802bfda:	4770      	bx	lr

0802bfdc <_init>:
 802bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bfde:	bf00      	nop
 802bfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bfe2:	bc08      	pop	{r3}
 802bfe4:	469e      	mov	lr, r3
 802bfe6:	4770      	bx	lr

0802bfe8 <_fini>:
 802bfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bfea:	bf00      	nop
 802bfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bfee:	bc08      	pop	{r3}
 802bff0:	469e      	mov	lr, r3
 802bff2:	4770      	bx	lr
